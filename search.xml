<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos7安装独立显卡驱动</title>
    <url>/2018/08/16/Centos7%E5%AE%89%E8%A3%85%E7%8B%AC%E7%AB%8B%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-Centos7-安装独立显卡驱动"><a href="#1-Centos7-安装独立显卡驱动" class="headerlink" title="1 Centos7 安装独立显卡驱动"></a>1 Centos7 安装独立显卡驱动</h1><h2 id="1-1-参考："><a href="#1-1-参考：" class="headerlink" title="1.1 参考："></a>1.1 参考：</h2><p><a href="https://blog.csdn.net/u013378306/article/details/69229919" target="_blank" rel="noopener">https://blog.csdn.net/u013378306/article/details/69229919</a></p>
<h2 id="1-2-安装基础依赖环境"><a href="#1-2-安装基础依赖环境" class="headerlink" title="1.2 安装基础依赖环境"></a>1.2 安装基础依赖环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Yum install gcc kernel-delve -y</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意事项，保证内核版本和源码版本一样，否则，安装报错误6：</p>
</blockquote>
<p> 查看内核版本：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls /boot | grep vmlinu</span><br></pre></td></tr></table></figure></p>
<p>查看源码包版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -aq | grep kernel-devel</span><br></pre></td></tr></table></figure>
<p>从上面的输出中可以看出内核版本号和内核源码版本。为了解决这个错误，需要从FC官方网站上下载与内核版本对应的源码包进行安装。<br>可以在以下网站下载并安装：<br><a href="http://rpmfind.net/linux/rpm2html/search.php?query=kernel-devel" target="_blank" rel="noopener">http://rpmfind.net/linux/rpm2html/search.php?query=kernel-devel</a></p>
<h2 id="1-3-源码安装"><a href="#1-3-源码安装" class="headerlink" title="1.3 源码安装"></a>1.3 源码安装</h2><h3 id="1-3-1-在英伟达官网下载相应驱动"><a href="#1-3-1-在英伟达官网下载相应驱动" class="headerlink" title="1.3.1 在英伟达官网下载相应驱动"></a>1.3.1 在英伟达官网下载相应驱动</h3><p>搜索出相应的驱动后，不要直接点，而是右健，Save Link as…</p>
<p>否则，会出现下载半天没动静的情况。</p>
<p>存放的路径上最好不要有中文。</p>
<p>我存放的路径是 ~/Downloads/NVIDIA-Linux-x86_64-346.47.run</p>
<h3 id="1-3-2-屏蔽默认带有的nouveau"><a href="#1-3-2-屏蔽默认带有的nouveau" class="headerlink" title="1.3.2 屏蔽默认带有的nouveau"></a>1.3.2 屏蔽默认带有的nouveau</h3><p>使用su命令切换到root用户下: su root</p>
<p>打开/lib/modprobe.d/dist-blacklist.conf</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将nvidiafb注释掉。</span></span><br><span class="line"><span class="comment"># blacklist nvidiafb </span></span><br><span class="line">然后添加以下语句：</span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau <span class="attribute">modeset</span>=0</span><br></pre></td></tr></table></figure>
<h3 id="1-3-3-重建initramfs-image步骤"><a href="#1-3-3-重建initramfs-image步骤" class="headerlink" title="1.3.3 重建initramfs image步骤"></a>1.3.3 重建initramfs image步骤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.bak</span><br><span class="line">$ dracut /boot/initramfs-$(uname -r).img $(uname -r)</span><br></pre></td></tr></table></figure>
<h3 id="1-3-4-修改运行级别为文本模式"><a href="#1-3-4-修改运行级别为文本模式" class="headerlink" title="1.3.4 修改运行级别为文本模式"></a>1.3.4 修改运行级别为文本模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">set</span>-default multi-user.target</span><br></pre></td></tr></table></figure>
<h3 id="1-3-5-重新启动-使用root用户登陆"><a href="#1-3-5-重新启动-使用root用户登陆" class="headerlink" title="1.3.5 重新启动, 使用root用户登陆"></a>1.3.5 重新启动, 使用root用户登陆</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure>
<h3 id="1-3-6-查看nouveau是否已经禁用"><a href="#1-3-6-查看nouveau是否已经禁用" class="headerlink" title="1.3.6 查看nouveau是否已经禁用"></a>1.3.6 查看nouveau是否已经禁用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls mod | grep nouveau</span><br></pre></td></tr></table></figure>
<p>如果没有显示相关的内容，说明已禁用。</p>
<h3 id="1-3-7-进入下载的驱动所在目录"><a href="#1-3-7-进入下载的驱动所在目录" class="headerlink" title="1.3.7 进入下载的驱动所在目录"></a>1.3.7 进入下载的驱动所在目录</h3><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">$ <span class="string">chmod </span>+x <span class="string">NVIDIA-Linux-</span><span class="string">x86_64-346.</span><span class="string">47.</span><span class="string">run</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$</span> ./<span class="string">NVIDIA-Linux-</span><span class="string">x86_64-346.</span><span class="string">47.</span><span class="string">run</span></span><br></pre></td></tr></table></figure>
<p>安装过程中，选择accept</p>
<p>如果提示要修改xorg.conf，选择yes</p>
<h3 id="1-3-8-修改运行级别回图形模式"><a href="#1-3-8-修改运行级别回图形模式" class="headerlink" title="1.3.8 修改运行级别回图形模式"></a>1.3.8 修改运行级别回图形模式</h3><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">systemctl </span><span class="built_in">set-default</span> <span class="string">graphical.</span><span class="string">target</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-9-重新启动，OK"><a href="#1-3-9-重新启动，OK" class="headerlink" title="1.3.9 重新启动，OK"></a>1.3.9 重新启动，OK</h3><p>在Applications–Other可以看见NVIDIA X Server Settings菜单。 </p>
<h2 id="1-4-问题："><a href="#1-4-问题：" class="headerlink" title="1.4 问题："></a>1.4 问题：</h2><p><strong>错误1：</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">ERROR: The Nouveau kernel driver <span class="keyword">is</span> currently <span class="keyword">in</span> use <span class="keyword">by</span> your system.  This driver <span class="keyword">is</span> incompatible <span class="keyword">with</span> <span class="keyword">the</span> NVIDIA driver, <span class="keyword">and</span> must be disabled <span class="keyword">before</span> proceeding.  Please consult <span class="keyword">the</span> NVIDIA driver README <span class="keyword">and</span> your Linux distribution's documentation <span class="keyword">for</span> details <span class="keyword">on</span> how         <span class="keyword">to</span> correctly disable <span class="keyword">the</span> Nouveau kernel driver.</span><br></pre></td></tr></table></figure>
<p>解释：如果没有执行屏蔽nouveau操作，报以上错误。</p>
<p><strong>错误2：</strong></p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">unable <span class="keyword">to</span> find the development too <span class="symbol">'cc</span>' <span class="keyword">in</span> you path; please make sure that you have the <span class="keyword">package</span> <span class="symbol">'gcc</span></span><br></pre></td></tr></table></figure>
<p>解决办法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$ yum install gcc</span><br></pre></td></tr></table></figure>
<p><strong>错误3：</strong></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ERROR</span>: Unable <span class="keyword">to</span> find the kernel source tree <span class="keyword">for</span> the currently running kernel.  Please make sure you have installed the kernel source files <span class="keyword">for</span> your</span><br><span class="line"></span><br><span class="line"> kernel <span class="keyword">and</span> that they are properly configured; <span class="keyword">on</span> Red Hat Linux systems, <span class="keyword">for</span> example, be sure you have the  <span class="comment">'kernel-source' or 'kernel-devel' RPM installed.  If you know the correct kernel source files are installed, you may specify the kernel source path with the '--kernel-source-path' command line option.</span></span><br></pre></td></tr></table></figure>
<p>解决办法：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$ yum install kernel-delve</span><br></pre></td></tr></table></figure></p>
<p><strong>错误5：</strong></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ERROR</span>: Unable <span class="keyword">to</span> find the kernel source tree <span class="keyword">for</span> the currently running kernel.  Please make sure you have installed the kernel source files <span class="keyword">for</span> your kernel <span class="keyword">and</span> that they are properly configured; <span class="keyword">on</span> Red Hat Linux systems, <span class="keyword">for</span> example, be sure you have the         <span class="comment">'kernel-source' or 'kernel-devel' RPM installed.  If you know the correct kernel source files are installed, you may specify the kernel source path with the '--kernel-source-path' command line option.</span></span><br></pre></td></tr></table></figure>
<p> 解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./NVIDIA-Linux-x86_64-390.67.run --kernel-source-path=/usr/src/kernels/3.10.0-862.3.2.el7.x86_64/</span><br></pre></td></tr></table></figure>
<p><strong>错误6：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">ERROR: Unable <span class="built_in">to</span> <span class="built_in">load</span> <span class="keyword">the</span> kernel module <span class="string">'nvidia.ko'</span>.  This happens most frequently when this kernel module was built against <span class="keyword">the</span> wrong <span class="keyword">or</span> improperly configured kernel sources, <span class="keyword">with</span> <span class="keyword">a</span> <span class="built_in">version</span> <span class="keyword">of</span> gcc that differs <span class="built_in">from</span> <span class="keyword">the</span> <span class="literal">one</span> used <span class="built_in">to</span> build <span class="keyword">the</span> target kernel, <span class="keyword">or</span> <span class="keyword">if</span> another driver, such <span class="keyword">as</span> nouveau, is present <span class="keyword">and</span> prevents <span class="keyword">the</span> NVIDIA kernel module <span class="built_in">from</span> obtaining ownership <span class="keyword">of</span> <span class="keyword">the</span> NVIDIA GPU(s), <span class="keyword">or</span> no NVIDIA GPU installed <span class="keyword">in</span> this <span class="keyword">system</span> is supported <span class="keyword">by</span> this NVIDIA Linux graphics driver release.</span><br></pre></td></tr></table></figure>
<pre><code>Please see the log entries &apos;Kernel module load error&apos; and &apos;Kernel messages&apos; at the end of the file &apos;/var/log/nvidia-installer.log&apos; for more information.
</code></pre><p>解决办法：</p>
<p>可以通过以下方式查看内核版本和源码包版本：<br>ls /boot | grep vmlinuz<br>如果上面的命令输出中有多个内核，则按grub.conf中指定的文件为准。<br>rpm -aq | grep kernel-devel<br>kernel-devel-2.6.35.13-92.fc14.i686<br>从上面的输出中可以看出内核版本号和内核源码版本。为了解决这个错误，需要从FC官方网站上下载与内核版本对应的源码包进行安装。<br>         可以在以下网站下载并安装：<br>        <a href="http://rpmfind.net/linux/rpm2html/search.php?query=kernel-devel" target="_blank" rel="noopener">http://rpmfind.net/linux/rpm2html/search.php?query=kernel-devel</a></p>
<blockquote>
<p>备注：执行更新内核操作好需要重新执行屏蔽nouveau，及重建initramfs image步骤。</p>
</blockquote>
<p><strong>警告：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WARNING: nvidia-installer was forced <span class="built_in">to</span> guess <span class="keyword">the</span> X library path <span class="string">'/usr/lib64'</span> <span class="keyword">and</span> X module path <span class="string">'/usr/lib64/xorg/modules'</span>; these paths were <span class="keyword">not</span> queryable <span class="built_in">from</span> <span class="keyword">the</span> <span class="keyword">system</span>.  If X fails <span class="built_in">to</span> find <span class="keyword">the</span> NVIDIA X driver module, please install <span class="keyword">the</span> `pkg-config` utility <span class="keyword">and</span> <span class="keyword">the</span></span><br><span class="line"></span><br><span class="line">           X.Org SDK/development package <span class="keyword">for</span> your distribution <span class="keyword">and</span> reinstall <span class="keyword">the</span> driver.</span><br></pre></td></tr></table></figure>
<p>字符模式安装警告信息，可忽略。</p>
<h1 id="2-安装cuda"><a href="#2-安装cuda" class="headerlink" title="2 安装cuda"></a>2 安装cuda</h1><p>参考：<a href="https://blog.csdn.net/claroja/article/details/81034147" target="_blank" rel="noopener">https://blog.csdn.net/claroja/article/details/81034147</a></p>
<p><strong>错误：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Installing the CUDA Toolkit <span class="keyword">in</span> /usr/<span class="built_in">local</span>/cuda-6.5 ...</span><br><span class="line">Missing recommended library: libGLU.so</span><br><span class="line">Missing recommended library: libXmu.so</span><br></pre></td></tr></table></figure>
<p>解决：安装第三方软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install freeglut-devel libX11-devel libXi-devel libXmu-devel  \</span><br><span class="line"></span><br><span class="line">$ make mesa-libGLU-devel</span><br></pre></td></tr></table></figure>
<h2 id="2-1-测试CUDA"><a href="#2-1-测试CUDA" class="headerlink" title="2.1 测试CUDA"></a>2.1 测试CUDA</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@fengyun6 ~]<span class="comment"># find / -name deviceQuery</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/root/</span>NVIDIA_CUDA-<span class="number">9.0</span>_Samples<span class="regexp">/1_Utilities/</span>deviceQuery</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/cuda-9.0/</span>extras<span class="regexp">/demo_suite/</span>deviceQuery</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/cuda-9.0/</span>samples<span class="regexp">/1_Utilities/</span>deviceQuery</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若出现以下信息，则表示安装成功</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@fengyun6</span> <span class="string">~]#</span> <span class="string">/usr/local/cuda-9.0/extras/demo_suite/deviceQuery</span></span><br><span class="line"></span><br><span class="line"><span class="string">/usr/local/cuda-9.0/extras/demo_suite/deviceQuery</span> <span class="string">Starting...</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="string">CUDA</span> <span class="string">Device</span> <span class="string">Query</span> <span class="string">(Runtime</span> <span class="string">API)</span> <span class="string">version</span> <span class="string">(CUDART</span> <span class="string">static</span> <span class="string">linking)</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="string">Detected</span> <span class="number">1</span> <span class="string">CUDA</span> <span class="string">Capable</span> <span class="string">device(s)</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="string">Device</span> <span class="number">0</span><span class="string">:</span> <span class="string">"GeForce GTX 1080 Ti"</span></span><br><span class="line"></span><br><span class="line">  <span class="string">CUDA</span> <span class="string">Driver</span> <span class="string">Version</span> <span class="string">/</span> <span class="string">Runtime</span> <span class="string">Version</span>          <span class="number">9.1</span> <span class="string">/</span> <span class="number">9.0</span></span><br><span class="line"></span><br><span class="line">  <span class="string">CUDA</span> <span class="string">Capability</span> <span class="string">Major/Minor</span> <span class="string">version</span> <span class="attr">number:</span>    <span class="number">6.1</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Total</span> <span class="string">amount</span> <span class="string">of</span> <span class="string">global</span> <span class="attr">memory:</span>                 <span class="number">11178</span> <span class="string">MBytes</span> <span class="string">(11721113600</span> <span class="string">bytes)</span></span><br><span class="line"></span><br><span class="line">  <span class="string">(28)</span> <span class="string">Multiprocessors,</span> <span class="string">(128)</span> <span class="string">CUDA</span> <span class="string">Cores/MP:</span>     <span class="number">3584</span> <span class="string">CUDA</span> <span class="string">Cores</span></span><br><span class="line"></span><br><span class="line">  <span class="string">GPU</span> <span class="string">Max</span> <span class="string">Clock</span> <span class="attr">rate:</span>                            <span class="number">1645</span> <span class="string">MHz</span> <span class="string">(1.64</span> <span class="string">GHz)</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Memory</span> <span class="string">Clock</span> <span class="attr">rate:</span>                             <span class="number">5505</span> <span class="string">Mhz</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Memory</span> <span class="string">Bus</span> <span class="attr">Width:</span>                              <span class="number">352</span><span class="bullet">-bit</span></span><br><span class="line"></span><br><span class="line">  <span class="string">L2</span> <span class="string">Cache</span> <span class="attr">Size:</span>                                 <span class="number">2883584</span> <span class="string">bytes</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Maximum</span> <span class="string">Texture</span> <span class="string">Dimension</span> <span class="string">Size</span> <span class="string">(x,y,z)</span>         <span class="number">1</span><span class="string">D=(131072),</span> <span class="number">2</span><span class="string">D=(131072,</span> <span class="number">65536</span><span class="string">),</span> <span class="number">3</span><span class="string">D=(16384,</span> <span class="number">16384</span><span class="string">,</span> <span class="number">16384</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Maximum</span> <span class="string">Layered</span> <span class="number">1</span><span class="string">D</span> <span class="string">Texture</span> <span class="string">Size,</span> <span class="string">(num)</span> <span class="string">layers</span>  <span class="number">1</span><span class="string">D=(32768),</span> <span class="number">2048</span> <span class="string">layers</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Maximum</span> <span class="string">Layered</span> <span class="number">2</span><span class="string">D</span> <span class="string">Texture</span> <span class="string">Size,</span> <span class="string">(num)</span> <span class="string">layers</span>  <span class="number">2</span><span class="string">D=(32768,</span> <span class="number">32768</span><span class="string">),</span> <span class="number">2048</span> <span class="string">layers</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Total</span> <span class="string">amount</span> <span class="string">of</span> <span class="string">constant</span> <span class="attr">memory:</span>               <span class="number">65536</span> <span class="string">bytes</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Total</span> <span class="string">amount</span> <span class="string">of</span> <span class="string">shared</span> <span class="string">memory</span> <span class="string">per</span> <span class="attr">block:</span>       <span class="number">49152</span> <span class="string">bytes</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Total</span> <span class="string">number</span> <span class="string">of</span> <span class="string">registers</span> <span class="string">available</span> <span class="string">per</span> <span class="attr">block:</span> <span class="number">65536</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Warp</span> <span class="attr">size:</span>                                     <span class="number">32</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Maximum</span> <span class="string">number</span> <span class="string">of</span> <span class="string">threads</span> <span class="string">per</span> <span class="attr">multiprocessor:</span>  <span class="number">2048</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Maximum</span> <span class="string">number</span> <span class="string">of</span> <span class="string">threads</span> <span class="string">per</span> <span class="attr">block:</span>           <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Max</span> <span class="string">dimension</span> <span class="string">size</span> <span class="string">of</span> <span class="string">a</span> <span class="string">thread</span> <span class="string">block</span> <span class="string">(x,y,z):</span> <span class="string">(1024,</span> <span class="number">1024</span><span class="string">,</span> <span class="number">64</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Max</span> <span class="string">dimension</span> <span class="string">size</span> <span class="string">of</span> <span class="string">a</span> <span class="string">grid</span> <span class="string">size</span>    <span class="string">(x,y,z):</span> <span class="string">(2147483647,</span> <span class="number">65535</span><span class="string">,</span> <span class="number">65535</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Maximum</span> <span class="string">memory</span> <span class="attr">pitch:</span>                          <span class="number">2147483647</span> <span class="string">bytes</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Texture</span> <span class="attr">alignment:</span>                             <span class="number">512</span> <span class="string">bytes</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Concurrent</span> <span class="string">copy</span> <span class="string">and</span> <span class="string">kernel</span> <span class="attr">execution:</span>          <span class="literal">Yes</span> <span class="string">with</span> <span class="number">2</span> <span class="string">copy</span> <span class="string">engine(s)</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Run</span> <span class="string">time</span> <span class="string">limit</span> <span class="string">on</span> <span class="attr">kernels:</span>                     <span class="literal">No</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Integrated</span> <span class="string">GPU</span> <span class="string">sharing</span> <span class="string">Host</span> <span class="attr">Memory:</span>            <span class="literal">No</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Support</span> <span class="string">host</span> <span class="string">page-locked</span> <span class="string">memory</span> <span class="attr">mapping:</span>       <span class="literal">Yes</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Alignment</span> <span class="string">requirement</span> <span class="string">for</span> <span class="attr">Surfaces:</span>            <span class="literal">Yes</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Device</span> <span class="string">has</span> <span class="string">ECC</span> <span class="attr">support:</span>                        <span class="string">Disabled</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Device</span> <span class="string">supports</span> <span class="string">Unified</span> <span class="string">Addressing</span> <span class="string">(UVA):</span>      <span class="literal">Yes</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Device</span> <span class="string">PCI</span> <span class="string">Domain</span> <span class="string">ID</span> <span class="string">/</span> <span class="string">Bus</span> <span class="string">ID</span> <span class="string">/</span> <span class="string">location</span> <span class="attr">ID:</span>   <span class="number">0</span> <span class="string">/</span> <span class="number">1</span> <span class="string">/</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="string">Compute</span> <span class="attr">Mode:</span></span><br><span class="line"></span><br><span class="line">     <span class="string">&lt;</span> <span class="string">Default</span> <span class="string">(multiple</span> <span class="string">host</span> <span class="string">threads</span> <span class="string">can</span> <span class="string">use</span> <span class="string">::cudaSetDevice()</span> <span class="string">with</span> <span class="string">device</span> <span class="string">simultaneously)</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 9.1, CUDA Runtime Version = 9.0, NumDevs = 1, Device0 = GeForce GT</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">X 1080 TiResult = PASS</span></span><br></pre></td></tr></table></figure>
<p>安装cudnn<br>参考：<a href="https://www.cnblogs.com/mar-q/p/7482720.html" target="_blank" rel="noopener">https://www.cnblogs.com/mar-q/p/7482720.html</a></p>
<p>下载：<a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-archive</a></p>
<h1 id="3-安装cudnn"><a href="#3-安装cudnn" class="headerlink" title="3 安装cudnn"></a>3 安装cudnn</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xvf cudnn-8.0-linux-x64-v6.0.tgz -C /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>显卡</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker小技巧</title>
    <url>/2018/08/15/docker%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-dockers开启privileged"><a href="#1-dockers开启privileged" class="headerlink" title="1 dockers开启privileged"></a>1 dockers开启privileged</h1><p>解决centos7容器无法使用systemctl命令的问题<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -e <span class="string">"container=docker"</span> --privileged=<span class="literal">true</span> -v /sys/fs/cgroup:/sys/fs/cgroup --name centos7 centos:7.5 /usr/sbin/init</span><br></pre></td></tr></table></figure></p>
<p>​    </p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>小知识</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx反向代理报504超时错误</title>
    <url>/2018/08/16/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%8A%A5504%E8%B6%85%E6%97%B6%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="一、nginx-tomcat"><a href="#一、nginx-tomcat" class="headerlink" title="一、nginx+tomcat"></a>一、nginx+tomcat</h1><p>后端为tomcat,nginx代理报504超时错误。</p>
<p><strong>问题描述：</strong></p>
<p>#错误</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">1.198.17.123</span> - - <span class="string">[06/Jul/2018:01:48:57 +0000]</span> <span class="string">"<span class="keyword">POST</span> /mapbj3/getticket HTTP/1.1"</span> <span class="number">504</span> <span class="number">537</span> <span class="string">"https://XXXXXXXXXX.com/walkcode3/index.html?openId=oB6UW0cF3Z_dnYXnz4tG4OFt7Rt0"</span> <span class="string">"Mozilla/5.0 (Linux; Android 8.1; PACM00 Build/O11019; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/53.0.2785.143 Crosswalk/24.53.595.0 XWEB/155 MMWEBSDK/19 Mobile Safari/537.36 MicroMessenger/6.6.6.1300(0x26060638) NetType/WIFI Language/zh_CN MicroMessenger/6.6.6.1300(0x26060638) NetType/WIFI Language/zh_CN miniProgram"</span> <span class="string">"-"</span></span><br><span class="line"><span class="number">2018</span>/<span class="number">07</span>/<span class="number">06</span> <span class="number">01</span>:<span class="number">48</span>:<span class="number">57</span> <span class="string">[error]</span> <span class="number">6</span>#<span class="number">6</span>: *<span class="number">2573</span> upstream timed out (<span class="number">110</span>: Connection timed out) while connecting to upstream, client: <span class="number">1.198.17.123</span>, server: , request: <span class="string">"<span class="keyword">POST</span> /mapbj3/getticket HTTP/1.1"</span>, upstream: <span class="string">"http://123.149.236.180:8022/mapbj3//getticket"</span>, host: <span class="string">"XXXXXXXX.com"</span>, referrer: <span class="string">"https://XXXXXXX.com/walkcode3/index.html?openId=oB6UW0cF3Z_dnYXnz4tG4OFt7Rt0"</span></span><br></pre></td></tr></table></figure>
<p>1、项目本地访问没问题，通过nginx访问报504错误；</p>
<p>2、重启nginx后正常，反复发生，其它项目代理没有问题；</p>
<p>3、搜索了一大推”NGINX 504 Gateway Time-out tomcat”,都是与php有关的,而默认优化的就是php配置的;</p>
<p><strong>问题处理：</strong><br>修改/etc/nginx/nginx.conf,添加如下信息</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="string">user </span> <span class="string">nginx;</span></span><br><span class="line"><span class="string">worker_processes </span> 1;</span><br><span class="line"></span><br><span class="line"><span class="string">error_log </span> /<span class="string">var/</span><span class="string">log/</span><span class="string">nginx/</span><span class="string">error.</span><span class="string">log </span><span class="string">warn;</span></span><br><span class="line"><span class="string">pid </span>       /<span class="string">var/</span><span class="string">run/</span><span class="string">nginx.</span><span class="string">pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">events </span>&#123;</span><br><span class="line">    <span class="string">worker_connections </span> <span class="string">1024;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">http </span>&#123;</span><br><span class="line">    <span class="string">include </span>      /<span class="string">etc/</span><span class="string">nginx/</span><span class="string">mime.</span><span class="string">types;</span></span><br><span class="line">    <span class="string">default_type </span> <span class="string">application/</span><span class="string">octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">log_format </span> <span class="string">main </span> <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="string">access_log </span> /<span class="string">var/</span><span class="string">log/</span><span class="string">nginx/</span><span class="string">access.</span><span class="string">log </span> <span class="string">main;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">sendfile </span>       <span class="string">on;</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">keepalive_timeout </span> <span class="string">65;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">include </span>/<span class="string">etc/</span><span class="string">nginx/</span><span class="string">conf.</span>d/*.<span class="string">conf;</span></span><br><span class="line">    <span class="comment">#用于tomcat反向代理,解决nginx 504错误 </span></span><br><span class="line">    <span class="string">proxy_connect_timeout </span>  <span class="string">300;</span> </span><br><span class="line">    <span class="string">proxy_send_timeout </span>     <span class="string">300;</span> </span><br><span class="line">    <span class="string">proxy_read_timeout </span>     <span class="string">300;</span> </span><br><span class="line">    <span class="string">proxy_buffer_size </span>      <span class="string">16k;</span> </span><br><span class="line">    <span class="string">proxy_buffers </span>          4 <span class="string">64k;</span> </span><br><span class="line">    <span class="string">proxy_busy_buffers_size </span><span class="string">128k;</span> </span><br><span class="line">    <span class="string">proxy_temp_file_write_size </span><span class="string">128k;</span></span><br><span class="line">    <span class="comment"># ps:以timeout结尾配置项时间要配置大点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、nginx-php-未验证"><a href="#二、nginx-php-未验证" class="headerlink" title="二、nginx+php(未验证)"></a>二、nginx+php(未验证)</h1><p>问题如上，问题处理添加如下内容</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">user </span> <span class="string">nginx;</span></span><br><span class="line"><span class="string">worker_processes </span> 1;</span><br><span class="line"></span><br><span class="line"><span class="string">error_log </span> /<span class="string">var/</span><span class="string">log/</span><span class="string">nginx/</span><span class="string">error.</span><span class="string">log </span><span class="string">warn;</span></span><br><span class="line"><span class="string">pid </span>       /<span class="string">var/</span><span class="string">run/</span><span class="string">nginx.</span><span class="string">pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">events </span>&#123;</span><br><span class="line">    <span class="string">worker_connections </span> <span class="string">1024;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">http </span>&#123;</span><br><span class="line">    <span class="string">include </span>      /<span class="string">etc/</span><span class="string">nginx/</span><span class="string">mime.</span><span class="string">types;</span></span><br><span class="line">    <span class="string">default_type </span> <span class="string">application/</span><span class="string">octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">log_format </span> <span class="string">main </span> <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="string">access_log </span> /<span class="string">var/</span><span class="string">log/</span><span class="string">nginx/</span><span class="string">access.</span><span class="string">log </span> <span class="string">main;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">sendfile </span>       <span class="string">on;</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">keepalive_timeout </span> <span class="string">65;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">include </span>/<span class="string">etc/</span><span class="string">nginx/</span><span class="string">conf.</span>d/*.<span class="string">conf;</span></span><br><span class="line">    <span class="comment">#用于php反向代理,解决nginx 504错误 </span></span><br><span class="line">    <span class="comment">#以fastcgi_*配置项是php用的    </span></span><br><span class="line">    <span class="string">fastcgi_connect_timeout </span><span class="string">1000;</span></span><br><span class="line">    <span class="string">fastcgi_send_timeout </span><span class="string">1000;</span></span><br><span class="line">    <span class="string">fastcgi_read_timeout </span><span class="string">1000;</span></span><br><span class="line">    <span class="string">fastcgi_buffer_size </span><span class="string">64k;</span></span><br><span class="line">    <span class="string">fastcgi_buffers </span>8 <span class="string">128k;</span></span><br><span class="line">    <span class="string">fastcgi_busy_buffers_size </span><span class="string">128k;</span></span><br><span class="line">    <span class="string">fastcgi_temp_file_write_size </span><span class="string">128k;</span></span><br><span class="line">    <span class="string">fastcgi_intercept_errors </span><span class="string">on;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://blog.csdn.net/lcj_star/article/details/76672748https://www.iyunv.com/thread-319236-1-1.html" target="_blank" rel="noopener">https://blog.csdn.net/lcj_star/article/details/76672748https://www.iyunv.com/thread-319236-1-1.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>centos同步yum源到本地</title>
    <url>/2018/08/16/centos%E5%90%8C%E6%AD%A5yum%E6%BA%90%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h1><p>os:centos 7.3 1611</p>
<p>应用：yum-utils</p>
<p>互联网源：阿里云</p>
<h1 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h1><p>删除/etc/yum.repos.d下所有源文件</p>
<h2 id="1、下载源repo到本地"><a href="#1、下载源repo到本地" class="headerlink" title="1、下载源repo到本地"></a>1、下载源repo到本地</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -O /etc/yum.repos.d/aliyun.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>
<h2 id="2、安装yum-utils提供reporsync服务"><a href="#2、安装yum-utils提供reporsync服务" class="headerlink" title="2、安装yum-utils提供reporsync服务"></a>2、安装yum-utils提供reporsync服务</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ yum install yum-utils -<span class="built_in">y</span></span><br></pre></td></tr></table></figure>
<h2 id="3、查看yum源仓库标识"><a href="#3、查看yum源仓库标识" class="headerlink" title="3、查看yum源仓库标识"></a>3、查看yum源仓库标识</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]<span class="comment"># yum repolist</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">源标识 源名称 状态</span><br><span class="line">base/7/x86_64 CentOS-7 - Base - mirrors.aliyun.com 9,591</span><br><span class="line">extras/7/x86_64 CentOS-7 - Extras - mirrors.aliyun.com 196</span><br><span class="line">updates/7/x86_64 CentOS-7 - Updates - mirrors.aliyun.com 657</span><br><span class="line">repolist: 10,444</span><br></pre></td></tr></table></figure>
<h2 id="4、根据源标识同步源到本地目录"><a href="#4、根据源标识同步源到本地目录" class="headerlink" title="4、根据源标识同步源到本地目录"></a>4、根据源标识同步源到本地目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># reposync -r base -p /var/www/html/     #这里同步base目录到本地</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： 部分互联网yum源不支持同步</p>
</blockquote>
<p>参考资料<br><a href="http://www.cnblogs.com/chengd/articles/6912938.html" target="_blank" rel="noopener">http://www.cnblogs.com/chengd/articles/6912938.html</a></p>
<p><a href="https://www.2cto.com/net/201512/455901.html" target="_blank" rel="noopener">https://www.2cto.com/net/201512/455901.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>私有仓库</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux小知识</title>
    <url>/2018/08/16/Linux%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="1、centos-Tab键命令补全"><a href="#1、centos-Tab键命令补全" class="headerlink" title="1、centos -Tab键命令补全"></a>1、centos -Tab键命令补全</h1><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ yum install -y bash-completion</span><br><span class="line"></span><br><span class="line">#执行脚本，使其生效或重新登录生效</span><br><span class="line"></span><br><span class="line">$ source /usr/share/bash-completion/bash_completion</span><br></pre></td></tr></table></figure>
<h1 id="2、自定义命令补全"><a href="#2、自定义命令补全" class="headerlink" title="2、自定义命令补全"></a>2、自定义命令补全</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 自定义生成kubectl命令补全</span><br><span class="line"></span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line"></span><br><span class="line"># 将命令添加入bashrc文件，每次登录当前用户执行，使命令补全生效，也可添加入其它开机执行的脚本</span><br><span class="line"></span><br><span class="line">echo <span class="string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~<span class="regexp">/.bashrc</span></span><br></pre></td></tr></table></figure>
<h1 id="3、ubuntu-Tab键命令补全"><a href="#3、ubuntu-Tab键命令补全" class="headerlink" title="3、ubuntu-Tab键命令补全"></a>3、ubuntu-Tab键命令补全</h1><p>编辑/etc/bash.bashrc 里面有这几行语句，去掉#注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#enable bash completion in interactive shells</span><br><span class="line"></span><br><span class="line">if ! shopt -oq posix; then</span><br><span class="line"></span><br><span class="line">  if [ -f /usr/share/bash-completion/bash_completion ]; then</span><br><span class="line"></span><br><span class="line">    . /usr/share/bash-completion/bash_completion</span><br><span class="line"></span><br><span class="line">  elif [ -f /etc/bash_completion ]; then</span><br><span class="line"></span><br><span class="line">    . /etc/bash_completion</span><br><span class="line"></span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h1 id="4、Linux设置环境变量"><a href="#4、Linux设置环境变量" class="headerlink" title="4、Linux设置环境变量"></a>4、Linux设置环境变量</h1><p>在 linux 里设置环境变量的方法 （ export PATH ）</p>
<p>一般来说，配置交叉编译工具链的时候需要指定编译工具的路径，此时就需要设置环境变量。例如我的mips-linux-gcc编译器在“/opt/au1200_rm /build_tools/bin”目录下，build_tools就是我的编译工具，则有如下三种方法来设置环境变量：</p>
<h2 id="4-1、直接用export命令："><a href="#4-1、直接用export命令：" class="headerlink" title="4.1、直接用export命令："></a>4.1、直接用export命令：</h2><p>立即生效，重启丢失。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/opt/au1200_rm/build_tools/bin</span><br></pre></td></tr></table></figure>
<p>查看是否已经设好，可用命令export查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#export</span><br><span class="line"></span><br><span class="line">declare -x BASH_ENV=&quot;/root/.bashrc&quot;</span><br><span class="line"></span><br><span class="line">declare -x G_BROKEN_FILENAMES=&quot;1&quot;</span><br><span class="line"></span><br><span class="line">declare -x HISTSIZE=&quot;1000&quot;</span><br><span class="line">PATH里面已经有了我要加的编译器的路径。</span><br></pre></td></tr></table></figure>
<h2 id="4-2、修改profile文件："><a href="#4-2、修改profile文件：" class="headerlink" title="4.2、修改profile文件："></a>4.2、修改profile文件：</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$  vi /etc/profile</span><br><span class="line">在里面加入:</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> PATH=”$PATH:<span class="regexp">/opt/</span>au1200_rm/build_tools/bin”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ . /etc/profile            #执行命令使配置生效</span><br></pre></td></tr></table></figure>
<h2 id="4-3-修改-bashrc文件："><a href="#4-3-修改-bashrc文件：" class="headerlink" title="4.3. 修改.bashrc文件："></a>4.3. 修改.bashrc文件：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ vi /root/.bashrc</span><br><span class="line"></span><br><span class="line">在里面加入：</span><br><span class="line"><span class="keyword">export</span> PATH=”$PATH:<span class="regexp">/opt/</span>au1200_rm/build_tools/bin”</span><br></pre></td></tr></table></figure>
<p>后两种方法一般需要重新注销系统才能生效，最后可以通过echo命令测试一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $PATH              #输出变量</span><br><span class="line">看看输出里面是不是已经有了 /my_new_path这个路径了。</span><br></pre></td></tr></table></figure>
<h1 id="5、实时查看日志"><a href="#5、实时查看日志" class="headerlink" title="5、实时查看日志"></a>5、实时查看日志</h1><p>tail -f /var/log/messages</p>
<h1 id="6、客户端-Xshell、SecureCRT-拖拉文件到服务器"><a href="#6、客户端-Xshell、SecureCRT-拖拉文件到服务器" class="headerlink" title="6、客户端(Xshell、SecureCRT)拖拉文件到服务器"></a>6、客户端(Xshell、SecureCRT)拖拉文件到服务器</h1><p>yum install lrzsz</p>
<h1 id="7、YUM下载rpm包及依赖包"><a href="#7、YUM下载rpm包及依赖包" class="headerlink" title="7、YUM下载rpm包及依赖包"></a>7、YUM下载rpm包及依赖包</h1><p>#只下载bash-completion包到home目录，不进行安装<br>yum install –downloadonly –downloaddir=/home bash-completion</p>
<h1 id="8、删除多少前天备份"><a href="#8、删除多少前天备份" class="headerlink" title="8、删除多少前天备份"></a>8、删除多少前天备份</h1><p>#删除目录/mnt/backup_data下30天前后缀为.sql的文件</p>
<p>find /mnt/backup_data/ -name “*.sql” -type f -mtime +30 -exec rm -f {} \;</p>
<h1 id="9、nmon显示系统性能显示工具"><a href="#9、nmon显示系统性能显示工具" class="headerlink" title="9、nmon显示系统性能显示工具"></a>9、nmon显示系统性能显示工具</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yum install nmon</span><br><span class="line"></span><br><span class="line">nmon</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux小知识/1571815259089.png" alt="图1"></p>
<p>参考<a href="https://linux.cn/article-6467-1.html" target="_blank" rel="noopener">https://linux.cn/article-6467-1.html</a></p>
<h1 id="10、Htop进程浏览器"><a href="#10、Htop进程浏览器" class="headerlink" title="10、Htop进程浏览器"></a>10、Htop进程浏览器</h1><p>yum install htop<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux小知识/1571815299445.png" alt="图2"></p>
<h1 id="11、查看磁盘i-o工具"><a href="#11、查看磁盘i-o工具" class="headerlink" title="11、查看磁盘i/o工具"></a>11、查看磁盘i/o工具</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ yum install sysstat</span><br><span class="line"></span><br><span class="line">#每2秒更新一次，-m 以MB显示，-k以kb显示</span><br><span class="line"></span><br><span class="line">iostat -d -m <span class="number">2</span></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line"></span><br><span class="line">iostat -d -k <span class="number">2</span></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line"></span><br><span class="line">iostat -d -m /dev/sda1</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux小知识/1571815323184.png" alt="图3"><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yum install iotop</span><br><span class="line"></span><br><span class="line">#c查看哪个进程占用i/o</span><br><span class="line"></span><br><span class="line">iotop</span><br></pre></td></tr></table></figure></p>
<p>使用详解参考：<a href="http://man.linuxde.net/iotop" target="_blank" rel="noopener">http://man.linuxde.net/iotop</a></p>
<h1 id="12、禁止用户登录系统"><a href="#12、禁止用户登录系统" class="headerlink" title="12、禁止用户登录系统"></a>12、禁止用户登录系统</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁止</span></span><br><span class="line"></span><br><span class="line">usermod -s /bin/<span class="literal">false</span> ftpuser</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启</span></span><br><span class="line"></span><br><span class="line">usermod -s /bin/base ftpuser</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>小知识</tag>
        <tag>基础运维</tag>
        <tag>运维工具</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes创建资源对象yaml文件例子--pod</title>
    <url>/2018/08/16/kubernetes%E5%88%9B%E5%BB%BA%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1yaml%E6%96%87%E4%BB%B6%E4%BE%8B%E5%AD%90-pod/</url>
    <content><![CDATA[<a id="more"></a>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> <span class="comment">#指定api版本，此值必须在kubectl apiversion中,通过kubectl api-versions命令查询 </span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span> <span class="comment">#指定创建资源的角色/类型  </span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment">#资源的元数据/属性  </span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">web04-pod</span> <span class="comment">#资源的名字，在同一个namespace中必须唯一  </span></span><br><span class="line"><span class="attr">  labels:</span> <span class="comment">#设定资源的标签，详情请见http://blog.csdn.net/liyingke112/article/details/77482384</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">apache</span>  </span><br><span class="line"><span class="attr">    version:</span> <span class="string">v1</span>  </span><br><span class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span>  </span><br><span class="line"><span class="attr">  annotations:</span>            <span class="comment">#自定义注解列表  </span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">String</span>        <span class="comment">#自定义注解名字  </span></span><br><span class="line"><span class="attr">spec:</span><span class="comment">#specification of the resource content 指定该资源的内容  </span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span> <span class="comment">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器  </span></span><br><span class="line"><span class="attr">  nodeSelector:</span>     <span class="comment">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1  </span></span><br><span class="line"><span class="attr">    zone:</span> <span class="string">node1</span>  </span><br><span class="line"><span class="attr">  containers:</span>  </span><br><span class="line"><span class="attr">  - name:</span> <span class="string">web04-pod</span> <span class="comment">#容器的名字  </span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">web:apache</span> <span class="comment">#容器使用的镜像地址  </span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">Never</span> <span class="comment">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，</span></span><br><span class="line">                           <span class="comment"># Always，每次都检查</span></span><br><span class="line">                           <span class="comment"># Never，每次都不检查（不管本地是否有）</span></span><br><span class="line">                           <span class="comment"># IfNotPresent，如果本地有就不检查，如果没有就拉取</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">['sh']</span> <span class="comment">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT  </span></span><br><span class="line"><span class="attr">    args:</span> <span class="string">["$(str)"]</span> <span class="comment">#启动容器的命令参数，对应Dockerfile中CMD参数  </span></span><br><span class="line"><span class="attr">    env:</span> <span class="comment">#指定容器中的环境变量  </span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">str</span> <span class="comment">#变量的名字  </span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"/etc/run.sh"</span> <span class="comment">#变量的值  </span></span><br><span class="line"><span class="attr">    resources:</span> <span class="comment">#资源管理，请求请见http://blog.csdn.net/liyingke112/article/details/77452630</span></span><br><span class="line"><span class="attr">      requests:</span> <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行  </span></span><br><span class="line"><span class="attr">        cpu:</span> <span class="number">0.1</span> <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line"><span class="attr">        memory:</span> <span class="number">32</span><span class="string">Mi</span> <span class="comment">#内存使用量  </span></span><br><span class="line"><span class="attr">      limits:</span> <span class="comment">#资源限制  </span></span><br><span class="line"><span class="attr">        cpu:</span> <span class="number">0.5</span>  </span><br><span class="line"><span class="attr">        memory:</span> <span class="number">32</span><span class="string">Mi</span>  </span><br><span class="line"><span class="attr">    ports:</span>  </span><br><span class="line"><span class="attr">    - containerPort:</span> <span class="number">80</span> <span class="comment">#容器开发对外的端口</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">httpd</span>  <span class="comment">#名称</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span>  </span><br><span class="line"><span class="attr">    livenessProbe:</span> <span class="comment">#pod内容器健康检查的设置，详情请见http://blog.csdn.net/liyingke112/article/details/77531584</span></span><br><span class="line"><span class="attr">      httpGet:</span> <span class="comment">#通过httpget检查健康，返回200-399之间，则认为容器正常  </span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/</span> <span class="comment">#URI地址  </span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">80</span>  </span><br><span class="line">        <span class="comment">#host: 127.0.0.1 #主机地址  </span></span><br><span class="line"><span class="attr">        scheme:</span> <span class="string">HTTP</span>  </span><br><span class="line"><span class="attr">      initialDelaySeconds:</span> <span class="number">180</span> <span class="comment">#表明第一次检测在容器启动后多长时间后开始  </span></span><br><span class="line"><span class="attr">      timeoutSeconds:</span> <span class="number">5</span> <span class="comment">#检测的超时时间  </span></span><br><span class="line"><span class="attr">      periodSeconds:</span> <span class="number">15</span>  <span class="comment">#检查间隔时间  </span></span><br><span class="line">      <span class="comment">#也可以用这种方法  </span></span><br><span class="line">      <span class="comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常  </span></span><br><span class="line">      <span class="comment">#  command:  </span></span><br><span class="line">      <span class="comment">#    - cat  </span></span><br><span class="line">      <span class="comment">#    - /tmp/health  </span></span><br><span class="line">      <span class="comment">#也可以用这种方法  </span></span><br><span class="line">      <span class="comment">#tcpSocket: //通过tcpSocket检查健康   </span></span><br><span class="line">      <span class="comment">#  port: number   </span></span><br><span class="line"><span class="attr">    lifecycle:</span> <span class="comment">#生命周期管理  </span></span><br><span class="line"><span class="attr">      postStart:</span> <span class="comment">#容器运行之前运行的任务  </span></span><br><span class="line"><span class="attr">        exec:</span>  </span><br><span class="line"><span class="attr">          command:</span>  </span><br><span class="line"><span class="bullet">            -</span> <span class="string">'sh'</span>  </span><br><span class="line"><span class="bullet">            -</span> <span class="string">'yum upgrade -y'</span>  </span><br><span class="line"><span class="attr">      preStop:</span><span class="comment">#容器关闭之前运行的任务  </span></span><br><span class="line"><span class="attr">        exec:</span>  </span><br><span class="line"><span class="attr">          command:</span> <span class="string">['service</span> <span class="string">httpd</span> <span class="string">stop']</span>  </span><br><span class="line"><span class="attr">    volumeMounts:</span>  <span class="comment">#详情请见http://blog.csdn.net/liyingke112/article/details/76577520</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">volume</span> <span class="comment">#挂载设备的名字，与volumes[*].name 需要对应    </span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">/data</span> <span class="comment">#挂载到容器的某个路径下  </span></span><br><span class="line"><span class="attr">      readOnly:</span> <span class="literal">True</span>  </span><br><span class="line"><span class="attr">  volumes:</span> <span class="comment">#定义一组挂载设备  </span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">volume</span> <span class="comment">#定义一个挂载设备的名字  </span></span><br><span class="line">    <span class="comment">#meptyDir: &#123;&#125;  </span></span><br><span class="line"><span class="attr">    hostPath:</span>  </span><br><span class="line"><span class="attr">      path:</span> <span class="string">/opt</span> <span class="comment">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种</span></span><br></pre></td></tr></table></figure>
<p>转载：<a href="https://blog.csdn.net/liyingke112/article/details/76155428" target="_blank" rel="noopener">https://blog.csdn.net/liyingke112/article/details/76155428</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>yaml</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins各种触发方式介绍</title>
    <url>/2018/08/16/jenkins%E5%90%84%E7%A7%8D%E8%A7%A6%E5%8F%91%E6%96%B9%E5%BC%8F%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<a id="more"></a>
<p><strong>触发远程构建</strong></p>
<p>使用svn存储库hooks的post-commit,调用jenkins的api触发job。（存储库更新即触发构建，不能针对某个分支目录更新触发）</p>
<p><strong>Build after other projects are built</strong><br>某个projects触发构建后执行构建</p>
<p><strong>Build periodically</strong><br>Build periodically：周期进行项目构建（它不care源码是否发生变化），我的配置如下：</p>
<p>0 2 <em> </em> *  （每天2:00 必须build一次源码）</p>
<p><strong>Poll SCM</strong><br>Poll SCM：定时检查源码变更（根据SCM软件的版本号），如果有更新就checkout最新code下来，然后执行构建动作。我的配置如下：</p>
<p><em>/5 </em> <em> </em> *  （每5分钟检查一次源码变化）可针对某个分支目录更新触发构建</p>
]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes创建资源对象yaml文件例子--rc</title>
    <url>/2018/08/16/kubernetes%E5%88%9B%E5%BB%BA%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1yaml%E6%96%87%E4%BB%B6%E4%BE%8B%E5%AD%90-rc/</url>
    <content><![CDATA[<a id="more"></a>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> <span class="comment">#指定api版本，此值必须在kubectl apiversion中</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span> <span class="comment">#指定创建资源的角色/类型</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment">#资源的元数据/属性</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-rc</span> <span class="comment">#资源的名字，在同一个namespace中必须唯一</span></span><br><span class="line"><span class="attr">  labels:</span> <span class="comment">#设定资源的标签，详情请见http://blog.csdn.net/liyingke112/article/details/77482384</span></span><br><span class="line"><span class="attr">  k8s-app:</span> <span class="string">apache</span>  </span><br><span class="line"><span class="attr">    software:</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">    project:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">test-rc</span></span><br><span class="line"><span class="attr">    version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">  annotations:</span>            <span class="comment">#自定义注解列表</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">String</span>        <span class="comment">#自定义注解名字</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span> <span class="comment">#副本数量2 </span></span><br><span class="line"><span class="attr">  selector:</span> <span class="comment">#RC通过spec.selector来筛选要控制的Pod </span></span><br><span class="line"><span class="attr">    software:</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">    project:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">test-rc</span></span><br><span class="line"><span class="attr">    version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">test-rc</span></span><br><span class="line"><span class="attr">  template:</span> <span class="comment">#这里Pod的定义</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span> <span class="comment">#Pod的label，可以看到这个label与spec.selector相同</span></span><br><span class="line"><span class="attr">        software:</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">        project:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">test-rc</span></span><br><span class="line"><span class="attr">        version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">test-rc</span></span><br><span class="line"><span class="attr">    spec:</span><span class="comment">#specification of the resource content 指定该资源的内容  </span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span> <span class="comment">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器  </span></span><br><span class="line"><span class="attr">      nodeSelector:</span>     <span class="comment">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1  </span></span><br><span class="line"><span class="attr">        zone:</span> <span class="string">node1</span>  </span><br><span class="line"><span class="attr">      containers:</span>  </span><br><span class="line"><span class="attr">      - name:</span> <span class="string">web04-pod</span> <span class="comment">#容器的名字  </span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">web:apache</span> <span class="comment">#容器使用的镜像地址  </span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">Never</span> <span class="comment">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，</span></span><br><span class="line">                               <span class="comment"># Always，每次都检查</span></span><br><span class="line">                               <span class="comment"># Never，每次都不检查（不管本地是否有）</span></span><br><span class="line">                               <span class="comment"># IfNotPresent，如果本地有就不检查，如果没有就拉取</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">['sh']</span> <span class="comment">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT  </span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">["$(str)"]</span> <span class="comment">#启动容器的命令参数，对应Dockerfile中CMD参数  </span></span><br><span class="line"><span class="attr">        env:</span> <span class="comment">#指定容器中的环境变量  </span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">str</span> <span class="comment">#变量的名字  </span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">"/etc/run.sh"</span> <span class="comment">#变量的值  </span></span><br><span class="line"><span class="attr">        resources:</span> <span class="comment">#资源管理，请求请见http://blog.csdn.net/liyingke112/article/details/77452630</span></span><br><span class="line"><span class="attr">          requests:</span> <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行  </span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">0.1</span> <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">32</span><span class="string">Mi</span> <span class="comment">#内存使用量  </span></span><br><span class="line"><span class="attr">          limits:</span> <span class="comment">#资源限制  </span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">0.5</span>  </span><br><span class="line"><span class="attr">            memory:</span> <span class="number">32</span><span class="string">Mi</span>  </span><br><span class="line"><span class="attr">        ports:</span>  </span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span> <span class="comment">#容器开发对外的端口</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">httpd</span>  <span class="comment">#名称</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span>  </span><br><span class="line"><span class="attr">        livenessProbe:</span> <span class="comment">#pod内容器健康检查的设置，详情请见http://blog.csdn.net/liyingke112/article/details/77531584</span></span><br><span class="line"><span class="attr">          httpGet:</span> <span class="comment">#通过httpget检查健康，返回200-399之间，则认为容器正常  </span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/</span> <span class="comment">#URI地址  </span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">80</span>  </span><br><span class="line">            <span class="comment">#host: 127.0.0.1 #主机地址  </span></span><br><span class="line"><span class="attr">            scheme:</span> <span class="string">HTTP</span>  </span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">180</span> <span class="comment">#表明第一次检测在容器启动后多长时间后开始  </span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">5</span> <span class="comment">#检测的超时时间  </span></span><br><span class="line"><span class="attr">          periodSeconds:</span> <span class="number">15</span>  <span class="comment">#检查间隔时间  </span></span><br><span class="line">          <span class="comment">#也可以用这种方法  </span></span><br><span class="line">          <span class="comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常  </span></span><br><span class="line">          <span class="comment">#  command:  </span></span><br><span class="line">          <span class="comment">#    - cat  </span></span><br><span class="line">          <span class="comment">#    - /tmp/health  </span></span><br><span class="line">          <span class="comment">#也可以用这种方法  </span></span><br><span class="line">          <span class="comment">#tcpSocket: //通过tcpSocket检查健康   </span></span><br><span class="line">          <span class="comment">#  port: number   </span></span><br><span class="line"><span class="attr">        lifecycle:</span> <span class="comment">#生命周期管理  </span></span><br><span class="line"><span class="attr">          postStart:</span> <span class="comment">#容器运行之前运行的任务  </span></span><br><span class="line"><span class="attr">            exec:</span>  </span><br><span class="line"><span class="attr">              command:</span>  </span><br><span class="line"><span class="bullet">                -</span> <span class="string">'sh'</span>  </span><br><span class="line"><span class="bullet">                -</span> <span class="string">'yum upgrade -y'</span>  </span><br><span class="line"><span class="attr">          preStop:</span><span class="comment">#容器关闭之前运行的任务  </span></span><br><span class="line"><span class="attr">            exec:</span>  </span><br><span class="line"><span class="attr">              command:</span> <span class="string">['service</span> <span class="string">httpd</span> <span class="string">stop']</span>  </span><br><span class="line"><span class="attr">        volumeMounts:</span>  <span class="comment">#详情请见http://blog.csdn.net/liyingke112/article/details/76577520</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">volume</span> <span class="comment">#挂载设备的名字，与volumes[*].name 需要对应    </span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/data</span> <span class="comment">#挂载到容器的某个路径下  </span></span><br><span class="line"><span class="attr">          readOnly:</span> <span class="literal">True</span>  </span><br><span class="line"><span class="attr">  volumes:</span> <span class="comment">#定义一组挂载设备  </span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">volume</span> <span class="comment">#定义一个挂载设备的名字  </span></span><br><span class="line">    <span class="comment">#meptyDir: &#123;&#125;  </span></span><br><span class="line"><span class="attr">    hostPath:</span>  </span><br><span class="line"><span class="attr">      path:</span> <span class="string">/opt</span> <span class="comment">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>yaml</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>npm私库部署-cnpmjs</title>
    <url>/2018/08/16/npm%E7%A7%81%E5%BA%93%E9%83%A8%E7%BD%B2-cnpmjs/</url>
    <content><![CDATA[<h1 id="一、部署cnpm"><a href="#一、部署cnpm" class="headerlink" title="一、部署cnpm"></a>一、部署cnpm</h1><a id="more"></a>
<h2 id="1、获取代码"><a href="#1、获取代码" class="headerlink" title="1、获取代码"></a>1、获取代码</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>://github.com/fengmk2/cnpmjs.org.git</span><br></pre></td></tr></table></figure>
<h2 id="2、创建mysql库"><a href="#2、创建mysql库" class="headerlink" title="2、创建mysql库"></a>2、创建mysql库</h2><p>Default</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> cnpmjs;</span><br><span class="line"><span class="keyword">use</span> cnpmjs;</span><br><span class="line">source docs/db.sql【db.sql位于cnpmjs.org/docs/db.sql】</span><br></pre></td></tr></table></figure>
<h2 id="3、安装依赖"><a href="#3、安装依赖" class="headerlink" title="3、安装依赖"></a>3、安装依赖</h2><p>安装依赖其实就是一个 npm install，不过 CNPM 把该指令已经写到 Makefile 里面了，所以直接执行下面的命令就好了。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> cnpmjs.org </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure></p>
<p>当然万一你是 Windows 用户或者不会 make，那么还是要用 npm install。<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ npm install <span class="params">--build-from-source</span> <span class="params">--registry=https</span>:<span class="string">//registry.npm.taobao.org</span> <span class="params">--disturl=https</span>:<span class="string">//npm.taobao.org/mirrors/node</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4、修改配置文件"><a href="#4、修改配置文件" class="headerlink" title="4、修改配置文件"></a>4、修改配置文件</h2><p>修改配置</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /cnpmjs.org/config/<span class="built_in">index</span>.js</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/npm私库部署-cnpmjs/1571815385640.png" alt="图1"><br>cnpm提供两个端口：7001和7002，其中7001用于NPM的注册服务，7002用于Web访问。</p>
<p>bindingHost为安装cnpm的服务器ip地址，也就是在浏览器中只能通过访问<a href="http://192.168.48.57来访问cnpm以及获取npm的注册服务。" target="_blank" rel="noopener">http://192.168.48.57来访问cnpm以及获取npm的注册服务。</a></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/npm私库部署-cnpmjs/1571815398422.png" alt="图2">按照之前创建的数据库来进行配置</p>
<p>这里将会列举一些常用的配置项，其余的一些配置项请自行参考 config/index.js 文件。</p>
<h3 id="配置字段参考"><a href="#配置字段参考" class="headerlink" title="配置字段参考"></a>配置字段参考</h3><p><a href="https://segmentfault.com/a/1190000005946580" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005946580</a></p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">enableCluster：</span>是否启用 <span class="string">cluster-worker </span>模式启动服务，默认 <span class="string">false，</span>生产环节推荐为 <span class="string">true;</span></span><br><span class="line"><span class="string">registryPort：</span><span class="string">API </span>专用的 <span class="string">registry </span>服务端口，默认 <span class="string">7001；</span></span><br><span class="line"><span class="string">webPort：</span><span class="string">Web </span>服务端口，默认 <span class="string">7002；</span></span><br><span class="line"><span class="string">bindingHost：</span>监听绑定的 <span class="string">Host，</span>默认为 <span class="string">127.</span>0.0.1，如果外面架了一层本地的 <span class="string">Nginx </span>反向代理或者 <span class="string">Apache </span>反向代理的话推荐不用改；</span><br><span class="line"><span class="string">sessionSecret：</span><span class="string">session </span>用的盐；</span><br><span class="line"><span class="string">logdir：</span>日志目录；</span><br><span class="line"><span class="string">uploadDir：</span>临时上传文件目录；</span><br><span class="line"><span class="string">viewCache：</span>视图模板缓存是否开启，默认为 <span class="string">false；</span></span><br><span class="line"><span class="string">enableCompress：</span>是否开启 <span class="string">gzip </span>压缩，默认为 <span class="string">false；</span></span><br><span class="line"><span class="string">admins：</span>管理员们，这是一个 <span class="string">JSON </span><span class="string">Object，</span>对应各键名为各管理员的用户名，键值为其邮箱，默认为 &#123; <span class="string">fengmk2:</span> <span class="string">'fengmk2@gmail.com'</span>, <span class="string">admin:</span> <span class="string">'admin@cnpmjs.org'</span>, <span class="string">dead_horse:</span> <span class="string">'dead_horse@qq.com'</span> &#125;；</span><br><span class="line"><span class="string">logoURL：</span><span class="string">Logo </span>地址，不过对于我这个已经把 <span class="string">CNPM </span>前端改得面目全非的人来说已经忽略了这个配置了；</span><br><span class="line"><span class="string">adBanner：</span>广告 <span class="string">Banner </span>的地址；</span><br><span class="line"><span class="string">customReadmeFile：</span>实际上我们看到的 <span class="string">cnpmjs.</span><span class="string">org </span>首页中间一大堆冗长的介绍是一个 <span class="string">Markdown </span>文件转化而成的，你可以设置该项来自行替换这个文件；</span><br><span class="line"><span class="string">customFooter：</span>自定义页脚模板；</span><br><span class="line"><span class="string">npmClientName：</span>默认为 <span class="string">cnpm，</span>如果你有自己开发或者 <span class="string">fork </span>的 <span class="string">npm </span>客户端的话请改成自己的 <span class="string">CLI </span>命令，这个应该会在一些页面的说明处替换成你所写的；</span><br><span class="line"><span class="string">backupFilePrefix：</span>备份目录；</span><br><span class="line"><span class="string">database：</span>数据库相关配置，为一个对象，默认如果不配置将会是一个 ~/.<span class="string">cnpmjs.</span><span class="string">org/</span><span class="string">data.</span><span class="string">sqlite </span>的 <span class="string">SQLite；</span></span><br><span class="line"><span class="string">db：</span>数据的库名；</span><br><span class="line"><span class="string">username：</span>数据库用户名；</span><br><span class="line"><span class="string">password：</span>数据库密码；</span><br><span class="line"><span class="string">dialect：</span>数据库适配器，可选 <span class="string">"mysql"</span>、<span class="string">"sqlite"</span>、<span class="string">"postgres"</span>、<span class="string">"mariadb"</span>，默认为 <span class="string">"sqlite"</span>；</span><br><span class="line"><span class="string">hsot：</span>数据库地址；</span><br><span class="line"><span class="string">port：</span>数据库端口；</span><br><span class="line"><span class="string">pool：</span>数据库连接池相关配置，为一个对象；</span><br><span class="line"><span class="string">maxConnections：</span>最大连接数，默认为 <span class="string">10；</span></span><br><span class="line"><span class="string">minConnections：</span>最小连接数，默认为 0；</span><br><span class="line"><span class="string">maxIdleTime：</span>单条链接最大空闲时间，默认为 <span class="string">30000 </span>毫秒；</span><br><span class="line"><span class="string">storege：</span>仅对 <span class="string">SQLite </span>配置有效，数据库地址，默认为 ~/.<span class="string">cnpmjs/</span><span class="string">data.</span><span class="string">sqlite；</span></span><br><span class="line"><span class="string">nfs：</span>包文件系统处理对象，为一个 <span class="string">Node.</span><span class="string">js </span>对象，默认是 [<span class="string">fs-cnpm]</span>() 这个包，并且配置在 ~/.<span class="string">cnpmjs/</span><span class="string">nfs </span>目录下，也就是说默认所有同步的包都会被放在这个目录下；开发者可以使用别的一些文件系统插件（如上传到又拍云等）,又或者自己去按接口开发一个逻辑层，这些都是后话了；</span><br><span class="line"><span class="string">registryHost：</span>暂时还未试过，我猜是用于 <span class="string">Web </span>页面显示用的，默认为 r.<span class="string">cnpmjs.</span><span class="string">org；</span></span><br><span class="line"><span class="string">enablePrivate：</span>是否开启私有模式，默认为 <span class="string">false；</span></span><br><span class="line">如果是私有模式则只有管理员能发布包，其它人只能从源站同步包；</span><br><span class="line">如果是非私有模式则所有登录用户都能发布包；</span><br><span class="line"><span class="string">scopes：</span>非管理员发布包的时候只能用以 <span class="string">scopes </span>里面列举的命名空间为前缀来发布，如果没设置则无法发布，也就是说这是一个必填项，默认为 [ <span class="string">'@cnpm'</span>, <span class="string">'@cnpmtest'</span>, <span class="string">'@cnpm-test'</span> ]，据苏千大大解释是为了便于管理以及让公司的员工自觉按需发布；更多关于 <span class="string">NPM </span><span class="string">scope </span>的说明请参见 <span class="string">npm-scope；</span></span><br><span class="line"><span class="string">privatePackages：</span>就如该配置项的注释所述，出于历史包袱的原因，有些已经存在的私有包（可能之前是用 <span class="string">Git </span>的方式安装的）并没有以命名空间的形式来命名，而这种包本来是无法上传到 <span class="string">CNPM </span>的，这个配置项数组就是用来加这些例外白名单的，默认为一个空数组；</span><br><span class="line"><span class="string">sourceNpmRegistry：</span>更新源 <span class="string">NPM </span>的 <span class="string">registry </span>地址，默认为 <span class="string">https:</span>//<span class="string">registry.</span><span class="string">npm.</span><span class="string">taobao.</span><span class="string">org；</span></span><br><span class="line"><span class="string">sourceNpmRegistryIsCNpm：</span>源 <span class="string">registry </span>是否为 <span class="string">CNPM，</span>默认为 <span class="string">true，</span>如果你使用的源是官方 <span class="string">NPM </span>源，请将其设为 <span class="string">false；</span></span><br><span class="line"><span class="string">syncByInstall：</span>如果安装包的时候发现包不存在，则尝试从更新源同步，默认为 <span class="string">true；</span></span><br><span class="line"><span class="string">syncModel：</span>更新模式（不过我觉得是个 <span class="string">typo）</span>，有下面几种模式可以选择，默认为 <span class="string">"none"</span>;</span><br><span class="line"><span class="string">"none"</span>：永不同步，只管理私有用户上传的包，其它源包会直接从源站获取；</span><br><span class="line"><span class="string">"exist"</span>：定时同步已经存在于数据库的包；</span><br><span class="line"><span class="string">"all"</span>：定时同步所有源站的包；</span><br><span class="line"><span class="string">syncInterval：</span>同步间隔，默认为 <span class="string">"10m"</span> 即十分钟；</span><br><span class="line"><span class="string">syncDevDependencies：</span>是否同步每个包里面的 <span class="string">devDependencies </span>包们，默认为 <span class="string">false；</span></span><br><span class="line"><span class="string">badgeSubject：</span>包的 <span class="string">badge </span>显示的名字，默认为 <span class="string">cnpm；</span></span><br><span class="line"><span class="string">userService：</span>用户验证接口，默认为 <span class="string">null，</span>即无用户相关功能也就是无法有用户去上传包，该部分需要自己实现接口功能并配置，如与公司的 <span class="string">Gitlab </span>相对接，这也是后话了；</span><br><span class="line"><span class="string">alwaysAuth：</span>是否始终需要用户验证，即便是 $ <span class="string">cnpm </span><span class="string">install </span>等命令；</span><br><span class="line"><span class="string">httpProxy：</span>代理地址设置，用于你在墙内源站在墙外的情况。</span><br></pre></td></tr></table></figure>
<p>下面是index.js配置实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mkdirp = <span class="built_in">require</span>(<span class="string">'mkdirp'</span>);</span><br><span class="line"><span class="keyword">var</span> copy = <span class="built_in">require</span>(<span class="string">'copy-to'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">require</span>(<span class="string">'../package.json'</span>).version;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> root = path.dirname(__dirname);</span><br><span class="line"><span class="keyword">var</span> dataDir = path.join(process.env.HOME || root, <span class="string">'.cnpmjs.org'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  version: version,</span><br><span class="line">  dataDir: dataDir,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Cluster mode</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  enableCluster: <span class="literal">false</span>,</span><br><span class="line">  numCPUs: os.cpus().length,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * server configure</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">//cnpm提供两个端口：7001和7002，其中7001用于NPM的注册服务，7002用于Web访问。</span></span><br><span class="line">  registryPort: <span class="number">7001</span>,</span><br><span class="line">  webPort: <span class="number">7002</span>,</span><br><span class="line">  <span class="comment">//bindingHost为安装cnpm的服务器ip地址，也就是在浏览器中只能通过访问http://192.168.48.57来访问cnpm以及获取npm的注册服务。</span></span><br><span class="line">  bindingHost: <span class="string">'192.168.1.12'</span>, <span class="comment">// only binding on 127.0.0.1 for local access</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// debug mode</span></span><br><span class="line">  <span class="comment">// if in debug mode, some middleware like limit wont load</span></span><br><span class="line">  <span class="comment">// logger module will print to stdout</span></span><br><span class="line">  debug: process.env.NODE_ENV === <span class="string">'development'</span>,</span><br><span class="line">  <span class="comment">// page mode, enable on development env</span></span><br><span class="line">  pagemock: process.env.NODE_ENV === <span class="string">'development'</span>,</span><br><span class="line">  <span class="comment">// session secret</span></span><br><span class="line">  sessionSecret: <span class="string">'cnpmjs.org test session secret'</span>,</span><br><span class="line">  <span class="comment">// max request json body size</span></span><br><span class="line">  jsonLimit: <span class="string">'10mb'</span>,</span><br><span class="line">  <span class="comment">// log dir name</span></span><br><span class="line">  logdir: path.join(dataDir, <span class="string">'logs'</span>),</span><br><span class="line">  <span class="comment">// update file template dir</span></span><br><span class="line">  uploadDir: path.join(dataDir, <span class="string">'downloads'</span>),</span><br><span class="line">  <span class="comment">// web page viewCache</span></span><br><span class="line">  viewCache: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// config for koa-limit middleware</span></span><br><span class="line">  <span class="comment">// for limit download rates</span></span><br><span class="line">  limit: &#123;</span><br><span class="line">    enable: <span class="literal">false</span>,</span><br><span class="line">    token: <span class="string">'koa-limit:download'</span>,</span><br><span class="line">    limit: <span class="number">1000</span>,</span><br><span class="line">    interval: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>,</span><br><span class="line">    whiteList: [],</span><br><span class="line">    blackList: [],</span><br><span class="line">    message: <span class="string">'request frequency limited, any question, please contact fengmk2@gmail.com'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  enableCompress: <span class="literal">false</span>, <span class="comment">// enable gzip response or not</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// default system admins</span></span><br><span class="line">  admins: &#123;</span><br><span class="line">    <span class="comment">// name: email</span></span><br><span class="line">    fengmk2: <span class="string">'fengmk2@gmail.com'</span>,</span><br><span class="line">    admin: <span class="string">'admin@cnpmjs.org'</span>,</span><br><span class="line">    dead_horse: <span class="string">'dead_horse@qq.com'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// email notification for errors</span></span><br><span class="line">  <span class="comment">// check https://github.com/andris9/Nodemailer for more informations</span></span><br><span class="line">  mail: &#123;</span><br><span class="line">    enable: <span class="literal">false</span>,</span><br><span class="line">    appname: <span class="string">'cnpmjs.org'</span>,</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">'cnpmjs.org mail sender &lt;adderss@gmail.com&gt;'</span>,</span><br><span class="line">    service: <span class="string">'gmail'</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      user: <span class="string">'address@gmail.com'</span>,</span><br><span class="line">      pass: <span class="string">'your password'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  logoURL: <span class="string">'https://os.alipayobjects.com/rmsportal/oygxuIUkkrRccUz.jpg'</span>, <span class="comment">// cnpm logo image url</span></span><br><span class="line">  adBanner: <span class="string">''</span>,</span><br><span class="line">  customReadmeFile: <span class="string">''</span>, <span class="comment">// you can use your custom readme file instead the cnpm one</span></span><br><span class="line">  customFooter: <span class="string">''</span>, <span class="comment">// you can add copyright and site total script html here</span></span><br><span class="line">  npmClientName: <span class="string">'cnpm'</span>, <span class="comment">// use `$&#123;name&#125; install package`</span></span><br><span class="line">  packagePageContributorSearch: <span class="literal">true</span>, <span class="comment">// package page contributor link to search, default is true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// max handle number of package.json `dependencies` property</span></span><br><span class="line">  maxDependencies: <span class="number">200</span>,</span><br><span class="line">  <span class="comment">// backup filepath prefix</span></span><br><span class="line">  backupFilePrefix: <span class="string">'/cnpm/backup/'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * database config</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">//配置数据库连接信息</span></span><br><span class="line">  database: &#123;</span><br><span class="line">    db: <span class="string">'cnpm'</span>,</span><br><span class="line">    username: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the sql dialect of the database</span></span><br><span class="line">    <span class="comment">// - currently supported: 'mysql', 'sqlite', 'postgres', 'mariadb'</span></span><br><span class="line">    dialect: <span class="string">'mysql'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// custom host; default: 127.0.0.1</span></span><br><span class="line">    host: <span class="string">'192.168.1.12'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// custom port; default: 3306</span></span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use pooling in order to reduce db connection overload and to increase speed</span></span><br><span class="line">    <span class="comment">// currently only for mysql and postgresql (since v1.5.0)</span></span><br><span class="line">    pool: &#123;</span><br><span class="line">      maxConnections: <span class="number">10</span>,</span><br><span class="line">      minConnections: <span class="number">0</span>,</span><br><span class="line">      maxIdleTime: <span class="number">30000</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the storage engine for 'sqlite'</span></span><br><span class="line">    <span class="comment">// default store into ~/.cnpmjs.org/data.sqlite</span></span><br><span class="line">    storage: path.join(dataDir, <span class="string">'data.sqlite'</span>),</span><br><span class="line"></span><br><span class="line">    logging: !!process.env.SQL_DEBUG,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// package tarball store in local filesystem by default</span></span><br><span class="line">  nfs: <span class="built_in">require</span>(<span class="string">'fs-cnpm'</span>)(&#123;</span><br><span class="line">    dir: path.join(dataDir, <span class="string">'nfs'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// if set true, will 302 redirect to `nfs.url(dist.key)`</span></span><br><span class="line">  downloadRedirectToNFS: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// registry url name</span></span><br><span class="line">  registryHost: <span class="string">'r.cnpmjs.org'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * registry mode config</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// enable private mode or not</span></span><br><span class="line">  <span class="comment">// private mode: only admins can publish, other users just can sync package from source npm</span></span><br><span class="line">  <span class="comment">// public mode: all users can publish</span></span><br><span class="line">  enablePrivate: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// registry scopes, if don't set, means do not support scopes</span></span><br><span class="line">  scopes: [ <span class="string">'@cnpm'</span>, <span class="string">'@cnpmtest'</span>, <span class="string">'@cnpm-test'</span> ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// some registry already have some private packages in global scope</span></span><br><span class="line">  <span class="comment">// but we want to treat them as scoped private packages,</span></span><br><span class="line">  <span class="comment">// so you can use this white list.</span></span><br><span class="line">  privatePackages: [],</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * sync configs</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// the official npm registry</span></span><br><span class="line">  <span class="comment">// cnpm wont directly sync from this one</span></span><br><span class="line">  <span class="comment">// but sometimes will request it for some package infomations</span></span><br><span class="line">  <span class="comment">// please don't change it if not necessary</span></span><br><span class="line">  officialNpmRegistry: <span class="string">'https://registry.npmjs.com'</span>,</span><br><span class="line">  officialNpmReplicate: <span class="string">'https://replicate.npmjs.com'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// sync source, upstream registry</span></span><br><span class="line">  <span class="comment">// If you want to directly sync from official npm's registry</span></span><br><span class="line">  <span class="comment">// please drop them an email first</span></span><br><span class="line">  sourceNpmRegistry: <span class="string">'https://registry.npm.taobao.org'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// upstream registry is base on cnpm/cnpmjs.org or not</span></span><br><span class="line">  <span class="comment">// if your upstream is official npm registry, please turn it off</span></span><br><span class="line">  sourceNpmRegistryIsCNpm: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if install return 404, try to sync from source registry</span></span><br><span class="line">  syncByInstall: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// sync mode select</span></span><br><span class="line">  <span class="comment">// none: do not sync any module, proxy all public modules from sourceNpmRegistry</span></span><br><span class="line">  <span class="comment">// exist: only sync exist modules</span></span><br><span class="line">  <span class="comment">// all: sync all modules</span></span><br><span class="line">  <span class="comment">//配置从仓库同步到本地（重要）</span></span><br><span class="line">  syncModel: <span class="string">'exist'</span>, <span class="comment">// 'none', 'all', 'exist'</span></span><br><span class="line"></span><br><span class="line">  syncConcurrency: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// sync interval, default is 10 minutes</span></span><br><span class="line">  syncInterval: <span class="string">'10m'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// sync polular modules, default to false</span></span><br><span class="line">  <span class="comment">// because cnpm can't auto sync tag change for now</span></span><br><span class="line">  <span class="comment">// so we want to sync popular modules to ensure their tags</span></span><br><span class="line">  syncPopular: <span class="literal">false</span>,</span><br><span class="line">  syncPopularInterval: <span class="string">'1h'</span>,</span><br><span class="line">  <span class="comment">// top 100</span></span><br><span class="line">  topPopular: <span class="number">100</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// sync devDependencies or not, default is false</span></span><br><span class="line">  syncDevDependencies: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// try to remove all deleted versions from original registry</span></span><br><span class="line">  syncDeletedVersions: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// changes streaming sync</span></span><br><span class="line">  syncChangesStream: <span class="literal">false</span>,</span><br><span class="line">  handleSyncRegistry: <span class="string">'http://127.0.0.1:7001'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// badge subject on http://shields.io/</span></span><br><span class="line">  badgePrefixURL: <span class="string">'https://img.shields.io/badge'</span>,</span><br><span class="line">  badgeSubject: <span class="string">'cnpm'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// custom user service, @see https://github.com/cnpm/cnpmjs.org/wiki/Use-Your-Own-User-Authorization</span></span><br><span class="line">  <span class="comment">// when you not intend to ingegrate with your company's user system, then use null, it would</span></span><br><span class="line">  <span class="comment">// use the default cnpm user system</span></span><br><span class="line">  userService: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// always-auth https://docs.npmjs.com/misc/config#always-auth</span></span><br><span class="line">  <span class="comment">// Force npm to always require authentication when accessing the registry, even for GET requests.</span></span><br><span class="line">  alwaysAuth: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if you're behind firewall, need to request through http proxy, please set this</span></span><br><span class="line">  <span class="comment">// e.g.: `httpProxy: 'http://proxy.mycompany.com:8080'`</span></span><br><span class="line">  httpProxy: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// snyk.io root url</span></span><br><span class="line">  snykUrl: <span class="string">'https://snyk.io'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/cnpm/cnpmjs.org/issues/1149</span></span><br><span class="line">  <span class="comment">// if enable this option, must create module_abbreviated and package_readme table in database</span></span><br><span class="line">  <span class="comment">//enableAbbreviatedMetadata: false,</span></span><br><span class="line">  <span class="comment">//配置enableAbbreviatedMetadata为true（默认false）,解决不能同步。重要！</span></span><br><span class="line">  enableAbbreviatedMetadata: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// global hook function: function* (envelope) &#123;&#125;</span></span><br><span class="line">  <span class="comment">// envelope format please see https://github.com/npm/registry/blob/master/docs/hooks/hooks-payload.md#payload</span></span><br><span class="line">  globalHook: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  opensearch: &#123;</span><br><span class="line">    host: <span class="string">''</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'test'</span>) &#123;</span><br><span class="line">  config.enableAbbreviatedMetadata = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'test'</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> customConfig;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    customConfig = path.join(root, <span class="string">'config'</span>, <span class="string">'config.js'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 1. try to load `$dataDir/config.json` first, not exists then goto 2.</span></span><br><span class="line">    <span class="comment">// 2. load config/config.js, everything in config.js will cover the same key in index.js</span></span><br><span class="line">    customConfig = path.join(dataDir, <span class="string">'config.json'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(customConfig)) &#123;</span><br><span class="line">      customConfig = path.join(root, <span class="string">'config'</span>, <span class="string">'config.js'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(customConfig)) &#123;</span><br><span class="line">    copy(<span class="built_in">require</span>(customConfig)).override(config);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mkdirp.sync(config.logdir);</span><br><span class="line">mkdirp.sync(config.uploadDir);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br><span class="line"></span><br><span class="line">config.loadConfig = <span class="function"><span class="keyword">function</span> (<span class="params">customConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!customConfig) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  copy(customConfig).override(config);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="5、启动服务"><a href="#5、启动服务" class="headerlink" title="5、启动服务"></a>5、启动服务</h2><p>搞好配置之后就可以直接启动服务了。<br><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">node</span> <span class="title">dispatch</span>.js</span><br></pre></td></tr></table></figure></p>
<h3 id="官方脚本启动"><a href="#官方脚本启动" class="headerlink" title="官方脚本启动"></a>官方脚本启动</h3><p>官方的其它一些指令，比如你可以用 NPM 的 script 来运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run start</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 CNPM 里面，npm script 还有下面几种指令</p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> dev：调试模式启动；</span></span><br><span class="line"><span class="bash">npm run <span class="built_in">test</span>：跑测试；</span></span><br><span class="line"><span class="bash">npm run start：启动 CNPM；</span></span><br><span class="line"><span class="bash">npm run status：查看 CNPM 启动状态；</span></span><br><span class="line"><span class="bash">npm run stop：停止 CNPM。</span></span><br></pre></td></tr></table></figure>
<h2 id="6、访问cnpm"><a href="#6、访问cnpm" class="headerlink" title="6、访问cnpm"></a>6、访问cnpm</h2><p><a href="http://192.168.1.12:7002/" target="_blank" rel="noopener">http://192.168.1.12:7002/</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/npm私库部署-cnpmjs/1571815419116.png" alt="图3"></p>
<h1 id="二、问题总结"><a href="#二、问题总结" class="headerlink" title="二、问题总结"></a>二、问题总结</h1><h2 id="问题1：安装cnmp依赖问题"><a href="#问题1：安装cnmp依赖问题" class="headerlink" title="问题1：安装cnmp依赖问题"></a>问题1：安装cnmp依赖问题</h2><p>npm 默认使用官方源（国外），速度慢,已报错；可以安装cnpm，使用cnpm install安装（淘宝源）</p>
<p>Default</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装cnpm</span></span><br><span class="line"> <span class="symbol">$</span> npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"><span class="comment">//使用cnpm执行安装依赖命令</span></span><br><span class="line"> <span class="symbol">$</span> cnpm install</span><br></pre></td></tr></table></figure>
<h2 id="问题2：设置同步后报错"><a href="#问题2：设置同步后报错" class="headerlink" title="问题2：设置同步后报错"></a>问题2：设置同步后报错</h2><p>设置同步后，syncModel设置为exist或all,通过仓库下载模块报如下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[c#</span><span class="bash">0] [error] [connect] sync error: TypeError: Cannot <span class="built_in">read</span> property ‘findAll’ of null</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong></p>
<p>在index.js文件内设置enableAbbreviatedMetadata: true，问题解决。</p>
<p>参考：<a href="https://github.com/cnpm/cnpmjs.org/issues/1236" target="_blank" rel="noopener">https://github.com/cnpm/cnpmjs.org/issues/1236</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>私有仓库</tag>
        <tag>cnpmjs</tag>
      </tags>
  </entry>
  <entry>
    <title>批处理文件小技巧</title>
    <url>/2018/08/16/%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-批处理-多服务多窗口"><a href="#1-批处理-多服务多窗口" class="headerlink" title="1 批处理|多服务多窗口"></a>1 批处理|多服务多窗口</h1><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off  </span><br><span class="line"><span class="built_in">start</span> <span class="built_in">cmd</span> /k "d:&amp;&amp;<span class="built_in">cd</span> d:\<span class="number">123</span>&amp;&amp;<span class="built_in">echo</span> 这是一个窗口&amp;&amp;<span class="built_in">pause</span>&amp;&amp;<span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">3</span>&amp;&amp;<span class="built_in">ping</span> <span class="number">172</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">10</span>"  </span><br><span class="line"><span class="built_in">start</span> <span class="built_in">cmd</span> /k "d:&amp;&amp;<span class="built_in">cd</span> d:\<span class="number">321</span>&amp;&amp;<span class="built_in">echo</span> 这是另一个窗口&amp;&amp;<span class="built_in">pause</span>&amp;&amp;<span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">20</span>"</span><br></pre></td></tr></table></figure>
<p>#参数说明<br>1、start     用来启动一个应用<br>2、cmd /k    表示cmd后面的命令执行完后不关闭窗口。如果要在执行完成后关闭窗口可以用/c 。详细请使用cmd/?查看<br>3、”命令1&amp;&amp;命令2&amp;&amp;..”     将要执行的多条命令使用引号全部包起来，并且在命令间用&amp;&amp;分隔。如果只有一条命令则不用引号也可以。</p>
<h1 id="2-批处理-choice的使用示例"><a href="#2-批处理-choice的使用示例" class="headerlink" title="2 批处理|choice的使用示例"></a>2 批处理|choice的使用示例</h1><p><strong>示例1：</strong><br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line">::设置<span class="built_in">CMD</span>窗口字体颜色为<span class="number">0</span>a 在<span class="built_in">CMD</span>中输入命令 <span class="built_in">color</span> /? 可查看颜色列表</span><br><span class="line"><span class="built_in">color</span> <span class="number">0</span>a</span><br><span class="line">::设置<span class="built_in">CMD</span>窗口显示模式为<span class="number">100</span>列宽 <span class="number">20</span>行高</span><br><span class="line"><span class="built_in">MODE</span> <span class="built_in">con</span>: COLS=<span class="number">100</span> LINES=<span class="number">20</span></span><br><span class="line"><span class="built_in">echo</span>  -------------------</span><br><span class="line"><span class="built_in">echo</span>    choice 命令示例</span><br><span class="line"><span class="built_in">echo</span>  -------------------</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">:: /c按键列表 /m提示内容 /d默认选择 /t等待秒数   /d 必须和 /t同时出现</span><br><span class="line">choice  /c abcde /m "请输入" /d e /t <span class="number">5</span></span><br><span class="line"> </span><br><span class="line">::用户选择的结果会按项目序号数字（从<span class="number">1</span>开始）返回在<span class="keyword">errorlevel</span>变量中</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">1</span> <span class="built_in">echo</span> 你选择了a</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">2</span> <span class="built_in">echo</span> 你选择了b</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">3</span> <span class="built_in">echo</span> 你选择了c</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">4</span> <span class="built_in">echo</span> 你选择了d</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">5</span> <span class="built_in">echo</span> 你选择了e</span><br></pre></td></tr></table></figure></p>
<p><strong>示例2：</strong></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> ***安装并启动mysql请输入<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> ***启动Tomcat请输入<span class="number">2</span></span><br><span class="line"><span class="built_in">echo</span> *******************************************</span><br><span class="line"><span class="built_in">echo</span> 备注：</span><br><span class="line"><span class="built_in">echo</span> <span class="number">1</span>.通过关闭tomcat运行窗口关闭Tomcat###</span><br><span class="line"><span class="built_in">echo</span> <span class="number">2</span>.以下为mysql启动及关闭操作###</span><br><span class="line"><span class="built_in">echo</span> *******************************************</span><br><span class="line"><span class="built_in">echo</span> ***启动mysql请输入<span class="number">3</span></span><br><span class="line"><span class="built_in">echo</span> ***关闭mysql请输入<span class="number">4</span></span><br><span class="line"></span><br><span class="line">choice /C <span class="number">1234</span> /m ""</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">1</span> <span class="keyword">goto</span> installmysql</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">2</span> <span class="keyword">goto</span> starttomcat</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">3</span> <span class="keyword">goto</span> startmysql</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">4</span> <span class="keyword">goto</span> stopmysql</span><br><span class="line">:installmysql</span><br><span class="line"><span class="built_in">echo</span> "设置Mysql环境变量"</span><br><span class="line">setx <span class="built_in">PATH</span> "<span class="variable">%PATH%</span>;D:\iwhereEarth\mysql-<span class="number">5</span>.<span class="number">6</span>.<span class="number">39</span>-winx64\bin" /m</span><br><span class="line"><span class="built_in">echo</span> "设置Mysql环境变量成功"</span><br><span class="line"><span class="built_in">echo</span> "安装MYSQL"</span><br><span class="line"><span class="built_in">pushd</span> D:\iwhereEarth\mysql-<span class="number">5</span>.<span class="number">6</span>.<span class="number">39</span>-winx64\bin</span><br><span class="line">mysqld install</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql</span><br><span class="line"><span class="built_in">echo</span> "Mysql安装并启动成功"</span><br><span class="line"><span class="keyword">goto</span> end</span><br><span class="line">:starttomcat</span><br><span class="line"><span class="built_in">echo</span> "启动Tomcat"</span><br><span class="line"><span class="built_in">start</span> <span class="built_in">cmd</span> /k "d:&amp;&amp;<span class="built_in">cd</span> D:\iwhereEarth\apache-tomcat-<span class="number">7</span>.<span class="number">0</span>.<span class="number">63</span>\bin&amp;&amp;<span class="built_in">echo</span> Tomcat运行窗口&amp;&amp;catalina.bat run"</span><br><span class="line"><span class="keyword">goto</span> end</span><br><span class="line">:startmysql</span><br><span class="line"><span class="built_in">pushd</span> D:\iwhereEarth\mysql-<span class="number">5</span>.<span class="number">6</span>.<span class="number">39</span>-winx64\bin</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql</span><br><span class="line"><span class="keyword">goto</span> end</span><br><span class="line">:stopmysql</span><br><span class="line"><span class="built_in">pushd</span> D:\iwhereEarth\mysql-<span class="number">5</span>.<span class="number">6</span>.<span class="number">39</span>-winx64\bin</span><br><span class="line"><span class="built_in">net</span> stop mysql</span><br><span class="line"><span class="keyword">goto</span> end</span><br><span class="line">:end</span><br><span class="line"><span class="built_in">echo</span>.&amp;<span class="built_in">pause</span></span><br></pre></td></tr></table></figure>
<h1 id="3-批处理-脚本设置环境变量"><a href="#3-批处理-脚本设置环境变量" class="headerlink" title="3 批处理|脚本设置环境变量"></a>3 批处理|脚本设置环境变量</h1><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">::<span class="built_in">set</span> system environment variable</span><br><span class="line"></span><br><span class="line">::<span class="built_in">set</span> ant environment variable</span><br><span class="line">setx ANT_HOME E:\tools\apache-ant-<span class="number">1</span>.<span class="number">9</span>.<span class="number">0</span> /m</span><br><span class="line">setx <span class="built_in">PATH</span> "<span class="variable">%PATH%</span>;<span class="variable">%ANT_HOME%</span>\BIN" /m</span><br><span class="line"></span><br><span class="line">::<span class="built_in">set</span> android environment variable</span><br><span class="line">SETX ANDROID_HOME E:\android\android-sdk-windows /m</span><br><span class="line">SETX <span class="built_in">PATH</span> "<span class="variable">%PATH;%</span>ANDROID_HOME%\platform-tools" /m</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> "设置成功"</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<h1 id="4-批处理-局域网备份"><a href="#4-批处理-局域网备份" class="headerlink" title="4 批处理|局域网备份"></a>4 批处理|局域网备份</h1><h2 id="4-1-环境"><a href="#4-1-环境" class="headerlink" title="4.1 环境"></a>4.1 环境</h2><p>windows server 2000 (理论上可以用于所有windows)</p>
<h2 id="4-2-问题说明"><a href="#4-2-问题说明" class="headerlink" title="4.2 问题说明"></a>4.2 问题说明</h2><p>创建以下批处理bat文件，拷贝文件及移动文件到指定位置，Z盘为网络映射盘符。</p>
<p>添加计划任务，定时执行脚本。任务执行时，显示执行完成，但bat文件中脚本命令并没有执行。根据网上方法另存为<code>ANSI</code>编码文件；添加执行用户及密码，都不行。最后在一篇文章中找到方法。</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">echo ****#####start备份#####**** &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br><span class="line">xcopy d:<span class="symbol">\u</span>sr<span class="symbol">\s</span>ap<span class="symbol">\*</span>.* z:<span class="symbol">\s</span>ap<span class="symbol">\D</span> /E /H /R /Y /I /d &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br><span class="line">echo <span class="variable">%date%</span>."success backup d sap" &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br><span class="line">move /Y H:<span class="symbol">\b</span>ackup<span class="symbol">\*</span>.* z:<span class="symbol">\s</span>ap<span class="symbol">\d</span>atabase &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br><span class="line">echo <span class="variable">%date%</span>."success move databackup files" &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br></pre></td></tr></table></figure>
<h2 id="4-3-问题解决"><a href="#4-3-问题解决" class="headerlink" title="4.3 问题解决"></a>4.3 问题解决</h2><h3 id="4-3-1-参考资料"><a href="#4-3-1-参考资料" class="headerlink" title="4.3.1 参考资料"></a>4.3.1 参考资料</h3><p><a href="http://blog.csdn.net/tzysf/article/details/51302039" target="_blank" rel="noopener">http://blog.csdn.net/tzysf/article/details/51302039</a></p>
<p><a href="https://social.microsoft.com/Forums/zh-CN/cc080642-9368-467a-b781-d108f1d6c214/windows-server-2003-scheduled-taskbat?forum=windowsxpzhchs" target="_blank" rel="noopener">https://social.microsoft.com/Forums/zh-CN/cc080642-9368-467a-b781-d108f1d6c214/windows-server-2003-scheduled-taskbat?forum=windowsxpzhchs</a></p>
<h3 id="4-3-2-处理方法"><a href="#4-3-2-处理方法" class="headerlink" title="4.3.2 处理方法"></a>4.3.2 处理方法</h3><p>在脚本开头添加如下命令</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">NET USE Z: \\XXX<span class="selector-class">.XXX</span><span class="selector-class">.XXX</span><span class="selector-class">.XXX</span>\D$\XXXX <span class="string">"Password"</span> /User:<span class="string">"Administrator"</span></span><br></pre></td></tr></table></figure>
<p>例子： <code>NET USE Z: \\172.0.0.22\backup &quot;Password&quot; /User:&quot;Administrator&quot;</code></p>
<blockquote>
<p><code>Z</code>:    #网络映射启动器盘符</p>
<p><code>172.0.0.22</code>   #网络映射远程主机的ip地址</p>
<p><code>Password   和Administrator</code>    #连接远程网络驱动器的用户名、密码（远程主机的授权账户密码）</p>
</blockquote>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">NET USE Z: <span class="symbol">\\</span>172.0.0.22<span class="symbol">\b</span>ackup "Password" /User:"Administrator"</span><br><span class="line">echo ****#####start备份#####**** &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br><span class="line">xcopy d:<span class="symbol">\u</span>sr<span class="symbol">\s</span>ap<span class="symbol">\*</span>.* z:<span class="symbol">\s</span>ap<span class="symbol">\D</span> /E /H /R /Y /I /d &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br><span class="line">echo <span class="variable">%date%</span>."success backup d sap" &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br><span class="line">move /Y H:<span class="symbol">\b</span>ackup<span class="symbol">\*</span>.* z:<span class="symbol">\s</span>ap<span class="symbol">\d</span>atabase &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br><span class="line">echo <span class="variable">%date%</span>."success move databackup files" &gt;&gt;F:<span class="symbol">\s</span>hell<span class="symbol">\d</span>ay1.log</span><br></pre></td></tr></table></figure>
<p>就是在脚本开始，添加连接到驱动器的命令，脚本执行时不知道为什么没有默认确定连接账户密码。</p>
<h1 id="5-在cmd-bat脚本中获取当前脚本文件所在目录"><a href="#5-在cmd-bat脚本中获取当前脚本文件所在目录" class="headerlink" title="5 在cmd/bat脚本中获取当前脚本文件所在目录"></a>5 在cmd/bat脚本中获取当前脚本文件所在目录</h1><p>在xp、2000、2003等系统中都可以正常双击运行。在win7/Win10系统中双击运行时，会以普通用户身份运行，此时所获取的文件路径的确是当前路径，而不是C:\Windows\System32。但是运行到安装netpay_Service.exe -install 的系统服务时，普通用户显然权限是不够的。</p>
<p>   于是在InstllSvc_En.cmd右键选择“以管理员身份运行”，此时又会出问题，win7/win10可能出于安全问题考虑，此时获得的目录是C:\Windows\System32，于是提示netpay_Service.exe命令无效或程序文件不存在，执行出错。</p>
<p>   此时在脚本开始尝试加入命令cd %cd%，来获取当前路径，实验得知，这行语句在xp等系统中有效，但是在win7/win10中依然无效。得到的目录依然是C:\Windows\System32。</p>
<p>   百度一下才知道要使用cd /d %~dp0命令来获取脚本所在的目录。在脚本最开始添加cd /d %~dp0即可，如下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line">netpay_Service.exe -install</span><br><span class="line">netpay_Monitor.exe -install</span><br></pre></td></tr></table></figure>
<p>在Windows XP~Windows 10系统上运行此脚本，确认都没有问题。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>小知识</tag>
        <tag>基础运维</tag>
        <tag>bat</tag>
        <tag>运维开发</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftp部署</title>
    <url>/2018/08/16/vsftp%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="一、安装前的准备"><a href="#一、安装前的准备" class="headerlink" title="一、安装前的准备"></a>一、安装前的准备</h1><h2 id="1、关闭防火墙或者开端口权限。一般是firewalld或者iptables。"><a href="#1、关闭防火墙或者开端口权限。一般是firewalld或者iptables。" class="headerlink" title="1、关闭防火墙或者开端口权限。一般是firewalld或者iptables。"></a>1、关闭防火墙或者开端口权限。一般是firewalld或者iptables。</h2><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
<!--more-->
<p>防火墙配置</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">如果开启防火墙，请开放<span class="number">21</span>端口，被动模式下设置最大和最小端口范围，并在防火墙开放端口范围。</span><br><span class="line"></span><br><span class="line">修改vsftpd.conf文件，添加</span><br><span class="line"></span><br><span class="line">pasv_min_port=<span class="number">8022</span>          <span class="comment">#最小端口</span></span><br><span class="line">pasv_max_port=<span class="number">8030</span>         <span class="comment">#最大端口</span></span><br><span class="line">pasv_promiscuous=YES      <span class="comment">#开启pasv（被动模式）</span></span><br><span class="line"></span><br><span class="line">放开<span class="number">21</span>端口：firewall-<span class="keyword">cmd</span><span class="bash"> –zone=public –add-port=21/tcp –permanent</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">放开8022-8030端口：firewall-cmd –zone=public –add-port=8022-8030/tcp –permanent</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">重新加载防火墙：firewall-cmd –reload</span></span><br><span class="line"><span class="bash">可能用到的命令：</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">永久开放 ftp 服務：firewall-cmd –add-service=ftp –permanent (关闭ftp服务：firewall-cmd –remove-service=ftp –permanent) （验证不起作用）</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">systemctl start firewalld 启动防火墙服务</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">firewall-cmd –add-service=ftp 暂时开放ftp服务</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">firewall-cmd –add-service=ftp –permanent永久开放ftp服務</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">firewall-cmd –remove-service=ftp –permanent永久关闭ftp服務</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">systemctl restart firewalld 重启firewalld服务</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">firewall-cmd –reload 重载配置文件</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">firewall-cmd –query-service ftp查看服务的启动状态</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">firewall-cmd –list-all    显示防火墙应用列表</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">firewall-cmd –add-port=8001/tcp    添加自定义的开放端口</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">iptables -L -n | grep 21 查看设定是否生效</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">firewall-cmd –state 检测防火墙状态</span></span><br></pre></td></tr></table></figure>
<h2 id="2、关闭sellinux"><a href="#2、关闭sellinux" class="headerlink" title="2、关闭sellinux"></a>2、关闭sellinux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时关闭</span></span><br><span class="line">$ setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久关闭</span></span><br><span class="line">$ vi /etc/selinux/config</span><br><span class="line">修改</span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否关闭</span></span><br><span class="line">$ getenforce</span><br></pre></td></tr></table></figure>
<h1 id="二、安装vsftpd"><a href="#二、安装vsftpd" class="headerlink" title="二、安装vsftpd"></a>二、安装vsftpd</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y vsftpd</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ systemctl start vsftpd</span><br><span class="line"><span class="comment"># 自启</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> vsftpd</span><br></pre></td></tr></table></figure>
<h1 id="三、配置vsftpd"><a href="#三、配置vsftpd" class="headerlink" title="三、配置vsftpd"></a>三、配置vsftpd</h1><p>创建vsftpd使用的系统用户，主目录为/home/vsftpd，禁止ssh登录。创建之后所有虚拟用户使用这个系统用户访问文件。<br>useradd vsftpd -d /home/vsftpd -s /bin/false</p>
<h2 id="方式一、虚拟用户配置"><a href="#方式一、虚拟用户配置" class="headerlink" title="方式一、虚拟用户配置"></a>方式一、虚拟用户配置</h2><h3 id="1、创建虚拟用户主目录，比如虚拟用户叫ftp1，执行下面的命令。"><a href="#1、创建虚拟用户主目录，比如虚拟用户叫ftp1，执行下面的命令。" class="headerlink" title="1、创建虚拟用户主目录，比如虚拟用户叫ftp1，执行下面的命令。"></a>1、创建虚拟用户主目录，比如虚拟用户叫ftp1，执行下面的命令。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /home/vsftpd/ftp1</span><br></pre></td></tr></table></figure>
<h3 id="2、创建这个虚拟用户"><a href="#2、创建这个虚拟用户" class="headerlink" title="2、创建这个虚拟用户"></a>2、创建这个虚拟用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /etc/vsftpd/loginusers.conf</span><br><span class="line">增加</span><br><span class="line"></span><br><span class="line">ftp1</span><br><span class="line">123456</span><br><span class="line"><span class="comment"># 这样就创建了ftp1这个虚拟用户，密码为123456</span></span><br></pre></td></tr></table></figure>
<h3 id="3、根据这个文件创建数据库文件"><a href="#3、根据这个文件创建数据库文件" class="headerlink" title="3、根据这个文件创建数据库文件"></a>3、根据这个文件创建数据库文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ db_load -T -t <span class="built_in">hash</span> -f /etc/vsftpd/loginusers.conf /etc/vsftpd/loginusers.db</span><br><span class="line">$ chmod 600 /etc/vsftpd/loginusers.db</span><br></pre></td></tr></table></figure>
<h3 id="4、启用这个数据库文件"><a href="#4、启用这个数据库文件" class="headerlink" title="4、启用这个数据库文件"></a>4、启用这个数据库文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /etc/pam.d/vsftpd</span><br><span class="line">注释掉所有内容后，增加下面的内容</span><br><span class="line"></span><br><span class="line">auth    sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/loginusers</span><br><span class="line">account sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/loginusers</span><br></pre></td></tr></table></figure>
<h3 id="5、创建虚拟用户配置文件"><a href="#5、创建虚拟用户配置文件" class="headerlink" title="5、创建虚拟用户配置文件"></a>5、创建虚拟用户配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /etc/vsftpd/userconf</span><br><span class="line">这里的文件名称必须与虚拟用户名一致</span><br><span class="line"></span><br><span class="line">$ vi /etc/vsftpd/userconf/ftp1</span><br><span class="line">增加下面的内容</span><br><span class="line">local_root=/home/vsftpd/ftp1/   <span class="comment"># 设定主目录为/home/vsftpd/ftp1；虚拟用户的根目录(根据实际修改)</span></span><br><span class="line">write_enable=YES            <span class="comment"># 开启写权限</span></span><br><span class="line">anon_umask=022             <span class="comment"># 设定上传后文件的权限掩码。</span></span><br><span class="line">anon_world_readable_only=NO </span><br><span class="line">anon_upload_enable=YES </span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br></pre></td></tr></table></figure>
<h3 id="6、最后修改主配置文件"><a href="#6、最后修改主配置文件" class="headerlink" title="6、最后修改主配置文件"></a>6、最后修改主配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="comment"># 更改</span></span><br><span class="line">anonymous_enable=NO       <span class="comment">#设定不允许匿名访问</span></span><br><span class="line">local_enable=YES         <span class="comment">#设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为NO的情况下所有虚拟用户将无法访问。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉注释</span></span><br><span class="line">chroot_local_user=YES        <span class="comment"># 禁止本地用户访问除主目录以外的目录</span></span><br><span class="line">chroot_list_enable=YES       <span class="comment">#使用户不能离开主目录</span></span><br><span class="line">ascii_upload_enable=YES      <span class="comment">#允许使用ASCII模式上传</span></span><br><span class="line">ascii_download_enable=YES    <span class="comment">#设定支持ASCII模式的上传和下载功能。</span></span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/vsftpd.log  <span class="comment">#设定vsftpd的服务日志保存路径。注意，该文件默认不存在。必须要手动touch出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加</span></span><br><span class="line">guest_enable=YES       <span class="comment"># 设定启用虚拟用户功能。</span></span><br><span class="line">guest_username=vsftpd    <span class="comment"># 指定虚拟用户的宿主用户。centos 里面已经有内置的ftp用户了（注：此用户在chroot_list_file=/etc/vsftpd/chroot_list文件里所指定的用户）-RHEL/CentOS中已经有内置的ftp用户了</span></span><br><span class="line">user_config_dir=/etc/vsftpd/userconf   <span class="comment"># 设定虚拟用户个人vsftp的RHEL/CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名=虚拟用户名)</span></span><br><span class="line">allow_writeable_chroot=YES <span class="comment"># 最新版的vsftpd为了安全必须使用用户主目录（也就是/home/vsftpd/ftp1）没有写权限，才能登录，或者使用allow_writeable_chroot=YES</span></span><br></pre></td></tr></table></figure>
<p>配置介绍：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">anonymous_enable</span>=<span class="literal">NO</span> 禁止匿名用户登录</span><br><span class="line"><span class="attribute">chroot_local_user</span>=<span class="literal">YES</span> # 禁止用户访问除主目录以外的目录</span><br><span class="line"><span class="attribute">ascii_upload_enable</span>=<span class="literal">YES</span> <span class="attribute">ascii_download_enable</span>=<span class="literal">YES</span> 设定支持ASCII模式的上传和下载功能</span><br><span class="line"><span class="attribute">guest_enable</span>=<span class="literal">YES</span> 启动虚拟用户</span><br><span class="line"><span class="attribute">guest_username</span>=vsftpd 虚拟用户使用的系统用户名</span><br><span class="line"><span class="attribute">user_config_dir</span>=/etc/vsftpd/userconf 虚拟用户使用的配置文件目录</span><br><span class="line"><span class="attribute">allow_writeable_chroot</span>=<span class="literal">YES</span> 最新版的vsftpd为了安全必须用户主目录（也就是/home/vsftpd/ftp1）没有写权限，才能登录，或者使用<span class="attribute">allow_writeable_chroot</span>=<span class="literal">YES</span></span><br><span class="line">最后重启服务使配置生效</span><br><span class="line">systemctl restart vsftpd</span><br><span class="line">备注：设置ftp1目录权限为vsftpd,  chown -R vsftpd:vsftpd /home/vsftpd/ftp1,否则没有权限创建目录等写的权限，设置777权限也不行。</span><br></pre></td></tr></table></figure>
<h2 id="方式二、本地用户配置"><a href="#方式二、本地用户配置" class="headerlink" title="方式二、本地用户配置"></a>方式二、本地用户配置</h2><p>配置 FTP 权限</p>
<h3 id="1、了解-VSFTP-配置"><a href="#1、了解-VSFTP-配置" class="headerlink" title="1、了解 VSFTP 配置"></a>1、了解 VSFTP 配置</h3><p>vsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件：</p>
<p>vsftpd.conf 为主要配置文件</p>
<p>ftpusers 配置禁止访问 FTP 服务器的用户列表</p>
<p>user_list 配置用户访问控制——这里的用户默认情况（即在/etc/vsftpd/vsftpd.conf中设置了userlist_deny=YES）下也不能访问FTP服务器</p>
<h3 id="2、阻止匿名访问和切换根目录"><a href="#2、阻止匿名访问和切换根目录" class="headerlink" title="2、阻止匿名访问和切换根目录"></a>2、阻止匿名访问和切换根目录</h3><p>匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁用匿名用户访问  YES 改为NO </span></span><br><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">NO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止本地用户登出自己的FTP主目录。</span></span><br><span class="line"><span class="attr">chroot_local_user</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure>
<h3 id="3、修改默认根目录"><a href="#3、修改默认根目录" class="headerlink" title="3、修改默认根目录"></a>3、修改默认根目录</h3><p>修改ftp的根目录只要修改/etc/vsftpd/vsftpd.conf文件即可：</p>
<p>加入如下几行：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_root</span>=/var/www/html</span><br><span class="line"><span class="attr">chroot_local_user</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_root</span>=/var/www/html</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：local_root 针对系统用户；anon_root 针对匿名用户。</p>
</blockquote>
<p>编辑完成后保存配置，重新启动 FTP 服务 service vsftpd restart</p>
<p>其它配置项说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anonymous_enable=YES <span class="comment">#允许匿名登陆</span></span><br><span class="line"></span><br><span class="line">local_enable=YES <span class="comment"># 开启本地用户访问</span></span><br><span class="line"></span><br><span class="line">write_enable=YES <span class="comment"># ftp写的权限</span></span><br><span class="line"></span><br><span class="line">local_umask=022 <span class="comment"># 设定上传后文件的权限掩码。</span></span><br><span class="line"></span><br><span class="line">dirmessage_enable=YES <span class="comment">#连接打印的消息</span></span><br><span class="line"></span><br><span class="line">connect_from_port_20=YES <span class="comment"># 连接端口20端口</span></span><br><span class="line"></span><br><span class="line">xferlog_std_format=YES</span><br><span class="line"></span><br><span class="line">idle_session_timeout=600</span><br><span class="line"></span><br><span class="line">data_connection_timeout=300</span><br><span class="line"></span><br><span class="line">accept_timeout=60</span><br><span class="line"></span><br><span class="line">connect_timeout=60</span><br><span class="line"></span><br><span class="line">ascii_upload_enable=YES <span class="comment">#上传</span></span><br><span class="line"></span><br><span class="line">ascii_download_enable=YES <span class="comment">#下载</span></span><br><span class="line"></span><br><span class="line">chroot_local_user=NO <span class="comment">#是否限制用户在主目录活动</span></span><br><span class="line"></span><br><span class="line">chroot_list_enable=YES <span class="comment">#启动限制用户的列表</span></span><br><span class="line"></span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list <span class="comment">#每行一个用户名</span></span><br><span class="line"></span><br><span class="line">allow_writeable_chroot=YES <span class="comment">#允许写</span></span><br><span class="line"></span><br><span class="line">listen=NO</span><br><span class="line"></span><br><span class="line">listen_ipv6=YES</span><br><span class="line"></span><br><span class="line">pasv_min_port=50000 允许ftp工具访问的端口起止端口</span><br><span class="line"></span><br><span class="line">pasv_max_port=60000</span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd <span class="comment">#配置虚拟用户需要的</span></span><br><span class="line"></span><br><span class="line">userlist_enable=NO <span class="comment">#配置yes之后，user_list的用户不能访问ftp</span></span><br><span class="line"></span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line">chroot_list 文件需要自己建,内容一行一个用户名字</span><br><span class="line"></span><br><span class="line">anon_root=/data/ftp/public <span class="comment">#修改匿名用户的访问路径</span></span><br></pre></td></tr></table></figure>
<h3 id="4、-创建-FTP-用户"><a href="#4、-创建-FTP-用户" class="headerlink" title="4、 创建 FTP 用户"></a>4、 创建 FTP 用户</h3><p>新建一个不能登录系统用户. 只用来登录ftp服务 ,这里如果没设置用户目录。默认是在home下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd ftpuser -d /home/vsftpd -s /bin/<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>为ftpuser用户设置密码：passwd ftpuser</p>
<p>可能用到：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">设置用户的主目录：usermod -d /data/ftp ftpuser</span><br><span class="line"></span><br><span class="line">彻底删除用户：<span class="selector-id">#userdel</span> -rf Fuser   <span class="comment">//强制删除用户及相关目录文件</span></span><br><span class="line"></span><br><span class="line">变更用户属性：<span class="selector-id">#usermod</span> -s /sbin/nologinftpuser (/bin/bash：可以登录shell，/bin/false：禁止登录shell )</span><br><span class="line"></span><br><span class="line">查看当前服务：<span class="selector-id">#netstat</span> -lntp</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：需要设置根目录权限为777 ，否则会出现无法写入的问题，chmod 777 /var/www/html</p>
</blockquote>
<h1 id="四、访问FTP"><a href="#四、访问FTP" class="headerlink" title="四、访问FTP"></a>四、访问FTP</h1><p>通过 FTP 客户端工具访问</p>
<p>FTP 客户端工具众多，下面推荐两个常用的：</p>
<p>WinSCP– Windows 下的 FTP 和 SFTP 连接客户端</p>
<p>FileZilla – 跨平台的 FTP 客户端，支持 Windows 和 Mac</p>
<p>本人测试时使用的是Xftp</p>
<p>打开Xftp软件，新建一个会话，输入对应的信息，点击确定(查看ip地址：ip addr)</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815548247.png" alt="图1"></p>
<p>选中我们新建的会话，点击连接</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815579712.png" alt="图2"></p>
<p>连接成功后就可以使用Xftp上传文件了<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815590921.png" alt="图3"></p>
<h1 id="五、要使用Xshell连接，则需要安装openssh-service"><a href="#五、要使用Xshell连接，则需要安装openssh-service" class="headerlink" title="五、要使用Xshell连接，则需要安装openssh-service"></a>五、要使用Xshell连接，则需要安装openssh-service</h1><p>查看是否安装ssh安装包，CentOS是被访问者，所以需要安装ssh-server安装包（如果没任何输出显示表示没有安装 openssh-server，可以通过输入</p>
<p>yum install openssh-serve进行安装），查看命令为：rpm -qa | grep ssh，如下图所示，已经安装：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815607016.png" alt="图4"></p>
<p>找到/etc/ssh目录下的sshd_config文件，修改一些参数。去掉端口和监听地址的注释；然后允许远程登录；再开启使用用户名密码作为连接验证<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815619716.png" alt="图5"><br>开启sshd服务，service sshd start<br>检查sshd是否开启，ps -e|grep sshd<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815632756.png" alt="图6"><br>或者查看22端口是否被监听，netstat -an | grep 22<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815645363.png" alt="图7"><br>使用Xshell进行连接，打开Xshell软件，新建一个会话，输入对应的信息，点击确定(查看ip地址：ip addr)<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815656729.png" alt="图8"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815673815.png" alt="图9"><br>选中我们新建的会话，点击连接<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815699745.png" alt="图10"><br>连接成功后就可以使用Xshell执行命令了<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp部署/1571815709404.png" alt="图11"></p>
<p>参考：<a href="https://blog.csdn.net/will0532/article/details/79175478" target="_blank" rel="noopener">https://blog.csdn.net/will0532/article/details/79175478</a></p>
<p><a href="https://blog.csdn.net/qq_32786873/article/details/78730303" target="_blank" rel="noopener">https://blog.csdn.net/qq_32786873/article/details/78730303</a></p>
<p><a href="https://www.cnblogs.com/huangye-dream/p/3454595.html" target="_blank" rel="noopener">https://www.cnblogs.com/huangye-dream/p/3454595.html</a></p>
<p><a href="https://blog.csdn.net/yifansj/article/details/72855484" target="_blank" rel="noopener">https://blog.csdn.net/yifansj/article/details/72855484</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>yapi部署</title>
    <url>/2018/08/16/yapi%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="一、在线安装"><a href="#一、在线安装" class="headerlink" title="一、在线安装"></a>一、在线安装</h1><a id="more"></a>
<h2 id="1、安装nodejs"><a href="#1、安装nodejs" class="headerlink" title="1、安装nodejs"></a>1、安装nodejs</h2><p>下载压缩包，设置环境变量，这里不祥述。</p>
<h2 id="2、安装mongodb"><a href="#2、安装mongodb" class="headerlink" title="2、安装mongodb"></a>2、安装mongodb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加yum源</span></span><br><span class="line">$ vim /etc/yum.repos.d/mongodb-3.4.repo</span><br><span class="line"> </span><br><span class="line"><span class="comment">#添加下面的内容，wq保存。 </span></span><br><span class="line"></span><br><span class="line">[mongodb-org-3.4]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/RedHat/<span class="variable">$releasever</span>/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck= 0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装mongodb</span></span><br><span class="line">yum install -y mongodb-org</span><br><span class="line"><span class="comment"># 配置mongod</span></span><br><span class="line"><span class="comment">#启动:</span></span><br><span class="line">$ service mongod start</span><br><span class="line">[root@CENTSVR247 vendors]<span class="comment"># mongo</span></span><br><span class="line">&amp;gt; use admin   <span class="comment">#切换到admin数据库</span></span><br><span class="line">switched to db admin</span><br><span class="line"><span class="comment">#创建dba用户</span></span><br><span class="line">&amp;gt; db.createUser(</span><br><span class="line">... ...   &#123;</span><br><span class="line">... ...     user: <span class="string">"dba"</span>,</span><br><span class="line">... ...     <span class="built_in">pwd</span>: <span class="string">"dba"</span>,</span><br><span class="line">... ...     roles: [ &#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">... ...   &#125;</span><br><span class="line">... ... )</span><br><span class="line"><span class="comment"># 创建yapi数据库</span></span><br><span class="line">use yapi</span><br><span class="line">switched to db yapi</span><br><span class="line">给yapi数据库添加test1用户,权限为读写</span><br><span class="line">db.createUser(</span><br><span class="line">... ...     &#123;</span><br><span class="line">... ...       user: <span class="string">"test1"</span>,</span><br><span class="line">... ...       <span class="built_in">pwd</span>: <span class="string">"test1"</span>,</span><br><span class="line">... ...       roles: [</span><br><span class="line">... ...          &#123; role: <span class="string">"readWrite"</span>, db: <span class="string">"yapi"</span> &#125;  </span><br><span class="line">... ...       ]</span><br><span class="line">... ...     &#125;</span><br><span class="line">... ... )</span><br></pre></td></tr></table></figure>
<h2 id="3、安装Yapi"><a href="#3、安装Yapi" class="headerlink" title="3、安装Yapi"></a>3、安装Yapi</h2><p>官方说明：<a href="https://yapi.ymfe.org/devops/index.html" target="_blank" rel="noopener">https://yapi.ymfe.org/devops/index.html</a></p>
<h3 id="方式一：可视化部署"><a href="#方式一：可视化部署" class="headerlink" title="方式一：可视化部署"></a>方式一：可视化部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br><span class="line">$ yapi server</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/yapi部署/1571815756418.png" alt="图1"><br>根据提示，浏览器访问 http://部署YApi服务器的IP:9090。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/yapi部署/1571815771796.png" alt="图2"></p>
<p>填写完信息后，点击“开始部署”。（大概等待1分钟）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/yapi部署/1571815782516.png" alt="图3"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/yapi部署/1571815791766.png" alt="图4"><br>退出当前状态</p>
<p>CTRL + C</p>
<p> <strong>修改配置</strong></p>
<p>这里我们不急着根据提示进行启动，有些参数我们可以通过修改配置达到。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改config.json</span></span><br><span class="line"></span><br><span class="line">$ vim /root/my-yapi/config.json</span><br><span class="line"> 修改下面的内容（邮箱可以不用163的），wq保存。</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"port"</span>: <span class="string">"80"</span>,</span><br><span class="line">  <span class="string">"adminAccount"</span>: <span class="string">"yizitadmin@yizit.cn"</span>,</span><br><span class="line">  <span class="string">"db"</span>: &#123;</span><br><span class="line">       <span class="string">"servername"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">       <span class="string">"DATABASE"</span>: <span class="string">"yapi"</span>,</span><br><span class="line">       <span class="string">"port"</span>: <span class="string">"27017"</span></span><br><span class="line">   &#125;,</span><br><span class="line">  <span class="string">"mail"</span>: &#123;</span><br><span class="line">       <span class="string">"enable"</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="string">"host"</span>: <span class="string">"smtp.163.com"</span>,</span><br><span class="line">       <span class="string">"port"</span>: 465,</span><br><span class="line">       <span class="string">"from"</span>: <span class="string">"可用于发送邮件的163邮箱"</span>,</span><br><span class="line">       <span class="string">"auth"</span>: &#123;</span><br><span class="line">           <span class="string">"user"</span>: <span class="string">"163邮箱"</span>,</span><br><span class="line">           <span class="string">"pass"</span>: <span class="string">"163邮箱对应的密码或授权码"</span></span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>启动</strong></p>
<p> 切换到部署目录下</p>
<p>cd /root/my-yapi<br><strong><em>启动服务</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node vendors/server/app.js</span><br></pre></td></tr></table></figure>
<p>由于修改了配置，所以直接访问 http://部署YApi服务器的IP/login。</p>
<p>访问http://部署YApi服务器的IP:3000/login</p>
<p>默认用户密码：<a href="mailto:admin@admin.com" target="_blank" rel="noopener">admin@admin.com</a>               ymfe.org<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/yapi部署/1571815804618.png" alt="图5"></p>
<h3 id="方式二：命令行部署"><a href="#方式二：命令行部署" class="headerlink" title="方式二：命令行部署"></a>方式二：命令行部署</h3><p><strong>安装yapi</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir yapi</span><br><span class="line">$ <span class="built_in">cd</span> yapi</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/YMFE/yapi.git vendors //或者下载 zip 包解压到 vendors 目录</span><br><span class="line">$ cp vendors/config_example.json ./config.json //复制完成后请修改相关配置</span><br><span class="line">$ <span class="built_in">cd</span> vendors</span><br><span class="line">$ npm install --production --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><strong>安装pm2</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> vendors</span><br><span class="line">$ npm install -S pm2</span><br></pre></td></tr></table></figure>
<p><strong>初始化及启动yapi</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run install-server //安装程序会初始化数据库索引和管理员账号，管理员账号名可在 config.json 配置</span><br><span class="line">$ node server/app.js //启动服务器后，请访问 127.0.0.1:&#123;config.json配置的端口&#125;，初次运行会有个编译的过程，请耐心等候</span><br></pre></td></tr></table></figure>
<p><strong>使用pm2启动方式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ npx pm2 start ./server/app.js</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">$ npx pm2 stop all</span><br></pre></td></tr></table></figure>
<h1 id="二、离线安装"><a href="#二、离线安装" class="headerlink" title="二、离线安装"></a>二、离线安装</h1><blockquote>
<p>离线安装只能采用命令行部署方式</p>
</blockquote>
<h2 id="node安装"><a href="#node安装" class="headerlink" title="node安装"></a>node安装</h2><p>不再详述。</p>
<h2 id="内网安装mongodb"><a href="#内网安装mongodb" class="headerlink" title="内网安装mongodb"></a>内网安装mongodb</h2><p>解压mongodb-linux-x86_64-3.6.4.tgz并放入mongodb文件夹中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf mongodb-linux-x86_64-3.6.4.tgz</span><br><span class="line">$ mv mongodb-linux-x86_64-3.6.4 mongodb</span><br></pre></td></tr></table></figure>
<p>把mongodb放入环境变量中, 修改~/.bashrc, 加入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=&amp;lt;mongodb文件夹的路径&amp;gt;/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>验证安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ mongo --version</span><br></pre></td></tr></table></figure>
<p>创建dbdata/db文件夹和dblog文件夹(请自行确保这些文件夹的读写权限)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p dbdata/db</span><br><span class="line">$ mkdir dblog</span><br></pre></td></tr></table></figure>
<p>启动mongodb服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ./mongodb/bin/mongod --fork --dbpath ./dbdata --logpath ./dblog/<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>配置</p>
<p>参考上文mongodb配置。</p>
<h2 id="离线安装yapi"><a href="#离线安装yapi" class="headerlink" title="离线安装yapi"></a>离线安装yapi</h2><p>在一台连接互联网的pc上安装node环境</p>
<p>在外网机器获取yapi源码并安装依赖<br>使用git获取yapi源码, 如果没有git命令请按照对应平台的安装方法安装git.</p>
<p>创建一个新文件夹yapi, 使用clone将yapi源码放入vendors中:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir yapi</span><br><span class="line">$ <span class="built_in">cd</span> yapi</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/YMFE/yapi.git vendors</span><br><span class="line">$ cp vendors/config_example.json ./config.json</span><br><span class="line">$ <span class="built_in">cd</span> vendors</span><br><span class="line">$ npm install --production</span><br></pre></td></tr></table></figure>
<p>我这里还安装了pm2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm n install -S pm2</span><br></pre></td></tr></table></figure>
<p>将创建的yapi文件夹打成压缩包得到yapi.tar.gz(其目录下有config.json和vendors)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -czf yapi.tar.gz yapi</span><br></pre></td></tr></table></figure>
<p>至此, 所有需要外部网络的操作已经完成, 可以进行内网部署.</p>
<h2 id="启动yapi"><a href="#启动yapi" class="headerlink" title="启动yapi"></a>启动yapi</h2><p>解压yapi.tar.gz</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf yapi.tar.gz</span><br></pre></td></tr></table></figure>
<p>按需要修改yapi/config.json中的相关配置(例如管理员账号等)</p>
<p>初始化数据库:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ./yapi/vendors</span><br><span class="line">$ npm run install-server</span><br></pre></td></tr></table></figure>
<p>使用pm2启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx n pm2 start ./server/app.js</span><br></pre></td></tr></table></figure>
<p>启动完成后即可尝试访问yapi看是否成功, 具体地址要根据内网机器的ip和在config.json中配置的端口号</p>
<p>如果要关闭yapi服务, 可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx n pm2 stop all</span><br></pre></td></tr></table></figure>
<h1 id="问题总结："><a href="#问题总结：" class="headerlink" title="问题总结："></a>问题总结：</h1><p>两种方式安装yapi,按照正常方式安装都是无法安装的，有如下错误</p>
<p>方式1图形界面，yapi server 启动9090服务后，页面无法打开，会报错误，原因是无网络。<br>方式2命令行安装，npm install –production 回报git错误，因需要联网git操作，原因无网络，npm使用私库代理也不行。</p>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://yapi.ymfe.org/devops/index.html" target="_blank" rel="noopener">https://yapi.ymfe.org/devops/index.html</a></p>
<p><a href="http://stlighter.github.io/2018/04/19/yapi%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">http://stlighter.github.io/2018/04/19/yapi%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2/</a></p>
<p><a href="https://www.linuxidc.com/Linux/2018-01/150513.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2018-01/150513.htm</a></p>
<p><a href="https://blog.csdn.net/luwei42768/article/details/78919073" target="_blank" rel="noopener">https://blog.csdn.net/luwei42768/article/details/78919073</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>yapi</tag>
        <tag>部署</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker集群WEB管理工具Shipyard</title>
    <url>/2018/08/22/Docker%E9%9B%86%E7%BE%A4WEB%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Shipyard/</url>
    <content><![CDATA[<h1 id="一、-说明"><a href="#一、-说明" class="headerlink" title="一、 说明"></a>一、 说明</h1><a id="more"></a>
<p>Shipyard部署总体较为简单，有一键部署脚本，只需执行相应命令就可以实现部署，但在部署中还是出现很多问题，主要是shipyard官方网站无法访问，无法使用官方一键脚本部署，使用网上找到的修改版，里面有部分内容有所缺失，现已修改。</p>
<h1 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h1><p>centos:7.4</p>
<p>master: 192.168.1.44</p>
<p>node1: 192.168.1.12</p>
<p>node2: 192.168.1.18</p>
<p>docker version: docker-ce-18.03.0-ce</p>
<h1 id="三、安装步骤"><a href="#三、安装步骤" class="headerlink" title="三、安装步骤"></a>三、安装步骤</h1><p>安装之前需要部署好docker环境</p>
<h2 id="1、master节点执行一件部署命令"><a href="#1、master节点执行一件部署命令" class="headerlink" title="1、master节点执行一件部署命令"></a>1、master节点执行一件部署命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 正常直接从官方拉取脚本执行就行了，命令如下</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s https://shipyard-project.com/deploy | bash -s</span></span><br><span class="line"></span><br><span class="line">[root@master ~]# curl -s https://shipyard-project.com/deploy | bash -s</span><br><span class="line">Deploying Shipyard</span><br><span class="line"><span class="meta"> -&gt;</span><span class="bash"> Starting Database</span></span><br><span class="line">Unable to find image 'rethinkdb:latest' locally</span><br><span class="line">Trying to pull repository xxx.mirror.aliyuncs.com/rethinkdb ...</span><br><span class="line">Pulling repository xxx.mirror.aliyuncs.com/rethinkdb</span><br><span class="line">Trying to pull repository docker.io/library/rethinkdb ...</span><br><span class="line">latest: Pulling from docker.io/library/rethinkdb</span><br><span class="line">Digest: sha256:29640c7d5015832c40305ad5dcc5d0996ce79b87f7e32d2fd99c9d65ad9414d4</span><br><span class="line"><span class="meta"> -&gt;</span><span class="bash"> Starting Discovery</span></span><br><span class="line"><span class="meta"> -&gt;</span><span class="bash"> Starting Cert Volume</span></span><br><span class="line"><span class="meta"> -&gt;</span><span class="bash"> Starting Proxy</span></span><br><span class="line"><span class="meta"> -&gt;</span><span class="bash"> Starting Swarm Manager</span></span><br><span class="line"><span class="meta"> -&gt;</span><span class="bash"> Starting Swarm Agent</span></span><br><span class="line"><span class="meta"> -&gt;</span><span class="bash"> Starting Controller</span></span><br><span class="line">Waiting for Shipyard on 192.168.1.44:8080</span><br><span class="line"> </span><br><span class="line">Shipyard available at http://192.168.1.44:8080</span><br><span class="line">Username: admin Password: shipyard</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者下载脚本后本地执行，命令如下</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh deploy</span></span><br></pre></td></tr></table></figure>
<p>执行脚本的时候会自动下载相关镜像，也可以事先下载镜像文件</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# docker</span> pull alpine</span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# docker</span> pull library/rethinkdb</span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# docker</span> pull microbox/etcd</span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# docker</span> pull shipyard/docker-proxy</span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# docker</span> pull swarm</span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# docker</span> pull shipyard/shipyard</span><br></pre></td></tr></table></figure>
<p>通过访问<a href="http://IP：8080登录shipyard,默认帐号密码：admin" target="_blank" rel="noopener">http://IP：8080登录shipyard,默认帐号密码：admin</a>   shipyard<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Docker集群WEB管理工具Shipyard/1571816128407.png" alt="图1"></p>
<h2 id="2、分别在node节点执行如下命令，添加节点到shipyard"><a href="#2、分别在node节点执行如下命令，添加节点到shipyard" class="headerlink" title="2、分别在node节点执行如下命令，添加节点到shipyard"></a>2、分别在node节点执行如下命令，添加节点到shipyard</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署机就是master节点</span></span><br><span class="line">$ curl -sSL https://shipyard-project.com/deploy | <span class="attr">ACTION=</span><span class="keyword">node</span> <span class="title">DISCOVERY</span>=etcd://<span class="tag">&lt;shipyard部署机ip&gt;</span> bash -s</span><br><span class="line"><span class="comment"># 或者通过本地脚本执行命令</span></span><br><span class="line">$ cat deploy | <span class="attr">ACTION=</span><span class="keyword">node</span> <span class="title">DISCOVERY</span>=etcd://<span class="tag">&lt;shipyard部署机ip&gt;</span> bash -s</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Docker集群WEB管理工具Shipyard/1571816145028.png" alt="图2"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Docker集群WEB管理工具Shipyard/1571816154932.png" alt="图3"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Docker集群WEB管理工具Shipyard/1571816168540.png" alt="图4"></p>
<h1 id="四、问题总结"><a href="#四、问题总结" class="headerlink" title="四、问题总结"></a>四、问题总结</h1><h2 id="注意项目1："><a href="#注意项目1：" class="headerlink" title="注意项目1："></a>注意项目1：</h2><p>—————————————————————————————————————<br>上面安装shipyard的脚本是英文版的，其实还有中文版的脚本，下面两种都可以使用：（两个地址都失效）</p>
<p>1）安装shipyard</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -sSL http://dockerclub.net/public/script/deploy | bash -s ==&gt; 中文版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -sSL https://shipyard-project.com/deploy | bash -s ==&gt; 英文版</span></span><br></pre></td></tr></table></figure>
<p>2）添加node节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -sSL http://dockerclub.net/public/script/deploy | ACTION=node DISCOVERY=etcd://&lt;shipyard部署机ip&gt; bash -s ==&gt; 中文版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -sSL https://shipyard-project.com/deploy | ACTION=node DISCOVERY=etcd://&lt;shipyard部署机ip&gt; bash -s ==&gt; 英文版</span></span><br></pre></td></tr></table></figure>
<p>3）删除shipyard（在节点机上执行，就会将节点从shipyard管理里踢出）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl http://dockerclub.net/public/script/deploy | ACTION=remove bash -s ==&gt; 中文版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -sSL https://shipyard-project.com/deploy | ACTION=remove bash -s ==&gt; 英文版</span></span><br></pre></td></tr></table></figure>
<p>—————————————————————————————————————</p>
<p>问题项目2：<br>—————————————————————————————————————</p>
<p>1）安装shipyard前不需要部署swarm集群，一键包已包含集群建设</p>
<p>2）部署后无法发现节点，容器页面报错，意思是到节点IP:3375端口无法建立连接，500错误；根据排查，发现所有节点swarm_manager容器都没有开启3375端口，于是在脚本里面修改</p>
<p>容器启动命令，添加开启3375端口，具体看下方脚本；</p>
<p>3）在shipyard web页面，master自身发现较慢，不知道什么原因</p>
<p>4）中文版shipard创建容器的时候，设置端口映射但不生效，使用英文版没有问题，未发现问题原因</p>
<p>5）shipyard只适合较小规模docker集群，功能上已跟不上现阶段的docker集群需求。</p>
<p>—————————————————————————————————————</p>
<h1 id="deploy脚本"><a href="#deploy脚本" class="headerlink" title="deploy脚本"></a>deploy脚本</h1><p>这个是中文版的脚本，和官方的区别就是修改了shipyard镜像文件，下方标注部分说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> != <span class="string">""</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"-h"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Shipyard Deploy uses the following environment variables:"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  ACTION: this is the action to use (deploy, upgrade, node, remove)"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  DISCOVERY: discovery system used by Swarm (only if using 'node' action)"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  IMAGE: this overrides the default Shipyard image"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  PREFIX: prefix for container names"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  SHIPYARD_ARGS: these are passed to the Shipyard controller container as controller args"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  TLS_CERT_PATH: path to certs to enable TLS for Shipyard"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  PORT: specify the listen port for the controller (default: 8080)"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  IP: specify the address at which the controller or node will be available (default: eth0 ip)"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  PROXY_PORT: port to run docker proxy (default: 2375)"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"`which docker`"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"You must have the Docker CLI installed on your \$PATH"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  See http://docs.docker.com for details"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">ACTION=<span class="variable">$&#123;ACTION:-deploy&#125;</span></span><br><span class="line"><span class="comment">#官方IMAGE=$&#123;IMAGE:-shipyard/shipyard:latest&#125;</span></span><br><span class="line"><span class="comment">#备注官方shipyard:latest标签镜像似乎有问题，实际使用shipyard:master标签镜像</span></span><br><span class="line">IMAGE=<span class="variable">$&#123;IMAGE:-dockerclub/shipyard:latest&#125;</span></span><br><span class="line">PREFIX=<span class="variable">$&#123;PREFIX:-shipyard&#125;</span></span><br><span class="line">SHIPYARD_ARGS=<span class="variable">$&#123;SHIPYARD_ARGS:-""&#125;</span></span><br><span class="line">TLS_CERT_PATH=<span class="variable">$&#123;TLS_CERT_PATH:-&#125;</span></span><br><span class="line">CERT_PATH=<span class="string">"/etc/shipyard"</span></span><br><span class="line">PROXY_PORT=<span class="variable">$&#123;PROXY_PORT:-2375&#125;</span></span><br><span class="line">SWARM_PORT=3375</span><br><span class="line">SHIPYARD_PROTOCOL=http</span><br><span class="line">SHIPYARD_PORT=<span class="variable">$&#123;PORT:-8080&#125;</span></span><br><span class="line">SHIPYARD_IP=<span class="variable">$&#123;IP&#125;</span></span><br><span class="line">DISCOVERY_BACKEND=etcd</span><br><span class="line">DISCOVERY_PORT=4001</span><br><span class="line">DISCOVERY_PEER_PORT=7001</span><br><span class="line">ENABLE_TLS=0</span><br><span class="line">CERT_FINGERPRINT=<span class="string">""</span></span><br><span class="line">LOCAL_CA_CERT=<span class="string">""</span></span><br><span class="line">LOCAL_SSL_CERT=<span class="string">""</span></span><br><span class="line">LOCAL_SSL_KEY=<span class="string">""</span></span><br><span class="line">LOCAL_SSL_CLIENT_CERT=<span class="string">""</span></span><br><span class="line">LOCAL_SSL_CLIENT_KEY=<span class="string">""</span></span><br><span class="line">SSL_CA_CERT=<span class="string">""</span></span><br><span class="line">SSL_CERT=<span class="string">""</span></span><br><span class="line">SSL_KEY=<span class="string">""</span></span><br><span class="line">SSL_CLIENT_CERT=<span class="string">""</span></span><br><span class="line">SSL_CLIENT_KEY=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">show_cert_help</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"To use TLS in Shipyard, you must have existing certificates."</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The certs must be named ca.pem, server.pem, server-key.pem, cert.pem and key.pem"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"If you need to generate certificates, see https://github.com/ehazlett/certm for examples."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_certs</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$TLS_CERT_PATH</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! -e <span class="variable">$TLS_CERT_PATH</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Error: unable to find certificates in <span class="variable">$TLS_CERT_PATH</span>"</span></span><br><span class="line">        show_cert_help</span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$PROXY_PORT</span>"</span> = <span class="string">"2375"</span> ]; <span class="keyword">then</span></span><br><span class="line">        PROXY_PORT=2376</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    SWARM_PORT=3376</span><br><span class="line">    SHIPYARD_PROTOCOL=https</span><br><span class="line">    LOCAL_SSL_CA_CERT=<span class="string">"<span class="variable">$TLS_CERT_PATH</span>/ca.pem"</span></span><br><span class="line">    LOCAL_SSL_CERT=<span class="string">"<span class="variable">$TLS_CERT_PATH</span>/server.pem"</span></span><br><span class="line">    LOCAL_SSL_KEY=<span class="string">"<span class="variable">$TLS_CERT_PATH</span>/server-key.pem"</span></span><br><span class="line">    LOCAL_SSL_CLIENT_CERT=<span class="string">"<span class="variable">$TLS_CERT_PATH</span>/cert.pem"</span></span><br><span class="line">    LOCAL_SSL_CLIENT_KEY=<span class="string">"<span class="variable">$TLS_CERT_PATH</span>/key.pem"</span></span><br><span class="line">    SSL_CA_CERT=<span class="string">"<span class="variable">$CERT_PATH</span>/ca.pem"</span></span><br><span class="line">    SSL_CERT=<span class="string">"<span class="variable">$CERT_PATH</span>/server.pem"</span></span><br><span class="line">    SSL_KEY=<span class="string">"<span class="variable">$CERT_PATH</span>/server-key.pem"</span></span><br><span class="line">    SSL_CLIENT_CERT=<span class="string">"<span class="variable">$CERT_PATH</span>/cert.pem"</span></span><br><span class="line">    SSL_CLIENT_KEY=<span class="string">"<span class="variable">$CERT_PATH</span>/key.pem"</span></span><br><span class="line">    CERT_FINGERPRINT=$(openssl x509 -noout -<span class="keyword">in</span> <span class="variable">$LOCAL_SSL_CERT</span> -fingerprint -sha256 | awk -F= <span class="string">'&#123;print $2;&#125;'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! -e <span class="variable">$LOCAL_SSL_CA_CERT</span> ] || [ ! -e <span class="variable">$LOCAL_SSL_CERT</span> ] || [ ! -e <span class="variable">$LOCAL_SSL_KEY</span> ] || [ ! -e <span class="variable">$LOCAL_SSL_CLIENT_CERT</span> ] || [ ! -e <span class="variable">$LOCAL_SSL_CLIENT_KEY</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Error: unable to find certificates"</span></span><br><span class="line">        show_cert_help</span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    ENABLE_TLS=1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># container functions</span></span><br><span class="line"><span class="function"><span class="title">start_certs</span></span>() &#123;</span><br><span class="line">    ID=$(docker run \</span><br><span class="line">        -ti \</span><br><span class="line">        -d \</span><br><span class="line">        --restart=always \</span><br><span class="line">        --name <span class="variable">$PREFIX</span>-certs \</span><br><span class="line">        -v <span class="variable">$CERT_PATH</span> \</span><br><span class="line">        alpine \</span><br><span class="line">        sh)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$ENABLE_TLS</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">        docker cp <span class="variable">$LOCAL_SSL_CA_CERT</span> <span class="variable">$PREFIX</span>-certs:<span class="variable">$SSL_CA_CERT</span></span><br><span class="line">        docker cp <span class="variable">$LOCAL_SSL_CERT</span> <span class="variable">$PREFIX</span>-certs:<span class="variable">$SSL_CERT</span></span><br><span class="line">        docker cp <span class="variable">$LOCAL_SSL_KEY</span> <span class="variable">$PREFIX</span>-certs:<span class="variable">$SSL_KEY</span></span><br><span class="line">        docker cp <span class="variable">$LOCAL_SSL_CLIENT_CERT</span> <span class="variable">$PREFIX</span>-certs:<span class="variable">$SSL_CLIENT_CERT</span></span><br><span class="line">        docker cp <span class="variable">$LOCAL_SSL_CLIENT_KEY</span> <span class="variable">$PREFIX</span>-certs:<span class="variable">$SSL_CLIENT_KEY</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remove_certs</span></span>() &#123;</span><br><span class="line">    docker rm -fv <span class="variable">$PREFIX</span>-certs &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_ip</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$SHIPYARD_IP</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        SHIPYARD_IP=`docker run --rm --net=host alpine ip route get 8.8.8.8 | awk <span class="string">'&#123; print $7;  &#125;'</span>`</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_discovery</span></span>() &#123;</span><br><span class="line">    get_ip</span><br><span class="line"></span><br><span class="line">    ID=$(docker run \</span><br><span class="line">        -ti \</span><br><span class="line">        -d \</span><br><span class="line">        -p 4001:4001 \</span><br><span class="line">        -p 7001:7001 \</span><br><span class="line">        --restart=always \</span><br><span class="line">        --name <span class="variable">$PREFIX</span>-discovery \</span><br><span class="line">        microbox/etcd:latest -addr <span class="variable">$SHIPYARD_IP</span>:<span class="variable">$DISCOVERY_PORT</span> -peer-addr <span class="variable">$SHIPYARD_IP</span>:<span class="variable">$DISCOVERY_PEER_PORT</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remove_discovery</span></span>() &#123;</span><br><span class="line">    docker rm -fv <span class="variable">$PREFIX</span>-discovery &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_rethinkdb</span></span>() &#123;</span><br><span class="line">    ID=$(docker run \</span><br><span class="line">        -ti \</span><br><span class="line">        -d \</span><br><span class="line">        --restart=always \</span><br><span class="line">        --name <span class="variable">$PREFIX</span>-rethinkdb \</span><br><span class="line">        rethinkdb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remove_rethinkdb</span></span>() &#123;</span><br><span class="line">    docker rm -fv <span class="variable">$PREFIX</span>-rethinkdb &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_proxy</span></span>() &#123;</span><br><span class="line">    TLS_OPTS=<span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$ENABLE_TLS</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">        TLS_OPTS=<span class="string">"-e SSL_CA=<span class="variable">$SSL_CA_CERT</span> -e SSL_CERT=<span class="variable">$SSL_CERT</span> -e SSL_KEY=<span class="variable">$SSL_KEY</span> -e SSL_SKIP_VERIFY=1"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># Note: we add SSL_SKIP_VERIFY=1 to skip verification of the client</span></span><br><span class="line">    <span class="comment"># certificate in the proxy image.  this will pass it to swarm that</span></span><br><span class="line">    <span class="comment"># does verify.  this helps with performance and avoids certificate issues</span></span><br><span class="line">    <span class="comment"># when running through the proxy.  ultimately if the cert is invalid</span></span><br><span class="line">    <span class="comment"># swarm will fail to return.</span></span><br><span class="line">    ID=$(docker run \</span><br><span class="line">        -ti \</span><br><span class="line">        -d \</span><br><span class="line">        -p <span class="variable">$PROXY_PORT</span>:<span class="variable">$PROXY_PORT</span> \</span><br><span class="line">        --hostname=<span class="variable">$HOSTNAME</span> \</span><br><span class="line">        --restart=always \</span><br><span class="line">        --name <span class="variable">$PREFIX</span>-proxy \</span><br><span class="line">        -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">        -e PORT=<span class="variable">$PROXY_PORT</span> \</span><br><span class="line">        --volumes-from=<span class="variable">$PREFIX</span>-certs <span class="variable">$TLS_OPTS</span>\</span><br><span class="line">        shipyard/docker-proxy:latest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remove_proxy</span></span>() &#123;</span><br><span class="line">    docker rm -fv <span class="variable">$PREFIX</span>-proxy &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_swarm_manager</span></span>() &#123;</span><br><span class="line">    get_ip</span><br><span class="line"></span><br><span class="line">    TLS_OPTS=<span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$ENABLE_TLS</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">        TLS_OPTS=<span class="string">"--tlsverify --tlscacert=<span class="variable">$SSL_CA_CERT</span> --tlscert=<span class="variable">$SSL_CERT</span> --tlskey=<span class="variable">$SSL_KEY</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    EXTRA_RUN_OPTS=<span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$DISCOVERY</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        DISCOVERY=<span class="string">"<span class="variable">$DISCOVERY_BACKEND</span>://discovery:<span class="variable">$DISCOVERY_PORT</span>"</span></span><br><span class="line">        EXTRA_RUN_OPTS=<span class="string">"--link <span class="variable">$PREFIX</span>-discovery:discovery"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ID=$(docker run \</span><br><span class="line">        -ti \</span><br><span class="line">        -d \</span><br><span class="line"><span class="comment">#下面3375端口是我出现无法连接节点后自己添加的，问题是启动容器没有开放3375端口</span></span><br><span class="line">        -p 3375:3375 \</span><br><span class="line">        --restart=always \</span><br><span class="line">        --name <span class="variable">$PREFIX</span>-swarm-manager \</span><br><span class="line">        --volumes-from=<span class="variable">$PREFIX</span>-certs <span class="variable">$EXTRA_RUN_OPTS</span> \</span><br><span class="line">        swarm:latest \</span><br><span class="line">        m --replication --addr <span class="variable">$SHIPYARD_IP</span>:<span class="variable">$SWARM_PORT</span> --host tcp://0.0.0.0:<span class="variable">$SWARM_PORT</span> <span class="variable">$TLS_OPTS</span> <span class="variable">$DISCOVERY</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remove_swarm_manager</span></span>() &#123;</span><br><span class="line">    docker rm -fv <span class="variable">$PREFIX</span>-swarm-manager &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_swarm_agent</span></span>() &#123;</span><br><span class="line">    get_ip</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$DISCOVERY</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        DISCOVERY=<span class="string">"<span class="variable">$DISCOVERY_BACKEND</span>://discovery:<span class="variable">$DISCOVERY_PORT</span>"</span></span><br><span class="line">        EXTRA_RUN_OPTS=<span class="string">"--link <span class="variable">$PREFIX</span>-discovery:discovery"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ID=$(docker run \</span><br><span class="line">        -ti \</span><br><span class="line">        -d \</span><br><span class="line">        --restart=always \</span><br><span class="line">        --name <span class="variable">$PREFIX</span>-swarm-agent <span class="variable">$EXTRA_RUN_OPTS</span> \</span><br><span class="line">        swarm:latest \</span><br><span class="line">        j --addr <span class="variable">$SHIPYARD_IP</span>:<span class="variable">$PROXY_PORT</span> <span class="variable">$DISCOVERY</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remove_swarm_agent</span></span>() &#123;</span><br><span class="line">    docker rm -fv <span class="variable">$PREFIX</span>-swarm-agent &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_controller</span></span>() &#123;</span><br><span class="line">    <span class="comment">#-v $CERT_PATH:/etc/docker:ro \</span></span><br><span class="line">    TLS_OPTS=<span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$ENABLE_TLS</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">        TLS_OPTS=<span class="string">"--tls-ca-cert <span class="variable">$SSL_CA_CERT</span> --tls-cert=<span class="variable">$SSL_CERT</span> --tls-key=<span class="variable">$SSL_KEY</span> --shipyard-tls-ca-cert=<span class="variable">$SSL_CA_CERT</span> --shipyard-tls-cert=<span class="variable">$SSL_CERT</span> --shipyard-tls-key=<span class="variable">$SSL_KEY</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    ID=$(docker run \</span><br><span class="line">        -ti \</span><br><span class="line">        -d \</span><br><span class="line">        --restart=always \</span><br><span class="line">        --name <span class="variable">$PREFIX</span>-controller \</span><br><span class="line">        --link <span class="variable">$PREFIX</span>-rethinkdb:rethinkdb \</span><br><span class="line">        --link <span class="variable">$PREFIX</span>-swarm-manager:swarm \</span><br><span class="line">        -p <span class="variable">$SHIPYARD_PORT</span>:<span class="variable">$SHIPYARD_PORT</span> \</span><br><span class="line">        --volumes-from=<span class="variable">$PREFIX</span>-certs \</span><br><span class="line">        <span class="variable">$IMAGE</span> \</span><br><span class="line">        --debug \</span><br><span class="line">        server \</span><br><span class="line">        --listen :<span class="variable">$SHIPYARD_PORT</span> \</span><br><span class="line">        -d tcp://swarm:<span class="variable">$SWARM_PORT</span> <span class="variable">$TLS_OPTS</span> <span class="variable">$SHIPYARD_ARGS</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">wait_for_available</span></span>() &#123;</span><br><span class="line">    <span class="built_in">set</span> +e </span><br><span class="line">    IP=<span class="variable">$1</span></span><br><span class="line">    PORT=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">echo</span> Waiting <span class="keyword">for</span> Shipyard on <span class="variable">$IP</span>:<span class="variable">$PORT</span></span><br><span class="line"></span><br><span class="line">    docker pull ehazlett/curl &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">    TLS_OPTS=<span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$ENABLE_TLS</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">        TLS_OPTS=<span class="string">"-k"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    until $(docker run --rm ehazlett/curl --output /dev/null --connect-timeout 1 --silent --head --fail <span class="variable">$TLS_OPTS</span> <span class="variable">$SHIPYARD_PROTOCOL</span>://<span class="variable">$IP</span>:<span class="variable">$PORT</span>/ &gt; /dev/null 2&gt;&amp;1); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">'.'</span></span><br><span class="line">        sleep 1 </span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">'\n'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remove_controller</span></span>() &#123;</span><br><span class="line">    docker rm -fv <span class="variable">$PREFIX</span>-controller &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$ACTION</span>"</span> = <span class="string">"deploy"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">    check_certs</span><br><span class="line"></span><br><span class="line">    get_ip </span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Deploying Shipyard"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Database"</span></span><br><span class="line">    start_rethinkdb</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Discovery"</span></span><br><span class="line">    start_discovery</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Cert Volume"</span></span><br><span class="line">    start_certs</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Proxy"</span></span><br><span class="line">    start_proxy</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Swarm Manager"</span></span><br><span class="line">    start_swarm_manager</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Swarm Agent"</span></span><br><span class="line">    start_swarm_agent</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Controller"</span></span><br><span class="line">    start_controller</span><br><span class="line"></span><br><span class="line">    wait_for_available <span class="variable">$SHIPYARD_IP</span> <span class="variable">$SHIPYARD_PORT</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Shipyard available at <span class="variable">$SHIPYARD_PROTOCOL</span>://<span class="variable">$SHIPYARD_IP</span>:<span class="variable">$SHIPYARD_PORT</span>"</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$ENABLE_TLS</span> = 1 ] &amp;&amp; [ ! -z <span class="string">"<span class="variable">$CERT_FINGERPRINT</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"SSL SHA-256 Fingerprint: <span class="variable">$CERT_FINGERPRINT</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Username: admin Password: shipyard"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$ACTION</span>"</span> = <span class="string">"node"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$DISCOVERY</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"You must set the DISCOVERY environment variable"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"with the discovery system used with Swarm"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    check_certs</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Adding Node"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Cert Volume"</span></span><br><span class="line">    start_certs</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Proxy"</span></span><br><span class="line">    start_proxy</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Swarm Manager"</span></span><br><span class="line">    start_swarm_manager <span class="variable">$DISCOVERY</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Starting Swarm Agent"</span></span><br><span class="line">    start_swarm_agent</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Node added to Swarm: <span class="variable">$SHIPYARD_IP</span>"</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$ACTION</span>"</span> = <span class="string">"upgrade"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">    check_certs</span><br><span class="line"></span><br><span class="line">    get_ip</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Upgrading Shipyard"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Pulling <span class="variable">$IMAGE</span>"</span></span><br><span class="line">    docker pull <span class="variable">$IMAGE</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Upgrading Controller"</span></span><br><span class="line">    remove_controller</span><br><span class="line">    start_controller</span><br><span class="line"></span><br><span class="line">    wait_for_available <span class="variable">$SHIPYARD_IP</span> <span class="variable">$SHIPYARD_PORT</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Shipyard controller updated"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$ACTION</span>"</span> = <span class="string">"remove"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># ignore errors</span></span><br><span class="line">    <span class="built_in">set</span> +e</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Removing Shipyard"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Removing Database"</span></span><br><span class="line">    remove_rethinkdb</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Removing Discovery"</span></span><br><span class="line">    remove_discovery</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Removing Cert Volume"</span></span><br><span class="line">    remove_certs</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Removing Proxy"</span></span><br><span class="line">    remove_proxy</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Removing Swarm Agent"</span></span><br><span class="line">    remove_swarm_agent</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Removing Swarm Manager"</span></span><br><span class="line">    remove_swarm_manager</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" -&gt; Removing Controller"</span></span><br><span class="line">    remove_controller</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Done"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Unknown action <span class="variable">$ACTION</span>"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/kevingrace/p/6867820.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/6867820.html</a></p>
<p><a href="https://www.fcwys.cc/index.php/archives/145.html" target="_blank" rel="noopener">https://www.fcwys.cc/index.php/archives/145.html</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>shipyard</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle-11g-R2安装教程</title>
    <url>/2018/08/20/Oracle-11g-R2%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1-安装Oracle前准备"><a href="#1-安装Oracle前准备" class="headerlink" title="1 安装Oracle前准备"></a>1 安装Oracle前准备</h1><a id="more"></a>
<h2 id="1-1-创建运行oracle数据库的系统用户和用户组"><a href="#1-1-创建运行oracle数据库的系统用户和用户组" class="headerlink" title="1.1 创建运行oracle数据库的系统用户和用户组"></a>1.1 创建运行oracle数据库的系统用户和用户组</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sonny@localhost ~]$ su root　　<span class="comment">#切换到root</span></span><br><span class="line">Password: </span><br><span class="line">[root@localhost sonny]<span class="comment"># groupadd oinstall　　#创建用户组oinstall</span></span><br><span class="line">[root@localhost sonny]<span class="comment"># groupadd dba　　#创建用户组dba</span></span><br><span class="line">[root@localhost sonny]<span class="comment"># useradd -g oinstall -g dba -m oracle　　#创建oracle用户，并加入到oinstall和dba用户组</span></span><br><span class="line">[root@localhost sonny]<span class="comment"># passwd oracle　　#设置用户oracle的登陆密码，不设置密码，在CentOS的图形登陆界面没法登陆</span></span><br><span class="line">Changing password <span class="keyword">for</span> user oracle.</span><br><span class="line">New password: 　　<span class="comment"># 密码</span></span><br><span class="line">BAD PASSWORD: The password is shorter than 8 characters</span><br><span class="line">Retype new password: 　　<span class="comment"># 确认密码</span></span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">[root@localhost sonny]<span class="comment"># id oracle # 查看新建的oracle用户</span></span><br><span class="line">uid=1001(oracle) gid=1002(dba) groups=1002(dba)</span><br><span class="line">[root@localhost sonny]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="1-2-创建oracle数据库安装目录"><a href="#1-2-创建oracle数据库安装目录" class="headerlink" title="1.2 创建oracle数据库安装目录"></a>1.2 创建oracle数据库安装目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sonny@localhost ~]$ su root</span><br><span class="line">Password: </span><br><span class="line">[root@localhost sonny]<span class="comment"># mkdir -p /data/oracle　　#oracle数据库安装目录</span></span><br><span class="line">[root@localhost sonny]<span class="comment"># mkdir -p /data/oraInventory　　#oracle数据库配置文件目录</span></span><br><span class="line">[root@localhost sonny]<span class="comment"># mkdir -p /data/database　　#oracle数据库软件包解压目录</span></span><br><span class="line">[root@localhost sonny]<span class="comment"># cd /data</span></span><br><span class="line">[root@localhost data]<span class="comment"># ls　　#创建完毕检查一下（强迫症）</span></span><br><span class="line">database  oracle  oraInventory</span><br><span class="line">[root@localhost data]<span class="comment"># chown -R oracle:oinstall /data/oracle　　#设置目录所有者为oinstall用户组的oracle用户</span></span><br><span class="line">[root@localhost data]<span class="comment"># chown -R oracle:oinstall /data/oraInventory</span></span><br><span class="line">[root@localhost data]<span class="comment"># chown -R oracle:oinstall /data/database</span></span><br><span class="line">[root@localhost data]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-修改OS系统标识"><a href="#1-3-修改OS系统标识" class="headerlink" title="1.3 修改OS系统标识"></a>1.3 修改OS系统标识</h2><p>oracle默认不支持CentOS系统安装，Oracle Database 11g Release 2 的 OS要求参考： <a href="https://docs.oracle.com/cd/E11882_01/install.112/e47689/pre_install.htm#LADBI1106" target="_blank" rel="noopener">https://docs.oracle.com/cd/E11882_01/install.112/e47689/pre_install.htm#LADBI1106</a></p>
<p>我安装是64位数据库，On Linux x86-64：Red Hat Enterprise Linux 7  （RHEL 7）</p>
<p>另外，CentOS7.0.1511 基于 RHEL7.2  参考：<a href="http://www.linuxidc.com/Linux/2015-12/126283.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2015-12/126283.htm</a></p>
<p>修改文件 /etc/RedHat-release</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[sonny<span class="variable">@localhost</span> data]<span class="variable">$ </span>su root</span><br><span class="line"><span class="symbol">Password:</span> </span><br><span class="line">[root<span class="variable">@localhost</span> data]<span class="comment"># cat /proc/version </span></span><br><span class="line">Linux version <span class="number">3.10</span>.<span class="number">0</span>-<span class="number">327</span>.el7.x86_64 (builder<span class="variable">@kbuilder</span>.dev.centos.org) (gcc version <span class="number">4.8</span>.<span class="number">3</span> <span class="number">20140911</span> (Red Hat <span class="number">4.8</span>.<span class="number">3</span>-<span class="number">9</span>) (GCC) ) <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015</span></span><br><span class="line">[root<span class="variable">@localhost</span> data]<span class="comment"># cat /etc/redhat-release　　</span></span><br><span class="line">CentOS Linux release <span class="number">7.2</span>.<span class="number">1511</span> (Core) </span><br><span class="line">[root<span class="variable">@localhost</span> data]<span class="comment"># vi /etc/redhat-release</span></span><br><span class="line">[root<span class="variable">@localhost</span> data]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">redhat-<span class="number">7</span> </span><br><span class="line">[root<span class="variable">@localhost</span> data]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="1-4-安装oracle数据库所需要的软件包"><a href="#1-4-安装oracle数据库所需要的软件包" class="headerlink" title="1.4 安装oracle数据库所需要的软件包"></a>1.4 安装oracle数据库所需要的软件包</h2><p>重复一遍，我安装时Oracle Database 11g Release 2 64位数据库。</p>
<p>Oracle Database Package Requirements for Linux x86-64 如下：（参考：<a href="https://docs.oracle.com/cd/E11882_01/install.112/e47689/pre_install.htm#BABCFJFG）" target="_blank" rel="noopener">https://docs.oracle.com/cd/E11882_01/install.112/e47689/pre_install.htm#BABCFJFG）</a></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">操作系统:<span class="keyword">Oracle </span>Linux <span class="number">7</span> <span class="keyword">and </span>Red Hat Enterprise Linux <span class="number">7</span></span><br><span class="line">The following packages (<span class="keyword">or </span>later versions) must <span class="keyword">be </span><span class="keyword">installed:</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">$ </span>yum <span class="keyword">install </span><span class="keyword">binutils </span>compat-libstdc++ compat-libstdc++-<span class="number">33</span> elfutils-libelf-devel gcc gcc-c++ glibc-devel glibc-headers ksh libaio-devel libstdc++-devel make sysstat unixODBC-devel <span class="keyword">binutils-* </span>compat-libstdc++* elfutils-libelf* glibc* gcc-* libaio* libgcc* libstdc++* make* sysstat* unixODBC* wget unzip</span><br></pre></td></tr></table></figure>
<h2 id="1-5-关闭防火墙-CentOS-7-2默认使用的是firewall作为防火墙"><a href="#1-5-关闭防火墙-CentOS-7-2默认使用的是firewall作为防火墙" class="headerlink" title="1.5 关闭防火墙 CentOS 7.2默认使用的是firewall作为防火墙"></a>1.5 关闭防火墙 CentOS 7.2默认使用的是firewall作为防火墙</h2><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="keyword">disable</span> firewalld</span><br><span class="line">$ systemctl <span class="keyword">stop</span> firewalld</span><br></pre></td></tr></table></figure>
<h2 id="1-6-关闭selinux（需重启生效）"><a href="#1-6-关闭selinux（需重启生效）" class="headerlink" title="1.6 关闭selinux（需重启生效）"></a>1.6 关闭selinux（需重启生效）</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[root@localhost /]</span><span class="comment"># vi /etc/selinux/config</span></span><br><span class="line"><span class="section">[root@localhost /]</span><span class="comment"># cat /etc/selinux/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line"><span class="attr">SELINUX</span>=disabled   #此处修改为disabled</span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected. </span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line"><span class="attr">SELINUXTYPE</span>=targeted</span><br></pre></td></tr></table></figure>
<h2 id="1-7-修改内核参数"><a href="#1-7-修改内核参数" class="headerlink" title="1.7 修改内核参数"></a>1.7 修改内核参数</h2><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">[sonny@localhost /]$ su root</span><br><span class="line">Password: </span><br><span class="line">[root@localhost /]<span class="comment"># vi /etc/sysctl.conf </span></span><br><span class="line">[root@localhost /]<span class="comment"># cat /etc/sysct.conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat: /etc/sysct.conf: No such file <span class="literal">or</span> directory</span><br><span class="line">[root@localhost /]<span class="comment"># cat /etc/sysctl.conf </span></span><br><span class="line"><span class="comment"># System default settings live in /usr/lib/sysctl.d/00-system.conf.</span></span><br><span class="line"><span class="comment"># To override those settings, enter new settings here, or in an /etc/sysctl.d/&lt;name&gt;.conf file</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, see sysctl.conf(5) and sysctl.d(5).</span></span><br><span class="line">net.ipv4.<span class="attr">icmp_echo_ignore_broadcasts</span> = <span class="number">1</span></span><br><span class="line">net.ipv4.conf.all.<span class="attr">rp_filter</span> = <span class="number">1</span></span><br><span class="line">fs.<span class="attr">file-max</span> = <span class="number">6815744</span> <span class="comment">#设置最大打开文件数</span></span><br><span class="line">fs.<span class="attr">aio-max-nr</span> = <span class="number">1048576</span></span><br><span class="line">kernel.<span class="attr">shmall</span> = <span class="number">2097152</span> <span class="comment">#共享内存的总量，8G内存设置：2097152*4k/1024/1024</span></span><br><span class="line">kernel.<span class="attr">shmmax</span> = <span class="number">2147483648</span> <span class="comment">#最大共享内存的段大小</span></span><br><span class="line">kernel.<span class="attr">shmmni</span> = <span class="number">4096</span> <span class="comment">#整个系统共享内存端的最大数</span></span><br><span class="line">kernel.<span class="attr">sem</span> = <span class="number">250</span> <span class="number">32000</span> <span class="number">100</span> <span class="number">128</span></span><br><span class="line">net.ipv4.<span class="attr">ip_local_port_range</span> = <span class="number">9000</span> <span class="number">65500</span> <span class="comment">#可使用的IPv4端口范围</span></span><br><span class="line">net.core.<span class="attr">rmem_default</span> = <span class="number">262144</span></span><br><span class="line">net.core.<span class="attr">rmem_max=</span> <span class="number">4194304</span></span><br><span class="line">net.core.<span class="attr">wmem_default=</span> <span class="number">262144</span></span><br><span class="line">net.core.<span class="attr">wmem_max=</span> <span class="number">1048576</span></span><br><span class="line">[root@localhost /]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">使配置参数生效</span><br><span class="line"></span><br><span class="line">[root@localhost /]<span class="comment"># sysctl -p</span></span><br><span class="line"></span><br><span class="line">net.ipv4.<span class="attr">icmp_echo_ignore_broadcasts</span> = <span class="number">1</span></span><br><span class="line">net.ipv4.conf.all.<span class="attr">rp_filter</span> = <span class="number">1</span></span><br><span class="line">sysctl: setting key <span class="string">"fs.file-max"</span>: Invalid argument</span><br><span class="line">fs.<span class="attr">file-max</span> = <span class="number">6815744</span> <span class="comment">#设置最大打开文件数</span></span><br><span class="line">fs.<span class="attr">aio-max-nr</span> = <span class="number">1048576</span></span><br><span class="line">sysctl: setting key <span class="string">"kernel.shmall"</span>: Invalid argument</span><br><span class="line">kernel.<span class="attr">shmall</span> = <span class="number">2097152</span> <span class="comment">#共享内存的总量，8G内存设置：2097152*4k/1024/1024</span></span><br><span class="line">sysctl: setting key <span class="string">"kernel.shmmax"</span>: Invalid argument</span><br><span class="line">kernel.<span class="attr">shmmax</span> = <span class="number">2147483648</span> <span class="comment">#最大共享内存的段大小</span></span><br><span class="line">sysctl: setting key <span class="string">"kernel.shmmni"</span>: Invalid argument</span><br><span class="line">kernel.<span class="attr">shmmni</span> = <span class="number">4096</span> <span class="comment">#整个系统共享内存端的最大数</span></span><br><span class="line">kernel.<span class="attr">sem</span> = <span class="number">250</span> <span class="number">32000</span> <span class="number">100</span> <span class="number">128</span></span><br><span class="line">sysctl: setting key <span class="string">"net.ipv4.ip_local_port_range"</span>: Invalid argument</span><br><span class="line">net.ipv4.<span class="attr">ip_local_port_range</span> = <span class="number">9000</span> <span class="number">65500</span> <span class="comment">#可使用的IPv4端口范围</span></span><br><span class="line">net.core.<span class="attr">rmem_default</span> = <span class="number">262144</span></span><br><span class="line">net.core.<span class="attr">rmem_max</span> = <span class="number">4194304</span></span><br><span class="line">net.core.<span class="attr">wmem_default</span> = <span class="number">262144</span></span><br><span class="line">net.core.<span class="attr">wmem_max</span> = <span class="number">1048576</span></span><br><span class="line">[root@localhost /]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="1-8-解压安装包"><a href="#1-8-解压安装包" class="headerlink" title="1.8 解压安装包"></a>1.8 解压安装包</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[oracle<span class="variable">@localhost</span> /]<span class="variable">$ </span>cd /usr/local/src　　<span class="comment">#进入/usr/local/src目录</span></span><br><span class="line">[oracle<span class="variable">@localhost</span> src]<span class="variable">$ </span>ls</span><br><span class="line">linux.x64_11gR2_database_1of2.zip  linux.x64_11gR2_database_2of2.zip</span><br><span class="line">[oracle<span class="variable">@localhost</span> src]<span class="variable">$ </span>unzip linux.x64_11gR2_database_1of2.zip -d /data/database/　　<span class="comment">#解压</span></span><br><span class="line">(省略...)</span><br><span class="line">[oracle<span class="variable">@localhost</span> src]<span class="variable">$ </span>unzip linux.x64_11gR2_database_2of2.zip -d /data/database/　　<span class="comment">#解压</span></span><br><span class="line">(省略...)</span><br><span class="line">[oracle<span class="variable">@localhost</span> src]<span class="variable">$ </span>su root</span><br><span class="line"><span class="symbol">Password:</span> </span><br><span class="line">[root<span class="variable">@localhost</span> src]<span class="comment"># chown -R oracle:oinstall /data/database/database/</span></span><br><span class="line">[root<span class="variable">@localhost</span> src]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h1 id="2-oracle安装"><a href="#2-oracle安装" class="headerlink" title="2 oracle安装"></a>2 oracle安装</h1><p>1.图形界面登陆oracle用户：<br><div class="note danger"><p><strong>警报</strong><br>root用户切换到oracle用户无法安装报错，必须使用oracle直接登录，否则报如下错误<br> <strong>Exception in thread “main” java.lang.NoClassDefFoundError</strong></p></div></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571815890483.png" alt="图1"></p>
<p>2.启动oralce安装，到/data/database/database/目录下，执行runInstaller<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571815912076.png" alt="图2"><br>3.去掉勾，懒得填，个人使用环境不需要自动接收Oracle的安全更新。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571815924175.png" alt="图3"><br>4.下一步，只安装数据库软件，个人用不要那些玩意~~<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571815935813.png" alt="图4"><br>5.选择单例安装，前面的所有配置均为单例安装。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571815947141.png" alt="图5"><br>6.添加语言<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571815959015.png" alt="图6"><br>7.默认安装版本企业版-Enterprise Edition<br>8.确定数据软件的安装路径，自动读取前面Oracle环境变量中配置的值。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571815979590.png" alt="图8"><br>9.理论上要创建Database Operation（OSOPER）Group:oper ,个人用，懒得建，就使用dba用户组<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571815991649.png" alt="图9"><br>10.安装检查，按照提示信息一个一个解决。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571816009278.png" alt="图10"><br>11.一个一个检查package，在准备阶段中漏掉的，此处再安装，有些系统报错是因为现有的包的版本比检测要高，最后忽略即可。（点击Check_Again 多检查几次）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571816021288.png" alt="图11"><br>12.准备完毕，fuck “Finish”开始安装。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571816033476.png" alt="图12"><br>14.提示安装成功。安装日志懒得看，再说。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571816048857.png" alt="图14"></p>
<h1 id="3-配置监听listener"><a href="#3-配置监听listener" class="headerlink" title="3 配置监听listener"></a>3 配置监听listener</h1><div class="note danger"><p><strong>警告</strong><br>创建监听和实例前，一定要用root用户运行<code>/data/oracle/product/11.2.0/db_1/root.sh</code> 脚本,否则无法生成<code>/etc/oratab</code>文件 及造成实例无法注册等异常现象，无法设置自动等</p></div>
<p>3.1 执行netca 报错</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">[@localhost ~]$ netca</span><br><span class="line"></span><br><span class="line"><span class="symbol">Oracle</span> <span class="symbol">Net</span> <span class="symbol">Services</span> <span class="symbol">Configuration</span>:</span><br><span class="line">#</span><br><span class="line"># <span class="symbol">An</span> unexpected error has been detected by <span class="symbol">HotSpot</span> <span class="symbol">Virtual</span> <span class="symbol">Machine</span>:</span><br><span class="line">#</span><br><span class="line">#  <span class="symbol">SIGSEGV</span> (<span class="number">0xb</span>) at pc=<span class="number">0x00007f69a69fcb9d</span>, pid=<span class="number">8033</span>, tid=<span class="number">140092892297024</span></span><br><span class="line">#</span><br><span class="line"># <span class="symbol">Java</span> <span class="symbol">VM</span>: <span class="symbol">Java</span> <span class="symbol">HotSpot</span>(<span class="symbol">TM</span>) <span class="number">64</span>-<span class="symbol">Bit</span> <span class="symbol">Server</span> <span class="symbol">VM</span> (<span class="number">1.5</span><span class="number">.0</span><span class="symbol">_17</span>-b03 mixed mode)</span><br><span class="line"># <span class="symbol">Problematic</span> frame:</span><br><span class="line"># <span class="symbol">C</span>  [libclntsh.so<span class="number">.11</span><span class="number">.1</span>+<span class="number">0x62ab9d</span>]  snlinGetAddrInfo+<span class="number">0x1b1</span></span><br><span class="line">#</span><br><span class="line"># <span class="symbol">An</span> error report file with more information is saved as hs_err_pid8033.log</span><br><span class="line">#</span><br><span class="line"># <span class="symbol">If</span> you would like to submit a bug report, please visit:</span><br><span class="line">#   http://java.sun.com/webapps/bugreport/crash.jsp</span><br><span class="line">#</span><br><span class="line">/data/oracle/product/<span class="number">11.2</span><span class="number">.0</span>/db_1/bin/netca: line <span class="number">178</span>:  <span class="number">8033</span> <span class="symbol">Aborted</span>                 (core dumped) $<span class="symbol">JRE</span> $<span class="symbol">JRE_OPTIONS</span> -classpath $<span class="symbol">CLASSPATH</span> oracle.net.ca.<span class="symbol">NetCA</span> $*</span><br><span class="line">[oracle@localhost ~]$</span><br></pre></td></tr></table></figure>
<p>错误原因：安装操作系统是默认主机名localhost造成错误</p>
<p>解决办法：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">[racle]<span class="comment"># cat /etc/sysconfig/network</span></span><br><span class="line"><span class="comment"># Created by anaconda</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@localhost</span> oracle]<span class="comment"># vi /etc/sysconfig/network　　#增加HOSTNAME</span></span><br><span class="line">[root<span class="meta">@localhost</span> oracle]<span class="comment"># cat /etc/sysconfig/network</span></span><br><span class="line"><span class="comment"># Created by anaconda</span></span><br><span class="line">HOSTNAME=odb-sonny</span><br><span class="line">[root<span class="meta">@localhost</span> oracle]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">[root<span class="meta">@localhost</span> oracle]<span class="comment"># vi /etc/hosts　　#增加HOSTNAME&lt;/strong&gt;</span></span><br><span class="line">[root<span class="meta">@localhost</span> oracle]<span class="comment"># cat /etc/hosts     </span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 odb-sonny</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">[root<span class="meta">@localhost</span> oracle]<span class="comment"># hostname odb-sonny　　#执行</span></span><br><span class="line">[root<span class="meta">@localhost</span> oracle]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>最后注销当前oracle用户，重新登陆即可！！这次发现打开配置界面正常，安装windows下面配置即可。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571816061865.png" alt="图15"></p>
<h1 id="4-创建Oracle数据实例Orcl"><a href="#4-创建Oracle数据实例Orcl" class="headerlink" title="4 创建Oracle数据实例Orcl"></a>4 创建Oracle数据实例Orcl</h1><p>执行dbca命令，启动oracle实例安装界面，剩下的与Windows上安装一样，不废话了：</p>
<p>注意：必须先创建监听，并且监听是启动中，否则报错。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Oracle-11g-R2安装教程/1571816072623.png" alt="图16"></p>
<h1 id="5-配置oracle自启"><a href="#5-配置oracle自启" class="headerlink" title="5 配置oracle自启"></a>5 配置oracle自启</h1><p>参考：<a href="https://blog.51cto.com/meiling/2071260" target="_blank" rel="noopener">https://blog.51cto.com/meiling/2071260</a></p>
<h2 id="5-1-编辑文件-etc-oratab"><a href="#5-1-编辑文件-etc-oratab" class="headerlink" title="5.1 编辑文件/etc/oratab"></a>5.1 编辑文件/etc/oratab</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbca建库时都会自动创建/etc/oratab文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">vi /etc/oratab</span></span><br><span class="line">将“orcl:/u01/app/oracle/product/12.1.0/dbhome_1:N”，</span><br><span class="line">改为“orcl:/u01/app/oracle/product/12.1.0/dbhome_1:Y”。</span><br><span class="line">修改完成后，保存退出</span><br><span class="line">--&lt;N|Y&gt;选项代表开机是否自启动</span><br></pre></td></tr></table></figure>
<div class="note success"><p><strong>说明:o</strong><br><code>rcl</code>为实例名；<code>/u01/app/oracle/product/12.1.0/dbhome1为oracle</code>安装目录；会因安装的情况不同而有所不同。</p></div>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/30/Oracle-11g-R2安装教程/1585555684712.png" alt="1"></p>
<h2 id="5-2-编辑-etc-rc-d-rc-local启动文件，添加数据库启动脚本dbstart"><a href="#5-2-编辑-etc-rc-d-rc-local启动文件，添加数据库启动脚本dbstart" class="headerlink" title="5.2  编辑/etc/rc.d/rc.local启动文件，添加数据库启动脚本dbstart"></a>5.2  编辑/etc/rc.d/rc.local启动文件，添加数据库启动脚本dbstart</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">vi /etc/rc.d/rc.local</span></span><br><span class="line">末尾添加：</span><br><span class="line">su oracle -lc "/u01/app/oracle/product/12.1.0/dbhome_1/bin/lsnrctl start"</span><br><span class="line">su oracle -lc /u01/app/oracle/product/12.1.0/dbhome_1/bin/dbstart</span><br><span class="line"></span><br><span class="line">或启动指定实例</span><br><span class="line">su - oracle -lc "/u01/app/oracle/product/11.2.0/dbhome_1/bin/lsnrctl start ORCL"</span><br><span class="line">su - oracle -lc /u01/app/oracle/product/11.2.0/dbhome_1/bin/dbstart</span><br><span class="line"></span><br><span class="line">--命令中-c代表执行脚本，脚本dbstart中指定启动的实例，脚本lsnrctl中启动配置的监听</span><br></pre></td></tr></table></figure>
<div class="note success"><p><strong>说明:</strong><br><code>/u01/app/oracle/product/12.1.0/dbhome1</code>为oracle的安装目录，要根据实际情况进行修改。</p></div>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/30/Oracle-11g-R2安装教程/1585555816476.png" alt="2"></p>
<h2 id="5-3-修改DB启动配置文件"><a href="#5-3-修改DB启动配置文件" class="headerlink" title="5.3 修改DB启动配置文件"></a>5.3 修改DB启动配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /u01/app/oracle/product/11.2.0/dbhome_1/bin/dbstart</span></span><br><span class="line">找到ORACLE_HOME_LISTNER这行</span><br><span class="line"><span class="comment"># First argument is used to bring up Oracle Net Listener</span></span><br><span class="line">ORACLE_HOME_LISTNER=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">将<span class="variable">$1</span>修改为如下(你的路径)：</span><br><span class="line">ORACLE_HOME_LISTNER=/u01/app/oracle/product/11.2.0/dbhome_1</span><br></pre></td></tr></table></figure>
<h2 id="5-4-重启主机，查看数据库和监听是自启动"><a href="#5-4-重启主机，查看数据库和监听是自启动" class="headerlink" title="5.4 重启主机，查看数据库和监听是自启动"></a>5.4 重启主机，查看数据库和监听是自启动</h2><p>开机自启动多个监听及多个实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/rc.d/rc.local</span></span><br><span class="line">su - oracle -lc <span class="string">"/u01/app/oracle/product/11.2.0/dbhome_1/bin/lsnrctl start orcl1"</span></span><br><span class="line">su - oracle -lc <span class="string">"/u01/app/oracle/product/11.2.0/dbhome_1/bin/lsnrctl start orcl2"</span></span><br><span class="line">su - oracle -lc /u01/app/oracle/product/11.2.0/dbhome_1/bin/dbstart</span><br><span class="line">监听写多个启动，实例用一个dbstart命令去启动，它会去读oratab文件，读到Y就会把对应的实例开机自启动</span><br></pre></td></tr></table></figure>
<h1 id="6-小结"><a href="#6-小结" class="headerlink" title="6 小结"></a>6 小结</h1><p>linux下设置实例自启动有关脚本：</p>
<p>oratab：实例是否自启动的注册信息</p>
<p>dbstart：开机启动脚本文件会读取oratab信息</p>
<p>rc.local：开机后立即要做的文件</p>
<ul>
<li>“启动监听”<br>lsnrctl start</li>
</ul>
<ul>
<li><p>“启动数据库实例”<br>dbstart</p>
</li>
<li><p>“关闭数据库实例”<br>dbshut</p>
</li>
<li><p>“关闭监听”<br>lsnrctl stop</p>
</li>
</ul>
<h1 id="7-问题总结"><a href="#7-问题总结" class="headerlink" title="7 问题总结"></a>7 问题总结</h1><h2 id="7-1-问题一："><a href="#7-1-问题一：" class="headerlink" title="7.1 问题一："></a>7.1 问题一：</h2><div class="note danger"><p><strong>问题一i</strong><br>root用户切换到oracle用户无法安装报错，必须使用oracle直接登录，否则报如下错误</p>
<p><strong><em>Exception in thread “main” java.lang.NoClassDefFoundError</em></strong></p></div>
<h2 id="7-2-问题二："><a href="#7-2-问题二：" class="headerlink" title="7.2 问题二："></a>7.2 问题二：</h2><div class="note danger"><p><strong>问题二</strong><br>Oracle 安装报错 <strong><em>[INS-06101] IP address of localhost could not be determined</em></strong> 解决方法</p>
<p>出现这种错误是因为主机名和/etc/hosts 文件不一致，只需要把主机名和其IP 写入/etc/hosts 文件，就ok了。</p></div>
<h2 id="7-3-问题三："><a href="#7-3-问题三：" class="headerlink" title="7.3 问题三："></a>7.3 问题三：</h2><div class="note danger"><p><strong>问题三</strong><br>在ORACLE11G R2 安装ORACLE时出现以下错误：</p>
<p><strong><em>[INS-08109] Unexpected error occurred while validating inputs at state ‘getOCMDetails’.</em></strong></p>
<p>经GOOGLE看到</p>
<p><a href="http://www.linkedin.com/groups/I-try-clone-oracle-grid-77941.S.38808726" target="_blank" rel="noopener">http://www.linkedin.com/groups/I-try-clone-oracle-grid-77941.S.38808726</a></p>
<p>说是使用了 LD_LIBRARY_PATH 环境参数，经查看.bash_profile ，有如下设置：</p>
<p>LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib; export LD_LIBRARY_PATH</p>
<p>注释掉后，问题解决。</p></div>
<h2 id="7-4-问题四："><a href="#7-4-问题四：" class="headerlink" title="7.4 问题四："></a>7.4 问题四：</h2><div class="note danger"><p><strong>问题四</strong><br><strong><em>Error in invoking target ‘install’ of makefile ‘/data/oracle/product/11.2.0/db_1/ctx/lib/ins_ctx.mk</em></strong><br>解决方法：打开一个新的终端，使用root身份登入，</p>
<p>#vi ORACLE_HOME/ctx/lib/ins_ctx.mk<br>找到<br>ctxhx: $(CTXHXOBJ)<br>$(LINK_CTXHX) $(CTXHXOBJ) $(INSO_LINK)<br>修改为(添加红色部分):                   ctxhx: $(CTXHXOBJ)<br><strong><em><code>-static</code></em></strong>   $(LINK_CTXHX) $(CTXHXOBJ) $(INSO_LINK)  <strong><em><code>/usr/lib64/libc.a</code></em></strong></p></div>
<h2 id="7-5-问题五："><a href="#7-5-问题五：" class="headerlink" title="7.5 问题五："></a>7.5 问题五：</h2><div class="note danger"><p><strong>warning</strong><br><strong><em>Error in invoking target ‘agent nmhs’ of makefile ‘/home/oracle_11/app/oracle/product/11.2.0/db_1/sysman/lib/ins_emagent.mk</em></strong><br>解决方法：打开一个新的终端，使用root身份登入，</p>
<p>#vi $ORACLE_HOME/sysman/lib/ins_emagent.mk<br>找到<br>$(MK_EMAGENT_NMECTL)<br>修改为(添加红色部分)：<br>$(MK_EMAGENT_NMECTL) <code>-lnnz11</code><br>完成后在错误提示框上retry既可</p></div>
<h2 id="7-6-问题六"><a href="#7-6-问题六" class="headerlink" title="7.6 问题六"></a>7.6 问题六</h2><div class="note danger"><p><strong>问题六</strong><br>弹出窗口乱码<br>原因：系统默认语言中文，没有相应的中文字体包<br>解决办法： 修改默认系统系统语言为英文</p></div>
<h2 id="7-7-问题七"><a href="#7-7-问题七" class="headerlink" title="7.7 问题七"></a>7.7 问题七</h2><div class="note danger"><p><strong>问题七</strong><br>创建实例报错 java<br>可以使用非oracle自带的java<br>安装java</p></div>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Xmanager远程连接CentOS7</title>
    <url>/2018/08/23/Xmanager%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5CentOS7/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-安装epel源"><a href="#1-安装epel源" class="headerlink" title="1 安装epel源"></a>1 安装epel源</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y epel-<span class="keyword">release</span></span><br></pre></td></tr></table></figure>
<h1 id="2-安装lightdm和xfce"><a href="#2-安装lightdm和xfce" class="headerlink" title="2 安装lightdm和xfce"></a>2 安装lightdm和xfce</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum install -y lightdm</span> </span><br><span class="line"><span class="attribute">yum groupinstall -y xfce</span></span><br></pre></td></tr></table></figure>
<h2 id="2-1-修改配置文件"><a href="#2-1-修改配置文件" class="headerlink" title="2.1 修改配置文件"></a>2.1 修改配置文件</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/lightdm/lightdm.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[XDMCPServer]</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">177</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-将Display-Manager切换为lightdm"><a href="#2-2-将Display-Manager切换为lightdm" class="headerlink" title="2.2 将Display Manager切换为lightdm"></a>2.2 将Display Manager切换为lightdm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> gdm &amp;&amp; systemctl <span class="built_in">enable</span> lightdm</span><br></pre></td></tr></table></figure>
<h2 id="2-3-启动lightdm"><a href="#2-3-启动lightdm" class="headerlink" title="2.3 启动lightdm"></a>2.3 启动lightdm</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl start lightdm</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-关闭防火墙"><a href="#2-4-关闭防火墙" class="headerlink" title="2.4 关闭防火墙"></a>2.4 关闭防火墙</h2><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld.service</span><br></pre></td></tr></table></figure>
<h1 id="3-登录"><a href="#3-登录" class="headerlink" title="3 登录"></a>3 登录</h1><p>打开Xmanger客户端，选择XDMCP并输入服务器的ip，回车运行即可。<br>输入账号密码<br>然后就出现下图：（如果正常跳过这步）<br><img src="1.jpg" alt="enter description here"><br><strong>或者出现黑屏提示无法建立连接</strong><br>这是因为刚开始安装的是Gnome，所以系统默认使用它，现在要改成Xfce，最简单的方法就是把xfce.desktopz之外的文件都干掉。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">cd /usr/share/xsessions/</span><br><span class="line"><span class="built_in">mkdir</span> bak</span><br><span class="line">mv gnome* bak</span><br><span class="line">systemctl <span class="built_in">restart</span> lightdm</span><br></pre></td></tr></table></figure>
<p>重新连接<br>一切正常操作之后就成功连接了。然后就可以快速便捷的工作了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>基础运维</tag>
        <tag>运维工具</tag>
        <tag>xmanager</tag>
      </tags>
  </entry>
  <entry>
    <title>docker私有仓库搭建</title>
    <url>/2018/08/23/docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-搭建仓库"><a href="#1-搭建仓库" class="headerlink" title="1 搭建仓库"></a>1 搭建仓库</h1><p>安装docker-ce,过程省略…….；运行以下命令启动仓库</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ docker run --name registry --restart always -d -p <span class="number">5000</span>:<span class="number">5000</span> -v /.<span class="symbol">registry:</span>/var/<span class="class"><span class="keyword">lib</span>/<span class="title">registry</span> <span class="title">registry</span></span></span><br></pre></td></tr></table></figure>
<h1 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2 修改配置"></a>2 修改配置</h1><p>修改所有需要使用私有仓库的docker服务器（包括仓库服务器）的docker配置，在/etc/docker目录创建daemon.json文件内容如下：<br><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 下面这句表示表示开启5000端口的非安全模式，也就是http模式，否则在push或pull时会报https错误</span></span><br><span class="line">&#123; <span class="string">"insecure-registries"</span>:[<span class="string">"192.168.1.11:5000"</span>] &#125;</span><br><span class="line"><span class="meta"># 下面这句是使用阿里云镜像加速，提高外网官方仓库的下载速度，这里一起列出了，不是必须要添加的，和私有仓库没有关系。</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://cz0az3lb.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以同时设置，写法如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"insecure-registries"</span>:[<span class="string">"192.168.1.118:5000"</span>],</span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"http://192.168.1.118:5001"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启docker服务，配置生效</p>
<h1 id="3-查询仓库镜像列表"><a href="#3-查询仓库镜像列表" class="headerlink" title="3 查询仓库镜像列表"></a>3 查询仓库镜像列表</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-11 docker]<span class="comment"># curl -XGET http://192.168.1.11:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"nginx"</span>]&#125;</span><br><span class="line"><span class="comment"># 显示镜像nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询镜像版本</span></span><br><span class="line"></span><br><span class="line">``` elixir</span><br><span class="line">[root@zabbix-11 docker]<span class="comment"># curl -XGET http://192.168.1.11:5000/v2/nginx/tags/list</span></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"nginx"</span>,<span class="string">"tags"</span>:[<span class="string">"1"</span>,<span class="string">"1.13.7"</span>]&#125;</span><br><span class="line"><span class="comment">#查询nginx镜像的版本号，有1/1.13.7版本</span></span><br></pre></td></tr></table></figure>
<p>以上查询也可以在web页面查询，复制命令后方http链接地址就行。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>私有仓库</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix3.4.7监控日志</title>
    <url>/2018/08/23/zabbix3-4-7%E7%9B%91%E6%8E%A7%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="一、日志item介绍"><a href="#一、日志item介绍" class="headerlink" title="一、日志item介绍"></a>一、日志item介绍</h1><a id="more"></a>
<p>下面介绍zabbix另一个“重量级”的功能——日志文件监控，它最主要的是监控日志文件中有没有某个字符串的表达式，对应日志轮转与否，zabbix都支持。</p>
<p>在配置Item的时候，Type选择Zabbix agent (active)，这里主要需要配置的是Key。下面是监控日志的两种key——log和logtr。</p>
<p>log[/path/to/some/file,<regexp>,<encoding>,<maxlines>,<mode>,<output>]</output></mode></maxlines></encoding></regexp></p>
<p>logtr[/path/to/some/filename_format,<regexp>,<encoding>,<maxlines>,<mode>,<output>]</output></mode></maxlines></encoding></regexp></p>
<blockquote>
<p>◆ regexp：要匹配内容的正则表达式，或者直接写你要检索的内容也可以，例如我想检索带ERROR关键词的记录</p>
<p>◆ encoding：编码相关，留空即可</p>
<p>◆<br>maxlines：一次性最多提交多少行，这个参数覆盖配置文件zabbxi_agentd.conf中的’MaxLinesPerSecond’，我们也可以留空</p>
<p>◆ mode：默认是all，也可以是skip，skip会跳过老数据</p>
<p>◆ output：输出给zabbix<br>server的数据。可以是\1、\2一直\9，\1表示第一个正则表达式匹配出得内容，\2表示第二个正则表达式匹配错的内容。</p>
</blockquote>
<p><em>如果仔细看可以发现，第一个参数不一样，logrt的第一个参数可以使用正则表达式。针对日志回滚用得，例如我们每天都切割nginx日志，日志名位<a href="http://www.a.com_2015-01-01.log、www.a.com_2015-01-02.log等等，使用log肯定不合适，如果文件名使用正则，那么新增的日志文件会立即加入监控。" target="_blank" rel="noopener">www.a.com_2015-01-01.log、www.a.com_2015-01-02.log等等，使用log肯定不合适，如果文件名使用正则，那么新增的日志文件会立即加入监控。</a></em></p>
<blockquote>
<p>备注：不管新日志、老日志，只要他们有变更，zabbix都会监控。</p>
</blockquote>
<p>只要配置了<regexp>，Zabbix会根据<regexp>的正则表达式来匹配日志中的内容。注意，一定要保证Zabbix用户对日志文件有可读权限，否则这个Item的状态会变成“unsupported”。</regexp></regexp></p>
<h1 id="二、监控原理及注意事项"><a href="#二、监控原理及注意事项" class="headerlink" title="二、监控原理及注意事项"></a>二、监控原理及注意事项</h1><p>1、Zabbix Server和Zabbix Agent会追踪日志文件的大小和最后修改时间，并且分别记录在字节计数器和最新的时间计数器中。</p>
<p>2、Agent会从上次读取日志的地方开始读取日志。</p>
<p>3、字节计数器和最新时间计数器的数据会被记录在Zabbix数据库，并且发送给Agent，这样能够保证Agent从上次停止的地方开始读取日志。</p>
<p>4、当日志文件大小小于字节计数器中的数字时，字节计数器会变为0，从头开始读取文件。</p>
<p>5、所有符合配置的文件，都会被监控。</p>
<p>6、一个目录下的多个文件如果修改时间相同，会按照字母顺序来读取。</p>
<p>7、到每个Update interval的时间时，Agent会检查一次目录下的文件。</p>
<p>8、Zabbix Agent每秒发送日志量，有一个日志行数上限，防止网络和CPU负载过高，这个数字在zabbix_agentd.conf中的MaxLinePerSecond。</p>
<p>9、在logtr中，正则表达式只对文件名有效，对文件目录无效。</p>
<h1 id="三、日志监控配置"><a href="#三、日志监控配置" class="headerlink" title="三、日志监控配置"></a>三、日志监控配置</h1><p>请确保Agent有如下两项配置</p>
<p>1、Hostname设定为Server创建主机是填写的Host name，必须一致</p>
<p>2、ServerActive设定为Server的IP</p>
<p>Host&gt;&gt;目标主机&gt;&gt;监控项&gt;&gt;创建监控项，如下：</p>
<h2 id="1、log方式"><a href="#1、log方式" class="headerlink" title="1、log方式"></a>1、log方式</h2><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix3.4.7监控日志/1571816711159.png" alt="图1"></p>
<h2 id="2、logrt方式"><a href="#2、logrt方式" class="headerlink" title="2、logrt方式"></a>2、logrt方式</h2><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix3.4.7监控日志/1571816728802.png" alt="图2"></p>
<p>说明：</p>
<ol>
<li><p>type必须选择zabbix agent（active），因为数据是zabbix被监控的主动提交给server</p>
</li>
<li><p>key：log[/var/log/message,error]，我们这里是监控的系统日志，打印出带有error的行，大家也可以去监控其他的日志，mysql、nginx等等都是可以的。</p>
</li>
<li><p>key: logrt[“/mnt/backup/log/[0-9]+_[0-9]+.log”,END],监控备份日志，例如20180305_113523.log,正则表达式[0-9]+_[0-9]+.log，具体可以百度学习正则表达式写法；“”双引号在使用表达式时     候最好用上，否则在保存时可能报语法错误；</p>
</li>
<li><p>log time format：MMpddphh:mm:ss，对应日志的行头Sep 14 07:32:38，y表示年、M表示月、d表示日、p和:一个占位符，h表示小时，m表示分钟，s表示秒。</p>
</li>
</ol>
<h1 id="四、结果查看"><a href="#四、结果查看" class="headerlink" title="四、结果查看"></a>四、结果查看</h1><p>切换到最新数据里面，找到相应数据，如下是我的监控截图<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix3.4.7监控日志/1571816740914.png" alt="图3"></p>
<h1 id="五、触发器设置"><a href="#五、触发器设置" class="headerlink" title="五、触发器设置"></a>五、触发器设置</h1><p>创建触发器，在周期24h内，写入日志则备份正常，否则告警；这里如下简单设置<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix3.4.7监控日志/1571816751530.png" alt="图4"></p>
]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins邮件通知</title>
    <url>/2018/08/23/jenkins%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><a id="more"></a>
<p>jenkins集成mail通知服务不再说明，功能简单，这里简单说下常用mail插件Email Extension Plugin</p>
<h1 id="2-安装Email-Extension-Plugin"><a href="#2-安装Email-Extension-Plugin" class="headerlink" title="2 安装Email Extension Plugin"></a>2 安装Email Extension Plugin</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/jenkins邮件通知/1571816217096.png" alt="图1"></p>
<h2 id="2-1-配置Email"><a href="#2-1-配置Email" class="headerlink" title="2.1 配置Email"></a>2.1 配置Email</h2><p>系统管理&gt;系统设置&gt;Extended E-mail Notification</p>
<p>下面是我的配置，改动不大，邮件通知帐号在系统集成email处配置，这里主要提下插件通知模版<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/jenkins邮件通知/1571816226174.png" alt="图2"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/jenkins邮件通知/1571816236704.png" alt="图3"></p>
<h2 id="2-2-配置默认模版"><a href="#2-2-配置默认模版" class="headerlink" title="2.2 配置默认模版"></a>2.2 配置默认模版</h2><p>Default Content Type配置为html</p>
<h3 id="2-2-1-标题"><a href="#2-2-1-标题" class="headerlink" title="2.2.1 标题"></a>2.2.1 标题</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">构建通知：<span class="symbol">$</span>PROJECT_NAME - Build # <span class="symbol">$</span>BUILD_NUMBER - <span class="symbol">$</span>BUILD_STATUS!</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/jenkins邮件通知/1571816249672.png" alt="图4"></p>
<h3 id="2-2-2-内容"><a href="#2-2-2-内容" class="headerlink" title="2.2.2 内容"></a>2.2.2 内容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var="JOB_NAME"&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">"8"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">topmargin</span>=<span class="string">"8"</span> <span class="attr">marginheight</span>=<span class="string">"4"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"95%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span>&gt;</span>来自Mr.Jenkins的邮件通知<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">font</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称：$&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号：$&#123;BUILD_NUMBER&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span>构建状态：$&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因：$&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span>构建地址：$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;console"</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>单元测试报告：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;testReport/"</span>&gt;</span>$&#123;BUILD_URL&#125;testReport/<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;ws"</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建日志:<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"80"</span> <span class="attr">rows</span>=<span class="string">"30"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"font-family: Courier New"</span>&gt;</span>$&#123;BUILD_LOG&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-添加项目构建"><a href="#3-添加项目构建" class="headerlink" title="3 添加项目构建"></a>3 添加项目构建</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/jenkins邮件通知/1571816266210.png" alt="图5"></p>
<h1 id="4-通知展示"><a href="#4-通知展示" class="headerlink" title="4 通知展示"></a>4 通知展示</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/jenkins邮件通知/1571816277156.png" alt="图6"></p>
]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>proxy_pass反向代理配置中url后面加不加/的说明</title>
    <url>/2018/08/23/proxy-pass%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E4%B8%ADurl%E5%90%8E%E9%9D%A2%E5%8A%A0%E4%B8%8D%E5%8A%A0-%E7%9A%84%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><p>OS:centos7</p>
<p>nginx _proxy服务器：192.168.1.23</p>
<p>web服务器：192.168.1.5</p>
<h1 id="2-情况说明"><a href="#2-情况说明" class="headerlink" title="2 情况说明"></a>2 情况说明</h1><h2 id="2-1-path路径后面加”-”"><a href="#2-1-path路径后面加”-”" class="headerlink" title="2.1 path路径后面加”/”"></a>2.1 path路径后面加”/”</h2><h3 id="2-1-1-情况一"><a href="#2-1-1-情况一" class="headerlink" title="2.1.1 情况一"></a>2.1.1 情况一</h3><p>NGINX配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]# cat test.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line">location / &#123;</span><br><span class="line">root /var/www/html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location  /proxy/ &#123;</span><br><span class="line">          proxy_pass http://192.168.1.5:8090/;</span><br><span class="line">		  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，访问<a href="http://192.168.1.23/proxy/就会被代理到http://192.168.1.5:8090/。匹配的proxy目录不需要存在根目录/var/www/html里面" target="_blank" rel="noopener">http://192.168.1.23/proxy/就会被代理到http://192.168.1.5:8090/。匹配的proxy目录不需要存在根目录/var/www/html里面</a></p>
<blockquote>
<p>注意，终端里如果访问<a href="http://192.168.1.23/proxy（即后面不带”/”），则会访问失败！因为proxy_pass配置的url后面加了”/”" target="_blank" rel="noopener">http://192.168.1.23/proxy（即后面不带”/”），则会访问失败！因为proxy_pass配置的url后面加了”/”</a></p>
</blockquote>
<p>访问结果如下</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="meta"># curl http:<span class="comment">//192.168.1.23/proxy/</span></span></span><br><span class="line">this is <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span></span><br><span class="line">[root@localhost conf.d]<span class="meta"># curl http:<span class="comment">//192.168.1.23/proxy</span></span></span><br><span class="line"><span class="params">&lt;html&gt;</span></span><br><span class="line"><span class="params">&lt;head&gt;</span><span class="params">&lt;title&gt;</span><span class="number">301</span> Moved Permanently<span class="params">&lt;/title&gt;</span><span class="params">&lt;/head&gt;</span></span><br><span class="line"><span class="params">&lt;body bgcolor="white"&gt;</span></span><br><span class="line"><span class="params">&lt;center&gt;</span><span class="params">&lt;h1&gt;</span><span class="number">301</span> Moved Permanently<span class="params">&lt;/h1&gt;</span><span class="params">&lt;/center&gt;</span></span><br><span class="line"><span class="params">&lt;hr&gt;</span><span class="params">&lt;center&gt;</span>nginx/<span class="number">1.10</span><span class="number">.3</span><span class="params">&lt;/center&gt;</span></span><br><span class="line"><span class="params">&lt;/body&gt;</span></span><br><span class="line"><span class="params">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>页面访问<a href="http://103.110.186.23/proxy的时候，会自动加上”/”（同理是由于proxy_pass配置的url后面加了”/”），并反代到http://103.110.186.5:8090的结果。" target="_blank" rel="noopener">http://103.110.186.23/proxy的时候，会自动加上”/”（同理是由于proxy_pass配置的url后面加了”/”），并反代到http://103.110.186.5:8090的结果。</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/proxy_pass反向代理配置中url后面加不加_的说明/1571816320354.png" alt="图1"></p>
<h3 id="2-1-2-情况二"><a href="#2-1-2-情况二" class="headerlink" title="2.1.2 情况二"></a>2.1.2 情况二</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># cat test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">root</span> /var/www/html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">location</span>  <span class="title">/proxy</span>/ &#123;</span><br><span class="line">          proxy_pass http://<span class="number">192.168</span>.<span class="number">1.5</span>:<span class="number">8090</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost conf.d]<span class="comment"># service nginx restart</span></span><br><span class="line">Redirecting to /bin/systemctl restart  nginx.service</span><br><span class="line"><span class="comment">## 那么访问http://192.168.1.23/proxy或http://192.168.1.23/proxy/，都会失败！</span></span><br><span class="line"><span class="comment">## 这样配置后，访问http://192.168.1.23/proxy/就会被反向代理到http://192.168.1.5:8090/proxy/</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/proxy_pass反向代理配置中url后面加不加_的说明/1571816340022.png" alt="图2"></p>
<h3 id="2-1-3-情况三"><a href="#2-1-3-情况三" class="headerlink" title="2.1.3 情况三"></a>2.1.3 情况三</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="keyword">conf</span>.<span class="keyword">d</span>]# <span class="keyword">cat</span> <span class="keyword">test</span>.<span class="keyword">conf</span></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line">location / &#123;</span><br><span class="line">root /<span class="keyword">var</span>/www/html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location  /proxy/ &#123;</span><br><span class="line">          proxy_pass http:<span class="comment">//192.168.1.5:8090/haha/;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost <span class="keyword">conf</span>.<span class="keyword">d</span>]# service nginx restart</span><br><span class="line">Redirecting to /bin/systemctl restart  nginx.service</span><br><span class="line">[root@localhost <span class="keyword">conf</span>.<span class="keyword">d</span>]# curl http:<span class="comment">//192.168.1.23/proxy/</span></span><br><span class="line">192.168.1.5  haha-index.html</span><br></pre></td></tr></table></figure>
<p>这样配置的话，访问<a href="http://103.110.186.23/proxy代理到http://192.168.1.5:8090/haha/" target="_blank" rel="noopener">http://103.110.186.23/proxy代理到http://192.168.1.5:8090/haha/</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/proxy_pass反向代理配置中url后面加不加_的说明/1571816356949.png" alt="图3"></p>
<h3 id="2-1-4-情况四"><a href="#2-1-4-情况四" class="headerlink" title="2.1.4 情况四"></a>2.1.4 情况四</h3><p>相对于第三种配置的url不加”/”</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]# cat test.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line">location / &#123;</span><br><span class="line">root /var/www/html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location  /proxy/ &#123;</span><br><span class="line">          proxy_pass http:<span class="comment">//192.168.1.5:8090/haha;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost conf.d]# service nginx restart</span><br><span class="line">Redirecting to /bin/systemctl restart  nginx.service</span><br><span class="line">[root@localhost conf.d]# curl http:<span class="comment">//192.168.1.23/proxy/index.html</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>   hahaindex.html</span><br><span class="line"></span><br><span class="line">##################################### </span><br><span class="line">上面配置后，访问http:<span class="comment">//192.168.1.23/proxy/index.html就会被代理到http://192.168.1.5:8090/hahaindex.html</span></span><br><span class="line">同理，访问http:<span class="comment">//192.168.1.23/proxy/test.html就会被代理到http://192.168.1.5:8090/hahatest.html</span></span><br><span class="line">[root@localhost conf.d]# curl http:<span class="comment">//192.168.1.23/proxy/index.html</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>   hahaindex.html</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，这种情况下，不能直接访问<a href="http://192.168.1.23/proxy/，后面就算是默认的index.html文件也要跟上，否则访问失败！" target="_blank" rel="noopener">http://192.168.1.23/proxy/，后面就算是默认的index.html文件也要跟上，否则访问失败！</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/proxy_pass反向代理配置中url后面加不加_的说明/1571816369408.png" alt="图4"></p>
</blockquote>
<p>———————————————————————————————————————————<br>上面四种方式都是匹配的path路径后面加”/”，下面说下path路径后面不带”/”的情况：</p>
<h2 id="2-2-path路径后面不加”-”"><a href="#2-2-path路径后面不加”-”" class="headerlink" title="2.2 path路径后面不加”/”"></a>2.2 path路径后面不加”/”</h2><h3 id="2-2-1-情况一"><a href="#2-2-1-情况一" class="headerlink" title="2.2.1 情况一"></a>2.2.1 情况一</h3><p>proxy_pass后面url带”/”：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># cat test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">root</span> /var/www/html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">location</span>  <span class="title">/proxy</span> &#123;</span><br><span class="line">          proxy_pass http://<span class="number">192.168</span>.<span class="number">1.5</span>:<span class="number">8090</span>/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost conf.d]<span class="comment"># service nginx restart</span></span><br><span class="line">Redirecting to /bin/systemctl restart  nginx.service</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/proxy_pass反向代理配置中url后面加不加_的说明/1571816381796.png" alt="图5"></p>
<h3 id="2-2-2-情况二，"><a href="#2-2-2-情况二，" class="headerlink" title="2.2.2 情况二，"></a>2.2.2 情况二，</h3><p>proxy_pass后面url不带”/”</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># cat test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">root</span> /var/www/html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">location</span>  <span class="title">/proxy</span> &#123;</span><br><span class="line">          proxy_pass http://<span class="number">192.168</span>.<span class="number">1.5</span>:<span class="number">8090</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost conf.d]<span class="comment"># service nginx restart</span></span><br><span class="line">Redirecting to /bin/systemctl restart  nginx.service</span><br><span class="line">[root@localhost conf.d]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>这样配置的话，访问<a href="http://103.110.186.23/proxy会自动加上”/”（即变成http://103.110.186.23/proxy/），代理到192.168.1.5:8090/proxy/" target="_blank" rel="noopener">http://103.110.186.23/proxy会自动加上”/”（即变成http://103.110.186.23/proxy/），代理到192.168.1.5:8090/proxy/</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/proxy_pass反向代理配置中url后面加不加_的说明/1571816394238.png" alt="图7"></p>
<h3 id="2-2-3-情况三"><a href="#2-2-3-情况三" class="headerlink" title="2.2.3 情况三"></a>2.2.3 情况三</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># cat test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">root</span> /var/www/html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">location</span>  <span class="title">/proxy</span> &#123;</span><br><span class="line">          proxy_pass http://<span class="number">192.168</span>.<span class="number">1.5</span>:<span class="number">8090</span>/haha/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost conf.d]<span class="comment"># service nginx restart</span></span><br><span class="line">Redirecting to /bin/systemctl restart  nginx.service</span><br></pre></td></tr></table></figure>
<p>这样配置的话，访问<a href="http://103.110.186.23/proxy会自动加上”/”（即变成http://103.110.186.23/proxy/），代理到http://192.168.1.5:8090/haha/" target="_blank" rel="noopener">http://103.110.186.23/proxy会自动加上”/”（即变成http://103.110.186.23/proxy/），代理到http://192.168.1.5:8090/haha/</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/proxy_pass反向代理配置中url后面加不加_的说明/1571816404669.png" alt="图8"></p>
<h3 id="2-2-4-情况四"><a href="#2-2-4-情况四" class="headerlink" title="2.2.4 情况四"></a>2.2.4 情况四</h3><p>相对于第三种配置的url不加”/”</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># cat test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">root</span> /var/www/html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">location</span>  <span class="title">/proxy</span> &#123;</span><br><span class="line">          proxy_pass http://<span class="number">192.168</span>.<span class="number">1.5</span>:<span class="number">8090</span>/haha;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost conf.d]<span class="comment"># service nginx restart</span></span><br><span class="line">Redirecting to /bin/systemctl restart  nginx.service</span><br></pre></td></tr></table></figure>
<p>这样配置的话，访问<a href="http://103.110.186.23/proxy，和第三种结果一样，同样被代理到http://192.168.1.5:8090/haha/" target="_blank" rel="noopener">http://103.110.186.23/proxy，和第三种结果一样，同样被代理到http://192.168.1.5:8090/haha/</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/proxy_pass反向代理配置中url后面加不加_的说明/1571816415308.png" alt="图9"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker集群-Docker_Swarm</title>
    <url>/2018/08/27/Docker%E9%9B%86%E7%BE%A4-Docker-Swarm/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-安装-Swarm"><a href="#1-安装-Swarm" class="headerlink" title="1 安装 Swarm"></a>1 安装 Swarm</h1><h2 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1 下载镜像"></a>1.1 下载镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull swarm</span></span><br></pre></td></tr></table></figure>
<p>可以使用下面的命令来查看 Swarm 版本，验证是否成功下载 Swarm 镜像。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$ docker run --rm swarm -v</span><br><span class="line">swarm version <span class="number">1.2</span><span class="number">.2</span> (<span class="number">34e3</span>da3)</span><br></pre></td></tr></table></figure>
<h2 id="1-2-配置节点"><a href="#1-2-配置节点" class="headerlink" title="1.2 配置节点"></a>1.2 配置节点</h2><p>Docker 主机在加入 Swarm 集群前，需要进行一些简单配置，添加 Docker daemon 的网络监听。</p>
<p>例如，在启动 Docker daemon 的时候通过 -H 参数：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo docker daemon -H <span class="symbol">tcp:</span>/<span class="regexp">/0.0.0.0:2375 -H unix:/</span><span class="regexp">//var</span><span class="regexp">/run/docker</span>.sock</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：Docker 1.8.0 版本之前不支持 daemon 命令，可以用 -d 代替。</p>
</blockquote>
<p>如果是通过服务方式启动，则需要修改服务的配置文件。</p>
<p>以 Ubuntu 14.04 为例，配置文件为 <code>/etc/default/docker</code>（其他版本的 Linux 上略有不同）。</p>
<p>在文件的最后添加：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">"$DOCKER_OPTS -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock"</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-启动集群"><a href="#1-3-启动集群" class="headerlink" title="1.3 启动集群"></a>1.3 启动集群</h2><p>Docker 集群管理需要使用服务发现（Service Discover）功能，Swarm 支持以下的几种方式：DockerHub、本地文件、etcd、consul、zookeeper 和手动指定节点 IP 地址信息等。</p>
<p>除了手动指定外，这些方法原理上都是通过维护一套数据库机制，来管理集群中注册节点的 Docker daemon 的访问信息。</p>
<p>本地配置集群推荐使用 consul 作为服务发现后端。利用社区提供的 Docker 镜像，整个过程只需要三步即可完成。</p>
<h3 id="1-3-1-启动-Consul-服务后端"><a href="#1-3-1-启动-Consul-服务后端" class="headerlink" title="1.3.1 启动 Consul 服务后端"></a>1.3.1 启动 Consul 服务后端</h3><p>启动 consul 服务容器，映射到主机的 8500 端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8500:8500 --name=consul progrium/consul -server -bootstrap</span></span><br></pre></td></tr></table></figure>
<p>获取到本地主机的地址作为 consul 的服务地址：&lt;consul_ip&gt;:8500。</p>
<h3 id="1-3-2-启动管理节点"><a href="#1-3-2-启动管理节点" class="headerlink" title="1.3.2 启动管理节点"></a>1.3.2 启动管理节点</h3><p>首先，启动一个主管理节点，映射到主机的 4000 端口，并获取所在主机地址为 &lt;manager0_ip&gt;。其中 4000 端口是 Swarm 管理器的默认监听端口，用户也可以指定映射为其它端口。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p <span class="number">4000</span>:<span class="number">4000</span> swarm manage -<span class="string">H :</span><span class="number">4000</span> --replication --advertise &lt;manager0_ip&gt;:<span class="number">4000</span> <span class="string">consul:</span><span class="comment">//&lt;consul_ip&gt;:8500</span></span><br></pre></td></tr></table></figure>
<p>为了提高高可用性，用户也可以启动从管理节点。假定获取所在主机地址为 &lt;manager1_ip&gt;。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ docker run -d swarm manage -<span class="string">H :</span><span class="number">4000</span> --replication --advertise &lt;manager1_ip&gt;:<span class="number">4000</span> <span class="string">consul:</span><span class="comment">//&lt;consul_ip&gt;:8500</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-3-启动工作节点"><a href="#1-3-3-启动工作节点" class="headerlink" title="1.3.3 启动工作节点"></a>1.3.3 启动工作节点</h3><p>需要在每个工作节点上启动 agent 服务。</p>
<p>获取节点的主机地址为 &lt;node_ip&gt;，并指定前面获取到的 consul 服务地址。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ docker run -d swarm <span class="keyword">join</span> --advertise=<span class="symbol">&lt;node_ip&gt;</span>:<span class="number">2375</span> consu<span class="variable">l:</span>//<span class="symbol">&lt;consul_ip&gt;</span>:<span class="number">8500</span></span><br></pre></td></tr></table></figure>
<p>节点启动后，用户可以指定 Docker 服务地址为 &lt;manager0_ip&gt;:4000&gt; 来测试各种 Docker 命令，可以看到整个 Swarm 集群就像一个虚拟的 Docker 主机一样正常工作。</p>
<p>由于 Swarm 实际上是通过 agent 调用了本地的 Docker daemon 来运行容器，当 Swarm 集群服务出现故障时，无法接受新的请求，但已经运行起来的容器将不会受到影响。</p>
<h1 id="2-使用-Swarm"><a href="#2-使用-Swarm" class="headerlink" title="2 使用 Swarm"></a>2 使用 Swarm</h1><p>前面演示了基于 consul 服务发现后端来配置一个本地 Swarm 集群。其中，consul 也可以被替换为 etcd、zookeeper 等。</p>
<p>另外一个更方便的方式是直接使用 DockerHub 提供的免费服务发现后端。</p>
<p>下面使用这种方式来演示 Swarm 的主要操作，包括：</p>
<ul>
<li>create：创建一个集群； </li>
<li>list：列出集群中的节点； </li>
<li>manage：管理一个集群； </li>
<li>join：让节点加入到某个集群。</li>
</ul>
<blockquote>
<p>注意，使用 DockerHub 的服务发现后端，需要各个节点能通过公网访问到 DockerHub 的服务接口。</p>
</blockquote>
<h2 id="2-1-创建集群-id"><a href="#2-1-创建集群-id" class="headerlink" title="2.1 创建集群 id"></a>2.1 创建集群 id</h2><p>在任意一台安装了 Swarm 的机器上执行 swarm create 命令来在 DockerHub 服务上进行注册。</p>
<p>Swarm 会通过服务发现后端（此处为 DockerHub 提供）来获取一个唯一的由数字和字母组成的 token，用来标识要管理的集群。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span><span class="bash"> --rm swarm create</span></span><br><span class="line"><span class="bash">946d65606f7c2f49766e4dddac5b4365</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意返回的字符串，这是集群的唯一 id，加入集群的各个节点将需要这个信息。</p>
</blockquote>
<h2 id="2-2-配置集群节点"><a href="#2-2-配置集群节点" class="headerlink" title="2.2 配置集群节点"></a>2.2 配置集群节点</h2><p>在所有要加入集群的普通节点上面执行 swarm join 命令，表示把这台机器加入指定集群当中。</p>
<p>例如某台机器 IP 地址为 192.168.0.2，将其加入我们刚创建的 946d65606f7c2f49766e4dddac5b4365 集群，则可以通过：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --<span class="keyword">rm</span> swarm join --addr=192.168.0.2:2375 <span class="keyword">token</span>:<span class="comment">//946d65606f7c2f49766e4dddac5b4365</span></span><br><span class="line">time=<span class="string">"2015-12-09T08:59:43Z"</span> level=info msg=<span class="string">"Registering on the discovery service every 20s..."</span> addr=<span class="string">"192.168.0.2:2375"</span> discovery=<span class="string">"token://946d65606f7c2f49766e4dddac5b4365"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：其中 –addr 指定的 IP 地址信息将被发送给服务发现后端，用以区分集群不同的节点。manager<br>服务必须要通过这个地址可以访问到该节点。</p>
</blockquote>
<p>通过控制台可以看到，上述命令执行后，默认每隔 20 秒（可以通过 –heartbeat 选项指定），会输出一条心跳信息。对于发现服务后端来说，默认如果超过 60 秒（可以通过 –ttl 选项指定）没有收到心跳信息，则将节点从列表中删除。</p>
<p>如果不希望看到输出日志信息，则可以用 -d 选项替换 –rm 选项，让服务后台执行。</p>
<p>执行 swarm join 命令实际上是通过 agent 把自己的信息注册到发现服务上，因此，此时对于后端的发现服务来说，已经可以看到有若干节点注册上来了。那么，如何管理和使用这些节点呢，这就得需要 Swarm 的 manager 服务了。</p>
<h2 id="2-3-配置管理节点"><a href="#2-3-配置管理节点" class="headerlink" title="2.3 配置管理节点"></a>2.3 配置管理节点</h2><p>配置管理节点需要通过 swarm manage 命令，该命令将启动 manager 服务，默认监听到 2375 端口，所有对集群的管理可以通过该服务接口进行。</p>
<p>读者可能注意到，manager 服务默认监听的端口跟 Docker 服务监听端口是一样的，这是为了兼容其它基于 Docker 的服务，可以无缝地切换到 Swarm 平台上来。</p>
<p>仍然在节点 <code>192.168.0.2</code> 进行操作。由于我们是采用 Docker 容器形式启动 manager 服务，本地的 2375端口已经被 Docker Daemon 占用。我们将 manager 服务监听端口映射到本地一个空闲的 12375 端口。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span><span class="bash"> -d -p 12375:2375 swarm manage token://946d65606f7c2f49766e4dddac5b4365</span></span><br><span class="line"><span class="bash">1e1ca8c4117b6b7271efc693f9685b4e907d8dc95324350392b21e94b3cffd18</span></span><br></pre></td></tr></table></figure>
<p>可以通过 <code>docker ps</code> 命令来查看启动的 swarm manager 服务容器。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">1e1ca8c4117b        swarm               <span class="string">"/swarm manage token:"</span>   <span class="number">11</span> seconds ago      <span class="meta">Up</span> <span class="number">10</span> seconds       <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">12375</span>-&gt;<span class="number">2375</span>/tcp   jovial_rosalind</span><br></pre></td></tr></table></figure>
<p>命令如果执行成功会返回刚启动的 Swarm 容器的 ID，此时一个简单的 Swarm 集群就已经搭建起来了，包括一个普通节点和一个管理节点。</p>
<h2 id="2-4-查看集群节点列表"><a href="#2-4-查看集群节点列表" class="headerlink" title="2.4 查看集群节点列表"></a>2.4 查看集群节点列表</h2><p>集群启动成功以后，用户可以在任何一台节点上使用 <code>swarm list</code> 命令查看集群中的节点列表。例如</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --<span class="keyword">rm</span> swarm <span class="keyword">list</span> <span class="keyword">token</span>:<span class="comment">//946d65606f7c2f49766e4dddac5b4365</span></span><br><span class="line">192.168.0.2:2375</span><br></pre></td></tr></table></figure>
<p>显示正是之前用 <code>swarm join</code> 命令加入集群的节点的地址。</p>
<p>我们在另外一台节点 <code>192.168.0.3</code> 上同样使用 <code>swarm join</code> 命令新加入一个节点：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --<span class="keyword">rm</span> swarm join --addr=192.168.0.3:2375 <span class="keyword">token</span>:<span class="comment">//946d65606f7c2f49766e4dddac5b4365</span></span><br><span class="line">time=<span class="string">"2015-12-10T02:05:34Z"</span> level=info msg=<span class="string">"Registering on the discovery service every 20s..."</span> addr=<span class="string">"192.168.0.3:2375"</span> discovery=<span class="string">"token://946d65606f7c2f49766e4dddac5b4365"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>再次使用 swarm list 命令查看集群中的节点列表信息，可以看到新加入的节点：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --<span class="keyword">rm</span> swarm <span class="keyword">list</span> <span class="keyword">token</span>:<span class="comment">//946d65606f7c2f49766e4dddac5b4365</span></span><br><span class="line">192.168.0.3:2375</span><br><span class="line">192.168.0.2:2375</span><br></pre></td></tr></table></figure>
<h2 id="2-5-使用集群服务"><a href="#2-5-使用集群服务" class="headerlink" title="2.5 使用集群服务"></a>2.5 使用集群服务</h2><p>那么，怎么使用 Swarm 提供的服务呢？</p>
<p>实际上，所有 Docker 客户端可以继续使用，只要指定使用 Swarm manager 服务的监听地址即可。</p>
<p>例如，manager 服务监听的地址为 <code>192.168.0.2:12375</code>，则可以通过指定 <code>-H 192.168.0.2:12375</code> 选项来继续使用 Docker 客户端，执行任意 Docker 命令，例如 <code>ps、info、run</code> 等等。</p>
<p>在任意节点上使用 docker run 来启动若干容器，例如</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span>:<span class="number">12375</span> run -d ubuntu ping <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span></span><br><span class="line">4c9bccbf86fb6e2243da58c1b15e9378fac362783a663426bbe7058eea84de46</span><br></pre></td></tr></table></figure>
<p>使用 ps 命令查看集群中正在运行的容器。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES</span><br><span class="line">4c9bccbf86fb        ubuntu              <span class="string">"ping 127.0.0.1"</span>         About a minute ago   <span class="meta">Up</span> About a minute                       clever_wright</span><br><span class="line">730061a3801a        registry:latest     <span class="string">"docker-registry"</span>        <span class="number">2</span> minutes ago        <span class="meta">Up</span> <span class="number">2</span> minutes         <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">5000</span>-&gt;<span class="number">5000</span>/tcp   Host-<span class="number">1</span>/registry_registry_1</span><br><span class="line">72d99f24a06f        redis:<span class="number">3.0</span>           <span class="string">"/entrypoint.sh redis"</span>   <span class="number">2</span> minutes ago        <span class="meta">Up</span> <span class="number">2</span> minutes         <span class="number">6379</span>/tcp                      Host-<span class="number">1</span>/registry_redis_1,Host-<span class="number">1</span>/registry_registry_1/redis,Host-<span class="number">1</span>/registry_registry_1/redis_1,Host-<span class="number">1</span>/registry_registry_1/registry_redis_1</span><br></pre></td></tr></table></figure>
<p>输出结果中显示目前集群中正在运行的容器（注意不包括 Swarm manager 服务容器），可以在不同节点上使用 docker ps 查看本地容器，发现这些容器实际上可能运行在集群中多个节点上（被 Swarm 调度策略进行分配）。</p>
<p>使用 info 查看所有节点的信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">docker</span> <span class="bullet">-H</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span><span class="string">:12375</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Containers:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">Images:</span> <span class="number">36</span></span><br><span class="line"><span class="attr">Role:</span> <span class="string">primary</span></span><br><span class="line"><span class="attr">Strategy:</span> <span class="string">spread</span></span><br><span class="line"><span class="attr">Filters:</span> <span class="string">health,</span> <span class="string">port,</span> <span class="string">dependency,</span> <span class="string">affinity,</span> <span class="string">constraint</span></span><br><span class="line"><span class="attr">Nodes:</span> <span class="number">2</span></span><br><span class="line"><span class="attr"> Host-1:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span><span class="string">:2375</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Containers:</span> <span class="number">15</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">CPUs:</span> <span class="number">0</span> <span class="string">/</span> <span class="number">4</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">Memory:</span> <span class="number">1</span> <span class="string">GiB</span> <span class="string">/</span> <span class="number">4.053</span> <span class="string">GiB</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Labels:</span> <span class="string">executiondriver=native-0.2,</span> <span class="string">kernelversion=3.16.0-43-generic,</span> <span class="string">operatingsystem=Ubuntu</span> <span class="number">14.04</span><span class="number">.3</span> <span class="string">LTS,</span> <span class="string">storagedriver=aufs</span></span><br><span class="line"><span class="attr"> Host-2:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span><span class="string">:2375</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Containers:</span> <span class="number">3</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">CPUs:</span> <span class="number">0</span> <span class="string">/</span> <span class="number">8</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">Memory:</span> <span class="number">0</span> <span class="string">B</span> <span class="string">/</span> <span class="number">16.46</span> <span class="string">GiB</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Labels:</span> <span class="string">executiondriver=native-0.2,</span> <span class="string">kernelversion=3.16.0-30-generic,</span> <span class="string">operatingsystem=Ubuntu</span> <span class="number">14.04</span><span class="number">.3</span> <span class="string">LTS,</span> <span class="string">storagedriver=aufs</span></span><br><span class="line"><span class="attr">CPUs:</span> <span class="number">12</span></span><br><span class="line"><span class="string">Total</span> <span class="attr">Memory:</span> <span class="number">20.51</span> <span class="string">GiB</span></span><br><span class="line"><span class="attr">Name:</span> <span class="number">1e1</span><span class="string">ca8c4117b</span></span><br></pre></td></tr></table></figure>
<p>结果输出显示这个集群目前只有两个节点，地址分别是 <code>192.168.0.2</code> 和 <code>192.168.0.3</code>。</p>
<p>类似的，也可以通过 Compose 模板来启动多个服务。不过请注意，要想让服务分布到多个 Swarm 节点上，需要采用版本 2 的写法。</p>
<h2 id="2-6-使用网络"><a href="#2-6-使用网络" class="headerlink" title="2.6 使用网络"></a>2.6 使用网络</h2><p>Swarm 为了支持跨主机的网络，默认采用了 overlay 网络类型，实现上通过 vxlan 来构建联通整个 Swarm 集群的网络。</p>
<p>首先，在集群中所有节点上，添加配置 Docker daemon 选项：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">--cluster-store=<span class="tag">&lt;<span class="name">DISCOVERY_HOST:PORT</span>&gt;</span> --cluster-advertise=<span class="tag">&lt;<span class="name">DOCKER_DAEMON_HOST:PORT</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以 consul 服务为例，可能类似：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="params">--cluster-store=consul</span>:<span class="string">//</span>&lt;consul 服务地址&gt;<span class="function">:8500</span> <span class="params">--cluster-advertise=192</span>.168.0.3<span class="function">:2375</span></span><br></pre></td></tr></table></figure>
<p>之后重启 Docker 服务。</p>
<p>首先，创建一个网络。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> network create swarm_network</span><br></pre></td></tr></table></figure>
<p>查看网络，将看到一个 overlay 类型的网络。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER</span><br><span class="line">6edf2d16ec97        swarm_network       overlay</span><br></pre></td></tr></table></figure>
<p>此时，所有添加到这个网络上的容器将自动被分配到集群中的节点上，并且彼此联通。</p>
<h1 id="3-使用其它服务发现后端"><a href="#3-使用其它服务发现后端" class="headerlink" title="3 使用其它服务发现后端"></a>3 使用其它服务发现后端</h1><p>Swarm 目前可以支持多种服务发现后端，这些后端功能上都是一致的，即维护属于某个集群的节点的信息。不同方案并无优劣之分，在实际使用时候，可以结合自身需求和环境限制进行选择，甚至自己定制其它方案。</p>
<p>使用中可以通过不同的路径来选择特定的服务发现后端机制。</p>
<p> -<code>token://&lt;token&gt;</code>：使用 DockerHub 提供的服务，适用于可以访问公网情况；</p>
<ul>
<li><code>file://path/to/file</code>：使用本地文件，需要手动管理； </li>
<li><code>consul://&lt;ip&gt;/&lt;path&gt;</code>：使用 consul服务，私有环境推荐； </li>
<li><code>etcd://&lt;ip1&gt;,&lt;ip2&gt;/&lt;path&gt;</code>：使用 etcd 服务，私有环境推荐；</li>
<li><code>zk://&lt;ip1&gt;,&lt;ip2&gt;/&lt;path&gt;</code>：使用 zookeeper 服务，私有环境推荐；</li>
<li><code>[nodes://]&lt;ip1&gt;,&lt;ip2&gt;</code>：手动指定集群中节点的地址，方便进行服务测试。</li>
</ul>
<h2 id="3-1-使用文件"><a href="#3-1-使用文件" class="headerlink" title="3.1 使用文件"></a>3.1 使用文件</h2><p>使用本地文件的方式十分简单，就是讲所有属于某个集群的节点的 Docker daemon 信息写入一个文件中，然后让 manager 从这个文件中直接读取相关信息。</p>
<p>首先，在 Swarm 管理节点（192.168.0.2）上新建一个文件，把要加入集群的机器的 Docker daemon 信息写入文件：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ tee /tmp/cluster_info &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line"><span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">2375</span></span><br><span class="line"><span class="number">192.168</span><span class="meta">.0</span><span class="meta">.3</span>:<span class="number">2375</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>然后，本地执行 swarm manage 命令，并指定服务发现机制为本地文件，注意因为是容器方式运行 manager，需要将本地文件挂载到容器内。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p <span class="number">12375</span>:<span class="number">2375</span> -v <span class="regexp">/tmp/</span><span class="string">cluster_info:</span><span class="regexp">/tmp/</span>cluster_info swarm manage <span class="string">file:</span><span class="comment">///tmp/cluster_info</span></span><br></pre></td></tr></table></figure>
<p>接下来就可以通过使用 Swarm 服务来进行管理了，例如使用 info 查看所有节点的信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">docker</span> <span class="bullet">-H</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span><span class="string">:12375</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Containers:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">Images:</span> <span class="number">36</span></span><br><span class="line"><span class="attr">Role:</span> <span class="string">primary</span></span><br><span class="line"><span class="attr">Strategy:</span> <span class="string">spread</span></span><br><span class="line"><span class="attr">Filters:</span> <span class="string">health,</span> <span class="string">port,</span> <span class="string">dependency,</span> <span class="string">affinity,</span> <span class="string">constraint</span></span><br><span class="line"><span class="attr">Nodes:</span> <span class="number">2</span></span><br><span class="line"><span class="attr"> Host-1:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span><span class="string">:2375</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Containers:</span> <span class="number">15</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">CPUs:</span> <span class="number">0</span> <span class="string">/</span> <span class="number">4</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">Memory:</span> <span class="number">1</span> <span class="string">GiB</span> <span class="string">/</span> <span class="number">4.053</span> <span class="string">GiB</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Labels:</span> <span class="string">executiondriver=native-0.2,</span> <span class="string">kernelversion=3.16.0-43-generic,</span> <span class="string">operatingsystem=Ubuntu</span> <span class="number">14.04</span><span class="number">.3</span> <span class="string">LTS,</span> <span class="string">storagedriver=aufs</span></span><br><span class="line"><span class="attr"> Host-2:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span><span class="string">:2375</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Containers:</span> <span class="number">3</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">CPUs:</span> <span class="number">0</span> <span class="string">/</span> <span class="number">8</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">Memory:</span> <span class="number">0</span> <span class="string">B</span> <span class="string">/</span> <span class="number">16.46</span> <span class="string">GiB</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Labels:</span> <span class="string">executiondriver=native-0.2,</span> <span class="string">kernelversion=3.16.0-30-generic,</span> <span class="string">operatingsystem=Ubuntu</span> <span class="number">14.04</span><span class="number">.3</span> <span class="string">LTS,</span> <span class="string">storagedriver=aufs</span></span><br><span class="line"><span class="attr">CPUs:</span> <span class="number">12</span></span><br><span class="line"><span class="string">Total</span> <span class="attr">Memory:</span> <span class="number">20.51</span> <span class="string">GiB</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">e71eb5f1d48b</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-其它发现服务后端"><a href="#3-2-其它发现服务后端" class="headerlink" title="3.2 其它发现服务后端"></a>3.2 其它发现服务后端</h2><p>其它服务发现后端的使用方法，也是大同小异，不同之处在于使用 Swarm 命令时指定的路径格式不同。</p>
<p>例如，对于前面介绍的 consul 服务后端来说。</p>
<p>快速部署一个 consul 服务的命令为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8500:8500 --name=consul progrium/consul -server -bootstrap</span></span><br></pre></td></tr></table></figure>
<p>之后创建 Swarm 的管理服务，指定使用 consul 服务，管理端口监听在本地的 4000 端口。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p <span class="number">4000</span>:<span class="number">4000</span> swarm manage -<span class="string">H :</span><span class="number">4000</span> --replication --advertise &lt;manager_ip&gt;:<span class="number">4000</span> <span class="string">consul:</span><span class="comment">//&lt;consul_ip&gt;:8500</span></span><br></pre></td></tr></table></figure>
<p>Swarm 节点注册时候命令格式类似于：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ swarm join --advertise=<span class="tag">&lt;<span class="name">node_ip:2375</span>&gt;</span> consul://<span class="tag">&lt;<span class="name">consul_addr</span>&gt;</span>/<span class="tag">&lt;<span class="name">optional</span> <span class="attr">path</span> <span class="attr">prefix</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于 etcd 服务后端来说，节点注册时候命令格式类似于：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ swarm join --addr=<span class="tag">&lt;<span class="name">node_addr:2375</span>&gt;</span> etcd://<span class="tag">&lt;<span class="name">etcd_addr1</span>&gt;</span>,<span class="tag">&lt;<span class="name">etcd_addr2</span>&gt;</span>/<span class="tag">&lt;<span class="name">optional</span> <span class="attr">path</span> <span class="attr">prefix</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动管理服务时候，格式类似于：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ swarm manage -H tcp://<span class="tag">&lt;<span class="name">manager_ip</span>&gt;</span>:4000 etcd://<span class="tag">&lt;<span class="name">etcd_addr1</span>&gt;</span>,<span class="tag">&lt;<span class="name">etcd_addr2</span>&gt;</span>/<span class="tag">&lt;<span class="name">optional</span> <span class="attr">path</span> <span class="attr">prefix</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-地址和端口的范围匹配"><a href="#3-3-地址和端口的范围匹配" class="headerlink" title="3.3 地址和端口的范围匹配"></a>3.3 地址和端口的范围匹配</h2><p>对于基于文件，以及手动指定节点信息两种服务发现后端机制来说，其中地址和端口域可以支持指定一个范围，以一次性指定多个地址。 例如：</p>
<ul>
<li><code>192.168.0.[2:10]:2375</code> 代表 <code>192.168.0.2:2375</code> – <code>192.168.0.10:2375</code> 一共 9 个地址；</li>
<li><code>192.168.0.2:[2:9]375</code> 代表 <code>192.168.0.2:2375</code> – <code>192.168.0.2:9375</code> 一共 8 个地址。</li>
</ul>
<h1 id="4-Swarm-中的调度器"><a href="#4-Swarm-中的调度器" class="headerlink" title="4 Swarm 中的调度器"></a>4 Swarm 中的调度器</h1><p>调度是集群十分重要的功能，Swarm 目前支持三种调度策略：<code>spread、binpack 和 random</code>。</p>
<p>在执行<code>swarm manage</code>命令启动管理服务的时候，可以通过<code>--strategy</code> 参数指定调度策略，默认的是 <code>spread</code>。</p>
<p>简单来说，这三种调度策略的优化目标如下：</p>
<ul>
<li><code>spread</code>：如果节点配置相同，选择一个正在运行的容器数量最少的那个节点，即尽量平摊容器到各个节点；</li>
<li><code>binpack</code>：跟 <code>spread</code> 相反，尽可能的把所有的容器放在一台节点上面运行，即尽量少用节点，避免容器碎片化。</li>
<li><code>random</code>：直接随机分配，不考虑集群中节点的状态，方便进行测试使用。</li>
</ul>
<h2 id="4-1-spread-调度策略"><a href="#4-1-spread-调度策略" class="headerlink" title="4.1 spread 调度策略"></a>4.1 spread 调度策略</h2><p>仍然以之前创建好的集群为例，来演示下 spread 策略的行为。</p>
<p>在 <code>192.168.0.2</code> 节点启动管理服务，管理 token://946d65606f7c2f49766e4dddac5b4365 的集群。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p <span class="number">12375</span>:<span class="number">2375</span> swarm manage  --strategy <span class="string">"spread"</span> token://<span class="number">946</span>d<span class="number">65606</span>f<span class="number">7</span><span class="keyword">c</span><span class="number">2</span>f<span class="number">49766e4</span>dddac<span class="number">5</span>b<span class="number">4365</span></span><br><span class="line"><span class="keyword">c</span><span class="number">6</span>f<span class="number">25e6</span>e<span class="number">6</span>abbe<span class="number">45</span><span class="keyword">c</span><span class="number">8</span>bcf<span class="number">75</span>ac<span class="number">674</span>f<span class="number">2</span>b<span class="number">64</span>d<span class="number">5</span>f<span class="number">31</span>a<span class="number">5</span><span class="keyword">c</span><span class="number">6070</span>d<span class="number">64</span>ba<span class="number">954</span>a<span class="number">0309</span>b<span class="number">197930</span></span><br></pre></td></tr></table></figure>
<p>列出集群中节点。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --<span class="keyword">rm</span> swarm <span class="keyword">list</span> <span class="keyword">token</span>:<span class="comment">//946d65606f7c2f49766e4dddac5b4365</span></span><br><span class="line">192.168.0.3:2375</span><br><span class="line">192.168.0.2:2375</span><br></pre></td></tr></table></figure>
<p>此时，两个节点上除了 swarm 外都没有运行其它容器。</p>
<p>启动一个 ubuntu 容器。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> run -d ubuntu:<span class="number">14.04</span> ping <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span></span><br><span class="line">bac3dfda5306181140fc959969d738549d607bc598390f57bdd432d86f16f069</span><br></pre></td></tr></table></figure>
<p>查看发现它实际上被调度到了 192.168.0.3 节点（当节点配置相同时候，初始节点随机选择）。</p>
<p>再次启动一个 ubuntu 容器。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> run -d ubuntu:<span class="number">14.04</span> ping <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span></span><br><span class="line">8247067ba3a31e0cb692a8373405f95920a10389ce3c2a07091408281695281c</span><br></pre></td></tr></table></figure>
<p>查看它的位置，发现被调度到了另外一个节点：192.168.0.2 节点。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES</span><br><span class="line">8247067ba3a3        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">1</span> minutes ago       <span class="meta">Up</span> <span class="number">1</span> minutes                            Host-<span class="number">2</span>/sick_galileo</span><br><span class="line">bac3dfda5306        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">2</span> minutes ago       <span class="meta">Up</span> <span class="number">2</span> minutes                            Host-<span class="number">3</span>/compassionate_ritchie</span><br></pre></td></tr></table></figure>
<p>当节点配置不同的时候，spread会更愿意分配到配置较高的节点上。</p>
<h2 id="4-2-binpack-调度策略"><a href="#4-2-binpack-调度策略" class="headerlink" title="4.2 binpack 调度策略"></a>4.2 binpack 调度策略</h2><p>现在来看看 <code>binpack</code> 策略下的情况。</p>
<p>直接启动若干 ubuntu 容器，并查看它们的位置。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> run -d ubuntu:<span class="number">14.04</span> ping <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span></span><br><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES</span><br><span class="line">4c4f45eba866        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">3</span> minutes ago       <span class="meta">Up</span> <span class="number">3</span> minutes                            Host-<span class="number">3</span>/hopeful_brown</span><br><span class="line">5e650541233c        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">3</span> minutes ago       <span class="meta">Up</span> <span class="number">3</span> minutes                            Host-<span class="number">3</span>/pensive_wright</span><br><span class="line">99c5a092530a        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">3</span> minutes ago       <span class="meta">Up</span> <span class="number">3</span> minutes                            Host-<span class="number">3</span>/naughty_engelbart</span><br><span class="line">4ab392c26eb2        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">3</span> minutes ago       <span class="meta">Up</span> <span class="number">3</span> minutes                            Host-<span class="number">3</span>/thirsty_mclean</span><br></pre></td></tr></table></figure>
<p>可以看到，所有的容器都是分布在同一个节点（192.168.0.3）上运行的。</p>
<h1 id="5-Swarm-中的过滤器"><a href="#5-Swarm-中的过滤器" class="headerlink" title="5 Swarm 中的过滤器"></a>5 Swarm 中的过滤器</h1><p>Swarm 的调度器可以按照指定调度策略自动分配容器到节点。但有些时候希望能对这些分配加以干预。比如说，让 IO 敏感的容器分配到安装了 SSD 的节点上；让计算敏感的容器分配到 CPU 核数多的机器上；让网络敏感的容器分配到高带宽的机房；让某些容器尽量放同一个节点……。</p>
<p>这可以通过过滤器（filter）来实现，目前支持 <code>Constraint、Affinity、Port、Dependency、Health</code>等五种过滤器。</p>
<h2 id="5-1-Constraint-过滤器"><a href="#5-1-Constraint-过滤器" class="headerlink" title="5.1 Constraint 过滤器"></a>5.1 Constraint 过滤器</h2><p>Constraint 过滤器是绑定到节点的键值对，相当于给节点添加标签。</p>
<p>可在启动 Docker 服务的时候指定，例如指定某个节点颜色为 red。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo docker daemon --label color=red -H <span class="symbol">tcp:</span>/<span class="regexp">/0.0.0.0:2375 -H unix:/</span><span class="regexp">//var</span><span class="regexp">/run/docker</span>.sock</span><br></pre></td></tr></table></figure>
<p>同样的，可以写在 Docker 服务的配置文件里面（以 Ubuntu 14.04 为例，是 /etc/default/docker）。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">"--label color=red -H 0.0.0.0:2375 -H unix:///var/run/docker.sock"</span></span><br></pre></td></tr></table></figure>
<p>使用 Swarm 启动容器的时候，采用 -e constarint:key=value 的形式，可以过滤选择出匹配条件的节点。</p>
<p>例如，我们将 <code>192.168.0.2</code> 节点打上红色标签，<code>192.168.0.3</code> 节点打上绿色标签。</p>
<p>然后，分别启动两个容器，指定使用过滤器分别为红色和绿色。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span>.<span class="number">0.2</span>:<span class="number">12375</span> <span class="keyword">run</span><span class="bash"> -d -e constraint:color==red ubuntu:14.04 ping 127.0.0.1</span></span><br><span class="line"><span class="bash">252ffb48e64e9858c72241f5eedf6a3e4571b1ad926faf091db3e26672370f64</span></span><br><span class="line"><span class="bash">$ docker -H 192.168.0.2:12375 run -d -e constraint:color==green ubuntu:14.04 ping 127.0.0.1</span></span><br><span class="line"><span class="bash">3d6f8d7af8583416b17061d038545240c9e5c3be7067935d3ef2fbddce4b8136</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：指定标签中间是两个等号</p>
</blockquote>
<p>查看它们将被分配到指定节点上。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES</span><br><span class="line">252ffb48e64e        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">1</span> minutes ago       <span class="meta">Up</span> <span class="number">1</span> minutes                            Host-<span class="number">2</span>/sick_galileo</span><br><span class="line">3d6f8d7af858        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">2</span> minutes ago       <span class="meta">Up</span> <span class="number">2</span> minutes                            Host-<span class="number">3</span>/compassionate_ritchie</span><br></pre></td></tr></table></figure>
<p>另外，Docker 内置了一些常见的过滤器，包括 <code>node、storagedriver、executiondriver、kernelversion、operatingsystem</code> 等。这些值可以通过 docker info 命令查看。</p>
<p>例如，目前集群中各个节点的信息为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">docker</span> <span class="bullet">-H</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span><span class="string">:12375</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Containers:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">Images:</span> <span class="number">39</span></span><br><span class="line"><span class="attr">Role:</span> <span class="string">primary</span></span><br><span class="line"><span class="attr">Strategy:</span> <span class="string">spread</span></span><br><span class="line"><span class="attr">Filters:</span> <span class="string">health,</span> <span class="string">port,</span> <span class="string">dependency,</span> <span class="string">affinity,</span> <span class="string">constraint</span></span><br><span class="line"><span class="attr">Nodes:</span> <span class="number">2</span></span><br><span class="line"><span class="attr"> Host-2:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span><span class="string">:2375</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Containers:</span> <span class="number">4</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">CPUs:</span> <span class="number">0</span> <span class="string">/</span> <span class="number">4</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">Memory:</span> <span class="number">1</span> <span class="string">GiB</span> <span class="string">/</span> <span class="number">4.053</span> <span class="string">GiB</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Labels:</span> <span class="string">color=red,</span> <span class="string">executiondriver=native-0.2,</span> <span class="string">kernelversion=3.16.0-43-generic,</span> <span class="string">operatingsystem=Ubuntu</span> <span class="number">14.04</span><span class="number">.3</span> <span class="string">LTS,</span> <span class="string">storagedriver=aufs</span></span><br><span class="line"><span class="attr"> Host-3:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span><span class="string">:2375</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Containers:</span> <span class="number">1</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">CPUs:</span> <span class="number">0</span> <span class="string">/</span> <span class="number">8</span></span><br><span class="line">  <span class="string">└</span> <span class="string">Reserved</span> <span class="attr">Memory:</span> <span class="number">0</span> <span class="string">B</span> <span class="string">/</span> <span class="number">16.46</span> <span class="string">GiB</span></span><br><span class="line">  <span class="string">└</span> <span class="attr">Labels:</span> <span class="string">color=green,</span> <span class="string">executiondriver=native-0.2,</span> <span class="string">kernelversion=3.16.0-30-generic,</span> <span class="string">operatingsystem=Ubuntu</span> <span class="number">14.04</span><span class="number">.3</span> <span class="string">LTS,</span> <span class="string">storagedriver=aufs</span></span><br><span class="line"><span class="attr">CPUs:</span> <span class="number">12</span></span><br><span class="line"><span class="string">Total</span> <span class="attr">Memory:</span> <span class="number">20.51</span> <span class="string">GiB</span></span><br><span class="line"><span class="attr">Name:</span> <span class="number">946</span><span class="string">d65606f7c</span></span><br></pre></td></tr></table></figure>
<h2 id="5-2-Affinity-过滤器"><a href="#5-2-Affinity-过滤器" class="headerlink" title="5.2 Affinity 过滤器"></a>5.2 Affinity 过滤器</h2><p>Affinity 过滤器允许用户在启动一个容器的时候，让它分配到某个已有容器的节点上。</p>
<p>例如，下面我们将启动一个 nginx 容器，让它分配到已经运行某个 ubuntu 容器的节点上。</p>
<p>在 Constraint 过滤器的示例中，我们分别启动了两个 ubuntu 容器 <code>sick_galileo</code> 和 <code>compassionate_ritchie</code>，分别在 Host-2 和 Host-3 上。</p>
<p>现在启动一个 nginx 容器，让它跟容器 <code>sick_galileo</code> 放在一起，都放到 Host-2 节点上。可以通过 <code>-e affinity:container==&lt;name or id&gt;</code> 参数来实现。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker -H 192.168.0.2:12375 run -d -e affinity:container==sick_galileo nginx</span></span><br></pre></td></tr></table></figure>
<p>然后启动一个 redis 容器，让它跟容器 <code>compassionate_ritchie</code> 放在一起，都放到 Host-3 节点上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker -H 192.168.0.2:12375 run -d -e affinity:container==compassionate_ritchie redis</span></span><br></pre></td></tr></table></figure>
<p>查看所有容器运行情况。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker -H <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">12375</span> ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES</span><br><span class="line">0a32f15aa8ee        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">2</span> seconds ago       <span class="meta">Up</span> <span class="number">1</span> seconds        <span class="number">6379</span>/tcp                  Host-<span class="number">3</span>/awesome_darwin</span><br><span class="line">d2b9a53e67d5        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">29</span> seconds ago      <span class="meta">Up</span> <span class="number">28</span> seconds       <span class="number">80</span>/tcp, <span class="number">443</span>/tcp               Host-<span class="number">2</span>/fervent_wilson</span><br><span class="line">252ffb48e64e        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">2</span> minutes ago       <span class="meta">Up</span> <span class="number">2</span> minutes                            Host-<span class="number">2</span>/sick_galileo</span><br><span class="line">3d6f8d7af858        ubuntu:<span class="number">14.04</span>        <span class="string">"ping 127.0.0.1"</span>         <span class="number">3</span> minutes ago       <span class="meta">Up</span> <span class="number">3</span> minutes                            Host-<span class="number">3</span>/compassionate_ritchie</span><br></pre></td></tr></table></figure>
<h2 id="5-3-其它过滤器"><a href="#5-3-其它过滤器" class="headerlink" title="5.3 其它过滤器"></a>5.3 其它过滤器</h2><p>其它过滤器的使用方法也是大同小异，例如通过 <code>affinity:image==&lt;name or id&gt;</code> 来选择拥有指定镜像的节点；通过 <code>-e affinity:label_name==value</code> 来选择拥有指定标签的容器所允许的节点。</p>
<p>此外，当容器端口需要映射到宿主机指定端口号的时候，Swarm 也会自动分配容器到指定宿主机端口可用的节点。</p>
<p>当不同容器之间存在数据卷或链接依赖的时候，Swarm 会分配这些容器到同一个节点上。</p>
<h1 id="6-本章小结"><a href="#6-本章小结" class="headerlink" title="6 本章小结"></a>6 本章小结</h1><p>本章笔者介绍了 Docker Swarm 的安装、使用和主要功能。</p>
<p>通过使用 Swarm，用户可以将若干 Docker 主机节点组成的集群当作一个大的虚拟 Docker 主机使用。并且，原先基于单机的 Docker 应用，可以无缝的迁移到 Swarm 上来。</p>
<p>实现这些功能的前提是服务自动发现能力。在现代分布式系统中，服务的自动发现、注册、更新等能力将成为系统的基本保障和重要基础。</p>
<p>在生产环境中，Swarm 的管理节点和发现服务后端要采用高可用性上的保护，可以采用集群模式。</p>
<p>值得一提的是，Swarm V2 功能已经被无缝嵌入到了 Docker 1.12+ 版本中，用户今后可以直接使用 Docker 命令来完成相关功能的配置，这将使得集群功能的管理更加简便。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>swarm</tag>
      </tags>
  </entry>
  <entry>
    <title>Openstack云镜像制作-Centos7篇</title>
    <url>/2018/08/27/Openstack%E4%BA%91%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C-Centos7%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、制作步骤"><a href="#一、制作步骤" class="headerlink" title="一、制作步骤"></a>一、制作步骤</h1><a id="more"></a>
<h2 id="1、安装kvm"><a href="#1、安装kvm" class="headerlink" title="1、安装kvm"></a>1、安装kvm</h2><p>参考centos 7系统安装配置kvm软件步骤</p>
<p><strong>1、创建虚拟硬盘大小10G     名称：centos7-dis.qcow2</strong></p>
<p><strong>2、安装系统</strong></p>
<blockquote>
<p>注意一：分区，分区的时候只给”/“ 根目录分一个区即可，其他都不要。格式ext4<br>注意二：网络设置方面，确保你的网卡eth0是DHCP状态的，而且请务必勾上”auto connect”的对勾</p>
</blockquote>
<h2 id="2、进入虚拟机系统操作"><a href="#2、进入虚拟机系统操作" class="headerlink" title="2、进入虚拟机系统操作"></a>2、进入虚拟机系统操作</h2><p>关于CentOS镜像制作需要注意以下几点：</p>
<p><strong>(1) 修改网络信息 /etc/sysconfig/network-scripts/ifcfg-eth0 （删掉mac信息)，如下：</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=Ethernet  </span><br><span class="line"><span class="attr">DEVICE</span>=eth0  </span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">yes</span>  </span><br><span class="line"><span class="attr">BOOTPROTO</span>=dhcp  </span><br><span class="line"><span class="attr">NM_CONTROLLED</span>=<span class="literal">no</span></span><br></pre></td></tr></table></figure>
<p><strong>(2) 删除已生成的网络设备规则，否则制作的镜像不能上网</strong><br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">rm</span> -rf /etc/udev/rules.<span class="keyword">d</span>/70-persistent-<span class="keyword">net</span>.rules</span><br></pre></td></tr></table></figure></p>
<p><strong>(3)增加一行到/etc/sysconfig/network</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">NOZERCONF</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<p><strong>(4)安装cloud-init（可选），cloud-init可以在开机时进行密钥注入以及修改hostname等，关于cloud-init，陈沙克的一篇博文有介绍：<a href="http://www.chenshake.com/about-openstack-centos-mirror/" target="_blank" rel="noopener">http://www.chenshake.com/about-openstack-centos-mirror/</a></strong></p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">$ yum install -y cloud-utils cloud-init parted</span><br></pre></td></tr></table></figure>
<p>修改配置文件/etc/cloud/cloud.cfg ，在cloud_init_modules 下面增加:</p>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="literal">- resolv-conf</span></span><br></pre></td></tr></table></figure>
<p><strong>(5)设置系统能自动获取openstack指定的hostname和ssh-key（可选）</strong><br>编辑/etc/rc.local文件，该文件在开机后会执行，加入以下代码：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">if [ ! -d /root/.ssh ]; then</span><br><span class="line">mkdir -p /root/.ssh</span><br><span class="line">chmod 700 /root/.ssh</span><br><span class="line">fi</span><br><span class="line"><span class="comment"># Fetch public key using HTTP</span></span><br><span class="line">ATTEMPTS=30</span><br><span class="line">FAILED=0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">while [ ! -f /root/.ssh/authorized_keys ]; do</span><br><span class="line">curl -f http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key &gt; /tmp/metadata-key 2&gt;/dev/null</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">cat /tmp/metadata-key &gt;&gt; /root/.ssh/authorized_keys</span><br><span class="line">chmod 0600 /root/.ssh/authorized_keys</span><br><span class="line">restorecon /root/.ssh/authorized_keys</span><br><span class="line">rm -f /tmp/metadata-key</span><br><span class="line">echo “Successfully retrieved<span class="keyword"> public</span> key from<span class="built_in"> instance </span>metadata”</span><br><span class="line">echo “*****************”</span><br><span class="line">echo “AUTHORIZED KEYS”</span><br><span class="line">echo “*****************”</span><br><span class="line">cat /root/.ssh/authorized_keys</span><br><span class="line">echo “*****************”</span><br><span class="line"></span><br><span class="line">curl -f http://169.254.169.254/latest/meta-data/hostname &gt; /tmp/metadata-hostname 2&gt;/dev/null</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">TEMP_HOST=`cat /tmp/metadata-hostname`</span><br><span class="line">sed -i “s/^HOSTNAME=.*$/HOSTNAME=$TEMP_HOST/g” /etc/sysconfig/network</span><br><span class="line">/bin/hostname $TEMP_HOST</span><br><span class="line">echo “Successfully retrieved hostname from<span class="built_in"> instance </span>metadata”</span><br><span class="line">echo “*****************”</span><br><span class="line">echo “HOSTNAME CONFIG”</span><br><span class="line">echo “*****************”</span><br><span class="line">cat /etc/sysconfig/network</span><br><span class="line">echo “*****************”</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">echo “Failed to retrieve hostname from<span class="built_in"> instance </span>metadata. This is a soft error so we’ll continue”</span><br><span class="line">fi</span><br><span class="line">rm -f /tmp/metadata-hostname</span><br><span class="line">else</span><br><span class="line">FAILED=$(($FAILED + 1))</span><br><span class="line">if [ $FAI<span class="class">LED -ge $ATTEMPTS ];</span> then</span><br><span class="line">echo “Failed to retrieve<span class="keyword"> public</span> key from<span class="built_in"> instance </span>metadata after $FAILED attempts, quitting”</span><br><span class="line">break</span><br><span class="line">fi</span><br><span class="line">echo “Could<span class="built_in"> not </span>retrieve<span class="keyword"> public</span> key from<span class="built_in"> instance </span>metadata (attempt <span class="comment">#$FAILED/$ATTEMPTS), retrying in 5 seconds…”</span></span><br><span class="line">sleep 5</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set a random pass on first boot</span></span><br><span class="line"><span class="keyword">if</span> [ -f /root/firstrun ]; <span class="keyword">then</span></span><br><span class="line">  dd <span class="keyword">if</span>=/dev/urandom count=50|md5sum|passwd --stdin root</span><br><span class="line">  passwd -l root</span><br><span class="line">  rm /root/firstrun</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d /root/.ssh ]; <span class="keyword">then</span></span><br><span class="line">  mkdir -m 0700 -p /root/.ssh</span><br><span class="line">  restorecon /root/.ssh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Get the root ssh key setup</span></span><br><span class="line"><span class="comment"># Get the root ssh key setup</span></span><br><span class="line">ReTry=0</span><br><span class="line"><span class="keyword">while</span> [ ! -f /root/.ssh/authorized_keys ] &amp;&amp; [ <span class="variable">$ReTry</span> -lt 10 ]; <span class="keyword">do</span></span><br><span class="line">  sleep 2</span><br><span class="line">  curl -f http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key &gt; /root/.ssh/pubkey</span><br><span class="line">  <span class="keyword">if</span> [ 0 -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    mv /root/.ssh/pubkey /root/.ssh/authorized_keys</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  ReTry=$[Retry+1]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">chmod 600 /root/.ssh/authorized_keys &amp;&amp; restorecon /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>主要目的就是获取hostname和公钥</p>
<p><strong>(6)其他</strong></p>
<p>route命令查看一下路由表</p>
<p>查看/etc/ssh/sshd_conf中PermitRootLogin是不是为yes</p>
<p>清除操作记录</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">清除登陆系统成功的记录</span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># echo &gt; /var/log/wtmp //此文件默认打开时乱码，可查到ip等信息</span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># last //此时即查不到用户登录信息</span></span><br><span class="line"></span><br><span class="line">清除登陆系统失败的记录</span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># echo &gt; /var/log/btmp //此文件默认打开时乱码，可查到登陆失败信息</span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># lastb //查不到登陆失败信息</span></span><br><span class="line"> </span><br><span class="line">清除历史执行命令</span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># history -c //清空历史执行命令</span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># echo &gt; ./.bash_history //或清空用户目录下的这个文件即可</span></span><br><span class="line"> </span><br><span class="line">导入空历史记录</span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># vi /root/history //新建记录文件</span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># history -c //清除记录 </span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># history -r /root/history.txt //导入记录 </span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># history //查询导入结果</span></span><br><span class="line"></span><br><span class="line">example </span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># vi /root/history</span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># history -c </span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># history -r /root/history.txt </span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># history </span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># echo &gt; /var/log/wtmp  </span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># last</span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># echo &gt; /var/log/btmp</span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># lastb </span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># history -c </span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># echo &gt; ./.bash_history</span></span><br><span class="line">[root<span class="variable">@localhost</span> root]<span class="comment"># history</span></span><br></pre></td></tr></table></figure>
<p>关闭虚拟机</p>
<h2 id="3、宿主机操作"><a href="#3、宿主机操作" class="headerlink" title="3、宿主机操作"></a>3、宿主机操作</h2><p>资料：<a href="https://www.cnblogs.com/BuildingHome/p/4834859.html" target="_blank" rel="noopener">KVM镜像管理利器-guestfish使用详解</a></p>
<p>1）安装guestfish套件安装</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$ yum install libguestfs-tools</span><br></pre></td></tr></table></figure>
<p>2）压缩镜像文件</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ virt-sparsify --<span class="keyword">compress</span> centos7-<span class="keyword">dis</span>.qcow2 centos7-<span class="keyword">dis</span>-cloud.qcow2</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openstack云镜像制作-Centos7篇/1571816815009.png" alt="图1"><br>镜像制作完成</p>
<p>上传openstack</p>
<h1 id="二、参考文档："><a href="#二、参考文档：" class="headerlink" title="二、参考文档："></a>二、参考文档：</h1><p><a href="http://www.cnblogs.com/gorlf/p/4140740.html" target="_blank" rel="noopener">penStack镜像制作-CentOS</a></p>
<p><a href="http://www.aboutyun.com/thread-6617-1-1.html" target="_blank" rel="noopener">openstack镜像制作思路、指导及问题总结</a></p>
<p><a href="http://blog.csdn.net/xiegh2014/article/details/53248403" target="_blank" rel="noopener">openstack制作centos6</a>.5镜像</p>
<p><a href="http://www.linuxidc.com/Linux/2012-10/72483.htm" target="_blank" rel="noopener">制作OpenStack上使用的CentOS系统镜像</a></p>
<p><a href="https://www.cnblogs.com/BuildingHome/p/4834859.html" target="_blank" rel="noopener">KVM镜像管理利器-guestfish使用详解</a></p>
<p><a href="http://blog.csdn.net/leadway123/article/details/49155421" target="_blank" rel="noopener">CentOS清除用户登录记录和命令历史方法</a></p>
]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑rc.local启动命令执行不成功处理</title>
    <url>/2018/08/23/%E7%BC%96%E8%BE%91rc-local%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%8D%E6%88%90%E5%8A%9F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-问题举例："><a href="#1-问题举例：" class="headerlink" title="1 问题举例："></a>1 问题举例：</h1><p>rc.local内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is highly advisable to create own systemd services or udev rules</span></span><br><span class="line"><span class="comment"># to run scripts during boot instead of using this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In contrast to previous versions due to parallel execution during boot</span></span><br><span class="line"><span class="comment"># this script will NOT be run after all other services.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure</span></span><br><span class="line"><span class="comment"># that this script will be executed during boot.</span></span><br><span class="line"></span><br><span class="line">touch /var/lock/subsys/<span class="built_in">local</span></span><br><span class="line">mount -t cifs -o username=backup,password=xxxxxxx //192.168.1.170/192.168.1.11/ /mnt/backup_data/</span><br><span class="line">/usr/<span class="built_in">local</span>/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>
<p>挂载命令执行了，但tomcat没有启动</p>
<h1 id="2-问题原因及处理方法"><a href="#2-问题原因及处理方法" class="headerlink" title="2 问题原因及处理方法"></a>2 问题原因及处理方法</h1><h2 id="2-1-原因"><a href="#2-1-原因" class="headerlink" title="2.1 原因"></a>2.1 原因</h2><p>因java使用的是解压缩版，在/etc/profile内添加java的环境变量，系统启动时先执行的是rc.local,因此tomcat启动失败</p>
<h2 id="2-2-解决办法"><a href="#2-2-解决办法" class="headerlink" title="2.2 解决办法"></a>2.2 解决办法</h2><h3 id="2-2-1-方法1"><a href="#2-2-1-方法1" class="headerlink" title="2.2.1 方法1"></a>2.2.1 方法1</h3><p>在rc.local内添加java的环境变量命令（必须放在tomcat启动命令前）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.6.0_18</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/<span class="built_in">local</span>/java/jdk1.6.0_18/jre</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-方法2"><a href="#2-2-2-方法2" class="headerlink" title="2.2.2 方法2"></a>2.2.2 方法2</h3><p>在tomcat的启动脚本内添加java路径<br>分别在tomcat_home/bin目录内的catalina.sh ，setclasspath.sh脚本前面指定JAVA_HOME路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.6.0_18</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/<span class="built_in">local</span>/java/jdk1.6.0_18/jre</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>基础运维</tag>
        <tag>运维开发</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL证书制作</title>
    <url>/2018/08/27/SSL%E8%AF%81%E4%B9%A6%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h1><p>OS:centos 7.3</p>
<h1 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h1><h2 id="1、安装openssl"><a href="#1、安装openssl" class="headerlink" title="1、安装openssl"></a>1、安装openssl</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$ yum install opensll</span><br></pre></td></tr></table></figure>
<h2 id="2、制作CA证书"><a href="#2、制作CA证书" class="headerlink" title="2、制作CA证书"></a>2、制作CA证书</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$ openssl genrsa -des3 -out my-ca.<span class="type">key</span> <span class="number">2048</span></span><br><span class="line">$ openssl req -new -x509 -days <span class="number">3650</span> -<span class="type">key</span> my-ca.<span class="type">key</span> -out my-ca.crt</span><br></pre></td></tr></table></figure>
<h2 id="3、生成服务器证书"><a href="#3、生成服务器证书" class="headerlink" title="3、生成服务器证书"></a>3、生成服务器证书</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ openssl genrsa -des3 -out mars-server<span class="selector-class">.key</span> <span class="number">1024</span></span><br><span class="line">$ openssl req -new -key mars-server<span class="selector-class">.key</span> -out mars-server.csr</span><br><span class="line">$ openssl x509 -req -<span class="keyword">in</span> mars-server<span class="selector-class">.csr</span> -out mars-server<span class="selector-class">.crt</span> -sha1 -CA my-ca<span class="selector-class">.crt</span> -CAkey my-ca<span class="selector-class">.key</span> -CAcreateserial -days <span class="number">3650</span></span><br></pre></td></tr></table></figure>
<h2 id="4、生成无密码密钥"><a href="#4、生成无密码密钥" class="headerlink" title="4、生成无密码密钥"></a>4、生成无密码密钥</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ openssl rsa -<span class="keyword">in</span> mars-server<span class="selector-class">.key</span> -out mars-server<span class="selector-class">.key</span><span class="selector-class">.insecure</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu同步源仓库到本地</title>
    <url>/2018/08/27/Ubuntu%E5%90%8C%E6%AD%A5%E6%BA%90%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1 步骤"></a>1 步骤</h1><h2 id="1-1-安装apt-mirror"><a href="#1-1-安装apt-mirror" class="headerlink" title="1.1 安装apt-mirror"></a>1.1 安装apt-mirror</h2><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install apt-mirro</span><br></pre></td></tr></table></figure>
<h2 id="1-2-创建下载目录"><a href="#1-2-创建下载目录" class="headerlink" title="1.2 创建下载目录"></a>1.2 创建下载目录</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#路径自定义</span></span><br><span class="line"><span class="keyword">...</span>/ubuntu</span><br><span class="line"><span class="keyword">...</span>/ubuntu/mirror</span><br><span class="line"><span class="keyword">...</span>/ubuntu/skel</span><br><span class="line"><span class="keyword">...</span>/ubuntu/var</span><br></pre></td></tr></table></figure>
<h2 id="1-3-修改配置文件"><a href="#1-3-修改配置文件" class="headerlink" title="1.3 修改配置文件"></a>1.3 修改配置文件</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vi</span> /etc/apt/mirror.<span class="keyword">list</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="comment">############# config ##################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">set </span><span class="string">base_path </span>   /<span class="string">home/</span><span class="string">packages/</span><span class="string">ubuntu</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string">set </span><span class="string">mirror_path </span> $<span class="string">base_path/</span><span class="string">mirror</span></span><br><span class="line"><span class="string">set </span><span class="string">skel_path </span>   $<span class="string">base_path/</span><span class="string">skel</span></span><br><span class="line"><span class="string">set </span><span class="string">var_path </span>    $<span class="string">base_path/</span><span class="string">var</span></span><br><span class="line"><span class="string">set </span><span class="string">cleanscript </span>$<span class="string">var_path/</span><span class="string">clean.</span><span class="string">sh</span></span><br><span class="line"><span class="string">set </span><span class="string">nthreads </span>    <span class="string">20</span></span><br><span class="line"><span class="string">set </span><span class="string">_tilde </span>0</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">############# end config ##############</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#deb http://archive.ubuntu.com/ubuntu trusty main restricted universe multiverse</span></span><br><span class="line"><span class="comment">#deb http://archive.ubuntu.com/ubuntu trusty-security main restricted universe multiverse</span></span><br><span class="line"><span class="comment">#deb http://archive.ubuntu.com/ubuntu trusty-updates main restricted universe multiverse</span></span><br><span class="line"><span class="comment">#deb http://archive.ubuntu.com/ubuntu trusty-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment">#deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#deb-src http://archive.ubuntu.com/ubuntu trusty main restricted universe multiverse</span></span><br><span class="line"><span class="comment">#deb-src http://archive.ubuntu.com/ubuntu trusty-security main restricted universe multiverse</span></span><br><span class="line"><span class="comment">#deb-src http://archive.ubuntu.com/ubuntu trusty-updates main restricted universe multiverse</span></span><br><span class="line"><span class="comment">#deb-src http://archive.ubuntu.com/ubuntu trusty-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment">#deb-src http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#clean http://archive.ubuntu.com/ubuntu</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义</span></span><br><span class="line"><span class="comment">#参考以下配置文件：</span></span><br><span class="line"><span class="comment">#清空原有的配置文件，直接使用以下配置文件即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############# config ##################</span></span><br><span class="line"><span class="comment"># 以下注释的内容都是默认配置，如果需要自定义，取消注释修改即可</span></span><br><span class="line"><span class="comment">#set base_path /var/spool/apt-mirror</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 镜像文件下载地址</span></span><br><span class="line"><span class="comment"># set mirror_path $base_path/mirror</span></span><br><span class="line"><span class="comment"># 临时索引下载文件目录，也就是存放软件仓库的dists目录下的文件（默认即可）</span></span><br><span class="line"><span class="comment"># set skel_path $base_path/skel</span></span><br><span class="line"><span class="comment"># 配置日志（默认即可）</span></span><br><span class="line"><span class="comment"># set var_path $base_path/var</span></span><br><span class="line"><span class="comment"># clean脚本位置</span></span><br><span class="line"><span class="comment"># set cleanscript $var_path/clean.sh</span></span><br><span class="line"><span class="comment"># 架构配置，i386/amd64，默认的话会下载跟本机相同的架构的源</span></span><br><span class="line"><span class="comment">#set defaultarch amd64</span></span><br><span class="line"><span class="comment"># set postmirror_script $var_path/postmirror.sh</span></span><br><span class="line"><span class="comment"># set run_postmirror 0</span></span><br><span class="line"><span class="comment"># 下载线程数</span></span><br><span class="line"><span class="comment">#set nthreads 20</span></span><br><span class="line"><span class="comment">#set _tilde 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">############# end config ##############</span></span><br><span class="line"><span class="comment"># Ali yun（这里没有添加deb-src的源）</span></span><br><span class="line"><span class="comment">#我们把常用的软件同步过来就够用了</span></span><br><span class="line"><span class="string">deb </span><span class="string">http:</span>//<span class="string">mirrors.</span><span class="string">aliyun.</span><span class="string">com/</span><span class="string">ubuntu/</span> <span class="string">trusty </span><span class="string">main </span><span class="string">restricted </span><span class="string">universe </span><span class="string">multiverse</span></span><br><span class="line"><span class="string">deb </span><span class="string">http:</span>//<span class="string">mirrors.</span><span class="string">aliyun.</span><span class="string">com/</span><span class="string">ubuntu/</span> <span class="string">trusty-security </span><span class="string">main </span><span class="string">restricted </span><span class="string">universe </span><span class="string">multiverse</span></span><br><span class="line"><span class="string">deb </span><span class="string">http:</span>//<span class="string">mirrors.</span><span class="string">aliyun.</span><span class="string">com/</span><span class="string">ubuntu/</span> <span class="string">trusty-updates </span><span class="string">main </span><span class="string">restricted </span><span class="string">universe </span><span class="string">multiverse</span></span><br><span class="line"><span class="string">deb </span><span class="string">http:</span>//<span class="string">mirrors.</span><span class="string">aliyun.</span><span class="string">com/</span><span class="string">ubuntu/</span> <span class="string">trusty-proposed </span><span class="string">main </span><span class="string">restricted </span><span class="string">universe </span><span class="string">multiverse</span></span><br><span class="line"><span class="string">deb </span><span class="string">http:</span>//<span class="string">mirrors.</span><span class="string">aliyun.</span><span class="string">com/</span><span class="string">ubuntu/</span> <span class="string">trusty-backports </span><span class="string">main </span><span class="string">restricted </span><span class="string">universe </span><span class="string">multiverse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span>当某些软件包在服务器端进行了升级，或者服务器端不再需要这些软件包时，我们使用了 <span class="string">apt-mirror与</span>服务器同步后，会在本地的$<span class="string">var_path/</span>下生成一个<span class="string">clean.</span><span class="string">sh的</span>脚本，列出了遗留在本地的旧版本和无用的软件包，你可 以手动运行这个脚本来删除遗留在本地的且不需要用的软件包</span><br><span class="line"><span class="string">clean </span><span class="string">http:</span>//<span class="string">mirrors.</span><span class="string">aliyun.</span><span class="string">com/</span><span class="string">ubuntu</span></span><br></pre></td></tr></table></figure>
<p>如果用amd64位架构下的包，可以加上deb-amd64的标记<br>如果什么都不加，直接使用deb http…..这种格式，则在同步时，只同步当前系统所使用的架构下的软件包。比如一个64位系统，直接debhttp….只同步64位的软件 包。如果还嫌麻烦，直接去改set defaultarch  <running hostarchitecture="">这个参数就好，比如改成set defaultarch i386，这样你使用debhttp…..这种格式，则在同步时，只同步i386的软件包了。</running></p>
<p>如果你还想要源码，可以把源码也加到mirror.list里面同步过来，比如加上deb-src这样的标记。想要其他的东西也可以追加相应的标记来完成。</p>
<h2 id="1-4-同步源"><a href="#1-4-同步源" class="headerlink" title="1.4 同步源"></a>1.4 同步源</h2><p>配置好后我们就可以和指定的镜像进行同步了</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo apt-mirror</span></span><br></pre></td></tr></table></figure>
<h2 id="1-5-建立本地源"><a href="#1-5-建立本地源" class="headerlink" title="1.5 建立本地源"></a>1.5 建立本地源</h2><p>参考：Ubuntu部署本地源仓库</p>
<h1 id="2-参考资料"><a href="#2-参考资料" class="headerlink" title="2 参考资料"></a>2 参考资料</h1><p><a href="http://www.linuxidc.com/Linux/2014-08/105415.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2014-08/105415.htm</a></p>
<p><a href="https://www.iyunv.com/thread-384273-1-1.html" target="_blank" rel="noopener">https://www.iyunv.com/thread-384273-1-1.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>私有仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署本地源仓库</title>
    <url>/2018/08/27/Ubuntu%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E6%BA%90%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-本地源的制作"><a href="#1-本地源的制作" class="headerlink" title="1 本地源的制作"></a>1 本地源的制作</h1><h2 id="1-1-安装所需软件包"><a href="#1-1-安装所需软件包" class="headerlink" title="1.1 安装所需软件包"></a>1.1 安装所需软件包</h2><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install  dpkg-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>
<h2 id="1-2-打包deb软件包"><a href="#1-2-打包deb软件包" class="headerlink" title="1.2 打包deb软件包"></a>1.2 打包deb软件包</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#加上-d参数，只下载安装包，不安装及解压。</span></span><br><span class="line">sudo apt-<span class="keyword">get</span>  install -d nginx</span><br></pre></td></tr></table></figure>
<p>将/var/cache/apt/archives/下的所有deb文件拷到/home/packages/下的Natty目录中：/home/packages/Natty，拷贝前建议执行一下:</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#autoclean - 删除已下载的旧包文件</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> autoclean</span><br></pre></td></tr></table></figure>
<h2 id="1-3-进入指定目录上一级目录"><a href="#1-3-进入指定目录上一级目录" class="headerlink" title="1.3 进入指定目录上一级目录"></a>1.3 进入指定目录上一级目录</h2><p>拷完后在终端中进入刚才新建的目录Natty所在的上一级目录，也就是：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/home/packages</span></span><br></pre></td></tr></table></figure>
<p>生成软件包依赖信息文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> dpkg-scanpackages Natty/ | gzip &gt;Natty/Packages.gz</span><br></pre></td></tr></table></figure>
<p>至此本地源的软件包已经准备完毕；下面接着介绍如何使用。</p>
<h1 id="2-本地源的使用"><a href="#2-本地源的使用" class="headerlink" title="2 本地源的使用"></a>2 本地源的使用</h1><h2 id="2-1-本机源服务器的搭建"><a href="#2-1-本机源服务器的搭建" class="headerlink" title="2.1 本机源服务器的搭建"></a>2.1 本机源服务器的搭建</h2><p>将地址加入更新源列表文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="keyword">vim</span> /etc/apt/sources.<span class="keyword">list</span></span><br><span class="line"># 添加以下路径，其它<span class="keyword">deb</span>信息使用#号注释掉</span><br><span class="line"><span class="keyword">deb</span> <span class="keyword">file</span>:///home/packages/ Natty/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>#注意Natty后面有一个斜杠,前面还要有空格(这是书写方式)</p>
</blockquote>
<h2 id="2-2-更新源信息"><a href="#2-2-更新源信息" class="headerlink" title="2.2 更新源信息"></a>2.2 更新源信息</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#更新信息，生成数据缓存</span></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> update</span><br></pre></td></tr></table></figure>
<p>之后即可正常安装所需软件。</p>
<h1 id="3-局域网源服务器"><a href="#3-局域网源服务器" class="headerlink" title="3 局域网源服务器"></a>3 局域网源服务器</h1><h2 id="3-1-安装apache2"><a href="#3-1-安装apache2" class="headerlink" title="3.1 安装apache2"></a>3.1 安装apache2</h2><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install apache2</span><br></pre></td></tr></table></figure>
<!--more-->
<p>启动服务</p>
<blockquote>
<p>注意：配置apache2的时候注意端口，不要配置成可能被其他网络应用使用的端口就可以。</p>
</blockquote>
<h2 id="3-2-配置服务器上的Ubuntu源"><a href="#3-2-配置服务器上的Ubuntu源" class="headerlink" title="3.2 配置服务器上的Ubuntu源"></a>3.2 配置服务器上的Ubuntu源</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在apache2发布目录/var/www/html位置创建到源目录的软链接</span></span><br><span class="line">sudo ln -s <span class="regexp">/home/</span>packages<span class="regexp">/Natty/</span> <span class="regexp">/var/</span>www<span class="regexp">/html/u</span>buntu-local</span><br></pre></td></tr></table></figure>
<h2 id="3-3-配置局域网客户机sources-list"><a href="#3-3-配置局域网客户机sources-list" class="headerlink" title="3.3 配置局域网客户机sources.list"></a>3.3 配置局域网客户机sources.list</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/apt/sources.list</span><br><span class="line"><span class="meta">#添加如下信息,其它deb信息使用#号注释掉</span></span><br><span class="line">deb http:<span class="comment">//192.168.1.224 ubuntu-local/   </span></span><br><span class="line"><span class="meta">#注意书写方式，ip地址后空格，目录地址/</span></span><br></pre></td></tr></table></figure>
<h2 id="3-4-客户机更新源信息"><a href="#3-4-客户机更新源信息" class="headerlink" title="3.4 客户机更新源信息"></a>3.4 客户机更新源信息</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#更新信息，生成数据缓存</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> update</span><br></pre></td></tr></table></figure>
<p>之后即可正常安装所需软件。</p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4 参考资料"></a>4 参考资料</h1><p><a href="https://www.iyunv.com/thread-384273-1-1.html" target="_blank" rel="noopener">https://www.iyunv.com/thread-384273-1-1.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>私有仓库</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware共享文件夹设置方法</title>
    <url>/2018/08/27/VMware%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="一、安装包依赖："><a href="#一、安装包依赖：" class="headerlink" title="一、安装包依赖："></a>一、安装包依赖：</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ yum -y <span class="keyword">install</span> kernel-devel-$(uname -r) </span><br><span class="line">$ yum -y <span class="keyword">install</span> net-tools perl gcc gcc-c++</span><br></pre></td></tr></table></figure>
<h1 id="二、安装vmtool"><a href="#二、安装vmtool" class="headerlink" title="二、安装vmtool"></a>二、安装vmtool</h1><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ mount <span class="string">/dev/cdrom</span> <span class="string">/home/tmp</span></span><br><span class="line">$ cp <span class="string">/home/tmp/VMwareTools-9.6.0-1294478.tar.gz</span> <span class="string">/tmp</span></span><br><span class="line">$ <span class="keyword">cd</span> <span class="string">/tmp</span></span><br><span class="line">$ tar -zxvf VMwareTools-9.6.0-1294478.tar.gz</span><br><span class="line">$ <span class="keyword">cd</span> vmware-tools-distrib</span><br><span class="line">$ <span class="string">./vmware-install.pl</span></span><br></pre></td></tr></table></figure>
<p>按提示操作即可。</p>
<h1 id="三、问题"><a href="#三、问题" class="headerlink" title="三、问题"></a>三、问题</h1><p>有/mnt/hgfs但没有共享文件的解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mount -t vmhgfs .host:/  /mnt/hgfs</span><br><span class="line">Error: cannot mount filesystem: No such device</span><br></pre></td></tr></table></figure>
<p>这时不能用mount工具挂载，而是得用vmhgfs-fuse，需要安装工具包</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ yum install <span class="keyword">open</span>-<span class="keyword">vm</span>-tools-devel -<span class="keyword">y</span></span><br><span class="line">有的源的名字并不一定为<span class="keyword">open</span>-<span class="keyword">vm</span>-tools-devel(centos) ，而是<span class="keyword">open</span>-<span class="keyword">vm</span>-dkms(unbuntu)</span><br><span class="line">执行：vmhgfs-fuse .hos<span class="variable">t:</span>/ /mnt/hgfs</span><br></pre></td></tr></table></figure>
<p>此时进入/mnt/hgfs就能看到你设置的共享文件夹了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>Dokcer常用命令</title>
    <url>/2018/08/28/Dokcer%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-Docker常用命令"><a href="#1-Docker常用命令" class="headerlink" title="1 Docker常用命令"></a>1 Docker常用命令</h1><h2 id="1-1-镜像管理"><a href="#1-1-镜像管理" class="headerlink" title="1.1 镜像管理"></a>1.1 镜像管理</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 列出本地所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta"># 查找image</span></span><br><span class="line">docker search &lt;IMAGE_ID/NAME&gt;</span><br><span class="line"><span class="meta"># 下载image</span></span><br><span class="line">docker pull &lt;IMAGE_ID&gt;</span><br><span class="line"><span class="meta"># 上传image</span></span><br><span class="line">docker push &lt;IMAGE_ID&gt;</span><br><span class="line"><span class="meta"># 删除image</span></span><br><span class="line">docker rmi &lt;IMAGE_ID&gt;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-容器管理"><a href="#1-2-容器管理" class="headerlink" title="1.2 容器管理"></a>1.2 容器管理</h2><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">docker run -i -t <span class="variable">&lt;IMAGE_ID&gt;</span> /bin/bash：   </span><br><span class="line">-i：标准输入给容器 </span><br><span class="line">-t：分配一个虚拟终端 </span><br><span class="line">/bin/bash：执行bash脚本</span><br><span class="line">-d：以守护进程方式运行（后台）</span><br><span class="line">-P：默认匹配docker容器的<span class="number">5000</span>端口号到宿主机的<span class="number">49153</span> <span class="keyword">to</span> <span class="number">65535</span>端口</span><br><span class="line">-p <span class="variable">&lt;HOT_PORT&gt;</span>:<span class="variable">&lt;CONTAINER_PORT&gt;</span>：指定端口号</span><br><span class="line">--name： 指定容器的名称</span><br><span class="line">--rm：退出时删除容器</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止container</span></span><br><span class="line">docker stop <span class="variable">&lt;CONTAINER_ID&gt;</span></span><br><span class="line"><span class="comment">#重新启动container</span></span><br><span class="line">docker start <span class="variable">&lt;CONTAINER_ID&gt;</span></span><br><span class="line"><span class="comment">#显示运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line">-l：显示最后启动的容器</span><br><span class="line">-a：同时显示停止的容器，默认只显示启动状态</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到启动的容器</span></span><br><span class="line">docker attach <span class="variable">&lt;CONTAINER_ID&gt;</span></span><br><span class="line"><span class="comment">#输出容器日志</span></span><br><span class="line">docker logs <span class="variable">&lt;CONTAINER_ID&gt;</span></span><br><span class="line">-f：实时输出</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制容器内的文件到宿主机目录上</span></span><br><span class="line">docker cp <span class="variable">&lt;CONTAINER_ID&gt;</span>:路径 宿主机路径</span><br><span class="line"><span class="comment"># 删除container</span></span><br><span class="line">docker rm <span class="variable">&lt;CONTAINER_ID&gt;</span></span><br><span class="line"><span class="comment"># 删除所有容器</span></span><br><span class="line">docker rm `docker ps -a -q`</span><br><span class="line">docker kill `docker ps -q`</span><br><span class="line">docker rmi `docker images -q -a`</span><br><span class="line">docker wait <span class="variable">&lt;CONTAINER_ID&gt;</span>：阻塞对容器的其他调用方法，直到容器停止后退出</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器中运行的进程</span></span><br><span class="line">docker top <span class="variable">&lt;CONTAINER_ID&gt;</span></span><br><span class="line"><span class="comment"># 查看容器中的变化</span></span><br><span class="line">docker diff <span class="variable">&lt;CONTAINER_ID&gt;</span></span><br><span class="line"><span class="comment"># 查看容器详细信息（输出为Json）</span></span><br><span class="line">docker inspect <span class="variable">&lt;CONTAINER_ID&gt;</span></span><br><span class="line">-f：查找特定信息，如docker inspect -f '&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'</span><br><span class="line">docker commit -m <span class="string">"comment"</span> -a <span class="string">"author"</span> <span class="variable">&lt;CONTAINER_ID&gt;</span> ouruser/imagename:<span class="keyword">tag</span></span><br><span class="line"></span><br><span class="line">docker extc -it <span class="variable">&lt;CONTAINER&gt;</span> <span class="variable">&lt;COMMAND&gt;</span>：在容器里执行命令，并输出结果</span><br></pre></td></tr></table></figure>
<h2 id="1-3-网络管理"><a href="#1-3-网络管理" class="headerlink" title="1.3 网络管理"></a>1.3 网络管理</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机分配端口号</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -P</span></span><br><span class="line"><span class="bash"><span class="comment"># 绑定特定端口号（主机的所有网络接口的5000端口均绑定容器的5000端口）</span></span></span><br><span class="line"><span class="bash">docker run -p 5000:5000</span></span><br><span class="line"><span class="bash"><span class="comment"># 绑定主机的特定接口的端口号</span></span></span><br><span class="line"><span class="bash">docker run -p 127.0.0.1:5000:5000</span></span><br><span class="line"><span class="bash"><span class="comment"># 绑定udp端口号</span></span></span><br><span class="line"><span class="bash">docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span></span><br><span class="line"><span class="bash"><span class="comment"># 查看容器的5000端口对应本地机器的IP和端口号</span></span></span><br><span class="line"><span class="bash">docker port &lt;CONTAINER_ID&gt; 5000</span></span><br><span class="line"><span class="bash"><span class="comment"># 使用Docker Linking连接容器：</span></span></span><br><span class="line"><span class="bash"><span class="comment"># Docker为源容器和接收容器创建一个安全的通道，容器之间不需要暴露端口，接收的容器可以访问源容器的数据</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">docker run -d -P --name &lt;CONTAINER_NAME&gt; --link &lt;CONTAINER_NAME_TO_LINK&gt;:&lt;ALIAS&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-4-数据管理"><a href="#1-4-数据管理" class="headerlink" title="1.4 数据管理"></a>1.4 数据管理</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Data Volumes：volume是在一个或多个容器里指定的特殊目录</span></span><br><span class="line"><span class="comment"># 数据卷可以在容器间共享和重复使用</span></span><br><span class="line"><span class="comment"># 可以直接修改容器卷的数据</span></span><br><span class="line"><span class="comment"># 容器卷里的数据不会被包含到镜像中</span></span><br><span class="line"><span class="comment"># 容器卷保持到没有容器再使用它</span></span><br><span class="line"><span class="comment"># 可以在容器启动的时候添加-v参数指定容器卷，也可以在Dockerfile里用VOLUMN命令添加</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -P --name web -v /webapp training/webapp python app.py</span></span><br><span class="line"><span class="bash"><span class="comment"># 也可以将容器卷挂载到宿主机目录或宿主机的文件上，&lt;容器目录或文件&gt;的内容会被替换为&lt;宿主机目录或文件&gt;的内容，默认容器对这个目录有可读写权限</span></span></span><br><span class="line"><span class="bash">docker run -d -P --name web -v &lt;宿主机目录&gt;:&lt;容器目录&gt; training/webapp python app.py</span></span><br><span class="line"><span class="bash"><span class="comment"># 可以通过指定ro，将权限改为只读</span></span></span><br><span class="line"><span class="bash">docker run -d -P --name web -v &lt;宿主机目录&gt;:&lt;容器目录&gt;:ro training/webapp python app.py</span></span><br><span class="line"><span class="bash"><span class="comment"># 在一个容器创建容器卷后，其他容器便可以通过--volumes-from共享这个容器卷数据，如下：</span></span></span><br><span class="line"><span class="bash">docker run -d -v /dbdata --name db1 training/postgres <span class="built_in">echo</span> Data-only container <span class="keyword">for</span> postgres</span></span><br><span class="line"><span class="bash"><span class="comment"># 首先启动了一个容器，并为这个容器增加一个数据卷/dbdata，然后启动另一个容器，共享这个数据卷</span></span></span><br><span class="line"><span class="bash">docker run -d --volumes-from db1 --name db2 training/postgres</span></span><br><span class="line"><span class="bash"><span class="comment"># 此时db2使用了db1的容器卷，当容器db1被删除时，容器卷也不会被删除，只有所有容器不再使用此容器卷时，才会被删除</span></span></span><br><span class="line"><span class="bash">docker rm -v：删除容器卷</span></span><br><span class="line"><span class="bash"><span class="comment"># 除了共享数据外，容器卷另一个作用是用来备份、恢复和迁移数据</span></span></span><br><span class="line"><span class="bash">docker run --volumes-from db1 -v /home/backup:/backup ubuntu tar cvf /backup/backup.tar /dbdata</span></span><br><span class="line"><span class="bash"><span class="comment"># 启动一个容器数据卷使用db1容器的数据卷，同时新建立一个数据卷指向宿主机目录/home/backup，将/dbdata目录的数据压缩为/backup/backup.tar</span></span></span><br><span class="line"><span class="bash">docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</span></span><br><span class="line"><span class="bash">docker run --volumes-from dbdata2 -v /home/backup:/backup busybox tar xvf /backup/backup.tar</span></span><br><span class="line"><span class="bash"><span class="comment"># 启动一个容器，同时把backup.tar的内容解压到容器的backup</span></span></span><br></pre></td></tr></table></figure>
<h2 id="1-5-仓库管理"><a href="#1-5-仓库管理" class="headerlink" title="1.5 仓库管理"></a>1.5 仓库管理</h2><p>docker login：登录</p>
<h2 id="1-6-镜像打包及恢复"><a href="#1-6-镜像打包及恢复" class="headerlink" title="1.6 镜像打包及恢复"></a>1.6 镜像打包及恢复</h2><h3 id="1-6-1-保存镜像为文件"><a href="#1-6-1-保存镜像为文件" class="headerlink" title="1.6.1 保存镜像为文件"></a>1.6.1 保存镜像为文件</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="meta"># centos为镜像，centos为打包名，centos后可以指定标签</span></span><br><span class="line">docker <span class="keyword">save</span> -o centos.tar    centos</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">docker <span class="keyword">save</span> -o centos.tar    centos:<span class="number">7.2</span></span><br></pre></td></tr></table></figure>
<h3 id="1-6-2-从文件载入镜像"><a href="#1-6-2-从文件载入镜像" class="headerlink" title="1.6.2 从文件载入镜像"></a>1.6.2 从文件载入镜像</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># home/centos.tar为镜像文件路径</span></span><br><span class="line">docker <span class="built_in">load</span> <span class="comment">--input /home/centos.tar</span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">docker <span class="built_in">load</span> &lt; /home/centos.tar</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础命令</title>
    <url>/2018/08/28/Docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1 获取镜像"></a>1 获取镜像</h1><a id="more"></a>
<p>从 Docker Registry 获取镜像的命令是 docker pull。其命令格式为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry地址]<span class="tag">&lt;<span class="name">仓库名</span>&gt;</span>:<span class="tag">&lt;<span class="name">标签</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">ubuntu</span><span class="selector-pseudo">:14.04</span></span><br></pre></td></tr></table></figure>
<h1 id="2-运行镜像"><a href="#2-运行镜像" class="headerlink" title="2 运行镜像"></a>2 运行镜像</h1><p><code>docker run</code></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">$ docker run -it --rm ubuntu:14.04 bash</span><br><span class="line"><span class="section">root@e7009c6ce357:/# cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">"Ubuntu"</span></span><br><span class="line">VERSION=<span class="string">"14.04.5 LTS, Trusty Tahr"</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">"Ubuntu 14.04.5 LTS"</span></span><br><span class="line">VERSION_ID=<span class="string">"14.04"</span></span><br><span class="line">HOME_URL=<span class="string">"http://www.ubuntu.com/"</span></span><br><span class="line">SUPPORT_URL=<span class="string">"http://help.ubuntu.com/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"http://bugs.launchpad.net/ubuntu/"</span></span><br><span class="line"><span class="section">root@e7009c6ce357:/# exit</span></span><br><span class="line">exit</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p><code>docker run</code> 就是运行容器的命令，具体格式我们会在后面的章节讲解，我们这里简要的说明一下上面用到的参数。</p>
<ul>
<li>-it：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入<code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</li>
<li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用<code>--rm</code> 可以避免浪费空间。</li>
<li><code>ubuntu:14.04</code>：这是指用 <code>ubuntu:14.04</code> 镜像为基础来启动容器。</li>
<li><code>bash</code>：放在镜像名后的是命令，这里我们希望有个交互式 <code>Shell</code>，因此用的是<code>bash</code>。</li>
</ul>
<p>进入容器后，我们可以在 <code>Shell</code> 下操作，执行任何所需的命令。这里，我们执行了 <code>cat /etc/os-release</code>，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 <code>Ubuntu 14.04.5 LTS</code> 系统。</p>
<p>最后我们通过<code>exit</code>退出了这个容器。</p>
<h1 id="3-列出镜像"><a href="#3-列出镜像" class="headerlink" title="3 列出镜像"></a>3 列出镜像</h1><p><code>docker images</code></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis                latest              <span class="number">5</span>f515359c7f8        <span class="number">5</span> days ago          <span class="number">183</span> MB</span><br><span class="line">nginx                latest              <span class="number">05</span>a60462f8ba        <span class="number">5</span> days ago          <span class="number">181</span> MB</span><br><span class="line">mongo                <span class="number">3.2</span>                 fe9198c04d62        <span class="number">5</span> days ago          <span class="number">342</span> MB</span><br><span class="line">&lt;none&gt;               &lt;none&gt;              <span class="number">00285</span>df0df87        <span class="number">5</span> days ago          <span class="number">342</span> MB</span><br><span class="line">ubuntu               <span class="number">16.04</span>               f753707788c5        <span class="number">4</span> weeks ago         <span class="number">127</span> MB</span><br><span class="line">ubuntu               latest              f753707788c5        <span class="number">4</span> weeks ago         <span class="number">127</span> MB</span><br><span class="line">ubuntu               <span class="number">14.04</span>               <span class="number">1e0</span>c3dd64ccd        <span class="number">4</span> weeks ago         <span class="number">188</span> MB</span><br></pre></td></tr></table></figure>
<p>列表包含了仓库名、标签、镜像 ID、创建时间以及所占用的空间。</p>
<p>其中仓库名、标签在之前的基础概念章节已经介绍过了。<strong>镜像 ID</strong> 则是镜像的唯一标识，一个镜像可以对应多个标签。因此，在上面的例子中，我们可以看到<code>ubuntu:16.04</code> 和<code>ubuntu:latest</code>拥有相同的 ID，因为它们对应的是同一个镜像。</p>
<h1 id="4-虚悬镜像"><a href="#4-虚悬镜像" class="headerlink" title="4 虚悬镜像"></a>4 虚悬镜像</h1><p>上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">&lt;none&gt;               &lt;none&gt;              <span class="number">00285</span>df0df87        <span class="number">5</span> days ago          <span class="number">342</span> MB</span><br></pre></td></tr></table></figure>
<p>无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">$ docker images <span class="params">-f</span> dangling=<span class="literal">true</span></span><br><span class="line">REPOSITORY          <span class="built_in">TAG</span>                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;<span class="literal">none</span>&gt;              &lt;<span class="literal">none</span>&gt;              <span class="number">00285</span>df0df87        <span class="number">5</span> days ago          <span class="number">342</span> MB</span><br></pre></td></tr></table></figure>
<h1 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5 删除镜像"></a>5 删除镜像</h1><p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi $(docker images -q -f dangling=<span class="literal">true</span>)</span></span><br></pre></td></tr></table></figure>
<h1 id="6-中间层镜像"><a href="#6-中间层镜像" class="headerlink" title="6 中间层镜像"></a>6 中间层镜像</h1><p>为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker images</code> 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加<code>-a</code>参数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images -a</span></span><br></pre></td></tr></table></figure>
<p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p>
<h1 id="7-列出部分镜像"><a href="#7-列出部分镜像" class="headerlink" title="7 列出部分镜像"></a>7 列出部分镜像</h1><p>不加任何参数的情况下，<code>docker images</code>会列出所有顶级镜像，但是有时候我们只希望列出部分镜像。<code>docker images</code>有好几个参数可以帮助做到这个事情。</p>
<p>根据仓库名列出镜像</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$ docker images ubuntu</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              <span class="number">16.04</span>               f753707788c5        <span class="number">4</span> weeks ago         <span class="number">127</span> MB</span><br><span class="line">ubuntu              latest              f753707788c5        <span class="number">4</span> weeks ago         <span class="number">127</span> MB</span><br><span class="line">ubuntu              <span class="number">14.04</span>               <span class="number">1e0</span>c3dd64ccd        <span class="number">4</span> weeks ago         <span class="number">188</span> MB</span><br></pre></td></tr></table></figure>
<p>列出特定的某个镜像，也就是说指定仓库名和标签</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ docker images ubuntu:<span class="number">16.04</span></span><br><span class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             SIZE</span><br><span class="line">ubuntu              <span class="number">16.04</span>               f753707788c5        <span class="number">4</span> weeks ago         <span class="number">127</span> MB</span><br></pre></td></tr></table></figure>
<p>除此以外，<code>docker images</code>还支持强大的过滤器参数 <code>--filter</code>，或者简写<code>-f</code>。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 <code>mongo:3.2</code>之后建立的镜像，可以用下面的命令：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">$ docker images -f since=mongo:3.2</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               latest              5f515359c7f8       <span class="number"> 5 </span>days ago         <span class="number"> 183 </span>MB</span><br><span class="line">nginx               latest              05a60462f8ba       <span class="number"> 5 </span>days ago         <span class="number"> 181 </span>MB</span><br></pre></td></tr></table></figure>
<p>想查看某个位置之前的镜像也可以，只需要把 <code>since</code>换成 <code>before</code> 即可。</p>
<p>此外，如果镜像构建时，定义了 <code>LABEL</code>，还可以通过 <code>LABEL</code> 来过滤。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ docker images -f label=com<span class="selector-class">.example</span><span class="selector-class">.version</span>=<span class="number">0.1</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h1 id="8-以特定格式显示"><a href="#8-以特定格式显示" class="headerlink" title="8 以特定格式显示"></a>8 以特定格式显示</h1><p>默认情况下，<code>docker images</code> 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 <code>docker images</code> 把所有的虚悬镜像的 ID 列出来，然后才可以交给<code>docker rmi</code> 命令作为参数来删除指定的这些镜像，这个时候就用到了<code>-q</code>参数。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">$ docker images -q</span><br><span class="line"><span class="number">5</span>f<span class="number">515359</span><span class="keyword">c</span><span class="number">7</span>f<span class="number">8</span></span><br><span class="line"><span class="number">05</span>a<span class="number">60462</span>f<span class="number">8</span>ba</span><br><span class="line">fe<span class="number">9198</span><span class="keyword">c</span><span class="number">04</span>d<span class="number">62</span></span><br><span class="line"><span class="number">00285</span>df<span class="number">0</span>df<span class="number">87</span></span><br><span class="line">f<span class="number">753707788</span><span class="keyword">c</span><span class="number">5</span></span><br><span class="line">f<span class="number">753707788</span><span class="keyword">c</span><span class="number">5</span></span><br><span class="line"><span class="number">1e0</span><span class="keyword">c</span><span class="number">3</span>dd<span class="number">64</span>ccd</span><br></pre></td></tr></table></figure>
<p><code>--filter</code> 配合<code>-q</code>产生出指定范围的 ID 列表，然后送给另一个 <code>docker</code> 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 <code>Docker</code>命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。</p>
<p>另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 <a href="https://gohugo.io/templates/introduction/" target="_blank" rel="noopener">Go 的模板语法</a>。</p>
<p>比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">docker</span> <span class="string">images</span> <span class="bullet">--format</span> <span class="string">"<span class="template-variable">&#123;&#123;.ID&#125;&#125;</span>: <span class="template-variable">&#123;&#123;.Repository&#125;&#125;</span>"</span></span><br><span class="line"><span class="number">5</span><span class="attr">f515359c7f8:</span> <span class="string">redis</span></span><br><span class="line"><span class="number">05</span><span class="attr">a60462f8ba:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">fe9198c04d62:</span> <span class="string">mongo</span></span><br><span class="line"><span class="number">00285</span><span class="attr">df0df87:</span> <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">f753707788c5:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">f753707788c5:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="number">1e0</span><span class="attr">c3dd64ccd:</span> <span class="string">ubuntu</span></span><br></pre></td></tr></table></figure>
<p>或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$ docker images --format <span class="string">"table &#123;&#123;.ID&#125;&#125;<span class="subst">\t</span>&#123;&#123;.Repository&#125;&#125;<span class="subst">\t</span>&#123;&#123;.Tag&#125;&#125;"</span></span><br><span class="line">IMAGE ID            REPOSITORY          TAG</span><br><span class="line"><span class="number">5</span>f515359c7f8        redis               latest</span><br><span class="line"><span class="number">05</span>a60462f8ba        nginx               latest</span><br><span class="line">fe9198c04d62        mongo               <span class="number">3.2</span></span><br><span class="line"><span class="number">00285</span>df0df87        &lt;none&gt;              &lt;none&gt;</span><br><span class="line">f753707788c5        ubuntu              <span class="number">16.04</span></span><br><span class="line">f753707788c5        ubuntu              latest</span><br><span class="line"><span class="number">1e0</span>c3dd64ccd        ubuntu              <span class="number">14.04</span></span><br></pre></td></tr></table></figure>
<h1 id="9-启动容器"><a href="#9-启动容器" class="headerlink" title="9 启动容器"></a>9 启动容器</h1><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --name webserver -d -p 80:80 nginx</span></span><br></pre></td></tr></table></figure>
<p>这条命令会用<code>nginx</code>镜像启动一个容器，命名为 <code>webserver</code>，并且映射了 <code>80</code> 端口，这样我们可以用浏览器去访问这个 <code>nginx</code> 服务器。</p>
<h2 id="9-1-运行容器"><a href="#9-1-运行容器" class="headerlink" title="9.1 运行容器"></a>9.1 运行容器</h2><p>容器创建后二次启动及关闭使用：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@mini</span> ~]<span class="comment"># docker start web</span></span><br><span class="line">web</span><br><span class="line">[root<span class="variable">@mini</span> ~]<span class="comment"># docker stop web</span></span><br><span class="line">web</span><br></pre></td></tr></table></figure>
<h1 id="10-进入容器"><a href="#10-进入容器" class="headerlink" title="10 进入容器"></a>10 进入容器</h1><p>现在，假设我们非常不喜欢这个欢迎页面，我们希望改成欢迎 Docker 的文字，我们可以使用 <code>docker exec</code>命令进入容器，修改其内容。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>docker exec -it webserver bash</span><br><span class="line">root<span class="variable">@3729b97e8226</span><span class="symbol">:/</span><span class="comment"># echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">root<span class="variable">@3729b97e8226</span><span class="symbol">:/</span><span class="comment"># exit</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>我们以交互式终端方式进入 <code>webserver</code> 容器，并执行了 <code>bash</code> 命令，也就是获得一个可操作的 Shell。</p>
<p>然后，我们用<code>&lt;h1&gt;Hello, Docker!&lt;/h1&gt;</code> 覆盖了<code>/usr/share/nginx/html/index.html</code> 的内容。</p>
<p>现在我们再刷新浏览器的话，会发现内容被改变了。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Docker基础命令/1571816917920.png" alt="图1"></p>
<p>我们修改了容器的文件，也就是改动了容器的存储层。我们可以通过 <code>docker diff</code> 命令看到具体的改动。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">$ docker diff webserver</span><br><span class="line">C /root</span><br><span class="line">A <span class="meta-keyword">/root/</span>.bash_history</span><br><span class="line">C /run</span><br><span class="line">C /usr</span><br><span class="line">C <span class="meta-keyword">/usr/</span>share</span><br><span class="line">C <span class="meta-keyword">/usr/</span>share/nginx</span><br><span class="line">C <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/nginx/</span>html</span><br><span class="line">C <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/nginx/</span>html/index.html</span><br><span class="line">C /var</span><br><span class="line">C <span class="meta-keyword">/var/</span>cache</span><br><span class="line">C <span class="meta-keyword">/var/</span>cache/nginx</span><br><span class="line">A <span class="meta-keyword">/var/</span>cache<span class="meta-keyword">/nginx/</span>client_temp</span><br><span class="line">A <span class="meta-keyword">/var/</span>cache<span class="meta-keyword">/nginx/</span>fastcgi_temp</span><br><span class="line">A <span class="meta-keyword">/var/</span>cache<span class="meta-keyword">/nginx/</span>proxy_temp</span><br><span class="line">A <span class="meta-keyword">/var/</span>cache<span class="meta-keyword">/nginx/</span>scgi_temp</span><br><span class="line">A <span class="meta-keyword">/var/</span>cache<span class="meta-keyword">/nginx/</span>uwsgi_temp</span><br></pre></td></tr></table></figure>
<h1 id="11-利用commit定制镜像"><a href="#11-利用commit定制镜像" class="headerlink" title="11 利用commit定制镜像"></a>11 利用commit定制镜像</h1><p>现在我们定制好了变化，我们希望能将其保存下来形成镜像。</p>
<p>要知道，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个<code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p>
<p><code>docker commit</code>的语法格式为：</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line">docker commit [选项] &lt;容器ID或容器名&gt; <span class="meta">[&lt;仓库名&gt;[:&lt;标签&gt;]</span>]</span><br></pre></td></tr></table></figure>
<p>我们可以用下面的命令将容器保存为镜像：</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">$ docker commit \</span><br><span class="line">    -<span class="ruby">-author <span class="string">"Tao Wang &lt;twang2218@gmail.com&gt;"</span> \</span></span><br><span class="line"><span class="ruby">    --message <span class="string">"修改了默认网页"</span> \</span></span><br><span class="line"><span class="ruby">    webserver \</span></span><br><span class="line"><span class="ruby">    <span class="symbol">nginx:</span>v2</span></span><br><span class="line"><span class="ruby"><span class="symbol">sha256:</span><span class="number">07</span>e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa1795214</span></span><br></pre></td></tr></table></figure>
<p>其中<code>--author</code> 是指定修改的作者，而 <code>--message</code>则是记录本次修改的内容。这点和<code>git</code> 版本控制相似，不过这里这些信息可以省略留空。</p>
<p>我们可以在<code>docker images</code>中看到这个新定制的镜像：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$ docker images nginx</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               v2                  <span class="number">07e334659748</span>        <span class="number">9</span> seconds ago       <span class="number">181.5</span> MB</span><br><span class="line">nginx               <span class="number">1.11</span>                <span class="number">05</span>a60462f8ba        <span class="number">12</span> days ago         <span class="number">181.5</span> MB</span><br><span class="line">nginx               latest              e43d811ce2f4        <span class="number">4</span> weeks ago         <span class="number">181.5</span> MB</span><br></pre></td></tr></table></figure>
<p>我们还可以用 <code>docker history</code>具体查看镜像内的历史记录，如果比较<code>nginx:latest</code> 的历史记录，我们会发现新增了我们刚刚提交的这一层。</p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line">$ docker history nginx:v2</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">07e334659748        54 seconds ago      nginx -g daemon off;                            95 B                修改了默认网页</span><br><span class="line">e43d811ce2f4        4 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  CMD ["nginx" "-g" "daemon    0 B</span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  EXPOSE 443/tcp 80/tcp        0 B</span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c ln -sf /dev/stdout /var/log/nginx/   22 B</span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c apt-key adv --keyserver hkp://pgp.   58.46 MB</span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV NGINX_VERSION=1.11.5-1   0 B</span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  MAINTAINER NGINX Docker Ma   0 B</span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  CMD ["/bin/bash"]            0 B</span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span> ADD file:23aa4f893e3288698c   123 MB</span><br></pre></td></tr></table></figure>
<p>新的镜像定制好后，我们可以来运行这个镜像。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --name web2 -d -p 81:80 nginx:v2</span></span><br></pre></td></tr></table></figure>
<p>这里我们命名为新的服务为 <code>web2</code>，并且映射到 <code>81</code> 端口。如果是<code>Docker for Mac/Windows</code> 或<code>Linux</code> 桌面的话，我们就可以直接访问<code>http://localhost:81</code> 看到结果，其内容应该和之前修改后的 webserver 一样。</p>
<p>至此，我们第一次完成了定制镜像，使用的是 <code>docker commit</code> 命令，手动操作给旧的镜像添加了新的一层，形成新的镜像，对镜像多层存储应该有了更直观的感觉。</p>
<h2 id="11-1-慎用-docker-commit"><a href="#11-1-慎用-docker-commit" class="headerlink" title="11.1 慎用 docker commit"></a>11.1 慎用 <code>docker commit</code></h2><p>使用<code>docker commit</code> 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。</p>
<p>首先，如果仔细观察之前的 <code>docker diff webserver</code> 的结果，你会发现除了真正想要修改的<code>/usr/share/nginx/html/index.html</code> 文件外，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，如果不小心清理，将会导致镜像极为臃肿。</p>
<p>此外，使用 <code>docker commit</code> 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为<code>黑箱镜像</code>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体在操作的。虽然 <code>docker diff</code> 或许可以告诉得到一些线索，但是远远不到可以确保生成一致镜像的地步。这种黑箱镜像的维护工作是非常痛苦的。</p>
<p>而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 <code>docker commit</code>制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到™。这会让镜像更加臃肿。</p>
<p><code>docker commit</code> 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 docker commit 定制镜像，定制行为应该使用 Dockerfile 来完成。下面的章节我们就来讲述一下如何使用 <code>Dockerfile</code> 定制镜像。</p>
<h1 id="12-使用-Dockerfile-定制镜像"><a href="#12-使用-Dockerfile-定制镜像" class="headerlink" title="12 使用 Dockerfile 定制镜像"></a>12 使用 Dockerfile 定制镜像</h1><p>从刚才的 <code>docker commit</code> 的学习中，我们可以了解到，镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p>
<p>Dockerfile 是一个文本文件，其内包含了一条条的<code>指令(Instruction)</code>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>
<p>还以之前定制 <code>nginx</code>镜像为例，这次我们使用 <code>Dockerfile</code> 来定制。</p>
<p>在一个空白目录中，建立一个文本文件，并命名为 Dockerfile：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir mynginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> mynginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch Dockerfile</span></span><br></pre></td></tr></table></figure>
<p>其内容为：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>
<p>这个<code>Dockerfile</code> 很简单，一共就两行。涉及到了两条指令，<code>FROM</code> 和 <code>RUN</code>。</p>
<h2 id="12-1-FROM-指定基础镜像"><a href="#12-1-FROM-指定基础镜像" class="headerlink" title="12.1 FROM 指定基础镜像"></a>12.1 FROM 指定基础镜像</h2><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 <code>nginx</code> 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 FROM 就是指定基础镜像，因此一个<code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p>
<p>在 <code>Docker Hub1</code> 上有非常多的高质量的官方镜像， 有可以直接拿来使用的服务类的镜像，如 <code>nginx、redis、mongo、mysql、httpd、php、tomcat</code>等； 也有一些方便开发、构建、运行各种语言应用的镜像，如<code>node、openjdk、python、ruby、golang</code> 等。 可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。 如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 <code>ubuntu、debian、centos、fedora、alpine</code>等，这些操作系统的软件库为我们提供了更广阔的扩展空间。</p>
<p>除了选择现有镜像为基础镜像外，<code>Docker</code>还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line"><span class="keyword">...</span></span><br></pre></td></tr></table></figure>
<p>如果你以<code>scratch</code> 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>
<p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 <code>warm、coreos/etcd</code>。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 <code>FROM scratch</code>会让镜像体积更加小巧。使用 Go 语言 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。</p>
<h1 id="13-RUN-执行命令"><a href="#13-RUN-执行命令" class="headerlink" title="13 RUN 执行命令"></a>13 RUN 执行命令</h1><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code>指令在定制镜像时是最常用的指令之一。其格式有两种：</p>
<p><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的<code>Dockrfile</code>中的 <code>RUN</code> 指令就是这种格式。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>
<p><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:jessie</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="bash">RUN apt-get install -y gcc libc6-dev make</span></span><br><span class="line"><span class="bash">RUN wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-3.2.5.tar.gz"</span></span></span><br><span class="line"><span class="bash">RUN mkdir -p /usr/src/redis</span></span><br><span class="line"><span class="bash">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class="line"><span class="bash">RUN make -C /usr/src/redis</span></span><br><span class="line"><span class="bash">RUN make -C /usr/src/redis install</span></span><br></pre></td></tr></table></figure>
<p>之前说过，Dockerfile 中每一个指令都会建立一层，<code>RUN</code>也不例外。每一个 <code>RUN</code>的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code>这一层的修改，构成新的镜像。</p>
<p>而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 <code>Docker</code> 的人常犯的一个错误。</p>
<p><code>Union FS</code>是有最大层数限制的，比如 <code>AUFS</code>，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p>
<p>上面的 <code>Dockerfile</code> 正确的写法应该是这样：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line"></span><br><span class="line">RUN buildDeps=<span class="string">'gcc libc6-dev make'</span> \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-3.2.5.tar.gz"</span> \</span><br><span class="line">    &amp;&amp; mkdir -p <span class="regexp">/usr/</span>src<span class="regexp">/redis \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; tar -xzf redis.tar.gz -C /u</span>sr<span class="regexp">/src/</span>redis --strip-components=<span class="number">1</span> \</span><br><span class="line">    &amp;&amp; make -C <span class="regexp">/usr/</span>src<span class="regexp">/redis \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; make -C /u</span>sr<span class="regexp">/src/</span>redis install \</span><br><span class="line">    &amp;&amp; rm -rf <span class="regexp">/var/</span>lib<span class="regexp">/apt/</span>lists<span class="regexp">/* \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; rm redis.tar.gz \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; rm -r /u</span>sr<span class="regexp">/src/</span>redis \</span><br><span class="line">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span><br></pre></td></tr></table></figure>
<p>首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个<code>RUN</code> 对一一对应不同的命令，而是仅仅使用一个 <code>RUN</code>指令，并使用 &amp;&amp; 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 <code>Dockerfile</code> 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。</p>
<p>并且，这里为了格式化还进行了换行。<code>Dockerfile</code> 支持<code>Shell</code> 类的行尾添加<code>\</code>的命令换行方式，以及行首<code>#</code>进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。</p>
<p>此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 apt 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p>
<p>很多人初学<code>Docker</code>制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。</p>
<h1 id="14-构建镜像"><a href="#14-构建镜像" class="headerlink" title="14 构建镜像"></a>14 构建镜像</h1><p>好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。</p>
<p>在<code>Dockerfile</code>文件所在目录执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t nginx:v3 .</span></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1 : FROM nginx</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e43d811ce2f4</span></span><br><span class="line">Step 2 : RUN echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9cdc27646c7b</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 44aa4490ce2c</span></span><br><span class="line">Removing intermediate container 9cdc27646c7b</span><br><span class="line">Successfully built 44aa4490ce2c</span><br></pre></td></tr></table></figure>
<p>从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 <code>Step 2</code> 中，如同我们之前所说的那样，RUN 指令启动了一个容器 <code>9cdc27646c7b</code>，执行了所要求的命令，并最后提交了这一层 <code>44aa4490ce2c</code>，随后删除了所用到的这个容器 <code>9cdc27646c7b</code>。</p>
<p>这里我们使用了 <code>docker build</code>命令进行镜像构建。其格式为：</p>
<p>docker build [选项] &lt;上下文路径/URL/-&gt;<br>在这里我们指定了最终镜像的名称 -t nginx:v3，构建成功后，我们可以像之前运行 nginx:v2 那样来运行这个镜像，其结果会和 nginx:v2 一样。</p>
<h1 id="15-镜像构建上下文（Context）"><a href="#15-镜像构建上下文（Context）" class="headerlink" title="15 镜像构建上下文（Context）"></a>15 镜像构建上下文（Context）</h1><p>如果注意，会看到 <code>docker build</code> 命令最后有一个<code>.</code>。<code>.</code>表示当前目录，而 <code>Dockerfile</code> 就在当前目录，因此不少初学者以为这个路径是在指定<code>Dockerfile</code>所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定上下文路径。那么什么是上下文呢？</p>
<p>首先我们要理解 <code>docker build</code> 的工作原理。<code>Docker</code> 在运行时分为 <code>Docker</code> 引擎（也就是服务端守护进程）和客户端工具。<code>Docker</code> 的引擎提供了一组 <code>REST API</code>，被称为 <code>Docker Remote API</code>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 <code>API</code>与 <code>Docker</code> 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种<code>C/S</code>设计，让我们操作远程服务器的 <code>Docker</code>引擎变得轻而易举。</p>
<p>当我们进行镜像构建的时候，并非所有定制都会通过 <code>RUN</code> 指令完成，经常会需要将一些本地文件复制进镜像，比如通过<code>COPY</code>指令、<code>ADD</code> 指令等。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是<code>Docker</code> 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p>
<p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 <code>Docker</code> 引擎。这样 <code>Docker</code> 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>
<p>如果在<code>Dockerfile</code>中这么写：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span> ./package.json /<span class="keyword">app</span>/</span><br></pre></td></tr></table></figure>
<p>这并不是要复制执行<code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制<code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 上下文（context） 目录下的<code>package.json</code>。</p>
<p>因此，<code>COPY</code> 这类指令中的源文件的路径都是相对路径。这也是初学者经常会问的为什么 <code>COPY ../package.json /app</code> 或者<code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，<code>Docker</code> 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p>
<p>现在就可以理解刚才的命令 docker build -t nginx:v3 . 中的这个 .，实际上是在指定上下文的目录，<code>docker build</code> 命令会将该目录下的内容打包交给 <code>Docker</code>引擎以帮助构建镜像。</p>
<p>如果观察 <code>docker build</code> 输出，我们其实已经看到了这个发送上下文的过程：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">build </span>-t nginx:<span class="built_in">v3</span> .</span><br><span class="line"><span class="symbol">Sending</span> <span class="keyword">build </span>context to Docker daemon <span class="number">2</span>.<span class="number">048</span> kB</span><br><span class="line"><span class="symbol">...</span></span><br></pre></td></tr></table></figure>
<p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 <code>COPY /opt/xxxx /app</code> 不工作后，于是干脆将 <code>Dockerfile</code> 放到了硬盘根目录去构建，结果发现 <code>docker build</code>执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 <code>docker build</code> 打包整个硬盘，这显然是使用错误。</p>
<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code>一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 <code>Docker</code>引擎的。</p>
<p>那么为什么会有人误以为 . 是指定<code>Dockerfile</code>所在目录呢？这是因为在默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为<code>Dockerfile</code>。</p>
<p>这只是默认行为，实际上<code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为<code>Dockerfile</code>。</p>
<p>当然，一般大家习惯性的会使用默认的文件名 <code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中。</p>
<h1 id="16-其它-docker-build-的用法"><a href="#16-其它-docker-build-的用法" class="headerlink" title="16 其它 docker build 的用法"></a>16 其它 docker build 的用法</h1><h2 id="16-1-直接用-Git-repo-进行构建"><a href="#16-1-直接用-Git-repo-进行构建" class="headerlink" title="16.1 直接用 Git repo 进行构建"></a>16.1 直接用 Git repo 进行构建</h2><p>或许你已经注意到了，<code>docker build</code> 还支持从 URL 构建，比如可以直接从 <code>Git repo</code> 中构建：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ docker build http<span class="variable">s:</span>//github.<span class="keyword">com</span>/twang2218/gitlab-<span class="keyword">ce</span>-zh.git#:<span class="number">8.14</span></span><br><span class="line">docker build http<span class="variable">s:</span>//github.<span class="keyword">com</span>/twang2218/gitlab-<span class="keyword">ce</span>-zh.git\#:<span class="number">8.14</span></span><br><span class="line">Sending build context <span class="keyword">to</span> Docker daemon <span class="number">2.048</span> kB</span><br><span class="line">Step <span class="number">1</span> : FROM gitlab/gitlab-<span class="keyword">ce</span>:<span class="number">8.14</span>.<span class="number">0</span>-<span class="keyword">ce</span>.<span class="number">0</span></span><br><span class="line"><span class="number">8.14</span>.<span class="number">0</span>-<span class="keyword">ce</span>.<span class="number">0</span>: Pulling from gitlab/gitlab-<span class="keyword">ce</span></span><br><span class="line">aed15891ba52: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">773</span>ae8583d14: Already <span class="built_in">exists</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这行命令指定了构建所需的<code>Git repo</code>，并且指定默认的 master 分支，构建目录为 <code>/8.14/</code>，然后 <code>Docker</code> 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p>
<h2 id="16-2-用给定的-tar-压缩包构建"><a href="#16-2-用给定的-tar-压缩包构建" class="headerlink" title="16.2 用给定的 tar 压缩包构建"></a>16.2 用给定的 tar 压缩包构建</h2><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> docker build http:<span class="comment">//server/context.tar.gz</span></span><br></pre></td></tr></table></figure>
<p>如果所给出的 URL 不是个 <code>Git repo</code>，而是个 tar 压缩包，那么 <code>Docker</code>引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p>
<h2 id="16-3-从标准输入中读取-Dockerfile-进行构建"><a href="#16-3-从标准输入中读取-Dockerfile-进行构建" class="headerlink" title="16.3 从标准输入中读取 Dockerfile 进行构建"></a>16.3 从标准输入中读取 Dockerfile 进行构建</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> build - &lt; Dockerfile</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> Dockerfile | docker build -</span><br></pre></td></tr></table></figure>
<p>如果标准输入传入的是文本文件，则将其视为<code>Dockerfile</code>，并开始构建。这种形式由于直接从标准输入中读取 <code>Dockerfile</code> 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件<code>COPY</code> 进镜像之类的事情。</p>
<h2 id="16-4-从标准输入中读取上下文压缩包进行构建"><a href="#16-4-从标准输入中读取上下文压缩包进行构建" class="headerlink" title="16.4 从标准输入中读取上下文压缩包进行构建"></a>16.4 从标准输入中读取上下文压缩包进行构建</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ docker build - &lt; context<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>
<p>如果发现标准输入的文件格式是 <code>gzip、bzip2</code> 以及<code>xz</code> 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos搭建私有仓库</title>
    <url>/2018/08/28/Centos%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="1-本地YUM源"><a href="#1-本地YUM源" class="headerlink" title="1 本地YUM源"></a>1 本地YUM源</h1><a id="more"></a>
<h2 id="1-1-安装createrepo"><a href="#1-1-安装createrepo" class="headerlink" title="1.1 安装createrepo"></a>1.1 安装createrepo</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum -y install createrepo</span></span><br></pre></td></tr></table></figure>
<h2 id="1-2-创建目录"><a href="#1-2-创建目录" class="headerlink" title="1.2 创建目录"></a>1.2 创建目录</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> /yum/yum-custom/packages</span><br></pre></td></tr></table></figure>
<h2 id="1-3-下载rpm包及依赖到packages"><a href="#1-3-下载rpm包及依赖到packages" class="headerlink" title="1.3 下载rpm包及依赖到packages"></a>1.3 下载rpm包及依赖到packages</h2><blockquote>
<p>rpm包放在/yum-custom/<em>    “`</em>`”可以是自定义文件夹，不一定要是packages</p>
</blockquote>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">yum install httpd <span class="params">--downloadonly</span> <span class="params">--downloaddir=/yum/yum-custom/packages</span></span><br></pre></td></tr></table></figure>
<h2 id="1-4-创建repo"><a href="#1-4-创建repo" class="headerlink" title="1.4 创建repo"></a>1.4 创建repo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ createrepo  /yum/yum-custom/</span><br><span class="line">Spawning worker 0 with 1 pkgs</span><br><span class="line">Spawning worker 1 with 0 pkgs</span><br><span class="line">Workers Finished</span><br><span class="line">Saving Primary metadata</span><br><span class="line">Saving file lists metadata</span><br><span class="line">Saving other metadata</span><br><span class="line">Generating sqlite DBs</span><br><span class="line">Sqlite DBs complete</span><br><span class="line">$ ll /yum/yum-custom/</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 2 root root   41 Dec 20 07:03 packages</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Dec 20 07:08 repodata</span><br></pre></td></tr></table></figure>
<h2 id="1-5-配置自定义repo"><a href="#1-5-配置自定义repo" class="headerlink" title="1.5 配置自定义repo"></a>1.5 配置自定义repo</h2><h3 id="1-5-1-删除备份repo文件"><a href="#1-5-1-删除备份repo文件" class="headerlink" title="1.5.1 删除备份repo文件"></a>1.5.1 删除备份repo文件</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@localhost</span> /]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root<span class="variable">@localhost</span> yum.repos.d]<span class="comment"># ls</span></span><br><span class="line">CentOS-Base.repo         CentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Media.repo.bak         CentOS-QEMU-EV.repo  CentOS-Vault.repo</span><br><span class="line">CentOS-Ceph-Hammer.repo  CentOS-Debuginfo.repo  CentOS-Media.repo      CentOS-OpenStack-mitaka.repo  CentOS-Sources.repo  repo.bak.tar</span><br><span class="line">[root<span class="variable">@localhost</span> yum.repos.d]<span class="comment"># tar zcvf *.repo</span></span><br><span class="line">[root<span class="variable">@localhost</span> yum.repos.d]<span class="comment"># rm -f *.repo</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-2-创建CentOS-Media-repo"><a href="#1-5-2-创建CentOS-Media-repo" class="headerlink" title="1.5.2 创建CentOS-Media.repo"></a>1.5.2 创建CentOS-Media.repo</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/yum.repos.d/CentOS-Media.repo</span></span><br><span class="line"><span class="comment"># 填入如下内容</span></span><br><span class="line"></span><br><span class="line"><span class="section">[c7-media]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Media</span><br><span class="line"><span class="attr">baseurl</span>=file:///yum/yum-custom/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span>              </span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br></pre></td></tr></table></figure>
<h2 id="1-6-重建YUM缓存"><a href="#1-6-重建YUM缓存" class="headerlink" title="1.6 重建YUM缓存"></a>1.6 重建YUM缓存</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@linuxidc.com ~]</span># <span class="selector-tag">yum</span> <span class="selector-tag">clean</span> <span class="keyword">all</span>               #删除缓存</span><br><span class="line"><span class="selector-tag">Loaded</span> <span class="selector-tag">plugins</span>: <span class="selector-tag">fastestmirror</span></span><br><span class="line"><span class="selector-tag">Cleaning</span> <span class="selector-tag">repos</span>: <span class="selector-tag">c7-media</span></span><br><span class="line"><span class="selector-tag">Cleaning</span> <span class="selector-tag">up</span> <span class="selector-tag">everything</span></span><br><span class="line"><span class="selector-tag">Cleaning</span> <span class="selector-tag">up</span> <span class="selector-tag">list</span> <span class="selector-tag">of</span> <span class="selector-tag">fastest</span> <span class="selector-tag">mirrors</span></span><br><span class="line"><span class="selector-attr">[root@linuxidc.com ~]</span># <span class="selector-tag">yum</span> <span class="selector-tag">makecache</span>               #建立缓存</span><br><span class="line"><span class="selector-tag">Loaded</span> <span class="selector-tag">plugins</span>: <span class="selector-tag">fastestmirror</span></span><br><span class="line"><span class="selector-tag">c7-media</span>                                                                                                         | <span class="selector-tag">3</span><span class="selector-class">.0</span> <span class="selector-tag">kB</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line">(<span class="number">1</span>/<span class="number">3</span>): <span class="selector-tag">c7-media</span>/<span class="selector-tag">filelists_db</span>                                                                                     |  <span class="selector-tag">880</span> <span class="selector-tag">B</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line">(<span class="number">2</span>/<span class="number">3</span>): <span class="selector-tag">c7-media</span>/<span class="selector-tag">primary_db</span>                                                                                       | <span class="selector-tag">1</span><span class="selector-class">.8</span> <span class="selector-tag">kB</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line">(<span class="number">3</span>/<span class="number">3</span>): <span class="selector-tag">c7-media</span>/<span class="selector-tag">other_db</span>                                                                                         | <span class="selector-tag">1</span><span class="selector-class">.3</span> <span class="selector-tag">kB</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line"><span class="selector-tag">Determining</span> <span class="selector-tag">fastest</span> <span class="selector-tag">mirrors</span></span><br><span class="line"><span class="selector-tag">Metadata</span> <span class="selector-tag">Cache</span> <span class="selector-tag">Created</span></span><br></pre></td></tr></table></figure>
<h2 id="1-7-使用本地yum"><a href="#1-7-使用本地yum" class="headerlink" title="1.7 使用本地yum"></a>1.7 使用本地yum</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum install httpd</span></span><br></pre></td></tr></table></figure>
<h1 id="2-局域网YUM源（vsftpd）"><a href="#2-局域网YUM源（vsftpd）" class="headerlink" title="2 局域网YUM源（vsftpd）"></a>2 局域网YUM源（vsftpd）</h1><h2 id="2-1-安装createrepo"><a href="#2-1-安装createrepo" class="headerlink" title="2.1 安装createrepo"></a>2.1 安装createrepo</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum -y install createrepo</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-安装vsftpd"><a href="#2-2-安装vsftpd" class="headerlink" title="2.2 安装vsftpd"></a>2.2 安装vsftpd</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum -y install vsftpd</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-1-配置vsftpd-conf"><a href="#2-2-1-配置vsftpd-conf" class="headerlink" title="2.2.1 配置vsftpd.conf"></a>2.2.1 配置vsftpd.conf</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/vsftpd/vsftpd.conf</span></span><br><span class="line"><span class="comment">#并增加匿名用户root目录（默认已经启用匿名访问）</span></span><br><span class="line"></span><br><span class="line">anon_root=/yum/</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-启动vsftpd"><a href="#2-2-2-启动vsftpd" class="headerlink" title="2.2.2 启动vsftpd"></a>2.2.2 启动vsftpd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd             <span class="comment">#启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd            <span class="comment">#开机启动</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-创建目录"><a href="#2-3-创建目录" class="headerlink" title="2.3 创建目录"></a>2.3 创建目录</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> /yum/yum-custom/packages</span><br></pre></td></tr></table></figure>
<h2 id="2-4-下载rpm包及依赖到packages"><a href="#2-4-下载rpm包及依赖到packages" class="headerlink" title="2.4 下载rpm包及依赖到packages"></a>2.4 下载rpm包及依赖到packages</h2><blockquote>
<p>rpm包放在/yum-custom/<em>    “</em>”可以是自定义文件夹，不一定要是packages</p>
</blockquote>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">yum install httpd <span class="params">--downloadonly</span> <span class="params">--downloaddir=/yum/yum-custom/packages</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-创建repo"><a href="#2-5-创建repo" class="headerlink" title="2.5 创建repo"></a>2.5 创建repo</h2><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line"><span class="comment"># createrepo  /yum/yum-custom/</span></span><br><span class="line">Spawning worker<span class="number"> 0 </span>with<span class="number"> 1 </span>pkgs</span><br><span class="line">Spawning worker<span class="number"> 1 </span>with<span class="number"> 0 </span>pkgs</span><br><span class="line">Workers Finished</span><br><span class="line">Saving Primary metadata</span><br><span class="line">Saving file lists metadata</span><br><span class="line">Saving other metadata</span><br><span class="line">Generating sqlite DBs</span><br><span class="line">Sqlite DBs complete</span><br><span class="line"><span class="comment"># ll /yum/yum-custom/</span></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>root root  <span class="number"> 41 </span>Dec<span class="number"> 20 </span>07:03 packages</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>root root<span class="number"> 4096 </span>Dec<span class="number"> 20 </span>07:08 repodata</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以下步骤局域网机器操作！</p>
</blockquote>
<h3 id="2-5-1-删除备份repo文件"><a href="#2-5-1-删除备份repo文件" class="headerlink" title="2.5.1 删除备份repo文件"></a>2.5.1 删除备份repo文件</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@localhost</span> /]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root<span class="variable">@localhost</span> yum.repos.d]<span class="comment"># ls</span></span><br><span class="line">CentOS-Base.repo         CentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Media.repo.bak         CentOS-QEMU-EV.repo  CentOS-Vault.repo</span><br><span class="line">CentOS-Ceph-Hammer.repo  CentOS-Debuginfo.repo  CentOS-Media.repo      CentOS-OpenStack-mitaka.repo  CentOS-Sources.repo  repo.bak.tar</span><br><span class="line">[root<span class="variable">@localhost</span> yum.repos.d]<span class="comment"># tar zcvf *.repo</span></span><br><span class="line">[root<span class="variable">@localhost</span> yum.repos.d]<span class="comment"># rm -f *.repo</span></span><br></pre></td></tr></table></figure>
<h3 id="2-5-2-修改自定义repo如下"><a href="#2-5-2-修改自定义repo如下" class="headerlink" title="2.5.2 修改自定义repo如下"></a>2.5.2 修改自定义repo如下</h3><blockquote>
<p>修改局域网服务器的repo，哪个服务器使用，修改哪个服务器文件。</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[root@localhost /]</span><span class="comment"># vim /etc/yum.repos.d/CentOS-Media.repo</span></span><br><span class="line"><span class="comment"># 内容如下</span></span><br><span class="line"></span><br><span class="line"><span class="section">[c7-media]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Media</span><br><span class="line"><span class="attr">baseurl</span>=ftp://<span class="number">192.168</span>.<span class="number">118.133</span>/yum-custom    #注意是ftp，不是file</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"><span class="comment"># 其中192.168.118.133为上面vsftp服务器地址</span></span><br></pre></td></tr></table></figure>
<h2 id="2-6-重建YUM缓存"><a href="#2-6-重建YUM缓存" class="headerlink" title="2.6 重建YUM缓存"></a>2.6 重建YUM缓存</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@linuxidc.com ~]</span># <span class="selector-tag">yum</span> <span class="selector-tag">clean</span> <span class="keyword">all</span>               #删除缓存</span><br><span class="line"><span class="selector-tag">Loaded</span> <span class="selector-tag">plugins</span>: <span class="selector-tag">fastestmirror</span></span><br><span class="line"><span class="selector-tag">Cleaning</span> <span class="selector-tag">repos</span>: <span class="selector-tag">c7-media</span></span><br><span class="line"><span class="selector-tag">Cleaning</span> <span class="selector-tag">up</span> <span class="selector-tag">everything</span></span><br><span class="line"><span class="selector-tag">Cleaning</span> <span class="selector-tag">up</span> <span class="selector-tag">list</span> <span class="selector-tag">of</span> <span class="selector-tag">fastest</span> <span class="selector-tag">mirrors</span></span><br><span class="line"><span class="selector-attr">[root@linuxidc.com ~]</span># <span class="selector-tag">yum</span> <span class="selector-tag">makecache</span>               #建立缓存</span><br><span class="line"><span class="selector-tag">Loaded</span> <span class="selector-tag">plugins</span>: <span class="selector-tag">fastestmirror</span></span><br><span class="line"><span class="selector-tag">c7-media</span>                                                                                                         | <span class="selector-tag">3</span><span class="selector-class">.0</span> <span class="selector-tag">kB</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line">(<span class="number">1</span>/<span class="number">3</span>): <span class="selector-tag">c7-media</span>/<span class="selector-tag">filelists_db</span>                                                                                     |  <span class="selector-tag">880</span> <span class="selector-tag">B</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line">(<span class="number">2</span>/<span class="number">3</span>): <span class="selector-tag">c7-media</span>/<span class="selector-tag">primary_db</span>                                                                                       | <span class="selector-tag">1</span><span class="selector-class">.8</span> <span class="selector-tag">kB</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line">(<span class="number">3</span>/<span class="number">3</span>): <span class="selector-tag">c7-media</span>/<span class="selector-tag">other_db</span>                                                                                         | <span class="selector-tag">1</span><span class="selector-class">.3</span> <span class="selector-tag">kB</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line"><span class="selector-tag">Determining</span> <span class="selector-tag">fastest</span> <span class="selector-tag">mirrors</span></span><br><span class="line"><span class="selector-tag">Metadata</span> <span class="selector-tag">Cache</span> <span class="selector-tag">Created</span></span><br></pre></td></tr></table></figure>
<h2 id="2-7-使用局域网yum"><a href="#2-7-使用局域网yum" class="headerlink" title="2.7 使用局域网yum"></a>2.7 使用局域网yum</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum install httpd</span></span><br></pre></td></tr></table></figure>
<h1 id="3-局域网YUM源（httpd）"><a href="#3-局域网YUM源（httpd）" class="headerlink" title="3 局域网YUM源（httpd）"></a>3 局域网YUM源（httpd）</h1><h2 id="3-1-安装createrepo"><a href="#3-1-安装createrepo" class="headerlink" title="3.1 安装createrepo"></a>3.1 安装createrepo</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum -y install createrepo</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-安装httpd"><a href="#3-2-安装httpd" class="headerlink" title="3.2 安装httpd"></a>3.2 安装httpd</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum -y install httpd</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-1-配置httpd-conf"><a href="#3-2-1-配置httpd-conf" class="headerlink" title="3.2.1 配置httpd.conf"></a>3.2.1 配置httpd.conf</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line">$ vim /etc/httpd/conf/httpd.conf</span><br><span class="line"><span class="comment"># 修改http根目录</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"/yum"</span>                             #修改</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Relax access to content within /var/www.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="section">&lt;Directory "/var/www/html"&gt;</span></span><br><span class="line">    <span class="attribute">AllowOverride</span> None</span><br><span class="line">    <span class="comment"># Allow open access:</span></span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Further relax access to the default document root:</span></span><br><span class="line"><span class="section">&lt;Directory "/yum"&gt;</span>                             <span class="comment">#修改</span></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="comment"># Possible values for the Options directive are "None", "All",</span></span><br><span class="line">    <span class="comment"># or any combination of:</span></span><br><span class="line">    <span class="comment">#   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Note that "MultiViews" must be named *explicitly* --- "Options All"</span></span><br><span class="line">    <span class="comment"># doesn't give it to you.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The Options directive is both complicated and important.  Please see</span></span><br><span class="line">    <span class="comment"># http://httpd.apache.org/docs/2.4/mod/core.html#options</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># AllowOverride controls what directives may be placed in .htaccess files.</span></span><br><span class="line">    <span class="comment"># It can be "All", "None", or any combination of the keywords:</span></span><br><span class="line">    <span class="comment">#   Options FileInfo AuthConfig Limit</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">AllowOverride</span> None</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Controls who can get stuff from this server.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-启动httpd"><a href="#3-2-2-启动httpd" class="headerlink" title="3.2.2 启动httpd"></a>3.2.2 启动httpd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start httpd             <span class="comment">#启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd            <span class="comment">#开机启动</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-创建目录"><a href="#3-3-创建目录" class="headerlink" title="3.3 创建目录"></a>3.3 创建目录</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> /yum/yum-custom/packages</span><br></pre></td></tr></table></figure>
<h2 id="3-4-下载rpm包及依赖到packages"><a href="#3-4-下载rpm包及依赖到packages" class="headerlink" title="3.4 下载rpm包及依赖到packages"></a>3.4 下载rpm包及依赖到packages</h2><blockquote>
<p>rpm包放在/yum-custom/<em>    “</em>”可以是自定义文件夹，不一定要是packages</p>
</blockquote>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">yum install httpd <span class="params">--downloadonly</span> <span class="params">--downloaddir=/yum/yum-custom/packages</span></span><br></pre></td></tr></table></figure>
<h2 id="3-5-创建repo"><a href="#3-5-创建repo" class="headerlink" title="3.5 创建repo"></a>3.5 创建repo</h2><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line"><span class="comment">#createrepo  /yum/yum-custom/                            </span></span><br><span class="line">Spawning worker<span class="number"> 0 </span>with<span class="number"> 1 </span>pkgs</span><br><span class="line">Spawning worker<span class="number"> 1 </span>with<span class="number"> 0 </span>pkgs</span><br><span class="line">Workers Finished</span><br><span class="line">Saving Primary metadata</span><br><span class="line">Saving file lists metadata</span><br><span class="line">Saving other metadata</span><br><span class="line">Generating sqlite DBs</span><br><span class="line">Sqlite DBs complete</span><br><span class="line"><span class="comment">#ll /yum/yum-custom/</span></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>root root  <span class="number"> 41 </span>Dec<span class="number"> 20 </span>07:03 packages</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>root root<span class="number"> 4096 </span>Dec<span class="number"> 20 </span>07:08 repodata</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以下步骤局域网机器操作！</p>
</blockquote>
<h3 id="3-5-1-删除备份repo文件"><a href="#3-5-1-删除备份repo文件" class="headerlink" title="3.5.1 删除备份repo文件"></a>3.5.1 删除备份repo文件</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@localhost</span> /]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root<span class="variable">@localhost</span> yum.repos.d]<span class="comment"># ls</span></span><br><span class="line">CentOS-Base.repo         CentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Media.repo.bak         CentOS-QEMU-EV.repo  CentOS-Vault.repo</span><br><span class="line">CentOS-Ceph-Hammer.repo  CentOS-Debuginfo.repo  CentOS-Media.repo      CentOS-OpenStack-mitaka.repo  CentOS-Sources.repo  repo.bak.tar</span><br><span class="line">[root<span class="variable">@localhost</span> yum.repos.d]<span class="comment"># tar zcvf *.repo</span></span><br><span class="line">[root<span class="variable">@localhost</span> yum.repos.d]<span class="comment"># rm -f *.repo</span></span><br></pre></td></tr></table></figure>
<h3 id="3-5-2-修改自定义repo如下"><a href="#3-5-2-修改自定义repo如下" class="headerlink" title="3.5.2 修改自定义repo如下"></a>3.5.2 修改自定义repo如下</h3><blockquote>
<p>修改局域网服务器的repo，哪个服务器使用，修改哪个服务器文件。</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[root@localhost /]</span><span class="comment"># vim /etc/yum.repos.d/CentOS-Media.repo</span></span><br><span class="line"><span class="comment">#内容如下</span></span><br><span class="line"></span><br><span class="line"><span class="section">[c7-media]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Media</span><br><span class="line"><span class="attr">baseurl</span>=http://<span class="number">192.168</span>.<span class="number">118.133</span>/yum-custom    #注意是http，不是file、ftp</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"><span class="comment">#其中192.168.118.133为上面vsftp服务器地址</span></span><br></pre></td></tr></table></figure>
<h2 id="3-6重建YUM缓存"><a href="#3-6重建YUM缓存" class="headerlink" title="3.6重建YUM缓存"></a>3.6重建YUM缓存</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@linuxidc.com ~]</span># <span class="selector-tag">yum</span> <span class="selector-tag">clean</span> <span class="keyword">all</span>               #删除缓存</span><br><span class="line"><span class="selector-tag">Loaded</span> <span class="selector-tag">plugins</span>: <span class="selector-tag">fastestmirror</span></span><br><span class="line"><span class="selector-tag">Cleaning</span> <span class="selector-tag">repos</span>: <span class="selector-tag">c7-media</span></span><br><span class="line"><span class="selector-tag">Cleaning</span> <span class="selector-tag">up</span> <span class="selector-tag">everything</span></span><br><span class="line"><span class="selector-tag">Cleaning</span> <span class="selector-tag">up</span> <span class="selector-tag">list</span> <span class="selector-tag">of</span> <span class="selector-tag">fastest</span> <span class="selector-tag">mirrors</span></span><br><span class="line"><span class="selector-attr">[root@linuxidc.com ~]</span># <span class="selector-tag">yum</span> <span class="selector-tag">makecache</span>               #建立缓存</span><br><span class="line"><span class="selector-tag">Loaded</span> <span class="selector-tag">plugins</span>: <span class="selector-tag">fastestmirror</span></span><br><span class="line"><span class="selector-tag">c7-media</span>                                                                                                         | <span class="selector-tag">3</span><span class="selector-class">.0</span> <span class="selector-tag">kB</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line">(<span class="number">1</span>/<span class="number">3</span>): <span class="selector-tag">c7-media</span>/<span class="selector-tag">filelists_db</span>                                                                                     |  <span class="selector-tag">880</span> <span class="selector-tag">B</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line">(<span class="number">2</span>/<span class="number">3</span>): <span class="selector-tag">c7-media</span>/<span class="selector-tag">primary_db</span>                                                                                       | <span class="selector-tag">1</span><span class="selector-class">.8</span> <span class="selector-tag">kB</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line">(<span class="number">3</span>/<span class="number">3</span>): <span class="selector-tag">c7-media</span>/<span class="selector-tag">other_db</span>                                                                                         | <span class="selector-tag">1</span><span class="selector-class">.3</span> <span class="selector-tag">kB</span>  <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>     </span><br><span class="line"><span class="selector-tag">Determining</span> <span class="selector-tag">fastest</span> <span class="selector-tag">mirrors</span></span><br><span class="line"><span class="selector-tag">Metadata</span> <span class="selector-tag">Cache</span> <span class="selector-tag">Created</span></span><br></pre></td></tr></table></figure>
<h2 id="3-7-使用局域网yum"><a href="#3-7-使用局域网yum" class="headerlink" title="3.7 使用局域网yum"></a>3.7 使用局域网yum</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum install httpd</span></span><br></pre></td></tr></table></figure>
<h1 id="4-注意事项："><a href="#4-注意事项：" class="headerlink" title="4 注意事项："></a>4 注意事项：</h1><p>1、YUM源服务器每次添加rpm包到yum-custom目录，都需要重新运行<code>#createrepo /yum/yum-custom/</code>命令（YUM源服务器运行），同时局域网电脑重新建立缓存<code>#yum clean all</code> 和<code>#yum makecache</code>，否则无法发现新加安装包。</p>
<p>2、YUM源在<code>/yum/yum-custom</code>下可创建自定义目录，可根据rpm包进行分类，便于本地YUM源管理，同上，有任何改变，必须重新运行事项1命令。</p>
<p>3、局域网主机安装rpm的时候<strong>出现报错</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos搭建私有仓库/1571816878058.png" alt="图1"></p>
<p>原因：使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">createrepo -u -d  /yum/yum-custom/</span><br></pre></td></tr></table></figure>
<p>创建repo，</p>
<p>解决办法：使用命令</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">createrepo</span>  /yum/yum-custom/</span><br></pre></td></tr></table></figure>
<p>不添加任何参数。</p>
<p>4、<strong>selinux必须关闭</strong>，否则局域网机器无法从仓库建立缓存。</p>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="http://www.linuxidc.com/Linux/2017-03/141391.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2017-03/141391.htm</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>私有仓库</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Openstack热迁移和冷迁移</title>
    <url>/2018/08/28/Openstack%E7%83%AD%E8%BF%81%E7%A7%BB%E5%92%8C%E5%86%B7%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-迁移类型："><a href="#1-迁移类型：" class="headerlink" title="1 迁移类型："></a>1 迁移类型：</h1><p>*<code>非在线迁移</code> (有时也称之为‘<code>迁移</code>’)。也就是在迁移到另外的计算节点时的这段时间虚拟机实例是处于宕机状态的。在此情况下，实例需要重启才能工作。</p>
<p>*<code>在线迁移</code> (或 ‘<code>真正的在线迁移</code>‘)。实例几乎没有宕机时间。用于当实例需要在迁移时保持运行。在线迁移有下面几种类型：</p>
<ul>
<li><p>基于共享存储的在线迁移。所有的Hypervisor都可以访问共享存储。</p>
</li>
<li><p>块在线迁移。无须共享存储。但诸如CD-ROM之类的只读设备是无法实现的。</p>
</li>
<li><p>基于卷的在线迁移。实例都是基于卷的而不是临时的磁盘，无须共享存储，也支持迁移(目前仅支持基于libvirt的hypervisor)。</p>
</li>
</ul>
<h2 id="1-1-什么是热迁移"><a href="#1-1-什么是热迁移" class="headerlink" title="1.1 什么是热迁移"></a>1.1 什么是热迁移</h2><p><code>热迁移</code>（Live Migration，又叫<code>动态迁移</code>、<code>实时迁移</code>），即虚拟机保存/恢复(Save/Restore)：将整个虚拟机的运行状态完整保存下来，同时可以快速的恢复到原有硬件平台甚至是不同硬件平台上。恢复以后，虚拟机仍旧平滑运行，用户不会察觉到任何差异。</p>
<h2 id="1-2-Openstack热迁移"><a href="#1-2-Openstack热迁移" class="headerlink" title="1.2 Openstack热迁移"></a>1.2 Openstack热迁移</h2><p>OpenStack有两种在线迁移类型：<code>live migration</code>和<code>block migration</code>。<code>Livemigration</code>需要实例保存在NFS共享存储中，这种迁移主要是实例的内存状态的迁移，速度应该会很快。<code>Block migration</code>除了实例内存状态要迁移外，还得迁移磁盘文件，速度会慢些，但是它不要求实例存储在共享文件系统中。<br>NFS允许一个系统在网络上与他人共享目录和文件。通过使用NFS，用户和程序可以像访问本地文件一样访问远端系统上的文件。</p>
<h3 id="1-2-1-迁移步骤"><a href="#1-2-1-迁移步骤" class="headerlink" title="1.2.1 迁移步骤"></a>1.2.1 迁移步骤</h3><ol>
<li><p>迁移前的条件检查<br>动态迁移要成功执行，一些条件必须满足，所以在执行迁移前必须做一些条件检查。</p>
<ul>
<li>权限检查，执行迁移的用户是否有足够的权限执行动态迁移。</li>
<li>参数检查，传递给 API 的参数是否足够和正确，如是否指定了 block-migrate 参数。</li>
<li>检查目标物理主机是否存在。</li>
<li>检查被迁移的虚拟机是否是 running 状态。</li>
<li>检查源和目的物理主机上的 nova-compute service 是否正常运行。</li>
<li>检查目的物理主机和源物理主机是否是同一台机器。</li>
<li>检查目的物理主机是否有足够的内存(memory)。</li>
<li>检查目的和源物理主机器 hypervisor 和 hypervisor 的版本是否相同。</li>
</ul>
<ol start="2">
<li>迁移前的预处理<br>在真正执行迁移前，必须做一下热身，做一些准备工作。</li>
</ol>
<ul>
<li><p>在目的物理主机上获得和准备虚拟机挂载的块设备(<code>volume</code>)。</p>
</li>
<li><p>在目的物理主机上设置虚拟机的网络(<code>networks</code>)。</p>
</li>
<li><p>目的物理主机上设置虚拟机的防火墙(<code>fireware</code>)。</p>
</li>
</ul>
<ol start="3">
<li>迁移<br>条件满足并且做完了预处理工作后，就可以执行动态迁移了。主要步骤如下：</li>
</ol>
<ul>
<li>调用 libvirt python 接口 migrateToURI，来把源主机迁移到目的主机。<br>dom.migrateToURI(CONF.live_migration_uri % dest,logical_sum,None,CONF.live_migration_bandwidth)<br>live_migration_uri：这个 URI 就是在 3.2.2 里介绍的 libvirtd 进程定义的。<br>live_migration_bandwidth：这个参数定义了迁移过程中所使用的最大的带宽。</li>
<li>以一定的时间间隔（0.5）循环调用 wait_for_live_migration 方法，来检测虚拟机迁移 的状态，一直到虚拟机成功迁移为止。</li>
</ul>
<ol start="4">
<li>迁移后的处理<br>当虚拟机迁移完成后，要做一些善后工作。</li>
</ol>
<ul>
<li>在源物理主机上 detach volume。</li>
<li>在源物理主机上释放 security group ingress rule。</li>
<li>在目的物理主机上更新数据库里虚拟机的状态。</li>
<li>在源物理主机上删除虚拟机。<br>上面四步正常完成后，虚拟机就成功的从源物理主机成功地迁移到了目的物理主机了</li>
</ul>
</li>
</ol>
<h3 id="1-2-2-Live-Migration-的实现"><a href="#1-2-2-Live-Migration-的实现" class="headerlink" title="1.2.2 Live Migration 的实现"></a>1.2.2 Live Migration 的实现</h3><p>热迁移条件：</p>
<ol>
<li><p>计算节点之间可以通过主机名互相访问</p>
</li>
<li><p>计算节点和控制节点的nova uid和gid保持一致</p>
</li>
<li><p>vncserver_proxyclient_address和vncserver_listen 监听的是本地IP</p>
</li>
<li><p>必须有共享存储，实例存放在共享存储中，且每个计算节点都可以访问共享存储。否则只能使用块迁移</p>
</li>
</ol>
<h3 id="1-2-3-配置"><a href="#1-2-3-配置" class="headerlink" title="1.2.3 配置"></a>1.2.3 配置</h3><ul>
<li>添加live_migration_flag<br>修改nova的配置文件，在<code>[libvirt]</code> 段下 添加如下字段</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">live_migration_flag=<span class="string">"VIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_LIVE,VIR_MIGRATE_PERSIST_DEST,VIR_MIGRATE_TUNNELLED"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置配置versh免密码连接，修改/etc/libvirt/libvirtd.conf<br>添加如下配置</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">listen_tls = 0</span><br><span class="line"></span><br><span class="line">listen_tcp = 1</span><br><span class="line"></span><br><span class="line">tcp_port = <span class="string">"16509"</span></span><br><span class="line"></span><br><span class="line">listen_addr = <span class="string">"172.16.201.8"</span>   <span class="comment">#根据自己的计算节点IP改写</span></span><br><span class="line"></span><br><span class="line">auth_tcp = <span class="string">"none"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改/etc/sysconfig/libvirtd 添加如下参数</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">LIBVIRTD_CONFIG=/etc/libvirt/libvirtd.conf</span><br><span class="line"></span><br><span class="line">LIBVIRTD_ARGS=<span class="string">"--listen"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>重启libvirt</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">restart</span> libvirtd.service</span><br></pre></td></tr></table></figure>
<ul>
<li>查看监听端口：</li>
</ul>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">[root@compute1 ~]# netstat -lnpt | grep libvirtd</span><br><span class="line"></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.16</span><span class="meta">.206</span><span class="meta">.6</span>:<span class="number">16509</span>      <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN      <span class="number">9852</span>/libvirtd</span><br></pre></td></tr></table></figure>
<ul>
<li>测试：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">在compute1节点上：</span><br><span class="line"></span><br><span class="line">virsh -c qemu+<span class="string">tcp:</span><span class="comment">//compute2/system</span></span><br><span class="line"></span><br><span class="line">在compute2节点上</span><br><span class="line"></span><br><span class="line">virsh -c qemu+<span class="string">tcp:</span><span class="comment">//compute1/system</span></span><br></pre></td></tr></table></figure>
<p>如果能无密码连接上去，表示配置没问题</p>
<h3 id="1-2-4动态迁移"><a href="#1-2-4动态迁移" class="headerlink" title="1.2.4动态迁移"></a>1.2.4动态迁移</h3><ul>
<li>查看所有实例<br>nova list</li>
<li>查看需要迁移虚拟机实例<br>nova show f3d749ba-98e1-4624-9782-6da729ad164c</li>
<li>查看可用的计算节点<br>nova-manage service list</li>
<li>查看目标节点资源<br>nova-manage service describe_resource computer1</li>
<li><p>开始迁移，正常无任何回显<br>nova live-migration 8da00f69-05f6-4425-9a8a-df56b79a474f computer1</p>
</li>
<li><p>也可以通过dashboard 节点迁移<br>用节点迁移需要使用admin管理员用户执</p>
</li>
</ul>
<h2 id="1-3-冷迁移配置"><a href="#1-3-冷迁移配置" class="headerlink" title="1.3 冷迁移配置"></a>1.3 冷迁移配置</h2><ol>
<li>冷迁移需要启动nova账户，并配置ssh 免密码认证</li>
</ol>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">usermod -s /bin/bash nova</span><br><span class="line"></span><br><span class="line">su - nova</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line"><span class="meta"># 生成密钥</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cp</span> -fa id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure>
<p>将密钥复制到所有计算节点的/var/lib/nova/.ssh下，并设置权限为nova用户</p>
<ol start="2">
<li>编辑/etc/nova/nova.conf的配置文件，修改下面参数</li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">allow_resize_to_same_host</span>=<span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">scheduler_default_filters</span>=RetryFilter,AvailabilityZoneFilter,RamFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在计算节点重启nova服务</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">restart</span> openstack-nova-compute</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>在controller节点重启nova 相关服务</li>
</ol>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line">systemctl restart openstack-nova-api.<span class="keyword">service</span> openstack-nova-scheduler.<span class="keyword">service</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>openstack-mitaka调整实例大小报错</title>
    <url>/2018/08/28/openstack-mitaka%E8%B0%83%E6%95%B4%E5%AE%9E%E4%BE%8B%E5%A4%A7%E5%B0%8F%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-问题1"><a href="#1-问题1" class="headerlink" title="1 问题1"></a>1 问题1</h1><p>在openstack图形界面对实例进行迁移操作时，出现如下错误</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">11</span>:<span class="number">00</span>:<span class="number">21.828</span> <span class="number">1386</span> INFO nova<span class="selector-class">.compute</span><span class="selector-class">.resource_tracker</span> [req-<span class="number">4</span>fe2d206-e9bc-<span class="number">4</span>a61-<span class="number">9389</span>-a01007335c61 - - - - -] Total usable vcpus: <span class="number">12</span>, total allocated vcpus: <span class="number">5</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> return self._do_dispatch(endpoint, method, ctxt, args)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/oslo_messaging/rpc/dispatcher.py"</span>, line <span class="number">127</span>, <span class="keyword">in</span> _do_dispatch</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> result = func(ctxt, **new_args)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/exception.py"</span>, line <span class="number">114</span>, <span class="keyword">in</span> wrapped</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> payload)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/oslo_utils/excutils.py"</span>, line <span class="number">220</span>, <span class="keyword">in</span> __exit__</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> self.force_reraise()</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/oslo_utils/excutils.py"</span>, line <span class="number">196</span>, <span class="keyword">in</span> force_reraise</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> six.reraise(self<span class="selector-class">.type_</span>, self<span class="selector-class">.value</span>, self.tb)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/exception.py"</span>, line <span class="number">89</span>, <span class="keyword">in</span> wrapped</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> return f(self, context, *args, **kw)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/compute/manager.py"</span>, line <span class="number">359</span>, <span class="keyword">in</span> decorated_function</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> LOG.warning(msg, e, instance=instance)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/oslo_utils/excutils.py"</span>, line <span class="number">220</span>, <span class="keyword">in</span> __exit__</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> self.force_reraise()</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/oslo_utils/excutils.py"</span>, line <span class="number">196</span>, <span class="keyword">in</span> force_reraise</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> six.reraise(self<span class="selector-class">.type_</span>, self<span class="selector-class">.value</span>, self.tb)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/compute/manager.py"</span>, line <span class="number">328</span>, <span class="keyword">in</span> decorated_function</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> return function(self, context, *args, **kwargs)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/compute/manager.py"</span>, line <span class="number">409</span>, <span class="keyword">in</span> decorated_function</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> return function(self, context, *args, **kwargs)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/compute/manager.py"</span>, line <span class="number">316</span>, <span class="keyword">in</span> decorated_function</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> migration<span class="selector-class">.instance_uuid</span>, exc_info=True)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/oslo_utils/excutils.py"</span>, line <span class="number">220</span>, <span class="keyword">in</span> __exit__</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> self.force_reraise()</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/oslo_utils/excutils.py"</span>, line <span class="number">196</span>, <span class="keyword">in</span> force_reraise</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> six.reraise(self<span class="selector-class">.type_</span>, self<span class="selector-class">.value</span>, self.tb)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/compute/manager.py"</span>, line <span class="number">293</span>, <span class="keyword">in</span> decorated_function</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> return function(self, context, *args, **kwargs)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/compute/manager.py"</span>, line <span class="number">387</span>, <span class="keyword">in</span> decorated_function</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> kwargs[<span class="string">'instance'</span>], e, sys.exc_info())</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/oslo_utils/excutils.py"</span>, line <span class="number">220</span>, <span class="keyword">in</span> __exit__</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> self.force_reraise()</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/oslo_utils/excutils.py"</span>, line <span class="number">196</span>, <span class="keyword">in</span> force_reraise</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> six.reraise(self<span class="selector-class">.type_</span>, self<span class="selector-class">.value</span>, self.tb)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/compute/manager.py"</span>, line <span class="number">375</span>, <span class="keyword">in</span> decorated_function</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> return function(self, context, *args, **kwargs)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/compute/manager.py"</span>, line <span class="number">3933</span>, <span class="keyword">in</span> resize_instance</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> self<span class="selector-class">.instance_events</span><span class="selector-class">.clear_events_for_instance</span>(instance)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib64/python2.7/contextlib.py"</span>, line <span class="number">35</span>, <span class="keyword">in</span> __exit__</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> self<span class="selector-class">.gen</span><span class="selector-class">.throw</span>(type, value, traceback)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> File <span class="string">"/usr/lib/python2.7/site-packages/nova/compute/manager.py"</span>, line <span class="number">6643</span>, <span class="keyword">in</span> _error_out_instance_on_exception</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> raise error.inner_exception</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> ResizeError: Resize error: not able to execute ssh command: Unexpected error while running command.</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> Command: ssh -o BatchMode=yes <span class="number">192.168</span>.<span class="number">1.116</span> mkdir -<span class="selector-tag">p</span> /var/lib/nova/instances/<span class="number">724</span>a9fc0-<span class="number">3786</span>-<span class="number">4</span>ba4-<span class="number">8</span>a43-<span class="number">744</span>ec19a0881</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> Exit <span class="selector-tag">code</span>: <span class="number">255</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> Stdout: u<span class="string">''</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">55</span>:<span class="number">08.695</span> <span class="number">1386</span> ERROR oslo_messaging<span class="selector-class">.rpc</span><span class="selector-class">.dispatcher</span> Stderr: u<span class="string">'Host key verification failed.\r\n</span></span><br></pre></td></tr></table></figure>
<p>建立各计算节点、控制节点之间的SSH免密登录，建立私钥</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>开启nova用户登录权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -s /bin/bash nova</span><br></pre></td></tr></table></figure>
<ul>
<li>切换到nova用户</li>
</ul>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">su</span> nova</span><br></pre></td></tr></table></figure>
<p>生成密钥（各个计算节点执行，控制节点也执行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa</span></span><br><span class="line"><span class="meta">#</span><span class="bash">默认路径，直接回车</span></span><br></pre></td></tr></table></figure>
<ul>
<li>所有计算节点均配置</li>
</ul>
<blockquote>
<p>依然在nova用户下操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">cat &lt;&lt; EOF &gt; ~/.ssh/config</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Host *</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> StrictHostKeyChecking no</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> UserKnownHostsFile=/dev/null</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> EOF</span></span><br></pre></td></tr></table></figure>
<ul>
<li>发送公钥到控制节点</li>
</ul>
<p>compute1</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp id_rsa.pub <span class="number">10.20</span>.<span class="number">0</span>.<span class="number">2</span><span class="symbol">:/var/lib/nova/</span>.ssh/id_rsa.pub2</span><br></pre></td></tr></table></figure>
<p>compute2</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp id_rsa.pub <span class="number">10.20</span>.<span class="number">0</span>.<span class="number">2</span><span class="symbol">:/var/lib/nova/</span>.ssh/id_rsa.pub3</span><br></pre></td></tr></table></figure>
<p>contrloller(10.20.0.2)</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># cat id_dsa.pub id_dsa.pub2 id_rsa.pub id_rsa.pub2   id_rsa.pub3 id_dsa.pub3 &gt; authorized_keys</span></span><br><span class="line"><span class="meta"># scp authorized_keys  computer1:/var/lib/nova/.ssh</span></span><br><span class="line"><span class="meta"># scp authorized_keys  computer2:/var/lib/nova/.ssh</span></span><br></pre></td></tr></table></figure>
<p>修改权限</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># chown nova:nova <span class="regexp">/var/</span>lib<span class="regexp">/nova/</span>.ssh<span class="regexp">/id_rsa /</span>var<span class="regexp">/lib/</span>nova<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></table></figure>
<ul>
<li>登录测试</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> nova<span class="variable">@computer</span></span><br></pre></td></tr></table></figure>
<p>在迁移实例，不再报错，并成功。</p>
<blockquote>
<p>实例迁移根据使用存储不同，有不同差异，详细介绍参考openstack官方文档</p>
</blockquote>
]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7下Mysql5.5数据同步</title>
    <url>/2018/08/30/Centos7%E4%B8%8BMysql5-5%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<table><br>    <tr><br>        <td>服务器</td><br>        <td>系统</td><br>        <td>服务</td><br>        <td>java</td><br>        <td>mysql</td><br>        <td>ip</td><br>   </tr><br>       <tr><br>        <td>Liferay-a</td><br>        <td> Centos7</td><br>        <td>Liferay+keepalive+sersync</td><br>        <td>1.7.0_80</td><br>        <td>5.5.42</td><br>        <td>172.20.20.59 </td><br>   </tr><br>       <tr><br>        <td>Liferay-b</td><br>        <td> Centos7</td><br>        <td>Liferay+keepalive+rsync</td><br>        <td>1.7.0_80</td><br>        <td>5.5.42</td><br>        <td>172.20.20.60 </td><br>   </tr><br>    <tr><br>        <td colspan="6">虚拟IP:172.20.20.58</td><br>    </tr><br></table>

<h1 id="2-安装liferay"><a href="#2-安装liferay" class="headerlink" title="2 安装liferay"></a>2 安装liferay</h1><p>安装liferay官方版本6.2-ce4,方法自行度娘。恢复数据参考《liferay备份还原文档》</p>
<h1 id="3-安装keepalive"><a href="#3-安装keepalive" class="headerlink" title="3 安装keepalive"></a>3 安装keepalive</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Yum install keepalive</span></span><br></pre></td></tr></table></figure>
<h2 id="3-1-编辑配置文件"><a href="#3-1-编辑配置文件" class="headerlink" title="3.1 编辑配置文件"></a>3.1 编辑配置文件</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> /etc/keepalived/keepalived.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>Liferay-a:<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7下Mysql5.5数据同步/1571817167911.png" alt="图1"></p>
<p>Liferay-b:<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7下Mysql5.5数据同步/1571817176967.png" alt="图2"></p>
<p>启动keepalive，建立虚拟IP，主服务器当机，从服务器获得Ip.</p>
<h1 id="4-mysql主从同步"><a href="#4-mysql主从同步" class="headerlink" title="4 mysql主从同步"></a>4 mysql主从同步</h1><p>下载mysql-5.5.42-linux2.6-x86_64.tar.gz<br>解压到/usr/local,重命名为mysql</p>
<h2 id="4-1-编辑配置文件"><a href="#4-1-编辑配置文件" class="headerlink" title="4.1 编辑配置文件"></a>4.1 编辑配置文件</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Vi</span> /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>Liferay-a:<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7下Mysql5.5数据同步/1571817187105.png" alt="图3"></p>
<p>Liferay-b<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7下Mysql5.5数据同步/1571817196414.png" alt="图4"></p>
<h2 id="4-2-建立mysql主从同步"><a href="#4-2-建立mysql主从同步" class="headerlink" title="4.2 建立mysql主从同步"></a>4.2 建立mysql主从同步</h2><p>查看liferay-a(主服务器)，查看mysql（主）信息，并建立同步帐号：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> bitnami_liferay.* <span class="keyword">TO</span> <span class="string">'tongbu'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'De123456'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>
<p>进入liferay-b（从服务器），在mysql中输入命令，建立连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CHANGE</span> <span class="keyword">MASTER</span> <span class="keyword">TO</span> MASTER_HOST=<span class="string">'172.20.20.59'</span>,  MASTER_USER=<span class="string">'tongbu'</span>, MASTER_PASSWORD=<span class="string">'De123456'</span>, MASTER_LOG_FILE=<span class="string">'mysql-bin.000022'</span>,MASTER_LOG_POS=<span class="number">151424110</span>;</span><br></pre></td></tr></table></figure>
<p>输入命令，</p>
<p>查看备服务器信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SLAVE</span> <span class="keyword">STATUS</span>\G</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7下Mysql5.5数据同步/1571817206579.png" alt="图5"></p>
<h2 id="4-3-恢复数据库"><a href="#4-3-恢复数据库" class="headerlink" title="4.3 恢复数据库"></a>4.3 恢复数据库</h2><p>通过mysql命令恢复bitnami_liferay数据库备份到lifreay-a(主服务器)，自动实时同步数据到从服务器。</p>
<h1 id="5-目录同步"><a href="#5-目录同步" class="headerlink" title="5 目录同步"></a>5 目录同步</h1><h2 id="5-1-安装rsync-liferay-b"><a href="#5-1-安装rsync-liferay-b" class="headerlink" title="5.1 安装rsync(liferay-b)"></a>5.1 安装rsync(liferay-b)</h2><p>只需在liferay-b服务器上安装rsync。</p>
<p>Liferay-b作为rsync服务器，lifray-a作为客户端，实时同步目录数据到liferay-bYum install rsync</p>
<h3 id="5-1-1-编辑配置文件"><a href="#5-1-1-编辑配置文件" class="headerlink" title="5.1.1 编辑配置文件"></a>5.1.1 编辑配置文件</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">vi /etc/rsyncd<span class="selector-class">.conf</span> liferay-<span class="selector-tag">b</span>:</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7下Mysql5.5数据同步/1571817223545.png" alt="图6"></p>
<p>新建rsyncd.pass1密码文件在/etc/目录</p>
<p>文件格式 帐号:密码 设置文件权限为600（必须）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7下Mysql5.5数据同步/1571817235299.png" alt="图7"></p>
<h2 id="5-2-安装sersync（liferay-a）"><a href="#5-2-安装sersync（liferay-a）" class="headerlink" title="5.2 安装sersync（liferay-a）"></a>5.2 安装sersync（liferay-a）</h2><p>Liferay-a安装实时同步工具sersync2.5.4_64bit_binary_stable_final.tar.gz<br>下载sersync2.5.4_64bit_binary_stable_final.tar.gz<br>解压到/usr/local</p>
<h3 id="5-2-1-编辑confxml-xml"><a href="#5-2-1-编辑confxml-xml" class="headerlink" title="5.2.1 编辑confxml.xml"></a>5.2.1 编辑confxml.xml</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">confxml</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7下Mysql5.5数据同步/1571817245103.png" alt="图8"></p>
<h3 id="5-2-2-在-etc-目录创建密码文件rsyncd-pass1"><a href="#5-2-2-在-etc-目录创建密码文件rsyncd-pass1" class="headerlink" title="5.2.2 在/etc/目录创建密码文件rsyncd.pass1"></a>5.2.2 在/etc/目录创建密码文件rsyncd.pass1</h3><p>文件格式只填写密码（注意和同步服务器的密码文件内的密码一样）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7下Mysql5.5数据同步/1571817254160.png" alt="图9"></p>
<h2 id="5-3-启动sersync，开启实时同步"><a href="#5-3-启动sersync，开启实时同步" class="headerlink" title="5.3 启动sersync，开启实时同步"></a>5.3 启动sersync，开启实时同步</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/sersync/</span>sersync2 -d -r -o <span class="regexp">/usr/</span>local<span class="regexp">/sersync/</span>confxml.xml</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Openstack调整实例大小_冷迁移</title>
    <url>/2018/08/28/Openstack%E8%B0%83%E6%95%B4%E5%AE%9E%E4%BE%8B%E5%A4%A7%E5%B0%8F-%E5%86%B7%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<a id="more"></a>
<blockquote>
<p>有时虚拟机创建后发现虚拟机规格太小，满足不了业务需求。于是需要在线拉伸虚拟机的规格。</p>
<p>1、用admin用户登录dashboard，创建满足需求的虚拟机规格</p>
</blockquote>
<p>2、输入适当的参数</p>
<p>3、修改controller和各个computer节点的nova.cnf文件，打开下面两个参数</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">allow_resize_to_same_host</span>=<span class="literal">True</span> </span><br><span class="line"><span class="attr">scheduler_default_filters</span>=RetryFilter,AvailabilityZoneFilter,RamFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter</span><br></pre></td></tr></table></figure>
<p>4、重启控制节点nova服务</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"># systemctl restart openstack-nova-api.<span class="keyword">service</span> openstack-nova-conductor.<span class="keyword">service</span> openstack-nova-scheduler.<span class="keyword">service</span> openstack-nova-cert.<span class="keyword">service</span> openstack-nova-consoleauth.<span class="keyword">service</span> openstack-nova-compute.<span class="keyword">service</span> openstack-nova-novncproxy.<span class="keyword">service</span></span><br></pre></td></tr></table></figure>
<p>5、重启计算节点nova服务</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># service openstack-nova-compute restart</span></span><br></pre></td></tr></table></figure>
<p>参考资料：<br><a href="http://www.cnblogs.com/goodcook/p/6509808.html" target="_blank" rel="noopener">http://www.cnblogs.com/goodcook/p/6509808.html</a></p>
]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>Openstack的临时(Ephemeral)存储和块(Block)存储</title>
    <url>/2018/08/28/Openstack%E7%9A%84%E4%B8%B4%E6%97%B6(Ephemeral)%E5%AD%98%E5%82%A8%E5%92%8C%E5%9D%97(Block)%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<a id="more"></a>
<p>转载：<a href="http://www.aboutyun.com/thread-8114-1-1.html" target="_blank" rel="noopener">http://www.aboutyun.com/thread-8114-1-1.html</a></p>
<h1 id="1-Openstack的临时-Ephemeral-存储和块-Block-存储"><a href="#1-Openstack的临时-Ephemeral-存储和块-Block-存储" class="headerlink" title="1 Openstack的临时(Ephemeral)存储和块(Block)存储"></a>1 Openstack的临时(Ephemeral)存储和块(Block)存储</h1><h2 id="1-2-问题导读："><a href="#1-2-问题导读：" class="headerlink" title="1.2 问题导读："></a>1.2 问题导读：</h2><p>1、OpenStack中什么是临时存储，有什么好处？<br>2、什么是块存储，和临时的有什么不同？</p>
<h2 id="1-3-背景"><a href="#1-3-背景" class="headerlink" title="1.3 背景"></a>1.3 背景</h2><p>Openstack不管是Ephemeral Storage还是Block Storage, 其实从接口上看，其实都是块服务。那么为什么要搞两个不同的类型呢，本文从这两种不同类型块存储的实现上来分析下其中的原因。</p>
<h2 id="1-4-临时存储"><a href="#1-4-临时存储" class="headerlink" title="1.4 临时存储"></a>1.4 临时存储</h2><p>Openstack临时存储是由Nova提供的，主要是利用主机的本地存储给虚拟机提供卷服务。如果虚拟机被删除了，挂在这个虚拟机上的任何临时存储自动释放。这样的实现方式决定了：<br>使用Ephemeral Storage的虚拟机不能支持迁移，以及和虚拟机迁移相关的特性，包括 1) HA 2) 动态调度 等等。<br>存放在Ephemeral Storage上的数据是高度不可靠的，任何虚拟机和主机的故障都可能会导致数据丢失。</p>
<h2 id="1-5-块存储"><a href="#1-5-块存储" class="headerlink" title="1.5 块存储"></a>1.5 块存储</h2><p>目前Openstack的块存储由Cinder提供，其后端支持很多类型的存储设备，比如多个厂商不同型号的阵列设备，或者是Ceph, Glusterfs, Sheepdog之类的分布式存储系统。基于块存储，可以为用户提供：<br>高可靠的存储（基于阵列的RAID, 或者是分布式存储的多副本机制；甚至还可以充分利用设备的备份，远程复制能力）</p>
<p>共享存储 （意味着可以支持HA, 虚拟机迁移等等）</p>
<h2 id="1-6-临时存储的妙用"><a href="#1-6-临时存储的妙用" class="headerlink" title="1.6 临时存储的妙用"></a>1.6 临时存储的妙用</h2><p>这么看来，临时存储岂不是几乎没什么作用了，那为什么还需要提供这个服务呢？其实原因非常简单： 这个服务便宜，而且便宜到令人发指的地步，比如AWS的Ephemeral Storage, 就是免费的。用户可以用它来做不少有意思的事情，比如：<br>无状态虚拟机，为系统提供Cache服务<br>为虚拟机操作系统提供交换分区，或者用来存放其它类型的临时文件<br>改进EBS的性能，比如买4个EBS盘，再配置2个免费的Ephermal盘，组建一个RAID 10系统</p>
<h2 id="1-7-总结"><a href="#1-7-总结" class="headerlink" title="1.7 总结"></a>1.7 总结</h2><p>对于云服务提供商，不管采用什么样的后端技术，为用户提供7个9甚至更高可靠性的EBS服务，成本是巨大的，如果使用阵列，其价格本来就昂贵；如果使用分布式存储，起码要3个副本，再考虑到定期备份，快照，跨地域容灾，成本一样很高。现在的SATA, SAS盘便宜而且量又足，很容易造成在本地主机上空闲，所以干脆直接送给用户，由他们去玩，而且对于玩的好的用户，还真能对业务有不少帮助。<br><strong>最后再附上Openstack官方文档对几种存储的对比：</strong><br><img src="https://markdown.xiaoshujiang.com/img/spinner.gif" alt="图1" title="[[[1571816966965]]]"></p>
]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7缩减home目录扩展根目录（xfs分区格式）</title>
    <url>/2018/08/30/Centos7%E7%BC%A9%E5%87%8Fhome%E7%9B%AE%E5%BD%95%E6%89%A9%E5%B1%95%E6%A0%B9%E7%9B%AE%E5%BD%95-xfs%E5%88%86%E5%8C%BA%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-磁盘占用"><a href="#1-磁盘占用" class="headerlink" title="1 磁盘占用"></a>1 磁盘占用</h1><p>修改home目录大小，增加根目录容量。</p>
<h1 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2 注意事项"></a>2 注意事项</h1><ul>
<li>xfsf分区减小分区无法做到无损数据（必须备份数据） </li>
<li>扩容分区可以保存数据无损</li>
</ul>
<h1 id="3-xfs分区扩展根目录命令过程"><a href="#3-xfs分区扩展根目录命令过程" class="headerlink" title="3 xfs分区扩展根目录命令过程"></a>3 xfs分区扩展根目录命令过程</h1><p>把/home内容备份，然后将/home文件系统所在的逻辑卷删除，扩大/root文件系统，新建/home：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">tar cvf <span class="string">/tmp/home.tar</span> <span class="string">/home</span>       <span class="comment">#备份/home</span></span><br><span class="line">umount <span class="string">/home</span>                      <span class="comment">#卸载/home，如果无法卸载，先终止使用/home文件系统的进程</span></span><br><span class="line">lvremove <span class="string">/dev/centos/home</span>         <span class="comment">#删除/home所在的lv（可删除分区，也可使用下行缩减分区）</span></span><br><span class="line">lvreduce -L 180G <span class="string">/dev/centos/home</span> <span class="comment">#缩小分区到180G(缩小分区后分区数据丢失，需重新格式化并挂载分区，否则重启故障)</span></span><br><span class="line">lvextend -L +50G <span class="string">/dev/centos/root</span> <span class="comment">#扩展/root所在的lv，增加50G</span></span><br><span class="line">xfs_growfs <span class="string">/dev/centos/root</span>       <span class="comment">#扩展/root文件系统</span></span><br><span class="line">lvcreate -L 56G -n home centos    <span class="comment">#重新创建home lv</span></span><br><span class="line">mkfs.xfs <span class="string">/dev/centos/home</span>         <span class="comment">#创建文件系统及格式化</span></span><br><span class="line">mount <span class="string">/dev/centos/home</span> <span class="string">/home</span>      <span class="comment">#挂载</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>
<h1 id="4-收缩分区"><a href="#4-收缩分区" class="headerlink" title="4 收缩分区"></a>4 收缩分区</h1><blockquote>
<p>ext与xfs格式分区收缩分区命令不同，lvextend -L+19.8G /dev/VolGroup00/LogVol00<br>分区命令后，执行相应收缩命令后扩展的容量才能正常使用</p>
</blockquote>
<p><strong>xfs格式</strong><br>如果分区格式为xfs，扩展使用  要用xfs_growfs命令而不是resize2fs命令收缩分区，</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@rac2</span> ~]<span class="comment"># xfs_growfs  /dev/VolGroup00/LogVol00</span></span><br></pre></td></tr></table></figure>
<p>执行以上命令后，<code>df  -h</code>命令查看才会显示扩容成功。</p>
<p><strong>ext2、ext3、ext4格式（补充）</strong><br>Ext2、ext3、ext4等使用resize2fs收缩分区，xfs使用xfs-growfs命令收缩分区。详情找度娘。</p>
<p>例如:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@rac2</span> ~]<span class="comment"># resize2fs -p /dev/VolGroup00/LogVol00</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>分区</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis+Keepalived双机热备</title>
    <url>/2018/08/30/Redis-Keepalived%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><p>主机    IP    OS</p>
<table>
<thead>
<tr>
<th>主机</th>
<th>IP</th>
<th>OS</th>
</tr>
</thead>
<tbody>
<tr>
<td>master-server</td>
<td>172.20.22.145</td>
<td>centos7.2</td>
</tr>
<tr>
<td>slave-server</td>
<td>172.20.22.53</td>
<td>centos7.2</td>
</tr>
</tbody>
</table>
<h1 id="2-参考资料"><a href="#2-参考资料" class="headerlink" title="2 参考资料"></a>2 参考资料</h1><p><a href="https://my.oschina.net/guol/blog/182491" target="_blank" rel="noopener">https://my.oschina.net/guol/blog/182491</a></p>
<p><a href="http://blog.csdn.net/qguanri/article/details/51120178" target="_blank" rel="noopener">http://blog.csdn.net/qguanri/article/details/51120178</a></p>
<p><a href="http://blog.csdn.net/zgf19930504/article/details/52024724" target="_blank" rel="noopener">http://blog.csdn.net/zgf19930504/article/details/52024724</a></p>
<h1 id="3-整体思路"><a href="#3-整体思路" class="headerlink" title="3 整体思路"></a>3 整体思路</h1><p>在keepalived+redis的使用过程中有四种情况：</p>
<ol>
<li><p>一种是keepalived挂了，同时redis也挂了，这样的话直接VIP飘走之后，是不需要进行redis数据同步的，因为redis挂了，你也无法去master上同步，不过会损失已经写在master上却还没同步到slave上面的这部分数据。</p>
</li>
<li><p>另一种是keepalived挂了，redis没挂，这时候VIP飘走后，redis的master/slave还是老的对应关系，如果不变化的话会把数据写入redis slave中，从而不会同步到master上去，这就要借助监控脚本反转redis的master/slave关系。这时候就要预留一点时间进行数据同步，然后反转master/slave。</p>
</li>
<li><p>还有一种是keepalived没挂，redis挂了，这时候根据监控脚本会检测到redis挂了，并且降低keepalived master的优先级，同样会导致VIP飘走，情况和第二种一样，也是需要进行数据同步，然后反转当前redis的master/slave关系的。</p>
</li>
<li><p>随后一种是keepalived没挂，redis也没挂，大吉大利啊，什么都不用操作。</p>
</li>
</ol>
<blockquote>
<p>本文的实验环境四种情况都适合，第一种是不需要同步数据的，脚本会默认去同步数据，但是其实是不会成功的。脚本主要是用来处理第二和第三种情况的。</p>
</blockquote>
<h1 id="4-安装redis"><a href="#4-安装redis" class="headerlink" title="4 安装redis"></a>4 安装redis</h1><p>参考本站：centos7安装redis</p>
<h2 id="4-1-修改主从redis配置文件"><a href="#4-1-修改主从redis配置文件" class="headerlink" title="4.1 修改主从redis配置文件"></a>4.1 修改主从redis配置文件</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/redis/<span class="number">6379</span>.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<h3 id="4-1-1-主redis"><a href="#4-1-1-主redis" class="headerlink" title="4.1.1 主redis:"></a>4.1.1 主redis:</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">#修改bind绑定IP,只有绑定的IP才能访问redis，<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>标识所有地址都能访问。</span><br><span class="line">bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<h3 id="4-1-2-从redis"><a href="#4-1-2-从redis" class="headerlink" title="4.1.2 从redis:"></a>4.1.2 从redis:</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">#修改bind绑定IP,只有绑定的IP才能访问redis，<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>标识所有地址都能访问。</span><br><span class="line">bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">#添加slaveof&amp;nbsp;IP&amp;nbsp;Port,表示作为该IP服务器的备机</span><br><span class="line">slaveof <span class="number">172.20</span><span class="number">.22</span><span class="number">.145</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-启动并测试"><a href="#4-2-启动并测试" class="headerlink" title="4.2 启动并测试"></a>4.2 启动并测试</h2><figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">redis_6379</span> start</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2-1-主redis"><a href="#4-2-1-主redis" class="headerlink" title="4.2.1 主redis"></a>4.2.1 主redis</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@bogon ~]</span># <span class="selector-tag">redis-cli</span> <span class="selector-tag">-p</span> 6379                       #登录<span class="selector-tag">redis</span></span><br><span class="line"></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">hao</span> 333                                  #添加<span class="selector-tag">hao</span>值为333 </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">hao</span>                                        #查看<span class="selector-tag">hao</span>的值</span><br><span class="line"></span><br><span class="line">"333"</span><br><span class="line"></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-2-从redis"><a href="#4-2-2-从redis" class="headerlink" title="4.2.2 从redis"></a>4.2.2 从redis</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@bogon scripts]</span># <span class="selector-tag">redis-cli</span> <span class="selector-tag">-p</span> 6379</span><br><span class="line"></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">hao</span>                               #查看<span class="selector-tag">hao</span>的值，获取到值说明同步成功。</span><br><span class="line"></span><br><span class="line">"333"</span><br><span class="line"></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;</span><br></pre></td></tr></table></figure>
<h1 id="5-安装keepalived"><a href="#5-安装keepalived" class="headerlink" title="5 安装keepalived"></a>5 安装keepalived</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum install keepalived</span></span><br></pre></td></tr></table></figure>
<h2 id="5-1-修改配置文件"><a href="#5-1-修改配置文件" class="headerlink" title="5.1 修改配置文件"></a>5.1 修改配置文件</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/keepalived/keepalived.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#MASTER配置文件：</span></span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">vrrp_script <span class="class">chk_redis </span>&#123;</span><br><span class="line">        script <span class="string">"/etc/keepalived/scripts/chk_redis.sh"</span>     <span class="meta">#监控脚本</span></span><br><span class="line">        interval <span class="number">2</span>                                        <span class="meta">#监控间隔时间 秒</span></span><br><span class="line">        timout <span class="number">2</span>                                          <span class="meta">#响应超时：超过多长时间未响应认为是失败</span></span><br><span class="line">        fall <span class="number">3</span>                                            <span class="meta">#检测失败几次，认为是redis服务器挂了</span></span><br><span class="line">        weight <span class="number">-60</span>                       <span class="meta">#自我确定服务器挂了之后,优先级加多少, 也就是宕机之后 priority 加多少weight，这里是减60</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance <span class="class">VI_1 </span>&#123;</span><br><span class="line">    state MASTER                         <span class="meta">#MASTER表示主，BACKUP表示为从</span></span><br><span class="line">    interface eth0                       <span class="meta">#eth0表示监听的网卡</span></span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">100</span>                         <span class="meta">#优先级，从服务器推选主服务器就是根据这个来比较的，从服务器必须小于主服务器优先级。</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    <span class="class">authentication </span>&#123;</span><br><span class="line">        auth_type PASS                   <span class="meta">#认证凭证，可自定义</span></span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">track_script </span>&#123;</span><br><span class="line">          chk_redis                      <span class="meta">#运行chk_redis模块</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">virtual_ipaddress </span>&#123;</span><br><span class="line">        <span class="number">172.20</span><span class="number">.22</span><span class="number">.199</span>                                      <span class="meta">#VIP地址（虚拟IP）</span></span><br><span class="line">    &#125;</span><br><span class="line">    unicast_src_ip <span class="number">172.20</span><span class="number">.22</span><span class="number">.145</span>               <span class="meta">#keepalived 内部通信,本机ip 地址（没加也没影响）</span></span><br><span class="line">    <span class="class">unicast_peer </span>&#123;</span><br><span class="line">        <span class="number">172.20</span><span class="number">.22</span><span class="number">.53</span>                      </span><br><span class="line">    &#125;</span><br><span class="line">    notify_master <span class="meta-keyword">/etc/</span>keepalived<span class="meta-keyword">/scripts/</span>redis-master.sh           <span class="meta">#keepalived 状态切换master时执行的脚本</span></span><br><span class="line">    notify_backup <span class="meta-keyword">/etc/</span>keepalived<span class="meta-keyword">/scripts/</span>redis-backup.sh           <span class="meta">#keepalived 状态切换为backup时执行的脚本</span></span><br><span class="line">    notify_fault <span class="meta-keyword">/etc/</span>keepalived<span class="meta-keyword">/scripts/</span>redis-fault.sh             <span class="meta">#keepalived 状态为fault时执行的脚本</span></span><br><span class="line">    notify_stop <span class="meta-keyword">/etc/</span>keepalived<span class="meta-keyword">/scripts/</span>redis-stop.sh               <span class="meta">#keepalived 服务停止时执行脚本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pf.conf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BACKUP配置文件</span></span><br><span class="line"></span><br><span class="line">backup配置文件至修改了<span class="number">2</span>处，其它都一样。</span><br><span class="line"></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">vrrp_script chk_redis &#123;</span><br><span class="line">        script <span class="string">"/etc/keepalived/scripts/chk_redis.sh"</span>   <span class="comment">###监控脚本</span></span><br><span class="line">        interval <span class="number">2</span>                                        <span class="comment">###监控时间</span></span><br><span class="line">        timout <span class="number">2</span>          <span class="comment">#响应超市：超过多长时间未响应认为是失败</span></span><br><span class="line">        fall <span class="number">3</span>            <span class="comment">#检测失败几次，认为是redis服务器挂了</span></span><br><span class="line">        weight -<span class="number">60</span>           <span class="comment">#自我确定服务器挂了之后,优先级加多少, 也就是宕机之后 priority + weight</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="keyword">state</span> BACKUP</span><br><span class="line">    interface enp2s0</span><br><span class="line"></span><br><span class="line">virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">50</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">          chk_redis</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">172.20</span>.<span class="number">22.199</span></span><br><span class="line">    &#125;</span><br><span class="line">    unicast_src_ip <span class="number">172.20</span>.<span class="number">22.53</span></span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        <span class="number">172.20</span>.<span class="number">22.145</span></span><br><span class="line">    &#125;</span><br><span class="line">    notify_master /etc/keepalived/scripts/redis-master.sh</span><br><span class="line">    notify_backup /etc/keepalived/scripts/redis-backup.sh</span><br><span class="line">    notify_fault /etc/keepalived/scripts/redis-fault.sh</span><br><span class="line">    notify_stop /etc/keepalived/scripts/redis-stop.sh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-2-创建脚本"><a href="#5-2-创建脚本" class="headerlink" title="5.2 创建脚本"></a>5.2 创建脚本</h2><p>创建scripts目录 /etc/keepalived,在scripts目录内创建redis-master.sh,redis-backup.sh,redis-fault.sh,redis-stop.sh,chk_redis.sh</p>
<h3 id="5-2-1-chk-redis-sh脚本"><a href="#5-2-1-chk-redis-sh脚本" class="headerlink" title="5.2.1 chk_redis.sh脚本"></a>5.2.1 chk_redis.sh脚本</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash  </span></span><br><span class="line"><span class="comment">#检测redis是否正常运行，根据检测结果返回不同的值</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">#日志文件位置  </span></span><br><span class="line">logFile=<span class="regexp">/usr/</span>etc<span class="regexp">/redis/</span>keepalived<span class="regexp">/logs/</span>redis-keepalived.log  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#ping 本机redis服务  </span></span><br><span class="line">pingRS=`<span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>redis-cli -a <span class="number">123456</span> PING`  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#如果ping 的结果为PONG,那么返回0 ,否则返回1；PONG代表PING通redis,当返回值为1时，执行降低优先级操作。</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$pingRS</span> == <span class="string">"PONG"</span> ]; then  </span><br><span class="line">   echo <span class="string">"[`date`] ping is ok !"</span> &gt;&gt;<span class="variable">$logFile</span>  </span><br><span class="line">   <span class="keyword">exit</span> <span class="number">0</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">   echo <span class="string">"[`date`] ping is error !"</span> &gt;&gt;<span class="variable">$logFile</span>  </span><br><span class="line">   <span class="keyword">exit</span> <span class="number">1</span>  </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h3 id="5-2-2-redis-master-sh"><a href="#5-2-2-redis-master-sh" class="headerlink" title="5.2.2 redis-master.sh"></a>5.2.2 redis-master.sh</h3><blockquote>
<p>（master主机脚本与slave主机基本雷同，只需修改远程ip地址）</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">rediscli=<span class="string">"redis-cli"</span></span><br><span class="line">logfile=<span class="string">"/var/log/keepalived-redis-state.log"</span></span><br><span class="line">date <span class="meta">&gt;&gt; </span>%logfile</span><br><span class="line">echo <span class="string">"[master]"</span> <span class="meta">&gt;&gt; </span>$logfile</span><br><span class="line">echo <span class="string">" 运行作为远程server备机并同步数据命令"</span> <span class="meta">&gt;&gt; </span>$logfile</span><br><span class="line">$rediscli SLAVEOF <span class="number">172.20</span>.<span class="number">22.53</span> <span class="number">6379</span> <span class="meta">&gt;&gt; </span>$logfile                  <span class="comment">#远程redis IP地址，解释为以该IP为主，做数据同步。</span></span><br><span class="line">sleep <span class="number">10</span>      <span class="comment">#等待10秒，再运行下面命令。</span></span><br><span class="line">echo <span class="string">"运行升级为主服务器命令"</span> <span class="meta">&gt;&gt; </span>$logfile</span><br><span class="line">$rediscli SLAVEOF NO ONE <span class="meta">&gt;&gt; </span>$logfile</span><br><span class="line">echo <span class="string">"切换master完成"</span> <span class="meta">&gt;&gt; </span>$logfile</span><br></pre></td></tr></table></figure>
<h3 id="5-2-3-redis-backup-sh"><a href="#5-2-3-redis-backup-sh" class="headerlink" title="5.2.3 redis-backup.sh"></a>5.2.3 redis-backup.sh</h3><blockquote>
<p>（master主机脚本与slave主机基本雷同，只需修改远程ip地址）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rediscli=<span class="string">"redis-cli"</span></span><br><span class="line">logfile=<span class="string">"/var/log/keepalived-redis-state.log"</span></span><br><span class="line">date &gt;&gt; <span class="variable">$logfile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[backup]"</span> &gt;&gt; <span class="variable">$logfile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"等待13秒同步数据后运行下面命令"</span> &gt;&gt; <span class="variable">$logfile</span></span><br><span class="line">sleep 13</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"以远方IP为主机，同步数据"</span> &gt;&gt; <span class="variable">$logfile</span></span><br><span class="line"><span class="variable">$rediscli</span> slaveof 172.20.22.53 6379 &gt;&gt; <span class="variable">$logfile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"切换backup完成"</span> &gt;&gt; <span class="variable">$logfile</span></span><br></pre></td></tr></table></figure>
<p>keepalived进入backup/stop/fault时的检测脚本，由于内容都一致，所以只写出redis_backup.sh</p>
<p>主从主机脚本内容一致，只需修改IP地址为对方IP</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$rediscli slaveof <span class="number">172.20</span><span class="number">.22</span><span class="number">.53</span> <span class="number">6379</span>      #修改为对方IP</span><br></pre></td></tr></table></figure>
<h1 id="6-测试"><a href="#6-测试" class="headerlink" title="6 测试"></a>6 测试</h1><h1 id="7-注意事项："><a href="#7-注意事项：" class="headerlink" title="7 注意事项："></a>7 注意事项：</h1><ol>
<li><p>VRRP脚本(vrrp_script)和VRRP实例(vrrp_instance)属于同一个级别</p>
</li>
<li><p>notify_master 、notify_backup、notify_fault、notify_stop参数</p>
</li>
</ol>
<blockquote>
<p><code>notify_stop</code>      keepalived停止运行前运行<code>notify_stop</code>指定的脚本<br><code>notify_master</code>  keepalived切换到master时执行的脚本<br><code>notify_backup</code>  keepalived切换到backup时执行的脚本<br><code>notify_fault</code>    keepalived出现故障时执行的脚本</p>
</blockquote>
<ol start="3">
<li>启动顺序，先启动redis,后启动keepalived</li>
</ol>
<h1 id="8-说明"><a href="#8-说明" class="headerlink" title="8 说明"></a>8 说明</h1><p>此方法可以实现完全的自动化主从切换，但同步数据的时间（即脚本中的sleep时间）生产环境中无法完全掌控，实际使用中建议手动切回，<strong><code>或在主服务器上keepalived.conf中添加不抢占主机参数nopreempt（此参数要求配置文件中keepalived状态都为backup，根据优先级选择master）</code></strong></p>
<p>示例：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">vrrp_instance <span class="class">VI_1 </span>&#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id <span class="number">51</span>i</span><br><span class="line">    nopreempt                <span class="meta">#redis或keepalived恢复后不抢占master，依然作为backup运行。</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    <span class="class">authentication </span>&#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">track_script </span>&#123;</span><br><span class="line">            chk_redis</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">virtual_ipaddress </span>&#123;</span><br><span class="line">        <span class="number">172.20</span><span class="number">.22</span><span class="number">.199</span></span><br><span class="line">    &#125;</span><br><span class="line">    notify_backup <span class="meta-keyword">/etc/</span>keepalived<span class="meta-keyword">/scripts/</span>redis_backup.sh</span><br><span class="line">    notify_master <span class="meta-keyword">/etc/</span>keepalived<span class="meta-keyword">/scripts/</span>redis_master.sh</span><br><span class="line">    notify_fault  <span class="meta-keyword">/etc/</span>keepalived<span class="meta-keyword">/scripts/</span>redis_fault.sh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>keepalived</tag>
        <tag>双机</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7如何进入救援模式_resue</title>
    <url>/2018/08/30/centos7%E5%A6%82%E4%BD%95%E8%BF%9B%E5%85%A5%E6%95%91%E6%8F%B4%E6%A8%A1%E5%BC%8F-resue/</url>
    <content><![CDATA[<a id="more"></a>
<p>进入系统开机引导界面，按<code>↓</code>键，按<code>e</code>键，找到<code>linux16</code>开头的行，在后面添加<code>systemd.unit=rescue.target</code>,然后按<code>ctrl+x</code>来进入系统，就能够进入<code>rescue</code>的环境了，输入<code>帐号及密码</code>，就可以进行相应操作。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>基础运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix通过jmx监控tomcat</title>
    <url>/2018/08/30/Zabbix%E9%80%9A%E8%BF%87jmx%E7%9B%91%E6%8E%A7tomcat/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP</th>
</tr>
</thead>
<tbody>
<tr>
<td>zabbix server</td>
<td>172.20.20.22</td>
</tr>
<tr>
<td>tomcat server</td>
<td>172.20.20.111</td>
</tr>
</tbody>
</table>
<h1 id="2-服务端安装"><a href="#2-服务端安装" class="headerlink" title="2 服务端安装"></a>2 服务端安装</h1><h2 id="2-1-安装zabbix-java-Gateway"><a href="#2-1-安装zabbix-java-Gateway" class="headerlink" title="2.1 安装zabbix_java_Gateway"></a>2.1 安装zabbix_java_Gateway</h2><p>这里直接安装zabbix_java_gateway到zabbix server上面</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rpm -ivh http:<span class="regexp">//</span>repo.zabbix.com<span class="regexp">/zabbix/</span><span class="number">3.0</span><span class="regexp">/rhel/</span><span class="number">7</span><span class="regexp">/x86_64/</span>zabbix-java-gateway-<span class="number">3.0</span>.<span class="number">5</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h2 id="2-2-修改配置文件zabbix-java-gateway"><a href="#2-2-修改配置文件zabbix-java-gateway" class="headerlink" title="2.2 修改配置文件zabbix_java-gateway."></a>2.2 修改配置文件zabbix_java-gateway.</h2><p>修改zabbix_java_gateway.conf</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">LISTEN_IP=<span class="string">"0.0.0.0"</span></span><br><span class="line">LISTEN_PORT=10052</span><br><span class="line">PID_FILE=<span class="string">"/tmp/zabbix_java.pid"</span></span><br><span class="line">START_POLLERS=5</span><br></pre></td></tr></table></figure>
<h2 id="2-3-修改zabbix-server-conf"><a href="#2-3-修改zabbix-server-conf" class="headerlink" title="2.3 修改zabbix_server.conf"></a>2.3 修改zabbix_server.conf</h2><p>添加如下几行</p>
<p>JavaGateway=127.0.0.1            //zabbix_server与zabbix_java_gateway在一台服务器上，这里指定java_gateway服务器地址为本机；<br>JavaGatewayPort=10052<br>StartJavaPollers=5</p>
<h2 id="2-4-重启zabbix-server"><a href="#2-4-重启zabbix-server" class="headerlink" title="2.4 重启zabbix_server"></a>2.4 重启zabbix_server</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@zabbixserver</span> ~]<span class="comment"># service zabbix-server restart</span></span><br></pre></td></tr></table></figure>
<h1 id="3-tomcat客户端配置"><a href="#3-tomcat客户端配置" class="headerlink" title="3 tomcat客户端配置"></a>3 tomcat客户端配置</h1><p>添加如下代码到tomcat目录/bin/catalina.sh</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS="-Djava.rmi.server.hostname=172.20.20.111                   //tomcat客户端ip地址</span><br><span class="line">-<span class="ruby">Djavax.management.builder.initial=</span></span><br><span class="line"><span class="ruby">-Dcom.sun.management.jmxremote=<span class="literal">true</span></span></span><br><span class="line"><span class="ruby">-Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span></span></span><br><span class="line"><span class="ruby">-Dcom.sun.management.jmxremote.authenticate=<span class="literal">false</span><span class="string">"</span></span></span><br></pre></td></tr></table></figure>
<h2 id="3-1-下载catalina-jmx-remote-jar"><a href="#3-1-下载catalina-jmx-remote-jar" class="headerlink" title="3.1 下载catalina-jmx-remote.jar"></a>3.1 下载catalina-jmx-remote.jar</h2><p>因为tomcat服务器安装的java版本是1.7，所以这里下载的jar包是1.7的版本，不同版本的tomcat对应不同版本的catalina-jmx-remote.jar；</p>
<p>在<code>http://tomcat.apache.org/download-70.cgi</code>  找到以下JMX Remote jar,把这个文件放到tomcat安装目录的lib子目录下</p>
<ul>
<li><p>Extras:</p>
<ul>
<li>JMX Remote jar (pgp, md5, sha1)            //下载jmx包</li>
<li>Web services jar (pgp, md5, sha1)</li>
<li>JULI adapters jar (pgp, md5, sha1)</li>
<li>JULI log4j jar (pgp, md5, sha1)</li>
</ul>
</li>
</ul>
<h2 id="3-2-修改tomcat安装目录conf子目录下的server-xml配置文件"><a href="#3-2-修改tomcat安装目录conf子目录下的server-xml配置文件" class="headerlink" title="3.2 修改tomcat安装目录conf子目录下的server.xml配置文件"></a>3.2 修改tomcat安装目录conf子目录下的server.xml配置文件</h2><p>添加如下几行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.JmxRemoteLifecycleListener"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">rmiRegistryPortPlatform</span>=<span class="string">"12345"</span> <span class="attr">rmiServerPortPlatform</span>=<span class="string">"12346"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>完整显示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Security listener. Documentation at /docs/config/listeners.html</span></span><br><span class="line"><span class="comment">  &lt;Listener className="org.apache.catalina.security.SecurityListener" /&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--APR library loader. Documentation at /docs/apr.html --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.AprLifecycleListener"</span> <span class="attr">SSLEngine</span>=<span class="string">"on"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JasperListener"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Prevent memory leaks due to use of particular java/javax APIs--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JreMemoryLeakPreventionListener"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.ThreadLocalLeakPreventionListener"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.JmxRemoteLifecycleListener"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">rmiRegistryPortPlatform</span>=<span class="string">"12345"</span> <span class="attr">rmiServerPortPlatform</span>=<span class="string">"12346"</span> /&gt;</span></span><br><span class="line">省略...</span><br></pre></td></tr></table></figure>
<h2 id="3-3-重启tomcat"><a href="#3-3-重启tomcat" class="headerlink" title="3.3 重启tomcat."></a>3.3 重启tomcat.</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@localhost apache-tomcat<span class="number">-7.0</span><span class="number">.69</span>]# /opt/tomcat/bin/shutdown.sh </span><br><span class="line"></span><br><span class="line">[root@localhost apache-tomcat<span class="number">-7.0</span><span class="number">.69</span>]# /opt/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>
<p>测试是否可以获得数据</p>
<p>测试需要cmdline-jmxclient-0.10.3.jar包，下载包 <a href="http://dl.bintray.com/typesafe/maven-releases/cmdline-jmxclient/cmdline-jmxclient/0.10.3/cmdline-jmxclient-0.10.3.jar" target="_blank" rel="noopener">http://dl.bintray.com/typesafe/maven-releases/cmdline-jmxclient/cmdline-jmxclient/0.10.3/cmdline-jmxclient-0.10.3.jar</a>     </p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">cd /home</span><br><span class="line"></span><br><span class="line">wget http://<span class="built_in">dl</span>.bintray.com/typesafe/maven-releases/cmdline-jmxclient/cmdline-jmxclient/<span class="number">0.10</span><span class="meta">.3</span>/cmdline-jmxclient-<span class="number">0.10</span><span class="meta">.3</span>.jar</span><br><span class="line"></span><br><span class="line">java -jar /home/cmdline-jmxclient-<span class="number">0.10</span><span class="meta">.3</span>.jar - <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">12345</span> java.lang:type=Memory NonHeapMemoryUsage</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Zabbix通过jmx监控tomcat/1571817566399.png" alt="图1"></p>
<p>如上图显示，说明可以正常获得数据。</p>
<h2 id="3-4-配置防火墙"><a href="#3-4-配置防火墙" class="headerlink" title="3.4 配置防火墙"></a>3.4 配置防火墙</h2><p>开放12345/12346端口<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Zabbix通过jmx监控tomcat/1571817575082.png" alt="图2"></p>
<p>到这里配置完成。</p>
<p><strong>参考资料：</strong></p>
<p><a href="http://jaychang.iteye.com/blog/2214830" target="_blank" rel="noopener">http://jaychang.iteye.com/blog/2214830</a></p>
<h1 id="4-问题："><a href="#4-问题：" class="headerlink" title="4 问题："></a>4 问题：</h1><p>按照网上的教程，修改tomcat目录中的catalina.sh ，无法再关闭防火墙的前提下正常获取到数据，是因为即使按照配置设定了端口，但实际中并不是只使用设置的端口。</p>
<h1 id="5-配置例子："><a href="#5-配置例子：" class="headerlink" title="5 配置例子："></a>5 配置例子：</h1><blockquote>
<p>（关闭防火墙开启12345端口就无法获取数据）</p>
</blockquote>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS="-Dcom.sun.management.jmxremote</span><br><span class="line">-<span class="ruby">Dcom.sun.management.jmxremote.authenticate=<span class="literal">false</span></span></span><br><span class="line"><span class="ruby">-Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span></span></span><br><span class="line"><span class="ruby">-Dcom.sun.management.jmxremote.port=<span class="number">12345</span>  <span class="comment">#定义jmx监听端口</span></span></span><br><span class="line"><span class="ruby">-Djava.rmi.server.hostname=客户端IP<span class="string">"</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>tomcat</tag>
        <tag>jmx</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7进入单用户模式修改root密码</title>
    <url>/2018/08/30/centos7%E8%BF%9B%E5%85%A5%E5%8D%95%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8F%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h1><p>1、centos7的grub2界面会有两个入口，正常系统入口和救援模式；</p>
<p>2、修改grub2引导</p>
<p>在正常系统入口上按下”<code>e</code>“，会进入<code>edit模式</code>，搜寻<code>ro</code>那一行，以<code>linux16</code>开头的；</p>
<p>把<code>ro</code>更改成<code>rw</code>；（把只读更改成可写）</p>
<p>把<code>rhgb quiet</code>删除；（<code>quiet</code>模式没有代码行唰唰的走，可以删除）</p>
<p>增加<code>init=/bin/sh</code>；（或<code>init=/bin/bash</code>,指定shell环境)</p>
<p>按下<code>ctrl+x</code>来启动系统。</p>
<p>3、修改root密码</p>
<p>#passwd                       #修改密码</p>
<p>#touch /.autorelabel      #据说是selinux在重启后更新label</p>
<p>#exec /sbin/init              #正常启动init进程</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>基础运维</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装redis</title>
    <url>/2018/08/30/centos7%E5%AE%89%E8%A3%85redis/</url>
    <content><![CDATA[<h1 id="1-下载redis"><a href="#1-下载redis" class="headerlink" title="1 下载redis"></a>1 下载redis</h1><p>下载redis-3.2.9.tar.gz</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wget http:<span class="comment">//download.redis.io/releases/redis-3.2.9.tar.gz</span></span><br><span class="line"></span><br><span class="line">tar -zxvf redis-<span class="number">3.2</span>.<span class="number">9</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line">mv redis-<span class="number">3.2</span>.<span class="number">9</span> redis</span><br></pre></td></tr></table></figure>
<h1 id="2-安装redis"><a href="#2-安装redis" class="headerlink" title="2 安装redis"></a>2 安装redis</h1><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> home]<span class="comment"># cd redis/</span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@bogon</span> redis]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/centos7安装redis/1571817008279.png" alt="图1"></p>
<h2 id="2-1-初始化redis"><a href="#2-1-初始化redis" class="headerlink" title="2.1 初始化redis"></a>2.1 初始化redis</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> redis]<span class="comment"># cd utils/</span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@bogon</span> utils]<span class="comment"># ./install_server.sh</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/centos7安装redis/1571817075756.png" alt="图2"></p>
<blockquote>
<p>通过上图，我们可以看出<code>redis</code>初始化后<code>redis</code>配置文件为<code>/etc/redis/6379.conf</code>，日志文件为<code>/var/log/redis_6379.log</code>，数据文件<code>dump.rdb</code>存放到<code>/var/lib/redis/6379</code>目录下，启动脚本为<code>/etc/init.d/redis_6379</code>。</p>
</blockquote>
<p>现在我们要使用<code>systemd</code>，所以在 <code>/etc/systems/system</code> 下创建一个单位文件名字为<code>redis_6379.service</code>。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>redis_6379.service</span><br></pre></td></tr></table></figure>
<p>填写以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Redis <span class="literal">on</span> port <span class="number">6379</span></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">ExecStart</span>=/etc/init.d/redis_6379 start</span><br><span class="line"><span class="attr">ExecStop</span>=/etc/init.d/redis_6379 stop</span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>
<h2 id="2-2-查看redis版本"><a href="#2-2-查看redis版本" class="headerlink" title="2.2 查看redis版本"></a>2.2 查看redis版本</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span> --<span class="keyword">version</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/centos7安装redis/1571817088721.png" alt="图3"></p>
<h1 id="3-参考资料："><a href="#3-参考资料：" class="headerlink" title="3 参考资料："></a>3 参考资料：</h1><p><a href="http://www.cnblogs.com/sandea/p/5782192.html" target="_blank" rel="noopener">http://www.cnblogs.com/sandea/p/5782192.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>linux调整目录分区大小，linux调整home目录大小，linux调整root目录大小（ext格式/LVM）</title>
    <url>/2018/08/30/linux%E8%B0%83%E6%95%B4%E7%9B%AE%E5%BD%95%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F%EF%BC%8Clinux%E8%B0%83%E6%95%B4home%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F%EF%BC%8Clinux%E8%B0%83%E6%95%B4root%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F-ext%E6%A0%BC%E5%BC%8F-LVM/</url>
    <content><![CDATA[<a id="more"></a>
<blockquote>
<p><strong>说明：ext格式分区可无损扩大或缩小分区。要先对文件系统进行缩小，然后才能缩小逻辑卷，一层层向下。和扩大正好相反。</strong></p>
<p>注意vg_sql-lv_home其中的sql其实为hostname!</p>
</blockquote>
<h1 id="resize2fs命令"><a href="#resize2fs命令" class="headerlink" title="resize2fs命令"></a>resize2fs命令</h1><p>resize2fs命令被用来增大或者收缩未加载的“ext2/ext3”文件系统的大小。如果文件系统是处于mount状态下，那么它只能做到扩容，前提条件是内核支持在线resize。，linux kernel 2.6支持在mount状态下扩容但仅限于ext3文件系统。</p>
<p>来自: <a href="http://man.linuxde.net/resize2fs" target="_blank" rel="noopener">http://man.linuxde.net/resize2fs</a></p>
<h1 id="一、首先df-h查看分区情况（这里我想调整home目录）"><a href="#一、首先df-h查看分区情况（这里我想调整home目录）" class="headerlink" title="一、首先df -h查看分区情况（这里我想调整home目录）"></a>一、首先df -h查看分区情况（这里我想调整home目录）</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@sql ~]# df -h</span><br><span class="line">Filesystem                  Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg_sql-lv_root   <span class="number">50</span>G  <span class="number">906</span>M   <span class="number">46</span>G   <span class="number">2</span>%  /</span><br><span class="line">tmpfs                        <span class="number">935</span>M     <span class="number">0</span>  <span class="number">935</span>M   <span class="number">0</span>% /dev/shm</span><br><span class="line">/dev/sda1                    <span class="number">477</span>M   <span class="number">30</span>M  <span class="number">422</span>M   <span class="number">7</span>% /boot</span><br><span class="line">/dev/mapper/vg_sql-lv_home   <span class="number">341</span>G   <span class="number">67</span>M  <span class="number">323</span>G   <span class="number">1</span>% /home</span><br></pre></td></tr></table></figure>
<h1 id="二、卸载home目录umount-home"><a href="#二、卸载home目录umount-home" class="headerlink" title="二、卸载home目录umount /home"></a>二、卸载home目录umount /home</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@sql ~]# umount /home</span><br><span class="line">[root@sql ~]# df -h</span><br><span class="line">Filesystem                     Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg_sql-lv_root     <span class="number">50</span>G  <span class="number">706</span>M   <span class="number">46</span>G   <span class="number">2</span>% /</span><br><span class="line">tmpfs                         <span class="number">935</span>M     <span class="number">0</span>  <span class="number">935</span>M   <span class="number">0</span>% /dev/shm</span><br><span class="line">/dev/sda1                      <span class="number">477</span>M   <span class="number">30</span>M  <span class="number">422</span>M   <span class="number">7</span>% /boot</span><br></pre></td></tr></table></figure>
<h1 id="三、重新指定-home目录大小"><a href="#三、重新指定-home目录大小" class="headerlink" title="三、重新指定/home目录大小"></a>三、重新指定/home目录大小</h1><p><strong>缩小文件系统</strong></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">[root@sql ~]<span class="comment"># e2fsck -f /dev/mapper/vg_sql-lv_home</span></span><br><span class="line">e2fsck <span class="number">1.41</span>.<span class="number">12</span> (<span class="number">17</span>-May-<span class="number">2010</span>)</span><br><span class="line">Pass <span class="number">1</span>: Checking inodes, blocks, and sizes</span><br><span class="line">Pass <span class="number">2</span>: Checking directory structure</span><br><span class="line">Pass <span class="number">3</span>: Checking directory connectivity</span><br><span class="line">Pass <span class="number">4</span>: Checking reference counts</span><br><span class="line">Pass <span class="number">5</span>: Checking <span class="keyword">group</span> summary information</span><br><span class="line">/dev/mapper/vg_sql-lv_home: <span class="number">11</span>/<span class="number">22650880</span> files (<span class="number">0.0</span>% non-contiguous), <span class="number">1471409</span>/<span class="number">90597376</span> blocks</span><br><span class="line">[root@sql ~]<span class="comment"># resize2fs -p /dev/mapper/vg_sql-lv_home 30G</span></span><br><span class="line">resize2fs <span class="number">1.41</span>.<span class="number">12</span> (<span class="number">17</span>-May-<span class="number">2010</span>)</span><br><span class="line">Resizing the filesystem <span class="keyword">on</span> /dev/mapper/vg_sql-lv_home <span class="keyword">to</span> <span class="number">7864320</span> (<span class="number">4</span>k) blocks.</span><br><span class="line">Begin <span class="built_in">pass</span> <span class="number">2</span> (<span class="keyword">max</span> = <span class="number">32768</span>)</span><br><span class="line">Relocating blocks             XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">Begin <span class="built_in">pass</span> <span class="number">3</span> (<span class="keyword">max</span> = <span class="number">2765</span>)</span><br><span class="line">Scanning inode <span class="built_in">table</span>          XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">The filesystem <span class="keyword">on</span> /dev/mapper/vg_sql-lv_home is now <span class="number">7864320</span> blocks long.</span><br></pre></td></tr></table></figure>
<h1 id="四、挂载-home，然后查看调整后的大小"><a href="#四、挂载-home，然后查看调整后的大小" class="headerlink" title="四、挂载/home，然后查看调整后的大小"></a>四、挂载/home，然后查看调整后的大小</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@sql ~]# mount /home</span><br><span class="line">[root@sql ~]# df -h</span><br><span class="line">Filesystem                        Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg_sql-lv_root        <span class="number">50</span>G  <span class="number">706</span>M   <span class="number">46</span>G   <span class="number">2</span>% /</span><br><span class="line">tmpfs                             <span class="number">935</span>M     <span class="number">0</span>  <span class="number">935</span>M   <span class="number">0</span>% /dev/shm</span><br><span class="line">/dev/sda1                         <span class="number">477</span>M   <span class="number">30</span>M  <span class="number">422</span>M   <span class="number">7</span>% /boot</span><br><span class="line">/dev/mapper/vg_sql-lv_home        <span class="number">30</span>G   <span class="number">44</span>M   <span class="number">28</span>G   <span class="number">1</span>% /home</span><br></pre></td></tr></table></figure>
<h1 id="五、用lvreduce命令把目标分区-home-减小至30G"><a href="#五、用lvreduce命令把目标分区-home-减小至30G" class="headerlink" title="五、用lvreduce命令把目标分区(/home)减小至30G"></a>五、用lvreduce命令把目标分区(/home)减小至30G</h1><p><strong>缩小逻辑卷</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">[root@sql ~]# lvreduce -L 30G /dev/mapper/vg<span class="emphasis">_sql-lv_</span>home</span><br><span class="line"><span class="symbol">WARNING: </span>Reducing active and open logical volume to 30.00 GiB</span><br><span class="line">THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class="line">Do you really want to reduce lv<span class="emphasis">_home? [y/n]: y</span></span><br><span class="line"><span class="emphasis">  Size of logical volume vg_</span>sql/lv<span class="emphasis">_home changed from 345.60 GiB (88474 extents) to 30.00 GiB (7680 extents).</span></span><br><span class="line"><span class="emphasis">  Logical volume lv_</span>home successfully resized</span><br></pre></td></tr></table></figure>
<h1 id="六、用vgdisplay命令查看多余的空间，可以看到多出约320G的空间"><a href="#六、用vgdisplay命令查看多余的空间，可以看到多出约320G的空间" class="headerlink" title="六、用vgdisplay命令查看多余的空间，可以看到多出约320G的空间"></a>六、用vgdisplay命令查看多余的空间，可以看到多出约320G的空间</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@sql</span> <span class="string">~]#</span> <span class="string">vgdisplay</span></span><br><span class="line">  <span class="meta">---</span> <span class="string">Volume</span> <span class="string">group</span> <span class="meta">---</span></span><br><span class="line">  <span class="string">VG</span> <span class="string">Name</span>               <span class="string">vg_sql</span></span><br><span class="line">  <span class="string">System</span> <span class="string">ID</span>            </span><br><span class="line">  <span class="string">Format</span>                <span class="string">lvm2</span></span><br><span class="line">  <span class="string">Metadata</span> <span class="string">Areas</span>        <span class="number">1</span></span><br><span class="line">  <span class="string">Metadata</span> <span class="string">Sequence</span> <span class="literal">No</span>  <span class="number">5</span></span><br><span class="line">  <span class="string">VG</span> <span class="string">Access</span>             <span class="string">read/write</span></span><br><span class="line">  <span class="string">VG</span> <span class="string">Status</span>             <span class="string">resizable</span></span><br><span class="line">  <span class="string">MAX</span> <span class="string">LV</span>                <span class="number">0</span></span><br><span class="line">  <span class="string">Cur</span> <span class="string">LV</span>                <span class="number">3</span></span><br><span class="line">  <span class="string">Open</span> <span class="string">LV</span>               <span class="number">3</span></span><br><span class="line">  <span class="string">Max</span> <span class="string">PV</span>                <span class="number">0</span></span><br><span class="line">  <span class="string">Cur</span> <span class="string">PV</span>                <span class="number">1</span></span><br><span class="line">  <span class="string">Act</span> <span class="string">PV</span>                <span class="number">1</span></span><br><span class="line">  <span class="string">VG</span> <span class="string">Size</span>               <span class="number">399.51</span> <span class="string">GiB</span></span><br><span class="line">  <span class="string">PE</span> <span class="string">Size</span>               <span class="number">4.00</span> <span class="string">MiB</span></span><br><span class="line">  <span class="string">Total</span> <span class="string">PE</span>              <span class="number">102274</span></span><br><span class="line">  <span class="string">Alloc</span> <span class="string">PE</span> <span class="string">/</span> <span class="string">Size</span>       <span class="number">21480</span> <span class="string">/</span> <span class="number">83.91</span> <span class="string">GiB</span></span><br><span class="line">  <span class="string">Free</span>  <span class="string">PE</span> <span class="string">/</span> <span class="string">Size</span>       <span class="number">80794</span> <span class="string">/</span> <span class="number">315.60</span> <span class="string">GiB</span></span><br><span class="line">  <span class="string">VG</span> <span class="string">UUID</span>               <span class="string">L9OUKR-6alh-ms7H-yimo-ypYm-lLYa-DqkpMC</span></span><br></pre></td></tr></table></figure>
<h1 id="七、用lvextend命令将多余的约320G空间挂载到-目录下"><a href="#七、用lvextend命令将多余的约320G空间挂载到-目录下" class="headerlink" title="七、用lvextend命令将多余的约320G空间挂载到/目录下"></a>七、用lvextend命令将多余的约320G空间挂载到/目录下</h1><p><strong>扩大逻辑卷</strong></p>
<blockquote>
<p>注：在设定lv_root的大小时，不要把Free PE / Size的空间全部都用上，这很可能会出现Free<br>PE空间不足的现象，建议保留一点Free PE的空间。</p>
<p>另：我这里搞上完没有出错，其实没有出错，查看空闲大小，显示Free PE / Size 0 / 0</p>
</blockquote>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">[root@sql ~]<span class="meta"># lvextend -L +315.60G /dev/mapper/vg_sql-lv_root</span></span><br><span class="line">  Rounding <span class="built_in">size</span> <span class="keyword">to</span> boundary between physical extents: <span class="number">315.60</span> GiB</span><br><span class="line">  <span class="built_in">Size</span> of logical volume vg_sql/lv_root changed <span class="keyword">from</span> <span class="number">50.00</span> GiB (<span class="number">12800</span> extents) <span class="keyword">to</span> <span class="number">365.60</span> GiB (<span class="number">93594</span> extents).</span><br><span class="line">  Logical volume lv_root successfully resized</span><br></pre></td></tr></table></figure>
<h1 id="八、激活目录大小（扩展后的-目录）"><a href="#八、激活目录大小（扩展后的-目录）" class="headerlink" title="八、激活目录大小（扩展后的/目录）"></a>八、激活目录大小（扩展后的/目录）</h1><p><strong>扩大文件系统</strong></p>
<blockquote>
<p>注：执行这个命令后，会进入漫长的等待，这里我是机械硬盘，且调整分区约320G，耗时较长</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">[root@sql ~]<span class="comment"># resize2fs -p /dev/mapper/vg_sql-lv_root</span></span><br><span class="line">resize2fs <span class="number">1.41</span><span class="number">.12</span> (<span class="number">17</span>-May<span class="number">-2010</span>)</span><br><span class="line">Filesystem <span class="keyword">at</span> /dev/mapper/vg_sql-lv_root <span class="keyword">is</span> mounted <span class="keyword">on</span> /; <span class="keyword">on</span>-line resizing required</span><br><span class="line">old desc_blocks = <span class="number">4</span>, new_desc_blocks = <span class="number">23</span></span><br><span class="line">Performing an <span class="keyword">on</span>-line resize <span class="keyword">of</span> /dev/mapper/vg_sql-lv_root <span class="keyword">to</span> <span class="number">95840256</span> (<span class="number">4</span>k) blocks.</span><br><span class="line">The filesystem <span class="keyword">on</span> /dev/mapper/vg_sql-lv_root <span class="keyword">is</span> now <span class="number">95840256</span> blocks long.</span><br></pre></td></tr></table></figure>
<h1 id="九、df-h查看修改成功后的分区情况"><a href="#九、df-h查看修改成功后的分区情况" class="headerlink" title="九、df -h查看修改成功后的分区情况"></a>九、df -h查看修改成功后的分区情况</h1><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">[root@sql ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem                       Size  Used Avail Use% Mounted on</span><br><span class="line"><span class="string">/dev/mapper/vg_sql-lv_root</span>       360G  720M  341G   1% /</span><br><span class="line">tmpfs                            935M     0  935M   0% <span class="string">/dev/shm</span></span><br><span class="line"><span class="string">/dev/sda1</span>                        477M   30M  422M   7% <span class="string">/boot</span></span><br><span class="line"><span class="string">/dev/mapper/vg_sql-lv_home</span>       30G   44M   28G   1% <span class="string">/home</span></span><br></pre></td></tr></table></figure>
<p>转载：<a href="https://www.cplusplus.me/2316.html" target="_blank" rel="noopener">https://www.cplusplus.me/2316.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>分区</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7通过smtp发送邮件（解决阿里云ECS不能通过25端口发送邮件）</title>
    <url>/2018/08/30/centos7%E9%80%9A%E8%BF%87smtp%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6-%E8%A7%A3%E5%86%B3%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8D%E8%83%BD%E9%80%9A%E8%BF%8725%E7%AB%AF%E5%8F%A3%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-参考资料"><a href="#1-参考资料" class="headerlink" title="1 参考资料"></a>1 参考资料</h1><p><a href="https://bbs.aliyun.com/read/316576.html" target="_blank" rel="noopener">https://bbs.aliyun.com/read/316576.html</a></p>
<p><a href="http://blog.csdn.net/qq_25551295/article/details/51803942" target="_blank" rel="noopener">http://blog.csdn.net/qq_25551295/article/details/51803942</a></p>
<h1 id="2-安装mailx"><a href="#2-安装mailx" class="headerlink" title="2 安装mailx"></a>2 安装mailx</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum install mailx</span></span><br></pre></td></tr></table></figure>
<h2 id="2-1-修改配置文件"><a href="#2-1-修改配置文件" class="headerlink" title="2.1 修改配置文件"></a>2.1 修改配置文件</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vim</span> /etc/mail.rc</span><br></pre></td></tr></table></figure>
<p>追加如下内容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> smtp=<span class="string">"smtps://smtp.mxhichina.com:465"</span></span><br><span class="line"><span class="keyword">set</span> smtp-auth=login</span><br><span class="line"><span class="keyword">set</span> smtp-auth-<span class="keyword">user</span>=<span class="string">"sales@vfutai.xxx"</span></span><br><span class="line"><span class="keyword">set</span> smtp-auth-<span class="keyword">password</span>=<span class="string">"Ni-De-Mi-Ma"</span></span><br><span class="line"><span class="keyword">set</span> ssl-<span class="keyword">verify</span>=<span class="keyword">ignore</span></span><br><span class="line"><span class="keyword">set</span> nss-config-dir=/etc/pki/nssdb</span><br></pre></td></tr></table></figure>
<h2 id="2-2-发送测试"><a href="#2-2-发送测试" class="headerlink" title="2.2 发送测试"></a>2.2 发送测试</h2><p><strong>例子1：</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">echo</span> message3 | mail -v -r <span class="string">"sales<span class="variable">@vfutai</span>.xxx"</span> -s <span class="string">"This is the subject"</span> dongshan3<span class="variable">@foxmail</span>.xxx</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>message3</code> 正文</p>
<p><a href="mailto:`dongshan3@foxmail.xxx" target="_blank" rel="noopener">`dongshan3@foxmail.xxx</a>` 收件人地址，发送多人加逗号添加邮件地址</p>
<p><code>-r “sales@vfutai.xxx”</code> 发件人地址</p>
<p><code>-s &quot;This is the subject&quot;</code>  邮件标题</p>
<p><code>-a  /etc/*.txt</code>  附件</p>
</blockquote>
<p><strong>列子2：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"><span class="comment">#发送邮件到kxhuanzi@163.com</span></span><br><span class="line">sj=`date +%Y%m%d`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"备份mysql"</span> &gt;&gt; /opt/mysqldata/<span class="variable">$sj</span>.<span class="built_in">log</span></span><br><span class="line">mysqldump -uroot -ppassword bitnami_wordpress &gt; /opt/mysqldata/<span class="variable">$sj</span>.sql &gt;&gt; /opt/mysqldata/<span class="variable">$sj</span>.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"发送mysql备份电子邮件到k*****@163.com"</span> &gt;&gt; /opt/mysqldate/<span class="variable">$sj</span>.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">echo</span> MYSQL备份，备份文件名字:<span class="variable">$sj</span>.sql,备份日期:`date`.| mail -v -r <span class="string">"32****@qq.com"</span> -a /opt/mysqldata/<span class="variable">$sj</span>.sql -s <span class="string">"wordpress备份/<span class="variable">$sj</span>"</span> k****@163.com,xh****@gmail.com</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"发送完成"</span> &gt;&gt; /opt/mysqldata/<span class="variable">$sj</span>.<span class="built_in">log</span></span><br><span class="line">~</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>email</tag>
        <tag>smtp</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7搭建sock5代理</title>
    <url>/2018/08/30/centos7%E6%90%AD%E5%BB%BAsock5%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><p>OS:centos 7.3</p>
<p>sock5:ss5-3.8.9</p>
<h1 id="2-安装SS5"><a href="#2-安装SS5" class="headerlink" title="2 安装SS5"></a>2 安装SS5</h1><h2 id="2-1-安装必要组件"><a href="#2-1-安装必要组件" class="headerlink" title="2.1 安装必要组件"></a>2.1 安装必要组件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> pam-devel openldap-devel openssl-devel  </span><br><span class="line">yum <span class="keyword">install</span> gcc gcc-c++</span><br></pre></td></tr></table></figure>
<h2 id="2-2-下载ss5"><a href="#2-2-下载ss5" class="headerlink" title="2.2 下载ss5"></a>2.2 下载ss5</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>nchc.dl.sourceforge.net<span class="regexp">/project/</span>ss5<span class="regexp">/ss5/</span><span class="number">3.8</span>.<span class="number">9</span>-<span class="number">8</span><span class="regexp">/ss5-3.8.9-8.tar.gz</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-1-解压安装"><a href="#2-2-1-解压安装" class="headerlink" title="2.2.1 解压安装"></a>2.2.1 解压安装</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">tar -zxvf ss5<span class="number">-3.8</span><span class="number">.9</span><span class="number">-8.</span>tar.gz</span><br><span class="line">cd ss5<span class="number">-3.8</span><span class="number">.9</span>/</span><br><span class="line">./configure</span><br><span class="line">make&amp;&amp;makeinstall</span><br></pre></td></tr></table></figure>
<h2 id="2-3-修改配置文件"><a href="#2-3-修改配置文件" class="headerlink" title="2.3 修改配置文件"></a>2.3 修改配置文件</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/<span class="keyword">opt</span>/ss5/ss5.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>修改如下配置：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># <span class="comment">///////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#       SHost           SPort           Authentication</span><br><span class="line">#</span><br><span class="line">#auth    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>               -               -</span><br><span class="line">#取消注释，并修改如下，意思是使用用户密码连接，默认是允许所有人连接。</span><br><span class="line">auth <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> - u</span><br><span class="line"></span><br><span class="line"># <span class="comment">/////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#      Auth     SHost           SPort   DHost           DPort   Fixup   Group   Band    ExpDate</span><br><span class="line">#</span><br><span class="line">#permit -       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>       -       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>       -       -       -       -       -       </span><br><span class="line">#取消注释，并修改如下，意思是使用用户密码连接，默认是允许所有人连接。</span><br><span class="line">permit u <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> - <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> - - - - -</span><br></pre></td></tr></table></figure>
<h2 id="2-4-修改默认端口号"><a href="#2-4-修改默认端口号" class="headerlink" title="2.4 修改默认端口号"></a>2.4 修改默认端口号</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>rc.d<span class="regexp">/init.d/</span>ss5</span><br></pre></td></tr></table></figure>
<p>修改脚本如下</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认端口号为1080，修改为10888</span></span><br><span class="line"><span class="attribute">daemon</span> /usr/sbin/ss5 -t <span class="variable">$SS5_OPTS</span></span><br><span class="line">修改为</span><br><span class="line">daemon /usr/sbin/ss5 -t <span class="variable">$SS5_OPTS</span> -b <span class="number">0.0.0.0:10888</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-添加帐号密码"><a href="#2-5-添加帐号密码" class="headerlink" title="2.5 添加帐号密码"></a>2.5 添加帐号密码</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>opt<span class="regexp">/ss5/</span>ss5.passwd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>格式:  用户+密码</p>
</blockquote>
<h2 id="2-6-启动ss5"><a href="#2-6-启动ss5" class="headerlink" title="2.6 启动ss5"></a>2.6 启动ss5</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">700</span> /etc/rc.d/init.d/ss5       <span class="comment">#添加执行权限</span></span><br><span class="line">service ss5 start                    <span class="comment">#启动服务</span></span><br><span class="line">chkconfig ss5 <span class="literal">on</span>                     <span class="comment">#开机自启</span></span><br></pre></td></tr></table></figure>
<h2 id="2-7-检测启动"><a href="#2-7-检测启动" class="headerlink" title="2.7 检测启动"></a>2.7 检测启动</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">[root@blog ss5-<span class="number">3.8</span><span class="meta">.9</span>]# netstat -tunlp|grep ss5</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">10888</span>           <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN      <span class="number">22387</span>/ss5</span><br></pre></td></tr></table></figure>
<p>安装完成。</p>
<p>可使用sock5客户端proxifier等进行连接。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>sock</tag>
      </tags>
  </entry>
  <entry>
    <title>linux调整目录分区大小，linux调整home目录大小，linux调整root目录大小(xfs格式/LVM)</title>
    <url>/2018/08/30/linux%E8%B0%83%E6%95%B4%E7%9B%AE%E5%BD%95%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F%EF%BC%8Clinux%E8%B0%83%E6%95%B4home%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F%EF%BC%8Clinux%E8%B0%83%E6%95%B4root%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F-xfs%E6%A0%BC%E5%BC%8F-LVM/</url>
    <content><![CDATA[<blockquote>
<p>说明：xfs格式分区无法无损缩减分区，可无损扩大分区。<br><a id="more"></a></p>
</blockquote>
<h1 id="一：环境概览："><a href="#一：环境概览：" class="headerlink" title="一：环境概览："></a>一：环境概览：</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/linux调整目录分区大小，linux调整home目录大小，linux调整root目录大小(xfs格式_LVM" alt="图1">/1571817332831.png)<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/linux调整目录分区大小，linux调整home目录大小，linux调整root目录大小(xfs格式_LVM" alt="图2">/1571817343568.png)<br><!--more--></p>
<h1 id="二、操作步骤："><a href="#二、操作步骤：" class="headerlink" title="二、操作步骤："></a>二、操作步骤：</h1><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.终止占用 /home 进程	 </span></span><br><span class="line">fuser -m -v -i -k <span class="string">/home</span> </span><br><span class="line"><span class="comment"># 2.备份/home </span></span><br><span class="line">cp -r  <span class="string">/home/</span>  homebak/ </span><br><span class="line"><span class="comment"># 3.卸载 /home	 </span></span><br><span class="line">umount <span class="string">/home</span>	 </span><br><span class="line"><span class="comment"># 4.删除/home所在的lv </span></span><br><span class="line">lvremove <span class="string">/dev/mapper/centos-home</span> </span><br><span class="line"><span class="comment"># 5.扩展/root所在的lv，增加100G </span></span><br><span class="line">lvextend -L +100G <span class="string">/dev/mapper/centos-root</span> </span><br><span class="line"><span class="comment"># 6.扩展/root文件系统	 </span></span><br><span class="line">xfs_growfs <span class="string">/dev/mapper/centos-root</span> </span><br><span class="line"><span class="comment"># 7.重新创建home lv </span></span><br><span class="line">lvcreate -L 40G -n home centos </span><br><span class="line"><span class="comment"># 8.创建文件系统 </span></span><br><span class="line">mkfs.xfs <span class="string">/dev/centos/home</span> </span><br><span class="line"><span class="comment"># 9.挂载 </span></span><br><span class="line">mount <span class="string">/dev/centos/home</span> <span class="string">/home</span> </span><br><span class="line"><span class="comment"># 10.还原 /home 相关文件以及对应目录权限</span></span><br></pre></td></tr></table></figure>
<p>三、执行结果：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/linux调整目录分区大小，linux调整home目录大小，linux调整root目录大小(xfs格式_LVM" alt="图3">/1571817356365.png)</p>
<h1 id="四、实测成功："><a href="#四、实测成功：" class="headerlink" title="四、实测成功："></a>四、实测成功：</h1><p>依旧教程扩容xfs，测试成功！</p>
<p>转载：<a href="https://www.cplusplus.me/2717.html" target="_blank" rel="noopener">https://www.cplusplus.me/2717.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>基础运维</tag>
        <tag>分区</tag>
      </tags>
  </entry>
  <entry>
    <title>windows重置网卡解决无法上网问题</title>
    <url>/2018/08/30/windows%E9%87%8D%E7%BD%AE%E7%BD%91%E5%8D%A1%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-故障表现："><a href="#1-故障表现：" class="headerlink" title="1 故障表现："></a>1 故障表现：</h1><a id="more"></a>
<p>网卡获取地址正常，无法访问域名，Ping域名无法找到主机，表现为DNS故障。</p>
<h2 id="1-2-解决办法1："><a href="#1-2-解决办法1：" class="headerlink" title="1.2 解决办法1："></a>1.2 解决办法1：</h2><p>管理员打开命令行输入以下命令</p>
<p><code>netsh int ip reset</code>                           #重置ip配置</p>
<p><code>netsh winhttp reset proxy</code>             #重置代理</p>
<p><code>ipconfig /flushdns</code>                        #重置DNS</p>
<h2 id="1-3-解决办法2：（一般此方法解决问题）"><a href="#1-3-解决办法2：（一般此方法解决问题）" class="headerlink" title="1.3 解决办法2：（一般此方法解决问题）"></a>1.3 解决办法2：（一般此方法解决问题）</h2><p>管理员打开命令行输入以下命令重置网络连接配置</p>
<p><code>netsh winsock reset</code></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/windows重置网卡解决无法上网问题/1571817432041.png" alt="图1"></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>基础运维</tag>
        <tag>网卡</tag>
      </tags>
  </entry>
  <entry>
    <title>window下安装压缩版mysql5.6.35</title>
    <url>/2018/08/30/window%E4%B8%8B%E5%AE%89%E8%A3%85%E5%8E%8B%E7%BC%A9%E7%89%88mysql5-6-35/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境："><a href="#1-环境：" class="headerlink" title="1 环境："></a>1 环境：</h1><p>OS: windows 7 x64</p>
<p>mysql:mysql-5.6.35-winx64.zip</p>
<h1 id="2-部署"><a href="#2-部署" class="headerlink" title="2 部署"></a>2 部署</h1><h2 id="2-1-下载及解压"><a href="#2-1-下载及解压" class="headerlink" title="2.1 下载及解压"></a>2.1 下载及解压</h2><p>解压缩mysql到自定义位置，并重命名为mysql</p>
<h2 id="2-2-添加mysql环境变量"><a href="#2-2-添加mysql环境变量" class="headerlink" title="2.2 添加mysql环境变量"></a>2.2 添加mysql环境变量</h2><p>编辑path系统变量，在后面追加C:\mysql\bin; 前面用分号“；”隔开。</p>
<p>path完整变量显示如下：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">C:<span class="symbol">\P</span>rogramData<span class="symbol">\O</span>racle<span class="symbol">\J</span>ava<span class="symbol">\j</span>avapath;<span class="variable">%SystemRoot%</span><span class="symbol">\s</span>ystem32;<span class="variable">%SystemRoot%</span>;<span class="variable">%SystemRoot%</span><span class="symbol">\S</span>ystem32<span class="symbol">\W</span>bem;<span class="variable">%SYSTEMROOT%</span><span class="symbol">\S</span>ystem32<span class="symbol">\W</span>indowsPowerShell<span class="symbol">\v</span>1.0<span class="symbol">\;</span>D:<span class="symbol">\P</span>rogram Files<span class="symbol">\M</span>ySQL<span class="symbol">\M</span>ySQL Server 5.5<span class="symbol">\b</span>in;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\p</span>hp-5.4;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\p</span>hp-5.4<span class="symbol">\e</span>xt;C:<span class="symbol">\m</span>ysql<span class="symbol">\b</span>in;</span><br></pre></td></tr></table></figure>
<p><strong>重启生效</strong></p>
<h2 id="2-3-安装mysql"><a href="#2-3-安装mysql" class="headerlink" title="2.3 安装mysql"></a>2.3 安装mysql</h2><p>使用管理员权限打开命令窗口</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">mysqld </span><span class="built_in">--install</span>         <span class="comment">#安装mysql命令</span></span><br><span class="line"><span class="string">mysqld </span><span class="built_in">--remove</span>          <span class="comment">#卸载mysql命令</span></span><br></pre></td></tr></table></figure>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">net <span class="literal">start</span> mysql                  <span class="comment">#启动数据库</span></span><br><span class="line">mysql -uroot -p                  <span class="comment">#登录mysql,默认密码为空。</span></span><br><span class="line">net <span class="literal">stop</span> mysql                   <span class="comment">#停止数据库</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>基础运维</tag>
        <tag>部署</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>widowns配额管理</title>
    <url>/2018/08/30/widowns%E9%85%8D%E9%A2%9D%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>磁盘配额就是管理员可以为用户所能使用的磁盘空间进行配额限制，每一用户只能使用最大配额范围内的磁盘空间。</p>
<h1 id="2-案例"><a href="#2-案例" class="headerlink" title="2 案例"></a>2 案例</h1><p>公共共享文件夹限制用户上传文件占用空间；</p>
<h1 id="3-操作"><a href="#3-操作" class="headerlink" title="3 操作"></a>3 操作</h1><h2 id="3-1-第1步："><a href="#3-1-第1步：" class="headerlink" title="3.1 第1步："></a>3.1 第1步：</h2><p>在“<code>我的电脑</code>”窗口中右键单击共享文件夹所在的磁盘分区，选择“<code>属性</code>”快捷命令，打开磁盘属性对话框。然后切换到“<code>配额</code>”选项卡，保持“<code>启用配额管理</code>”和“<code>拒绝将磁盘空间给超过配额限制的用户</code>”复选框的选中状态。另外建议选中“<code>用户超出配额限制时记录事件</code>”和“<code>用户超过警告等级时记录事件</code>”两个复选框，以便将配额告警记录到日志中。接着单击“<code>配额项</code>”按钮。<br><img src="1.png" alt="enter description here"></p>
<h2 id="3-2-第2步："><a href="#3-2-第2步：" class="headerlink" title="3.2 第2步："></a>3.2 第2步：</h2><p>打开“<code>本地磁盘的配额项</code>”窗口，依次单击“<code>配额</code>”→“<code>新建配额项</code>”菜单命令，在打开的“<code>选择用户</code>”对话框中查找并选中目标用户并单击“<code>确定</code>”按钮。<br><img src="2.png" alt="enter description here"></p>
<h2 id="3-3-第3步"><a href="#3-3-第3步" class="headerlink" title="3.3 第3步:"></a>3.3 第3步:</h2><p>在打开的“<code>添加新配额项</code>”对话框中选中“<code>将磁盘空间限制为</code>”单选框，并设置空间大小为100MB。接着在“<code>将警告等级设置为</code>”编辑框中设置空间大小为95MB。最后单击“<code>确定</code>”按钮使设置生效。</p>
<h2 id="3-4-第4步"><a href="#3-4-第4步" class="headerlink" title="3.4 第4步:"></a>3.4 第4步:</h2><p>返回“<code>本地磁盘的配额项</code>”窗口，重复上述步骤针对其他用户新建配额项，设置完毕关闭该窗口，返回“<code>本地磁盘 属性</code>”对话框后单击“<code>确定</code>”按钮。设置配额项的用户只能使用规定容量以内的磁盘空间。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>基础运维</tag>
      </tags>
  </entry>
  <entry>
    <title>openvpn+squid搭建通过http代理访问openvpn服务器</title>
    <url>/2018/08/30/openvpn-squid%E6%90%AD%E5%BB%BA%E9%80%9A%E8%BF%87http%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEopenvpn%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境："><a href="#1-环境：" class="headerlink" title="1 环境："></a>1 环境：</h1><p>OS : Centos 7.2 x86_64</p>
<h1 id="2-Squid部署"><a href="#2-Squid部署" class="headerlink" title="2 Squid部署"></a>2 Squid部署</h1><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> ~]<span class="comment"># yum install squid</span></span><br></pre></td></tr></table></figure>
<h2 id="2-1-编辑配置文件"><a href="#2-1-编辑配置文件" class="headerlink" title="2.1 编辑配置文件"></a>2.1 编辑配置文件</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> ~]<span class="comment"># vim /etc/squid/squid.conf</span></span><br></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Recommended minimum configuration:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example rule allowing access from your local networks.</span></span><br><span class="line"><span class="comment"># Adapt to list your (internal) IP networks from where browsing</span></span><br><span class="line"><span class="comment"># should be allowed</span></span><br><span class="line">acl <span class="literal">all</span> src <span class="literal">all</span>                      <span class="comment">#添加允许所有IP地址访问</span></span><br><span class="line">acl localnet src <span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">8</span>	<span class="comment"># RFC1918 possible internal network</span></span><br><span class="line">acl localnet src <span class="number">172.16</span>.<span class="number">0.0</span>/<span class="number">12</span>	<span class="comment"># RFC1918 possible internal network</span></span><br><span class="line">acl localnet src <span class="number">192.168</span>.<span class="number">0.0</span>/<span class="number">16</span>	<span class="comment"># RFC1918 possible internal network</span></span><br><span class="line">acl localnet src fc00::/<span class="number">7</span>       <span class="comment"># RFC 4193 local private network range</span></span><br><span class="line">acl localnet src fe80::/<span class="number">10</span>      <span class="comment"># RFC 4291 link-local (directly plugged) machines</span></span><br><span class="line"></span><br><span class="line">acl SSL_ports <span class="keyword">port</span> <span class="number">443</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">80</span>		<span class="comment"># http</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">21</span>		<span class="comment"># ftp</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">443</span>		<span class="comment"># https</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">70</span>		<span class="comment"># gopher</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">210</span>		<span class="comment"># wais</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">1025</span>-<span class="number">65535</span>	<span class="comment"># unregistered ports</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">280</span>		<span class="comment"># http-mgmt</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">488</span>		<span class="comment"># gss-http</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">591</span>		<span class="comment"># filemaker</span></span><br><span class="line">acl Safe_ports <span class="keyword">port</span> <span class="number">777</span>		<span class="comment"># multiling http</span></span><br><span class="line">acl CONNECT method CONNECT</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Recommended minimum Access Permission configuration:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Deny requests to certain unsafe ports</span></span><br><span class="line">http_access allow !Safe_ports         <span class="comment">#</span></span><br><span class="line"><span class="comment"># Deny CONNECT to other than secure SSL ports</span></span><br><span class="line">http_access allow CONNECT !SSL_ports       <span class="comment">#设置允许所有SSL通过(不设置的话无法连接到http服务器)</span></span><br><span class="line"><span class="comment"># Only allow cachemgr access from localhost</span></span><br><span class="line">http_access allow localhost manager</span><br><span class="line">http_access allow manager</span><br><span class="line"></span><br><span class="line">access_log /var/<span class="keyword">log</span>/squid/access.<span class="keyword">log</span> combined</span><br><span class="line">cache_log /var/<span class="keyword">log</span>/squid/cache.<span class="keyword">log</span></span><br><span class="line"><span class="comment"># We strongly recommend the following be uncommented to protect innocent</span></span><br><span class="line"><span class="comment"># web applications running on the proxy server who think the only</span></span><br><span class="line"><span class="comment"># one who can access services on "localhost" is a local user</span></span><br><span class="line"><span class="comment">#http_access deny to_localhost</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example rule allowing access from your local networks.</span></span><br><span class="line"><span class="comment"># Adapt localnet in the ACL section to list your (internal) IP networks</span></span><br><span class="line"><span class="comment"># from where browsing should be allowed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># And finally deny all other access to this proxy</span></span><br><span class="line">http_access allow <span class="literal">all</span>                <span class="comment">#修改允许所有人使用该代理.因为这里是代理加速web服务器</span></span><br><span class="line">http_reply_access allow <span class="literal">all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Squid normally listens to port 3128</span></span><br><span class="line"><span class="comment">#http_port 3128</span></span><br><span class="line">http_port <span class="number">4346</span>                    <span class="comment">#修改默认监听端口，即代理端口。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment and adjust the following to add a disk cache directory.</span></span><br><span class="line"><span class="comment">#cache_dir ufs /var/spool/squid 100 16 256</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Leave coredumps in the first cache dir</span></span><br><span class="line">coredump_dir /var/spool/squid</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add any of your own refresh_pattern entries above these.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">refresh_pattern ^ftp:		<span class="number">1440</span>	<span class="number">20</span>%	<span class="number">10080</span></span><br><span class="line">refresh_pattern ^gopher:	<span class="number">1440</span>	<span class="number">0</span>%	<span class="number">1440</span></span><br><span class="line">refresh_pattern -i (/cgi-bin/|\?) <span class="number">0</span>	<span class="number">0</span>%	<span class="number">0</span></span><br><span class="line">refresh_pattern .		<span class="number">0</span>	<span class="number">20</span>%	<span class="number">4320</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-启动squid及设置开机启动"><a href="#2-2-启动squid及设置开机启动" class="headerlink" title="2.2 启动squid及设置开机启动"></a>2.2 启动squid及设置开机启动</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> ~]<span class="comment"># systemctl start squid.service</span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@bogon</span> ~]<span class="comment"># systemctl enable squid.service</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-openvpn客户端配置proxy"><a href="#2-3-openvpn客户端配置proxy" class="headerlink" title="2.3 openvpn客户端配置proxy"></a>2.3 openvpn客户端配置proxy</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sample client-side OpenVPN 2.0 config file <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> connecting to multi-client server.     <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">                                            <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This configuration can be used by multiple <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> clients, however each client should have   <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> its own cert and key files.                <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">                                            <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On Windows, you might want to rename this  <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> file so it has a .ovpn extension           <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specify that we are a client and that we</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> will be pulling certain config file directives</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> from the server.</span></span><br><span class="line">client</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use the same setting as you are using on</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the server.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On most systems, the VPN will not <span class="keyword">function</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unless you partially or fully <span class="built_in">disable</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the firewall <span class="keyword">for</span> the TUN/TAP interface.</span></span><br><span class="line">;dev tap</span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Windows needs the TAP-Win32 adapter name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> from the Network Connections panel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> you have more than one.  On XP SP2,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> you may need to <span class="built_in">disable</span> the firewall</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> the TAP adapter.</span></span><br><span class="line">;dev-node MyTap</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Are we connecting to a TCP or</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> UDP server?  Use the same setting as</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> on the server.</span></span><br><span class="line">proto tcp</span><br><span class="line">;proto udp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The hostname/IP and port of the server.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can have multiple remote entries</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to load balance between the servers.</span></span><br><span class="line">;remote 172.20.20.25 1194</span><br><span class="line">remote openvpn服务器地址或域名 1194</span><br><span class="line">;remote my-server-2 1194</span><br><span class="line"></span><br><span class="line">;http-proxy vpnproxy.dealeasy.com 4346</span><br><span class="line">http-proxy squid服务器地址 4346            #添加http代理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Choose a random host from the remote</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> list <span class="keyword">for</span> load-balancing.  Otherwise</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> try hosts <span class="keyword">in</span> the order specified.</span></span><br><span class="line">;remote-random</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Keep trying indefinitely to resolve the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> host name of the OpenVPN server.  Very useful</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> on machines <span class="built_in">which</span> are not permanently connected</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to the internet such as laptops.</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Most clients don<span class="string">'t need to bind to</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a specific <span class="built_in">local</span> port number.</span></span><br><span class="line">nobind</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Downgrade privileges after initialization (non-Windows only)</span></span><br><span class="line">;user nobody</span><br><span class="line">;group nobody</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try to preserve some state across restarts.</span></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you are connecting through an</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> HTTP proxy to reach the actual OpenVPN</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> server, put the proxy server/IP and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> port number here.  See the man page</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> your proxy server requires</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> authentication.</span></span><br><span class="line">;http-proxy-retry # retry on connection failures</span><br><span class="line">;http-proxy [proxy server] [proxy port #]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Wireless networks often produce a lot</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> of duplicate packets.  Set this flag</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to silence duplicate packet warnings.</span></span><br><span class="line">;mute-replay-warnings</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> SSL/TLS parms.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See the server config file <span class="keyword">for</span> more</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description.  It<span class="string">'s best to use</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a separate .crt/.key file pair</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> each client.  A single ca</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> file can be used <span class="keyword">for</span> all clients.</span></span><br><span class="line">ca ca.crt</span><br><span class="line"><span class="meta">#</span><span class="bash">cert client.crt</span></span><br><span class="line"><span class="meta">#</span><span class="bash">key client.key</span></span><br><span class="line"></span><br><span class="line">auth-user-pass</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Verify server certificate by checking that the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> certicate has the correct key usage <span class="built_in">set</span>.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is an important precaution to protect against</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a potential attack discussed here:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  http://openvpn.net/howto.html<span class="comment">#mitm</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To use this feature, you will need to generate</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> your server certificates with the keyUsage <span class="built_in">set</span> to</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   digitalSignature, keyEncipherment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and the extendedKeyUsage to</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   serverAuth</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> EasyRSA can <span class="keyword">do</span> this <span class="keyword">for</span> you.</span></span><br><span class="line">remote-cert-tls server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If a tls-auth key is used on the server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">then</span> every client must also have the key.</span></span><br><span class="line">;tls-auth ta.key 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Select a cryptographic cipher.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If the cipher option is used on the server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">then</span> you must also specify it here.</span></span><br><span class="line">;cipher x</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Enable compression on the VPN link.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Don<span class="string">'t enable this unless it is also</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> enabled <span class="keyword">in</span> the server config file.</span></span><br><span class="line">comp-lzo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set <span class="built_in">log</span> file verbosity.</span></span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Silence repeating messages</span></span><br><span class="line">;mute 20</span><br></pre></td></tr></table></figure>
<p>现在可以通过http代理连接VPN服务器。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>openvpn</tag>
        <tag>squid</tag>
        <tag>vpn</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix监控VMware</title>
    <url>/2018/08/30/zabbix%E7%9B%91%E6%8E%A7VMware/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><p>Centos 7.2</p>
<p>Zabbix 3.0</p>
<p>VMware 5.5/6.0</p>
<h1 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2 步骤"></a>2 步骤</h1><h2 id="2-1-修改配置文件"><a href="#2-1-修改配置文件" class="headerlink" title="2.1 修改配置文件"></a>2.1 修改配置文件</h2><ol>
<li>修改zabbix server配置文件</li>
</ol>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/zabbix/zabbix_server.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>添加如下内容</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">StartVMwareCollectors=5</span><br><span class="line"></span><br><span class="line">VMwareFrequency=60</span><br><span class="line"></span><br><span class="line">VMwareCacheSize=8M</span><br></pre></td></tr></table></figure>
<blockquote>
<p>StartVMwareCollectors=5  #预启动的VMware数据采集线程数量，值范围：0~250</p>
<p>VMwareFrequency=60     #VMware的数据检测缓存大小，值范围：256K~2G</p>
<p>VMwareCacheSize=8M     #数据采集的频率，值范围：10~86400</p>
</blockquote>
<ol start="2">
<li>重启zabbix—server服务</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">service zabbix-<span class="built_in">server</span> restart</span><br></pre></td></tr></table></figure>
<h2 id="2-2-添加VM主机监控"><a href="#2-2-添加VM主机监控" class="headerlink" title="2.2 添加VM主机监控"></a>2.2 添加VM主机监控</h2><ol>
<li>添加主机<br>网上很多教程都说端口改为80,但我改成80后无法获取到数据，但使用10050端口可以获取到（默认VMware无需安装agent）</li>
</ol>
<ol start="2">
<li>添加模版</li>
</ol>
<ol start="3">
<li>添加宏</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="variable">$PASSWORD</span>&#125;                  <span class="comment">#连接VMware的用户密码</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="variable">$URL</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#固定格式：`https://IP/sdk `    网页访问地址错误，`curl -I -k https://192.168.0.19/sdk `测试 没问题</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="variable">$USERNAME</span>&#125;                <span class="comment">#连接VMware的用户，默认root或administrator</span></span><br></pre></td></tr></table></figure>
<p>过一会就可以看到自动检测到的虚拟主机了，自动匹配监控项，<code>**图形需要自行创建**</code>。</p>
]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>workpress编辑器插件UEditor</title>
    <url>/2018/08/30/workpress%E7%BC%96%E8%BE%91%E5%99%A8%E6%8F%92%E4%BB%B6UEditor/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="百度UEditor-KityFormula-for-wordpress-2-0-2发布"><a href="#百度UEditor-KityFormula-for-wordpress-2-0-2发布" class="headerlink" title="百度UEditor-KityFormula for wordpress 2.0.2发布"></a>百度UEditor-KityFormula for wordpress 2.0.2发布</h1><p>自从UEditor-KityFormula-for-wordpress 2.0.1版本发布以来，用户反应较好，对某些使用者提出的没有百度地图、google地图及iframe,2.0.2版本进行了补充。现已发布，不过谷歌地图由于某些原因(被墙)，国内用不了，需要使用vpn，建议使用百度地图。</p>
<h2 id="更新说明："><a href="#更新说明：" class="headerlink" title="更新说明："></a>更新说明：</h2><p>应网友的要求，添加了百度地图、谷歌地图及iframe,属于小版本升级。</p>
<h2 id="wordpress版本要求"><a href="#wordpress版本要求" class="headerlink" title="wordpress版本要求"></a>wordpress版本要求</h2><p>wordpress 4.3+</p>
<h2 id="安装说明："><a href="#安装说明：" class="headerlink" title="安装说明："></a>安装说明：</h2><p>下载 zip版本，直接使用插件-&gt;安装插件-&gt;上传-&gt;启用插件 。</p>
<h2 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h2><p>A: 插件地址：<a href="http://www.yangshengliang.com/kaiyuan-shijie/zuopin/399.html" target="_blank" rel="noopener">http://www.yangshengliang.com/kaiyuan-shijie/zuopin/399.html</a>  </p>
<p>B: 插件地址：<a href="http://www.geroro.com/archives/258" target="_blank" rel="noopener">http://www.geroro.com/archives/258</a> </p>
<p>解压缩包到wordpress插件文件夹。最终的路径像这样：/wp-content/plugins/UEditor-KityFormula，也可以直接在后台通过插件上传进行安装。</p>
<p><strong>附件：</strong></p>
<p>A:全屏左菜单栏遮挡   =<a href="UEditor-KityFormula-for-wordpress.zip">UEditor-KityFormula-for-wordpress.zip</a></p>
<p>B:较好，不全屏使用较好。=<a href="ueditor1.4.3.3forwordpress4.6.1.zip">ueditor1.4.3.3forwordpress4.6.1.zip</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>workpress</tag>
      </tags>
  </entry>
  <entry>
    <title>Openvpn基于LDAP认证下进行包过滤（控制访问权限）</title>
    <url>/2018/08/31/Openvpn%E5%9F%BA%E4%BA%8ELDAP%E8%AE%A4%E8%AF%81%E4%B8%8B%E8%BF%9B%E8%A1%8C%E5%8C%85%E8%BF%87%E6%BB%A4-%E6%8E%A7%E5%88%B6%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h1 id="1-说明"><a href="#1-说明" class="headerlink" title="1 说明"></a>1 说明</h1><a id="more"></a>
<blockquote>
<p>方案：采用minimal_pf.so模块和包过滤</p>
<p>此方法同样适用于基本认证。<br><!--more--><br>参考资料：<br><a href="http://backreference.org/2010/06/18/openvpns-built-in-packet-filter/" target="_blank" rel="noopener">http://backreference.org/2010/06/18/openvpns-built-in-packet-filter/</a></p>
</blockquote>
<p><a href="http://732233048.blog.51cto.com/9323668/1713088" target="_blank" rel="noopener">http://732233048.blog.51cto.com/9323668/1713088</a></p>
<p><a href="https://blog.51cto.com/5766902/2132706?source=dra" target="_blank" rel="noopener">https://blog.51cto.com/5766902/2132706?source=dra</a></p>
<h1 id="2-安装openvpn及设置LDAP认证"><a href="#2-安装openvpn及设置LDAP认证" class="headerlink" title="2 安装openvpn及设置LDAP认证"></a>2 安装openvpn及设置LDAP认证</h1><p>详细步骤参考本站 <strong>openvpn部署之部署基于ad域认证访问内网</strong></p>
<h1 id="3-控制访问权限"><a href="#3-控制访问权限" class="headerlink" title="3 控制访问权限"></a>3 控制访问权限</h1><h2 id="3-1-创建及编辑minimal-pf-c模块"><a href="#3-1-创建及编辑minimal-pf-c模块" class="headerlink" title="3.1 创建及编辑minimal_pf.c模块"></a>3.1 创建及编辑minimal_pf.c模块</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@openvpn</span> ~]<span class="comment"># cd /etc/openvpn/</span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@openvpn</span> openvpn]<span class="comment"># vim minimal_pf.so</span></span><br></pre></td></tr></table></figure>
<p>键入以下内容（内容固定）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* minimal_pf.c </span></span><br><span class="line"><span class="comment"> * ultra-minimal OpenVPN plugin to enable internal packet filter */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/openvpn-plugin.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* dummy context, as we need no state */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">plugin_context</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> dummy;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Initialization function */</span></span><br><span class="line"><span class="function">OPENVPN_EXPORT openvpn_plugin_handle_t <span class="title">openvpn_plugin_open_v1</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *type_mask, <span class="keyword">const</span> <span class="keyword">char</span> *argv[], <span class="keyword">const</span> <span class="keyword">char</span> *envp[])</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">plugin_context</span> *<span class="title">context</span>;</span></span><br><span class="line">  <span class="comment">/* Allocate our context */</span></span><br><span class="line">  context = (struct plugin_context *) <span class="built_in">calloc</span> (<span class="number">1</span>, <span class="keyword">sizeof</span> (struct plugin_context));</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Which callbacks to intercept. */</span></span><br><span class="line">  *type_mask = OPENVPN_PLUGIN_MASK (OPENVPN_PLUGIN_ENABLE_PF);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">openvpn_plugin_handle_t</span>) context;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Worker function */</span></span><br><span class="line"><span class="function">OPENVPN_EXPORT <span class="keyword">int</span> <span class="title">openvpn_plugin_func_v2</span> <span class="params">(<span class="keyword">openvpn_plugin_handle_t</span> handle,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">int</span> type,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">char</span> *argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">char</span> *envp[],</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">void</span> *per_client_context,</span></span></span><br><span class="line"><span class="function"><span class="params">            struct openvpn_plugin_string_list **return_list)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> (type == OPENVPN_PLUGIN_ENABLE_PF) &#123;</span><br><span class="line">    <span class="keyword">return</span> OPENVPN_PLUGIN_FUNC_SUCCESS;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* should not happen! */</span></span><br><span class="line">    <span class="keyword">return</span> OPENVPN_PLUGIN_FUNC_ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Cleanup function */</span></span><br><span class="line"><span class="function">OPENVPN_EXPORT <span class="keyword">void</span> <span class="title">openvpn_plugin_close_v1</span> <span class="params">(<span class="keyword">openvpn_plugin_handle_t</span> handle)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">plugin_context</span> *<span class="title">context</span> = (<span class="title">struct</span> <span class="title">plugin_context</span> *) <span class="title">handle</span>;</span></span><br><span class="line">  <span class="built_in">free</span> (context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-构建插件"><a href="#3-2-构建插件" class="headerlink" title="3.2 构建插件"></a>3.2 构建插件</h2><p>下载并解压OpenVPN源码压缩包（严格来说，只需要openvpn-plugin.h）</p>
<p>openvpn源码安装包：<code>openvpn-2.3.11.tar.gz  ，解压文件，复制</code>include<code>目录到</code>/etc/openvpn`</p>
<p>并使用以下命令构建插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INCLUDE=<span class="string">"-I/etc/openvpn"</span>         <span class="comment"># CHANGE THIS!!!!</span></span><br><span class="line">CC_FLAGS=<span class="string">"-O2 -Wall -g"</span></span><br><span class="line">NAME=minimal_pf</span><br><span class="line">gcc <span class="variable">$CC_FLAGS</span> -fPIC -c <span class="variable">$INCLUDE</span> <span class="variable">$NAME</span>.c &amp;&amp; \</span><br><span class="line">gcc <span class="variable">$CC_FLAGS</span> -fPIC -shared -Wl,-soname,<span class="variable">$NAME</span>.so -o <span class="variable">$NAME</span>.so <span class="variable">$NAME</span>.o -lc</span><br></pre></td></tr></table></figure>
<h2 id="3-3-创建包过滤文件"><a href="#3-3-创建包过滤文件" class="headerlink" title="3.3 创建包过滤文件"></a>3.3 创建包过滤文件</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mkdir <span class="string">/etc/openvpn/ccd</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/etc/openvpn/ccd</span></span><br></pre></td></tr></table></figure>
<p>创建以<code>用户名.pf</code>命名的文件，输入以下内容。</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">vi client1.pf             #客户client1，只对<span class="number">10.10.1.0</span>网段有权限</span><br><span class="line"><span class="string">[CLIENTS ACCEPT]</span></span><br><span class="line"><span class="string">[SUBNETS DROP]</span></span><br><span class="line">+<span class="number">10.10.1.0</span>/<span class="number">24</span></span><br><span class="line"><span class="string">[END]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vi client.pf              #客户client，对所有内网服务器都有权限</span><br><span class="line"><span class="string">[CLIENTS ACCEPT]</span></span><br><span class="line"><span class="string">[SUBNETS ACCEPT]</span></span><br><span class="line"><span class="string">[END]</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3-1-包过滤文件补充"><a href="#3-3-1-包过滤文件补充" class="headerlink" title="3.3.1 包过滤文件补充"></a>3.3.1 包过滤文件补充</h3><p>包过滤文件格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[CLIENTS <span class="keyword">DROP</span>|<span class="keyword">ACCEPT</span>]</span><br><span class="line">&#123;+|-&#125;common_name1</span><br><span class="line">&#123;+|-&#125;common_name2</span><br><span class="line"> . . .</span><br><span class="line">[SUBNETS <span class="keyword">DROP</span>|<span class="keyword">ACCEPT</span>]</span><br><span class="line">&#123;+|-&#125;subnet1</span><br><span class="line">&#123;+|-&#125;subnet2</span><br><span class="line"> . . .</span><br><span class="line">[<span class="keyword">END</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">过滤文件语法：</span><br><span class="line">CLIENTS部分用于定义common <span class="keyword">name</span>；</span><br><span class="line">SUBNETS部分用于定义IP地址、IP网段；</span><br><span class="line"><span class="keyword">DROP</span>|<span class="keyword">ACCEPT</span>用于设置默认规则，就是没有明确指明的common <span class="keyword">name</span>，那么他们将会使用；</span><br><span class="line">&#123;+|-&#125;用于设置是否允许，如果是“+”，那么表示允许，如果是“-”则表示不允许；</span><br><span class="line">[<span class="keyword">END</span>]表示策略文件的结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat client10.pf</span><br><span class="line">[CLIENTS <span class="keyword">ACCEPT</span>]</span><br><span class="line">[SUBNETS <span class="keyword">ACCEPT</span>]</span><br><span class="line"><span class="number">-192.168</span><span class="number">.9</span><span class="number">.7</span></span><br><span class="line">+<span class="number">192.168</span><span class="number">.9</span><span class="number">.0</span>/<span class="number">24</span></span><br><span class="line">[<span class="keyword">END</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意事项：</p>
<p>创建过滤文件时，允许访问的地址写到上面，禁止访问的地址写在后面。如果先禁止访问网段，在允许访问网段IP地址，依然受限。</p>
<p>例如：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openvpn基于LDAP认证下进行包过滤（控制访问权限）/1571817616292.png" alt="图1"></p>
</blockquote>
<h2 id="3-4-创建客户端连接脚本"><a href="#3-4-创建客户端连接脚本" class="headerlink" title="3.4 创建客户端连接脚本"></a>3.4 创建客户端连接脚本</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/openvpn</span><br><span class="line"></span><br><span class="line"><span class="keyword">vim</span> client-connect.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># /etc/openvpn/client-connect.sh: sample client-connect script using pf rule files</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># rules template file</span></span><br><span class="line">template=<span class="string">"/etc/openvpn/ccd/<span class="variable">$&#123;common_name&#125;</span>.pf"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># create the file OpenVPN wants with the rules for this client</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$template</span>"</span> ] &amp;&amp; [ ! -z <span class="string">"<span class="variable">$pf_file</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  cp -- <span class="string">"<span class="variable">$template</span>"</span> <span class="string">"<span class="variable">$pf_file</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="comment"># if anything is not as expected, fail</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h2 id="3-5-修改openvpn配置文件"><a href="#3-5-修改openvpn配置文件" class="headerlink" title="3.5 修改openvpn配置文件"></a>3.5 修改openvpn配置文件</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/openvpn/server.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">ca /etc/openvpn/easy-rsa/keys/ca.crt</span><br><span class="line">cert /etc/openvpn/easy-rsa/keys/server.crt</span><br><span class="line"><span class="built_in">key</span> /etc/openvpn/easy-rsa/keys/server.<span class="built_in">key</span></span><br><span class="line">dh /etc/openvpn/easy-rsa/keys/dh2048.pem</span><br><span class="line">server <span class="number">10.8</span>.0.0 <span class="number">255.255</span>.255.0</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line">;server-bridge <span class="number">10.8</span>.0.4 <span class="number">255.255</span>.255.0 <span class="number">10.8</span>.0.50 <span class="number">10.8</span>.0.100</span><br><span class="line">;<span class="built_in">push</span> <span class="string">"redirect-gateway def1 bypass-dhcp"</span></span><br><span class="line">;<span class="built_in">push</span> <span class="string">"redirect-gateway"</span></span><br><span class="line">;<span class="built_in">push</span> <span class="string">"dhcp-option DNS 172.20.20.10"</span></span><br><span class="line">;<span class="built_in">push</span> <span class="string">"dhcp-option DNS 202.102.224.68"</span></span><br><span class="line">;<span class="built_in">push</span> <span class="string">"route 0.0.0.0 0.0.0.0"</span></span><br><span class="line"><span class="built_in">push</span> <span class="string">"route 172.20.20.0 255.255.255.0"</span></span><br><span class="line"><span class="built_in">push</span> <span class="string">"route 172.20.22.0 255.255.255.0"</span></span><br><span class="line"><span class="built_in">push</span> <span class="string">"route 172.20.10.0 255.255.255.0"</span></span><br><span class="line"><span class="built_in">push</span> <span class="string">"route 172.20.19.0 255.255.255.0"</span></span><br><span class="line"><span class="built_in">push</span> <span class="string">"route 10.224.255.224 255.255.255.224"</span></span><br><span class="line">;<span class="built_in">push</span> <span class="string">"route 172.20.18.0 255.255.255.0"</span></span><br><span class="line">;<span class="built_in">push</span> <span class="string">"route 172.20.17.0 255.255.255.0"</span></span><br><span class="line">;<span class="built_in">push</span> <span class="string">"dhcp-option DNS 172.20.20.10"</span></span><br><span class="line">;<span class="built_in">push</span> <span class="string">"dhcp-option DNS 202.102.224.68"</span></span><br><span class="line">client-to-client</span><br><span class="line">duplicate-cn</span><br><span class="line">keepalive <span class="number">10</span> <span class="number">120</span></span><br><span class="line">#tls-auth /etc/openvpn/easy-rsa/ta.<span class="built_in">key</span> <span class="number">0</span></span><br><span class="line">comp-lzo</span><br><span class="line"><span class="built_in">max</span>-clients <span class="number">10</span></span><br><span class="line">persist-<span class="built_in">key</span></span><br><span class="line">persist-tun</span><br><span class="line"><span class="built_in">status</span> openvpn-<span class="built_in">status</span>.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">log</span>        /<span class="built_in">var</span>/<span class="built_in">log</span>/openvpn.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">log</span>-<span class="built_in">append</span> /<span class="built_in">var</span>/<span class="built_in">log</span>/openvpn-<span class="built_in">append</span>.<span class="built_in">log</span></span><br><span class="line">verb <span class="number">3</span></span><br><span class="line">plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so <span class="string">"/etc/openvpn/auth/ldap.conf"</span></span><br><span class="line">client-cert-<span class="keyword">not</span>-required</span><br><span class="line">username-as-common-name                     # 添加    </span><br><span class="line">client-config-dir /etc/openvpn/ccd          #添加</span><br><span class="line">plugin /etc/openvpn/minimal_pf.so           #添加                        </span><br><span class="line">client-connect /etc/openvpn/client-connect.sh       #添加</span><br><span class="line">script-security <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>例子：</strong><br><figure class="highlight pf.conf"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="comment"># Sample OpenVPN 2.0 config file for            #</span></span><br><span class="line"><span class="comment"># multi-client server.                          #</span></span><br><span class="line"><span class="comment">#                                               #</span></span><br><span class="line"><span class="comment"># This file is for the server side              #</span></span><br><span class="line"><span class="comment"># of a many-clients &lt;-&gt; one-server              #</span></span><br><span class="line"><span class="comment"># OpenVPN configuration.                        #</span></span><br><span class="line"><span class="comment">#                                               #</span></span><br><span class="line"><span class="comment"># OpenVPN also supports                         #</span></span><br><span class="line"><span class="comment"># single-machine &lt;-&gt; single-machine             #</span></span><br><span class="line"><span class="comment"># configurations (See the Examples page         #</span></span><br><span class="line"><span class="comment"># on the web site for more info).               #</span></span><br><span class="line"><span class="comment">#                                               #</span></span><br><span class="line"><span class="comment"># This config should work on Windows            #</span></span><br><span class="line"><span class="comment"># or Linux/BSD systems.  Remember on            #</span></span><br><span class="line"><span class="comment"># Windows to quote pathnames and use            #</span></span><br><span class="line"><span class="comment"># double backslashes, e.g.:                     #</span></span><br><span class="line"><span class="comment"># "C:\\Program Files\\OpenVPN\\config\\foo.key" #</span></span><br><span class="line"><span class="comment">#                                               #</span></span><br><span class="line"><span class="comment"># Comments are preceded with '#' or ';'         #</span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Which local IP address should OpenVPN</span></span><br><span class="line"><span class="comment"># listen on? (optional)</span></span><br><span class="line">;local a.b.c.d</span><br><span class="line"><span class="comment"># Which TCP/UDP port should OpenVPN listen on?</span></span><br><span class="line"><span class="comment"># If you want to run multiple OpenVPN instances</span></span><br><span class="line"><span class="comment"># on the same machine, use a different port</span></span><br><span class="line"><span class="comment"># number for each one.  You will need to</span></span><br><span class="line"><span class="comment"># open up this port on your firewall.</span></span><br><span class="line"><span class="keyword">port</span> <span class="number">1194</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP or UDP server?</span></span><br><span class="line"><span class="comment"># ;proto tcp</span></span><br><span class="line"><span class="comment"># proto udp</span></span><br><span class="line"><span class="keyword">proto</span> tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># "dev tun" will create a routed IP tunnel,</span></span><br><span class="line"><span class="comment"># "dev tap" will create an ethernet tunnel.</span></span><br><span class="line"><span class="comment"># Use "dev tap0" if you are ethernet bridging</span></span><br><span class="line"><span class="comment"># and have precreated a tap0 virtual interface</span></span><br><span class="line"><span class="comment"># and bridged it with your ethernet interface.</span></span><br><span class="line"><span class="comment"># If you want to control access policies</span></span><br><span class="line"><span class="comment"># over the VPN, you must create firewall</span></span><br><span class="line"><span class="comment"># rules for the the TUN/TAP interface.</span></span><br><span class="line"><span class="comment"># On non-Windows systems, you can give</span></span><br><span class="line"><span class="comment"># an explicit unit number, such as tun0.</span></span><br><span class="line"><span class="comment"># On Windows, use "dev-node" for this.</span></span><br><span class="line"><span class="comment"># On most systems, the VPN will not function</span></span><br><span class="line"><span class="comment"># unless you partially or fully disable</span></span><br><span class="line"><span class="comment"># the firewall for the TUN/TAP interface.</span></span><br><span class="line"><span class="comment"># ;dev tap</span></span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows needs the TAP-Win32 adapter name</span></span><br><span class="line"><span class="comment"># from the Network Connections panel if you</span></span><br><span class="line"><span class="comment"># have more than one.  On XP SP2 or higher,</span></span><br><span class="line"><span class="comment"># you may need to selectively disable the</span></span><br><span class="line"><span class="comment"># Windows firewall for the TAP adapter.</span></span><br><span class="line"><span class="comment"># Non-Windows systems usually don't need this.</span></span><br><span class="line">;dev-node MyTap</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSL/TLS root certificate (ca), certificate</span></span><br><span class="line"><span class="comment"># (cert), and private key (key).  Each client</span></span><br><span class="line"><span class="comment"># and the server must have their own cert and</span></span><br><span class="line"><span class="comment"># key file.  The server and all clients will</span></span><br><span class="line"><span class="comment"># use the same ca file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See the "easy-rsa" directory for a series</span></span><br><span class="line"><span class="comment"># of scripts for generating RSA certificates</span></span><br><span class="line"><span class="comment"># and private keys.  Remember to use</span></span><br><span class="line"><span class="comment"># a unique Common Name for the server</span></span><br><span class="line"><span class="comment"># and each of the client certificates.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Any X509 key management system can be used.</span></span><br><span class="line"><span class="comment"># OpenVPN can also use a PKCS #12 formatted key file</span></span><br><span class="line"><span class="comment"># (see "pkcs12" directive in man page).</span></span><br><span class="line">ca /etc/openvpn/server/ca.crt </span><br><span class="line">cert /etc/openvpn/server/server.crt</span><br><span class="line">key /etc/openvpn/server/server.key  </span><br><span class="line"><span class="comment"># This file should be kept secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Diffie hellman parameters.</span></span><br><span class="line"><span class="comment"># Generate your own with:</span></span><br><span class="line"><span class="comment">#   openssl dhparam -out dh2048.pem 2048</span></span><br><span class="line"><span class="comment"># dh dh2048.pem</span></span><br><span class="line">dh /etc/openvpn/server/dh.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># Network topology</span></span><br><span class="line"><span class="comment"># Should be subnet (addressing via IP)</span></span><br><span class="line"><span class="comment"># unless Windows clients v2.0.9 and lower have to</span></span><br><span class="line"><span class="comment"># be supported (then net30, i.e. a /30 per client)</span></span><br><span class="line"><span class="comment"># Defaults to net30 (not recommended)</span></span><br><span class="line">;topology subnet</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure server mode and supply a VPN subnet</span></span><br><span class="line"><span class="comment"># for OpenVPN to draw client addresses from.</span></span><br><span class="line"><span class="comment"># The server will take 10.8.0.1 for itself,</span></span><br><span class="line"><span class="comment"># the rest will be made available to clients.</span></span><br><span class="line"><span class="comment"># Each client will be able to reach the server</span></span><br><span class="line"><span class="comment"># on 10.8.0.1. Comment this line out if you are</span></span><br><span class="line"><span class="comment"># ethernet bridging. See the man page for more info.</span></span><br><span class="line">server <span class="number">10.8</span>.<span class="number">0.0</span> <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maintain a record of client &lt;-&gt; virtual IP address</span></span><br><span class="line"><span class="comment"># associations in this file.  If OpenVPN goes down or</span></span><br><span class="line"><span class="comment"># is restarted, reconnecting clients can be assigned</span></span><br><span class="line"><span class="comment"># the same virtual IP address from the pool that was</span></span><br><span class="line"><span class="comment"># previously assigned.</span></span><br><span class="line">ifconfig-pool-persist logs/ipp.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure server mode for ethernet bridging.</span></span><br><span class="line"><span class="comment"># You must first use your OS's bridging capability</span></span><br><span class="line"><span class="comment"># to bridge the TAP interface with the ethernet</span></span><br><span class="line"><span class="comment"># NIC interface.  Then you must manually set the</span></span><br><span class="line"><span class="comment"># IP/netmask on the bridge interface, here we</span></span><br><span class="line"><span class="comment"># assume 10.8.0.4/255.255.255.0.  Finally we</span></span><br><span class="line"><span class="comment"># must set aside an IP range in this subnet</span></span><br><span class="line"><span class="comment"># (start=10.8.0.50 end=10.8.0.100) to allocate</span></span><br><span class="line"><span class="comment"># to connecting clients.  Leave this line commented</span></span><br><span class="line"><span class="comment"># out unless you are ethernet bridging.</span></span><br><span class="line">;server-bridge <span class="number">10.8</span>.<span class="number">0.4</span> <span class="number">255.255</span>.<span class="number">255.0</span> <span class="number">10.8</span>.<span class="number">0.50</span> <span class="number">10.8</span>.<span class="number">0.100</span></span><br><span class="line"><span class="comment"># Configure server mode for ethernet bridging</span></span><br><span class="line"><span class="comment"># using a DHCP-proxy, where clients talk</span></span><br><span class="line"><span class="comment"># to the OpenVPN server-side DHCP server</span></span><br><span class="line"><span class="comment"># to receive their IP address allocation</span></span><br><span class="line"><span class="comment"># and DNS server addresses.  You must first use</span></span><br><span class="line"><span class="comment"># your OS's bridging capability to bridge the TAP</span></span><br><span class="line"><span class="comment"># interface with the ethernet NIC interface.</span></span><br><span class="line"><span class="comment"># Note: this mode only works on clients (such as</span></span><br><span class="line"><span class="comment"># Windows), where the client-side TAP adapter is</span></span><br><span class="line"><span class="comment"># bound to a DHCP client.</span></span><br><span class="line">;server-bridge</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push routes to the client to allow it</span></span><br><span class="line"><span class="comment"># to reach other private subnets behind</span></span><br><span class="line"><span class="comment"># the server.  Remember that these</span></span><br><span class="line"><span class="comment"># private subnets will also need</span></span><br><span class="line"><span class="comment"># to know to route the OpenVPN client</span></span><br><span class="line"><span class="comment"># address pool (10.8.0.0/255.255.255.0)</span></span><br><span class="line"><span class="comment"># back to the OpenVPN server.</span></span><br><span class="line">;push <span class="string">"route 192.168.10.0 255.255.255.0"</span></span><br><span class="line">;push <span class="string">"route 192.168.20.0 255.255.255.0"</span></span><br><span class="line">push <span class="string">"route 192.168.0.0 255.255.255.0"</span></span><br><span class="line">push <span class="string">"route 192.168.1.0 255.255.255.0"</span></span><br><span class="line"><span class="comment"># To assign specific IP addresses to specific</span></span><br><span class="line"><span class="comment"># clients or if a connecting client has a private</span></span><br><span class="line"><span class="comment"># subnet behind it that should also have VPN access,</span></span><br><span class="line"><span class="comment"># use the subdirectory "ccd" for client-specific</span></span><br><span class="line"><span class="comment"># configuration files (see man page for more info).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EXAMPLE: Suppose the client</span></span><br><span class="line"><span class="comment"># having the certificate common name "Thelonious"</span></span><br><span class="line"><span class="comment"># also has a small subnet behind his connecting</span></span><br><span class="line"><span class="comment"># machine, such as 192.168.40.128/255.255.255.248.</span></span><br><span class="line"><span class="comment"># First, uncomment out these lines:</span></span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route <span class="number">192.168</span>.<span class="number">40.128</span> <span class="number">255.255</span>.<span class="number">255.248</span></span><br><span class="line"><span class="comment"># Then create a file ccd/Thelonious with this line:</span></span><br><span class="line"><span class="comment">#   iroute 192.168.40.128 255.255.255.248</span></span><br><span class="line"><span class="comment"># This will allow Thelonious' private subnet to</span></span><br><span class="line"><span class="comment"># access the VPN.  This example will only work</span></span><br><span class="line"><span class="comment"># if you are routing, not bridging, i.e. you are</span></span><br><span class="line"><span class="comment"># using "dev tun" and "server" directives.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EXAMPLE: Suppose you want to give</span></span><br><span class="line"><span class="comment"># Thelonious a fixed VPN IP address of 10.9.0.1.</span></span><br><span class="line"><span class="comment"># First uncomment out these lines:</span></span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route <span class="number">10.9</span>.<span class="number">0.0</span> <span class="number">255.255</span>.<span class="number">255.252</span></span><br><span class="line"><span class="comment"># Then add this line to ccd/Thelonious:</span></span><br><span class="line"><span class="comment">#   ifconfig-push 10.9.0.1 10.9.0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Suppose that you want to enable different</span></span><br><span class="line"><span class="comment"># firewall access policies for different groups</span></span><br><span class="line"><span class="comment"># of clients.  There are two methods:</span></span><br><span class="line"><span class="comment"># (1) Run multiple OpenVPN daemons, one for each</span></span><br><span class="line"><span class="comment">#     group, and firewall the TUN/TAP interface</span></span><br><span class="line"><span class="comment">#     for each group/daemon appropriately.</span></span><br><span class="line"><span class="comment"># (2) (Advanced) Create a script to dynamically</span></span><br><span class="line"><span class="comment">#     modify the firewall in response to access</span></span><br><span class="line"><span class="comment">#     from different clients.  See man</span></span><br><span class="line"><span class="comment">#     page for more info on learn-address script.</span></span><br><span class="line">;learn-address ./script</span><br><span class="line"></span><br><span class="line"><span class="comment"># If enabled, this directive will configure</span></span><br><span class="line"><span class="comment"># all clients to redirect their default</span></span><br><span class="line"><span class="comment"># network gateway through the VPN, causing</span></span><br><span class="line"><span class="comment"># all IP traffic such as web browsing and</span></span><br><span class="line"><span class="comment"># and DNS lookups to go through the VPN</span></span><br><span class="line"><span class="comment"># (The OpenVPN server machine may need to NAT</span></span><br><span class="line"><span class="comment"># or bridge the TUN/TAP interface to the internet</span></span><br><span class="line"><span class="comment"># in order for this to work properly).</span></span><br><span class="line">;push <span class="string">"redirect-gateway def1 bypass-dhcp"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Certain Windows-specific network settings</span></span><br><span class="line"><span class="comment"># can be pushed to clients, such as DNS</span></span><br><span class="line"><span class="comment"># or WINS server addresses.  CAVEAT:</span></span><br><span class="line"><span class="comment"># http://openvpn.net/faq.html#dhcpcaveats</span></span><br><span class="line"><span class="comment"># The addresses below refer to the public</span></span><br><span class="line"><span class="comment"># DNS servers provided by opendns.com.</span></span><br><span class="line">;push <span class="string">"dhcp-option DNS 208.67.222.222"</span></span><br><span class="line">;push <span class="string">"dhcp-option DNS 208.67.220.220"</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 114.114.114.114"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment this directive to allow different</span></span><br><span class="line"><span class="comment"># clients to be able to "see" each other.</span></span><br><span class="line"><span class="comment"># By default, clients will only see the server.</span></span><br><span class="line"><span class="comment"># To force clients to only see the server, you</span></span><br><span class="line"><span class="comment"># will also need to appropriately firewall the</span></span><br><span class="line"><span class="comment"># server's TUN/TAP interface.</span></span><br><span class="line">client-to-client</span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment this directive if multiple clients</span></span><br><span class="line"><span class="comment"># might connect with the same certificate/key</span></span><br><span class="line"><span class="comment"># files or common names.  This is recommended</span></span><br><span class="line"><span class="comment"># only for testing purposes.  For production use,</span></span><br><span class="line"><span class="comment"># each client should have its own certificate/key</span></span><br><span class="line"><span class="comment"># pair.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IF YOU HAVE NOT GENERATED INDIVIDUAL</span></span><br><span class="line"><span class="comment"># CERTIFICATE/KEY PAIRS FOR EACH CLIENT,</span></span><br><span class="line"><span class="comment"># EACH HAVING ITS OWN UNIQUE "COMMON NAME",</span></span><br><span class="line"><span class="comment"># UNCOMMENT THIS LINE OUT.</span></span><br><span class="line">;duplicate-cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># The keepalive directive causes ping-like</span></span><br><span class="line"><span class="comment"># messages to be sent back and forth over</span></span><br><span class="line"><span class="comment"># the link so that each side knows when</span></span><br><span class="line"><span class="comment"># the other side has gone down.</span></span><br><span class="line"><span class="comment"># Ping every 10 seconds, assume that remote</span></span><br><span class="line"><span class="comment"># peer is down if no ping received during</span></span><br><span class="line"><span class="comment"># a 120 second time period.</span></span><br><span class="line">keepalive <span class="number">10</span> <span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For extra security beyond that provided</span></span><br><span class="line"><span class="comment"># by SSL/TLS, create an "HMAC firewall"</span></span><br><span class="line"><span class="comment"># to help block DoS attacks and UDP port flooding.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Generate with:</span></span><br><span class="line"><span class="comment">#   openvpn --genkey --secret ta.key</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The server and each client must have</span></span><br><span class="line"><span class="comment"># a copy of this key.</span></span><br><span class="line"><span class="comment"># The second parameter should be '0'</span></span><br><span class="line"><span class="comment"># on the server and '1' on the clients.</span></span><br><span class="line"><span class="comment"># tls-auth ta.key 0 # This file is secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Select a cryptographic cipher.</span></span><br><span class="line"><span class="comment"># This config item must be copied to</span></span><br><span class="line"><span class="comment"># the client config file as well.</span></span><br><span class="line"><span class="comment"># Note that v2.4 client/server will automatically</span></span><br><span class="line"><span class="comment"># negotiate AES-256-GCM in TLS mode.</span></span><br><span class="line"><span class="comment"># See also the ncp-cipher option in the manpage</span></span><br><span class="line">cipher AES-<span class="number">256</span>-CBC</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable compression on the VPN link and push the</span></span><br><span class="line"><span class="comment"># option to the client (v2.4+ only, for earlier</span></span><br><span class="line"><span class="comment"># versions see below)</span></span><br><span class="line">;compress lz4-v2</span><br><span class="line">;push <span class="string">"compress lz4-v2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For compression compatible with older clients use comp-lzo</span></span><br><span class="line"><span class="comment"># If you enable it here, you must also</span></span><br><span class="line"><span class="comment"># enable it in the client config file.</span></span><br><span class="line">comp-lzo</span><br><span class="line"></span><br><span class="line"><span class="comment"># The maximum number of concurrently connected</span></span><br><span class="line"><span class="comment"># clients we want to allow.</span></span><br><span class="line">;max-clients <span class="number">100</span></span><br><span class="line">max-clients <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It's a good idea to reduce the OpenVPN</span></span><br><span class="line"><span class="comment"># daemon's privileges after initialization.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can uncomment this out on</span></span><br><span class="line"><span class="comment"># non-Windows systems.</span></span><br><span class="line">;<span class="keyword">user</span> nobody</span><br><span class="line">;<span class="keyword">group</span> nobody</span><br><span class="line"></span><br><span class="line"><span class="comment"># The persist options will try to avoid</span></span><br><span class="line"><span class="comment"># accessing certain resources on restart</span></span><br><span class="line"><span class="comment"># that may no longer be accessible because</span></span><br><span class="line"><span class="comment"># of the privilege downgrade.</span></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output a short status file showing</span></span><br><span class="line"><span class="comment"># current connections, truncated</span></span><br><span class="line"><span class="comment"># and rewritten every minute.</span></span><br><span class="line">status logs/openvpn-status.<span class="keyword">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, log messages will go to the syslog (or</span></span><br><span class="line"><span class="comment"># on Windows, if running as a service, they will go to</span></span><br><span class="line"><span class="comment"># the "\Program Files\OpenVPN\log" directory).</span></span><br><span class="line"><span class="comment"># Use log or log-append to override this default.</span></span><br><span class="line"><span class="comment"># "log" will truncate the log file on OpenVPN startup,</span></span><br><span class="line"><span class="comment"># while "log-append" will append to it.  Use one</span></span><br><span class="line"><span class="comment"># or the other (but not both).</span></span><br><span class="line">;<span class="keyword">log</span>         openvpn.<span class="keyword">log</span></span><br><span class="line">;log-append  openvpn.<span class="keyword">log</span></span><br><span class="line"><span class="keyword">log</span> logs/openvpn.<span class="keyword">log</span></span><br><span class="line">log-append logs/openvpn-append.<span class="keyword">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the appropriate level of log</span></span><br><span class="line"><span class="comment"># file verbosity.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 0 is silent, except for fatal errors</span></span><br><span class="line"><span class="comment"># 4 is reasonable for general usage</span></span><br><span class="line"><span class="comment"># 5 and 6 can help to debug connection problems</span></span><br><span class="line"><span class="comment"># 9 is extremely verbose</span></span><br><span class="line">verb <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Silence repeating messages.  At most 20</span></span><br><span class="line"><span class="comment"># sequential messages of the same message</span></span><br><span class="line"><span class="comment"># category will be output to the log.</span></span><br><span class="line">;mute <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Notify the client that when the server restarts so it</span></span><br><span class="line"><span class="comment"># can automatically reconnect.</span></span><br><span class="line"><span class="comment"># explicit-exit-notify 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### LDAP认证</span></span><br><span class="line">plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so <span class="string">"/etc/openvpn/auth/ldap.conf"</span></span><br><span class="line"><span class="comment"># 关闭证书认证;不请求客户的CA证书，使用User/Pass验证</span></span><br><span class="line">client-cert-not-required </span><br><span class="line"></span><br><span class="line"><span class="comment">### 增加权限配置，包过滤规则(添加如下5项)</span></span><br><span class="line"><span class="comment">#添加,否则报错WARNING: External program may not be called unless '--script-security 2' or higher is enabled. See --help text or man page for detailed info.</span></span><br><span class="line">script-security <span class="number">3</span></span><br><span class="line"><span class="comment">#使用客户提供的UserName作为Common Name</span></span><br><span class="line">username-as-common-name               </span><br><span class="line">client-config-dir /etc/openvpn/ccd</span><br><span class="line">plugin /etc/openvpn/include/minimal_pf.so                       </span><br><span class="line">client-connect /etc/openvpn/include/client-connect.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="3-6-重启openvpn服务器"><a href="#3-6-重启openvpn服务器" class="headerlink" title="3.6 重启openvpn服务器"></a>3.6 重启openvpn服务器</h2><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">/etc/init.d/openvpn <span class="built_in">restart</span></span><br></pre></td></tr></table></figure>
<p>配置完成。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>openvpn</tag>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql命令示例</title>
    <url>/2018/08/31/Mysql%E5%91%BD%E4%BB%A4%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1 创建数据库"></a>1 创建数据库</h1><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">Mysql&gt;<span class="keyword">create</span> <span class="keyword">database</span> 库名;</span><br></pre></td></tr></table></figure>
<h2 id="1-1-创建utf-8格式的数据库"><a href="#1-1-创建utf-8格式的数据库" class="headerlink" title="1.1 创建utf-8格式的数据库"></a>1.1 创建utf-8格式的数据库</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">Mysql&gt;<span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="symbol">`库名`</span> DEFAULT CHARACTER <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h1 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2 删除数据库"></a>2 删除数据库</h1><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">Mysql&gt;<span class="keyword">drop</span> <span class="keyword">database</span> 库名;</span><br></pre></td></tr></table></figure>
<h1 id="3-查询数据库"><a href="#3-查询数据库" class="headerlink" title="3 查询数据库"></a>3 查询数据库</h1><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Mysql&gt;<span class="keyword">show </span>databases<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h1 id="4-恢复数据库"><a href="#4-恢复数据库" class="headerlink" title="4 恢复数据库"></a>4 恢复数据库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">Mysql&gt;</span><span class="bash">use 数据库名                    //修改要恢复的数据库</span></span><br><span class="line"></span><br><span class="line"><span class="meta">Mysql&gt;</span><span class="bash"><span class="built_in">source</span> 数据文件名（可以带路径）；</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">Mysql&gt;</span><span class="bash"><span class="built_in">source</span> /home/123sql;</span></span><br></pre></td></tr></table></figure>
<h1 id="5-修改用户密码"><a href="#5-修改用户密码" class="headerlink" title="5 修改用户密码"></a>5 修改用户密码</h1><h2 id="5-1-修改root密码"><a href="#5-1-修改root密码" class="headerlink" title="5.1     修改root密码"></a>5.1     修改root密码</h2><h3 id="5-1-1-方法1：-用SET-PASSWORD命令"><a href="#5-1-1-方法1：-用SET-PASSWORD命令" class="headerlink" title="5.1.1 方法1： 用SET PASSWORD命令"></a>5.1.1 方法1： 用SET PASSWORD命令</h3><p>首先登录MySQL。</p>
<blockquote>
<p>格式：mysql&gt; set password for 用户名@localhost = password(‘新密码’);</p>
</blockquote>
<p>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(<span class="string">'123'</span>);</span></span><br></pre></td></tr></table></figure>
<h3 id="5-1-2-方法2：用mysqladmin"><a href="#5-1-2-方法2：用mysqladmin" class="headerlink" title="5.1.2 方法2：用mysqladmin"></a>5.1.2 方法2：用mysqladmin</h3><blockquote>
<p>格式：mysqladmin -u用户名 -p旧密码 password 新密码</p>
</blockquote>
<p>例子：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p123456 password <span class="number">123</span></span><br></pre></td></tr></table></figure>
<h3 id="5-1-3-方法3：用UPDATE直接编辑user表"><a href="#5-1-3-方法3：用UPDATE直接编辑user表" class="headerlink" title="5.1.3 方法3：用UPDATE直接编辑user表"></a>5.1.3 方法3：用UPDATE直接编辑user表</h3><p>首先登录MySQL。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> update user <span class="built_in">set</span> password=password(<span class="string">'123'</span>) <span class="built_in">where</span> user=<span class="string">'root'</span> and host=<span class="string">'localhost'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-1-4-方法4：在忘记root密码的时候，可以这样"><a href="#5-1-4-方法4：在忘记root密码的时候，可以这样" class="headerlink" title="5.1.4 方法4：在忘记root密码的时候，可以这样"></a>5.1.4 方法4：在忘记root密码的时候，可以这样</h3><p>以windows为例：</p>
<ul>
<li>关闭正在运行的MySQL服务。</li>
<li>打开DOS窗口，转到mysql\bin目录。</li>
<li>输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。</li>
<li>再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。</li>
<li>输入mysql回车，如果成功，将出现MySQL提示符 &gt;。</li>
<li>连接权限数据库： use mysql; 。</li>
<li>改密码：update user set password=password(“123”) where user=”root”;（别忘了最后加分号） 。</li>
<li>刷新权限（必须步骤）：flush privileges;　。</li>
<li>退出 quit。</li>
<li>注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</li>
</ul>
<h1 id="6-Mysql远程访问"><a href="#6-Mysql远程访问" class="headerlink" title="6 Mysql远程访问"></a>6 Mysql远程访问</h1><p>首先确认防火墙开启3306端口,如果my.cnf文件配置有bind-address=127.0.0.1，用#注释掉。</p>
<h2 id="6-1-改表法："><a href="#6-1-改表法：" class="headerlink" title="6.1 改表法："></a>6.1 改表法：</h2><p>可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的“host” 项，从“localhost”改称“%”</p>
<p>登录数据库</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host = ‘%’ <span class="keyword">where</span> <span class="keyword">user</span> = ‘root’;mysql&gt; <span class="keyword">select</span> host, <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;         //列出host名和user名，查看修改。</span><br><span class="line">mysql&gt; flush privileges;      //刷新权限列表注：</span><br><span class="line">mysql&gt; flush privileges;          //使修改生效。</span><br></pre></td></tr></table></figure>
<h2 id="6-2-授权法（推荐）"><a href="#6-2-授权法（推荐）" class="headerlink" title="6.2 授权法（推荐）"></a>6.2 授权法（推荐）</h2><p>例如，你想<code>myuser</code>使用<code>mypassword</code>从任何主机连接到<code>mysql</code>服务器的话。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'myuser'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'mypassword'</span> <span class="keyword">WITH</span> GRANT OPTION;</span><br></pre></td></tr></table></figure>
<p>如果你想允许用户<code>myuser</code>从ip为<code>192.168.1.3</code>的主机连接到<code>mysql</code>服务器，并使用<code>mypassword</code>作为密码</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'myuser'</span>@<span class="string">'192.168.1.3'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'mypassword’ WITH GRANT OPTION;</span></span><br></pre></td></tr></table></figure>
<p>下面的语句表示将 <code>discuz</code> 数据库的所有权限授权给 <code>myuser</code> 这个用户，允许 <code>myuser</code> 用户在 <code>123.123.123.123</code> 这个 IP 进行远程登陆，并设置 <code>myuser</code> 用户的密码为 <code>mypassword</code> 。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> discuz.* <span class="keyword">TO</span> <span class="string">'myuser'</span>@<span class="string">'192.168.1.3'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'mypassword’ WITH GRANT OPTION;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：<em>代表所有数据库，discuz.</em> 代表discuz数据库。</p>
</blockquote>
<h1 id="7-Mysqlbinlog用法"><a href="#7-Mysqlbinlog用法" class="headerlink" title="7 Mysqlbinlog用法"></a>7 Mysqlbinlog用法</h1><blockquote>
<p>注意：用mysqlbinlog前一定要加上数据库安装路径，否则默认情况下调用的是系统默认安装的mysql中的mysqlbinlog</p>
</blockquote>
<h2 id="7-1-查看二进制日志"><a href="#7-1-查看二进制日志" class="headerlink" title="7.1 查看二进制日志"></a>7.1 查看二进制日志</h2><p>查看二进制日志<code>mysql-bin.000014</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>bin<span class="regexp">/mysqlbinlog /</span>usr<span class="regexp">/local/</span>mysql<span class="regexp">/data/</span>mysql-bin<span class="number">.000014</span></span><br></pre></td></tr></table></figure>
<h2 id="7-2-转换二进制日志生成普通日志"><a href="#7-2-转换二进制日志生成普通日志" class="headerlink" title="7.2 转换二进制日志生成普通日志"></a>7.2 转换二进制日志生成普通日志</h2><p>转换<code>mysql-bin.000014</code>为<code>f.log</code>,转换到<code>88624</code>位置为止。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>bin<span class="regexp">/mysqlbinlog  -v --stop-position=88624 /</span>usr<span class="regexp">/local/</span>mysql<span class="regexp">/data/</span>mysql-bin<span class="number">.000014</span> &gt; <span class="regexp">/home/</span>f.log</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维工具</title>
    <url>/2018/09/04/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="1-linux磁盘监控工具"><a href="#1-linux磁盘监控工具" class="headerlink" title="1 linux磁盘监控工具"></a>1 linux磁盘监控工具</h1><a id="more"></a>
<h2 id="1-1-iostat"><a href="#1-1-iostat" class="headerlink" title="1.1. iostat"></a>1.1. iostat</h2><p>查看存储设备输入和输出状态统计的工具，用来追踪存储设备的性能 问题；包括设备，磁盘，NFS远程磁盘。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install sysstat</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571817666196.png" alt="图1"></p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">user</span></span>:    在用户级别运行所使用的CPU百分比</span><br><span class="line"></span><br><span class="line"><span class="tag">%<span class="selector-tag">nice</span></span>:     优先进程消耗的CPU时间，占所有CPU百分比</span><br><span class="line"></span><br><span class="line"><span class="tag">%<span class="selector-tag">system</span></span>:   在系统级别运行所使用的CPU百分比</span><br><span class="line"></span><br><span class="line"><span class="tag">%<span class="selector-tag">iowait</span></span>:   cpu等待硬件I/O时，所占用的CPU百分比</span><br><span class="line"></span><br><span class="line"><span class="tag">%<span class="selector-tag">steal</span></span>:     管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比</span><br><span class="line"></span><br><span class="line"><span class="tag">%<span class="selector-tag">idle</span></span>:        CPU空闲时间的百分比</span><br><span class="line"></span><br><span class="line">tps:         每秒发送到I/O的请求数</span><br><span class="line"></span><br><span class="line">KB_read/s:    每秒读取的block数</span><br><span class="line"></span><br><span class="line">KB_wrtn/s:    每秒写入的block数</span><br><span class="line"></span><br><span class="line">KB_read:     启动到现在block总数</span><br><span class="line"></span><br><span class="line">KB_wrtn:    启动到现在写入的block总数</span><br></pre></td></tr></table></figure>
<p>系统systat包里的工具，以kB/s为单位统计,2表示以2秒为频率统计一次：<br>iostat –x –k 2 10000<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818156432.png" alt="图2"><br><div class="note default"><p><strong>说明</strong><br><code>rrqm/s</code>：每秒这个设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并Merge）；<br><code>wrqm/s</code>：每秒这个设备相关的写入请求有多少被Merge了。<br><code>rsec/s</code>：每秒读取的扇区数；<br><code>wsec/s</code>：每秒写入的扇区数。<br><code>rKB/s</code>：每秒向设备发出的读取请求数；<br><code>wKB/s</code>：每秒向设备发出的写入请求数；<br><code>avgrq-sz</code>： 平均请求扇区的大小avgqu-sz 是平均请求队列的长度。毫无疑问，队列长度越短越好。<br><code>await</code>：每一个IO请求的处理的平均时间（单位是微秒毫秒）。这里可以理解为IO的响应时间，一般地系统IO响应时间应该低于5ms，如果大于10ms就比较大了。这个时间包括了队列时间和服务时间，也就是说，一般情况下，<strong>await</strong>大于<strong>svctm</strong>，它们的差值越小，则说明队列时间越短，反之差值越大，队列时间越长，说明系统出了问题。<br><code>svctm</code>： 表示平均每次设备I/O操作的服务时间（以毫秒为单位）。如果<strong>svctm</strong>的值与<strong>await</strong>很接近，表示几乎没有I/O等待，磁盘性能很好，如果<strong>await</strong>的值远高于<strong>svctm</strong>的值，则表示I/O队列等待太长，系统上运行的应用程序将变慢。<br><code>%util</code>： 在统计时间内所有处理IO时间，除以总共统计时间。例如，如果统计间隔1秒，该设备有0.8秒在处理IO，而0.2秒闲置，那么该设备的 <code>%util = 0.8/1 =80%</code>，所以该参数暗示了设备的繁忙程度。一般地，如果该参数是<code>100%</code>表示设备已经接近满负荷运行了（当然如果是多磁盘，即使%util是100%，因为磁盘的并发能力，所以磁盘使用未必就到了瓶颈）。</p></div></p>
<h2 id="1-2-iotop"><a href="#1-2-iotop" class="headerlink" title="1.2 iotop"></a>1.2 iotop</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install iotop</span><br></pre></td></tr></table></figure>
<p>监控linux磁盘I/O, 用于查找大量使用磁盘读写进程的时候。python版本需要2.7以上。<br>-h:  查看帮助<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818191005.png" alt="图3"></p>
<p><strong>用法：iotop -d 1 -o</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818288780.png" alt="图4"><br><code>-o</code>：只显示有io操作的进程<br><code>-b</code>：批量显示，无交互，主要用作记录到文件。<br><code>-n</code> NUM：显示NUM次，主要用于非交互式模式。<br><code>-d</code> SEC：间隔SEC秒显示一次。<br><code>-p</code> PID：监控的进程pid。<br><code>-u</code> USER：监控的进程用户。<br><div class="note default"><p><strong>常用快捷键</strong></p>
<ol>
<li><code>左右箭头</code>：改变排序方式，默认是按IO排序。 </li>
<li><code>r</code>：改变排序顺序。 </li>
<li><code>o</code>：只显示有IO输出的进程。</li>
<li><code>p</code>：进程/线程的显示方式的切换。</li>
<li><code>a</code>：显示累积使用量。</li>
<li><code>q</code>：退出。</li>
</ol></div></p>
<h2 id="1-3-sar-性能监控和瓶颈检查"><a href="#1-3-sar-性能监控和瓶颈检查" class="headerlink" title="1.3 sar - 性能监控和瓶颈检查"></a>1.3 sar - 性能监控和瓶颈检查</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install sysstat</span><br></pre></td></tr></table></figure>
<p>sar –p –d 2 1000<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818310452.png" alt="图5"><br>说明：<br><code>tps</code>: 每秒向磁盘设备请求数据的次数，包括读、写请求，为rtps与wtps的和。出于效率考虑，每一次IO下发后并不是立即处理请求，而是将请求合并(merge)，这里tps指请求合并后的请求计数。<br><code>rtps</code>: 每秒向磁盘设备的读请求次数<br><code>wtps</code>: 每秒向磁盘设备的写请求次数<br><code>bread</code>: 每秒从磁盘读的bytes数量<br><code>bwrtn</code>: 每秒向磁盘写的bytes数量</p>
<p>或者用:sar –b 2 1000<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818326945.png" alt="图6"></p>
<h2 id="1-4-dstat-多类型资源统计工具"><a href="#1-4-dstat-多类型资源统计工具" class="headerlink" title="1.4 dstat - 多类型资源统计工具"></a>1.4 dstat - 多类型资源统计工具</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install dstat</span><br></pre></td></tr></table></figure>
<p><code>dstat</code>命令是一个用来替换<code>vmstat</code>、<code>iostat</code>、<code>netstat</code>、<code>nfsstat</code>和<code>ifstat</code>这些命令的工具，是一个全能系统信息统计工具。与<code>sysstat</code>相比，<code>dstat</code>拥有一个彩色的界面，在手动观察性能状况时，数据比较显眼容易观察；而且<code>dstat</code>支持即时刷新，譬如输入<code>dstat 3</code>即每三秒收集一次，但最新的数据都会每秒刷新显示。和sysstat相同的是，dstat也可以收集指定的性能资源，譬如<code>dstat -c</code>即显示CPU的使用情况。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818341248.png" alt="图7"><br><div class="note default"><p><strong>常用选项</strong><br><code>-c</code>：显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息。.<br><code>-C</code>：当有多个CPU时候，此参数可按需分别显示cpu状态，例：-C 0,1 是显示cpu0和cpu1的信息。<br><code>-d</code>：显示磁盘读写数据大小。<br><code>-D</code> hda,total：包括hda和总数。<br><code>-n</code>：显示网络状态。<br><code>-N</code> eth1,total：有多块网卡时，指定要显示的网卡。<br><code>-l</code>：显示系统负载情况。<br><code>-m</code>：显示内存使用情况。<br><code>-g</code>：显示页面使用情况。<br><code>-p</code>：显示进程状态。<br><code>-s</code>：显示交换分区使用情况。<br><code>-S</code>：类似D/N。<br><code>-r</code>：I/O请求情况。<br><code>-y</code>：系统状态。<br><code>--ipc</code>：显示ipc消息队列，信号等信息。<br><code>--socket</code>：用来显示tcp udp端口状态。<br><code>-a</code>：此为默认选项，等同于-cdngy。<br><code>-v</code>：等同于 -pmgdsc -D total。<br><code>--output</code> 文件：此选项也比较有用，可以把状态信息以csv的格式重定向到指定的文件中，以便日后查看。例：dstat –output /root/dstat.csv &amp; 此时让程序默默的在后台运行并把结果输出到/root/dstat.csv文件中。</p></div></p>
<h1 id="2-Linux进程监控工具"><a href="#2-Linux进程监控工具" class="headerlink" title="2 Linux进程监控工具"></a>2 Linux进程监控工具</h1><h2 id="2-1-top-经典的Linux任务管理工具"><a href="#2-1-top-经典的Linux任务管理工具" class="headerlink" title="2.1 top - 经典的Linux任务管理工具"></a>2.1 top - 经典的Linux任务管理工具</h2><p>显示所有正在运行而且处于活动状态的实时进程， 而且会定期更新显示结果；它显示了CPU使用率，内存使用率，交换内存使用大小，调整缓存使用大小，缓冲区使用大小，进程PID， 使用的命令等信息。</p>
<h2 id="2-2-Htop-更加友好的top"><a href="#2-2-Htop-更加友好的top" class="headerlink" title="2.2 Htop - 更加友好的top"></a>2.2 Htop - 更加友好的top</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install htop</span><br></pre></td></tr></table></figure>
<p><strong><a href="https://www.cnblogs.com/yqsun/p/5396363.html" target="_blank" rel="noopener">使用详解</a></strong><br>一个非常高级的交互式实时linux进程监控工具，和top相似，但更友好, 还支持鼠标。</p>
<p>sudo apt-get install htop<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818360847.png" alt="图8"></p>
<h1 id="3-Linux网络监控工具"><a href="#3-Linux网络监控工具" class="headerlink" title="3 Linux网络监控工具"></a>3 Linux网络监控工具</h1><h2 id="3-1-tcpdump-洞察网络封包"><a href="#3-1-tcpdump-洞察网络封包" class="headerlink" title="3.1 tcpdump - 洞察网络封包"></a>3.1 tcpdump - 洞察网络封包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install tcpdump</span><br></pre></td></tr></table></figure>
<p>用于捕捉或过滤网络上指定接口上接收或者传输的TCP/IP包。</p>
<p><code>-i</code>  ：网络接口</p>
<p><code>-c</code> ： 需要输出包数量<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818375461.png" alt="图9"></p>
<h2 id="3-2-netstat-显示开放的端口和连接"><a href="#3-2-netstat-显示开放的端口和连接" class="headerlink" title="3.2 netstat - 显示开放的端口和连接"></a>3.2 netstat - 显示开放的端口和连接</h2><p><strong><a href="https://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316661.html" target="_blank" rel="noopener">使用详情</a></strong><br>用于监控进出网络的包和网络接口统计的命令行工具，非常有用，用来监控网络性能，解决网络相关问题。</p>
<p><code>-h</code>   :   查看帮助</p>
<p><code>-r</code>   :    显示路由表</p>
<p><code>-i</code>   :     查看网络接口</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818393699.png" alt="图10"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818402951.png" alt="图11"></p>
<h2 id="3-3-iptraf-网络性能工具"><a href="#3-3-iptraf-网络性能工具" class="headerlink" title="3.3 iptraf - 网络性能工具"></a>3.3 iptraf - 网络性能工具</h2><p>用于采集通过网络接口的IP流量信息，包括tcp标记，icmp信息，TCP，UDP信等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install iptraf</span><br><span class="line"></span><br><span class="line">$ sudo iptraf</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818421695.png" alt="图12"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818441059.png" alt="图13"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818452823.png" alt="图14"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818462064.png" alt="图15"></p>
<h2 id="3-4-nethogs-监视每个进程的网络带宽"><a href="#3-4-nethogs-监视每个进程的网络带宽" class="headerlink" title="3.4 nethogs - 监视每个进程的网络带宽"></a>3.4 nethogs - 监视每个进程的网络带宽</h2><p>监控每个进程使用的网络带宽</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nethogs</span><br><span class="line"></span><br><span class="line">$ sudo nethogs</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818480677.png" alt="图16"></p>
<h2 id="3-5-iftop-类似top的网络带宽监控工具"><a href="#3-5-iftop-类似top的网络带宽监控工具" class="headerlink" title="3.5 iftop - 类似top的网络带宽监控工具"></a>3.5 iftop - 类似top的网络带宽监控工具</h2><p>监控网络接口的应用网络带宽使用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install iftop</span><br><span class="line"></span><br><span class="line">$ sudo iftop</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818490132.png" alt="图17"></p>
<p><code>=&gt;</code>:  表示 流量方向</p>
<p><code>TX</code>：  发送的流量</p>
<p><code>RX</code>： 接收的流量</p>
<p><code>TOTAL</code>： 总流量</p>
<p><code>Cumm</code>:  运行iftop到目前总流量</p>
<p><code>peak</code>:    流量峰会</p>
<p><code>rates</code>:  分别表示 过去2秒，10秒，40秒的平均流量</p>
<h1 id="4-Linux资源监控工具"><a href="#4-Linux资源监控工具" class="headerlink" title="4 Linux资源监控工具"></a>4 Linux资源监控工具</h1><h2 id="4-1-vmstat-虚拟内存统计信息"><a href="#4-1-vmstat-虚拟内存统计信息" class="headerlink" title="4.1 vmstat - 虚拟内存统计信息"></a>4.1 vmstat - 虚拟内存统计信息</h2><p><strong>系统默认安装工具</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818502586.png" alt="图18"></p>
<p>一般是通过两个数字参数来完成的，第一个参数是采样时间间隔，单位是秒， 第二个参数是采样的次数</p>
<p><code>r</code>:    表示运行队列，如果队列过大说明CPU很繁忙，一般会造成CPU使用率高</p>
<p><code>b</code>:    表示阻塞的进程数</p>
<p><code>swap</code>:  虚拟内存已使用的大小，如果大于0，说明机器的物理内存不够了</p>
<p><code>free</code>:  空闲的物理内存大小</p>
<p><code>buff</code>:   系统占用的缓存大小（写缓存）</p>
<p><code>cache</code>：  直接用来记忆我们打开的文件，给文件做缓冲，读缓存</p>
<p><code>si</code>:     每秒从磁盘读入虚拟内存大小，如果这个值大于0，表示物理内存不足了</p>
<p><code>so</code>:    每秒虚拟内存写入磁盘的大小，如果这个值大于0， 表示物理内存不足了</p>
<p><code>us</code>:    用户cpu时间</p>
<p><code>sy</code>:    系统CPU时间， 如果值 太高，说明系统调用，例如是IO操作频繁</p>
<p><code>id</code>:     空闲CPU时间，一般来说 id + us + sy = 100</p>
<p><code>wt</code>:    等待IO的CPU时间</p>
<h2 id="1-3-lsof-列表显示打开的文件"><a href="#1-3-lsof-列表显示打开的文件" class="headerlink" title="1.3. lsof - 列表显示打开的文件"></a>1.3. lsof - 列表显示打开的文件</h2><p>列出打开的文件；它常用于以列表形式显示所有打开的文件和进程，包括磁盘文件，网络套接字，管道，设备和进程。</p>
<p>主要情形之一就是 无法挂载磁盘和显示正在使用或者打开某个文件的错误时，查看谁正在使用。</p>
<h2 id="1-12-system-monitor"><a href="#1-12-system-monitor" class="headerlink" title="1.12. system monitor"></a>1.12. system monitor</h2><p>监控cpu,内存，进程，硬盘的信息；分为进程监控，资源监控，文件监控; 遗憾的是需要图形界面支持。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gnome-system-monitor</span><br><span class="line"></span><br><span class="line">gnome-system-monitor</span><br></pre></td></tr></table></figure>
<h1 id="2、nmtui配置网卡"><a href="#2、nmtui配置网卡" class="headerlink" title="2、nmtui配置网卡"></a>2、nmtui配置网卡</h1><p>使用nmtui命令（上一篇博客里有介绍界面）</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Linux运维工具/1571818514808.png" alt="图19"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://10.linuxstory.net/command-line-tools-to-monitor-linux-performance/" target="_blank" rel="noopener">https://10.linuxstory.net/command-line-tools-to-monitor-linux-performance/</a><br><a href="http://os.51cto.com/art/201412/460698_all.htm" target="_blank" rel="noopener">http://os.51cto.com/art/201412/460698_all.htm</a><br><a href="https://zhuanlan.zhihu.com/p/34518047" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34518047</a><br><a href="https://segmentfault.com/a/1190000016435032" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016435032</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>运维工具</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync和sersync实时双向同步</title>
    <url>/2018/09/04/rsync-sersync%E5%AE%9E%E6%97%B6%E5%8F%8C%E5%90%91%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<p><table><br>    <tr><br>        <td>操作系统</td><br>        <td>Centos7.1 511</td><br>   </tr><br>       <tr><br>        <td>主服务器</td><br>        <td> 172.20.20.111</td><br>   </tr><br>       <tr><br>        <td>从服务器 </td><br>        <td> 172.20.22.99 </td><br>   </tr><br>    <tr><br>        <td colspan="2">测试目的：实现主服务器/rsync目录与从服务器/rsync目录实时双向同步.</td><br>    </tr><br>    <tr><br>       <td colspan="2">参考资料：<a href="http://blog.sina.com.cn/s/blog_9f4962b10102vqua.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_9f4962b10102vqua.html</a><br>        <a href="http://402753795.blog.51cto.com/10788998/1713179" target="_blank" rel="noopener">http://402753795.blog.51cto.com/10788998/1713179</a>  </td><br>        </tr><br></table><br><!--more--></p>
<h1 id="2-以下操作主从服务器都要操作"><a href="#2-以下操作主从服务器都要操作" class="headerlink" title="2 以下操作主从服务器都要操作"></a>2 以下操作主从服务器都要操作</h1><h2 id="2-1-关闭selinux"><a href="#2-1-关闭selinux" class="headerlink" title="2.1 关闭selinux"></a>2.1 关闭selinux</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@server1]#</span><span class="bash"> vi /etc/selinux/config     <span class="comment">#编辑防火墙配置文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">SELINUX=enforcing                 <span class="comment">#注释掉</span></span></span><br><span class="line">SELINUX=disabled                #增加</span><br><span class="line"></span><br><span class="line"><span class="meta">[root@server1]#</span><span class="bash"> setenforce 0               <span class="comment">#立即生效</span></span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-开启防火墙tcp-873端口（Rsync默认端口）"><a href="#2-2-开启防火墙tcp-873端口（Rsync默认端口）" class="headerlink" title="2.2 开启防火墙tcp 873端口（Rsync默认端口）"></a>2.2 开启防火墙tcp 873端口（Rsync默认端口）</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@server1</span> ]<span class="comment">#  firewall-cmd --zone=public --add-port=873/tcp --permanent</span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@server1</span> ]<span class="comment">#  firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>主服务做rsync服务端，从服务器做客户端</p>
</blockquote>
<h1 id="3-安装rsync（服务端）"><a href="#3-安装rsync（服务端）" class="headerlink" title="3 安装rsync（服务端）"></a>3 安装rsync（服务端）</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Yum install rsync</span></span><br></pre></td></tr></table></figure>
<h2 id="3-1-编辑配置文件"><a href="#3-1-编辑配置文件" class="headerlink" title="3.1 编辑配置文件"></a>3.1 编辑配置文件</h2><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">Vi /etc/rsyncd.conf</span><br><span class="line"></span><br><span class="line"><span class="attr">uid</span> = root                        <span class="comment">#/rsync目录用户属性</span></span><br><span class="line"></span><br><span class="line"><span class="attr">gid</span> = root                        <span class="comment">#/rsync目录用户组属性</span></span><br><span class="line"></span><br><span class="line"><span class="attr">port</span> = <span class="number">873</span>                       <span class="comment">#rsync同步端口号，默认873</span></span><br><span class="line"></span><br><span class="line"><span class="attr">address</span> = <span class="number">172.20</span>.<span class="number">20.111</span>           <span class="comment">#本机IP地址</span></span><br><span class="line"></span><br><span class="line">use <span class="attr">chroot</span> = yes                  <span class="comment">#是否禁锢用户</span></span><br><span class="line"></span><br><span class="line">read <span class="attr">only</span> = no                   <span class="comment"># no客户端可上传文件,yes只读</span></span><br><span class="line"></span><br><span class="line">write <span class="attr">only</span> = no                   <span class="comment"># no客户端可下载文件,yes不能下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#list = yes</span></span><br><span class="line"></span><br><span class="line">hosts <span class="attr">allow</span> = <span class="number">172.20</span>.<span class="number">22.99</span>               <span class="comment">#指定可以联系的客户端主机名或IP</span></span><br><span class="line"></span><br><span class="line">hosts <span class="attr">deny</span> = *                         <span class="comment">#指定拒绝访问的客户端主机名或IP</span></span><br><span class="line"></span><br><span class="line">max <span class="attr">connections</span> = <span class="number">50</span>                    <span class="comment"># 客户端最大连接数目（设置大些，否则同步中可能报错）</span></span><br><span class="line"></span><br><span class="line">motd <span class="attr">file</span> = /etc/rsyncd.motd             </span><br><span class="line"></span><br><span class="line">pid <span class="attr">file</span> = /var/run/rsyncd.pid            <span class="comment">#启动后将进程PID放入此文件</span></span><br><span class="line"></span><br><span class="line">log <span class="attr">file</span> = /var/log/rsyncd.log             <span class="comment"># rsync使用syslog输出日志</span></span><br><span class="line"></span><br><span class="line">lock <span class="attr">file</span> = /var/run/rsync.lock           <span class="comment">#设置rsync锁文件</span></span><br><span class="line"></span><br><span class="line">transfer <span class="attr">logging</span> = yes</span><br><span class="line"></span><br><span class="line">log <span class="attr">format</span> = %t%a%m%b</span><br><span class="line"></span><br><span class="line">syslog <span class="attr">facility</span> = local3</span><br><span class="line"></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">300</span>                     <span class="comment">#超时时间</span></span><br><span class="line"></span><br><span class="line">[liferay1]                         <span class="comment"># 要同步的模块名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">path</span> =/rsync                      <span class="comment"># 要同步的目录（客户端同步文件到哪个目录）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">list</span> = yes                        </span><br><span class="line"></span><br><span class="line">ignore errors</span><br><span class="line"></span><br><span class="line">auth <span class="attr">users</span> = root                  <span class="comment"># 登陆系统使用的用户名，没有默认为匿名（非主机用户，自定义）</span></span><br><span class="line"></span><br><span class="line">secrets <span class="attr">file</span> = /etc/rsyncd.pass1       <span class="comment">## 密码文件存放的位置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">comment</span> = linuxsir liferay1           <span class="comment"># 这个名名称无所谓，最后模块名一直</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-配置密码文件"><a href="#3-2-配置密码文件" class="headerlink" title="3.2 配置密码文件"></a>3.2 配置密码文件</h2><p>密码文件为配置文件中所写的文件/etc/rsyncd.secrets格式为<code>**账户:密码**</code></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@server1</span> ]<span class="comment"># vi /etc/rsyncd.pass1</span></span><br></pre></td></tr></table></figure>
<p>输入帐号密码（自定义）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsync和sersync实时双向同步/1571818721665.png" alt="图1"></p>
<h2 id="3-3-修改配置文件及密码文件权限-必须600"><a href="#3-3-修改配置文件及密码文件权限-必须600" class="headerlink" title="3.3 修改配置文件及密码文件权限(必须600)"></a>3.3 修改配置文件及密码文件权限(必须600)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">   #</span><span class="bash"> chmod 600 /etc/rsyncd.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash"> chmod 600 /etc/rsyncd.pass1</span></span><br></pre></td></tr></table></figure>
<h2 id="3-4-检查rsync是否启动"><a href="#3-4-检查rsync是否启动" class="headerlink" title="3.4 检查rsync是否启动"></a>3.4 检查rsync是否启动</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># lsof -i :873 </span></span><br><span class="line">或</span><br><span class="line"><span class="meta"># netstat -an |grep 873</span></span><br></pre></td></tr></table></figure>
<h1 id="4-配置从服务器-客户端"><a href="#4-配置从服务器-客户端" class="headerlink" title="4 配置从服务器(客户端)"></a>4 配置从服务器(客户端)</h1><h2 id="4-1-设定密码文件"><a href="#4-1-设定密码文件" class="headerlink" title="4.1     设定密码文件"></a>4.1     设定密码文件</h2><p>配置密码文件 (注：为了安全，设定密码档案的属性为：<code>600</code>。<code>rsync.pass1</code>的密码一定要和<code>Rsync 服务器端/etc/rsyncd.pass1</code>的设定的密码一样)</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># vi /etc/rsyncd.pass1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>密码文件可与服务端密码文件不一样，这里为了便于记忆，都设置为rsyncd.pass1</p>
</blockquote>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsync和sersync实时双向同步/1571818733861.png" alt="图2"></p>
<p><strong>客户端密码文件只输入密码，不输入帐号。</strong></p>
<h2 id="4-2-赋予600权限"><a href="#4-2-赋予600权限" class="headerlink" title="4.2 赋予600权限"></a>4.2 赋予600权限</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chmod 600 /etc/rsyncd.pass1 <span class="comment"># 必须修改权限</span></span></span><br></pre></td></tr></table></figure>
<h2 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>rsync -avzP --password-file=<span class="regexp">/etc/rsyncd</span>.pass1 /opt/liferay/data/ tongbu<span class="variable">@172</span>.<span class="number">20.20</span>.<span class="number">111</span><span class="symbol">:</span><span class="symbol">:liferay1</span></span><br></pre></td></tr></table></figure>
<p>从客户端同步/rsync目录到服务端</p>
<h2 id="4-4-安装sersync"><a href="#4-4-安装sersync" class="headerlink" title="4.4 安装sersync"></a>4.4 安装sersync</h2><p>下载地址：<a href="https://code.google.com/archive/p/sersync/downloads" target="_blank" rel="noopener">https://code.google.com/archive/p/sersync/downloads</a></p>
<p>下载sersync2.5.4_64bit_binary_stable_final.tar</p>
<h3 id="4-4-1-解压"><a href="#4-4-1-解压" class="headerlink" title="4.4.1 解压"></a>4.4.1 解压</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Tar</span> –<span class="selector-tag">xvf</span>    <span class="selector-tag">sersync2</span><span class="selector-class">.5</span><span class="selector-class">.4_64bit_binary_stable_final</span><span class="selector-class">.tar</span></span><br></pre></td></tr></table></figure>
<p>解压文件到<code>/usr/local</code>,重命名为<code>serync</code></p>
<h3 id="4-4-2-修改配置文件"><a href="#4-4-2-修改配置文件" class="headerlink" title="4.4.2 修改配置文件"></a>4.4.2 修改配置文件</h3><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">Vi /usr/<span class="built_in">local</span>/serync/confxml.<span class="built_in">xml</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span>   encoding=<span class="string">"ISO-8859-1"</span><span class="meta">?&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span> <span class="attr">hostip</span>=<span class="string">"localhost"</span>   <span class="attr">port</span>=<span class="string">"8008"</span>&gt;</span><span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">debug</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileSystem</span> <span class="attr">xfs</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">start</span>=<span class="string">"false"</span>&gt;</span>                       #设置为true，开启同步过滤，这里不开启</span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.svn"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.gz"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"^info/*"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"^static/*"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">inotify</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">delete</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">createFolder</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">createFile</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">closeWrite</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">moveFrom</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">moveTo</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">attrib</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">modify</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">inotify</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">sersync</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/rsync"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">remote</span> <span class="attr">ip</span>=<span class="string">"172.20.20.111"</span> <span class="attr">name</span>=<span class="string">"liferay1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--&lt;remote   ip="192.168.8.39" name="tongbu"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--&lt;remote   ip="192.168.8.40" name="tongbu"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">rsync</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">commonParams</span>   <span class="attr">params</span>=<span class="string">"-artuz"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">auth</span> <span class="attr">start</span>=<span class="string">"true"</span> <span class="attr">users</span>=<span class="string">"root"</span>   <span class="attr">passwordfile</span>=<span class="string">"/etc/rsyncd.pass1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">userDefinedPort</span>   <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">port</span>=<span class="string">"874"</span>/&gt;</span><span class="comment">&lt;!-- port=874 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeout</span>   <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">time</span>=<span class="string">"100"</span>/&gt;</span><span class="comment">&lt;!-- timeout=100 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ssh</span>   <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">rsync</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">failLog</span> <span class="attr">path</span>=<span class="string">"/usr/local/sersync/rsync_fail_log.sh"</span>   <span class="attr">timeToExecute</span>=<span class="string">"60"</span>/&gt;</span><span class="comment">&lt;!--de</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">fault every 60mins execute   once--&gt;</span>        <span class="tag">&lt;<span class="name">crontab</span>   <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">schedule</span>=<span class="string">"600"</span>&gt;</span><span class="comment">&lt;!--600mins--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">crontabfilter</span>   <span class="attr">start</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>   <span class="attr">expression</span>=<span class="string">"*.php"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>   <span class="attr">expression</span>=<span class="string">"info/*"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">crontabfilter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">crontab</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"command"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">sersync</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"command"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">param</span> <span class="attr">prefix</span>=<span class="string">"/bin/sh"</span> <span class="attr">suffix</span>=<span class="string">""</span>   <span class="attr">ignoreError</span>=<span class="string">"true"</span>/&gt;</span>    <span class="comment">&lt;!--prefix /opt/tongbu/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">mmm.sh suffix--&gt;</span>        <span class="tag">&lt;<span class="name">filter</span>   <span class="attr">start</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>   <span class="attr">expression</span>=<span class="string">"(.*)\.php"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>   <span class="attr">expression</span>=<span class="string">"(.*)\.sh"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"socket"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/opt/tongbu"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">修改的代码如下:</span><br><span class="line"></span><br><span class="line">&lt;delete start=<span class="string">"true"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;createFolder start=<span class="string">"true"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;createFile start=<span class="string">"true"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;closeWrite start=<span class="string">"true"</span>/       </span><br><span class="line"></span><br><span class="line">#对于大多数应用，可以尝试把createFile（监控文件事件选项）设置为<span class="literal">false</span>来提高性能，减少 rsync通讯。因为拷贝文件到监控目录会产生<span class="built_in">create</span>事件与close_write事件，所以如果关闭<span class="built_in">create</span>事件，只监控文件拷贝结束时的事件close_write，同样可以实现文件完整同步。 注意：强将createFolder保持为 <span class="literal">true</span>，如果将createFolder设为<span class="literal">false</span>，则不会对产生的目录进行监控，该目录下的子文件与子目录也不会被监控。所以除非特殊需要，请开启。默认情况下对创建文件（目录）事件与删除文件（目录）事件都进行监控，如果项目中不需要删除远程目标服务器的文件（目录），则可以将delete 参数设置为<span class="literal">false</span>，则不对删除事件进行监控。对于大多数应用，可以尝试把createFile（监控文件事件选项）设置为<span class="literal">false</span>来提高性能，减少 rsync通讯。因为拷贝文件到监控目录会产生<span class="built_in">create</span>事件与close_write事件，所以如果关闭<span class="built_in">create</span>事件，只监控文件拷贝结束时的事件close_write，同样可以实现文件完整同步。 注意：强将createFolder保持为 <span class="literal">true</span>，如果将createFolder设为<span class="literal">false</span>，则不会对产生的目录进行监控，该目录下的子文件与子目录也不会被监控。所以除非特殊需要，请开启。默认情况下对创建文件（目录）事件与删除文件（目录）事件都进行监控，如果项目中不需要删除远程目标服务器的文件（目录），则可以将delete 参数设置为<span class="literal">false</span>，则不对删除事件进行监控。</span><br><span class="line">&lt;localpath watch=<span class="string">"/rsync"</span>&gt;：          #本地监听目录，源服务器同步目录</span><br><span class="line"></span><br><span class="line">&lt;remote ip=<span class="string">"172.20.20.111"</span> name=<span class="string">"liferay1"</span>/&gt;：    #服务端IP地址和模块名</span><br><span class="line">&lt;auth start=<span class="string">"true"</span> users=<span class="string">"root"</span> passwordfile=<span class="string">"/etc/rsyncd.pass1"</span>/&gt;</span><br><span class="line"></span><br><span class="line">#服务端模块rsync认证用户名,服务端rsync认证用户的密码存放路径</span><br><span class="line">failLog <span class="built_in">path</span>=<span class="string">"/tmp/rsync_fail_log.sh"</span>   #脚本运行失败日志路径</span><br></pre></td></tr></table></figure>
<h3 id="4-4-3-创建日志文件"><a href="#4-4-3-创建日志文件" class="headerlink" title="4.4.3  创建日志文件"></a>4.4.3  创建日志文件</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">Vi /usr/<span class="keyword">local</span>/serync/ rsync_fail_log.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<h3 id="4-4-4-启动sersync"><a href="#4-4-4-启动sersync" class="headerlink" title="4.4.4 启动sersync"></a>4.4.4 启动sersync</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/sersync/</span>sersync2 -d -r -o <span class="regexp">/usr/</span>local<span class="regexp">/sersync/</span>confxml.xml</span><br></pre></td></tr></table></figure>
<p>此时客户端可以实施同步目录文件到服务端了。</p>
<h1 id="5-实现双向同步"><a href="#5-实现双向同步" class="headerlink" title="5 实现双向同步"></a>5 实现双向同步</h1><p>把主从服务器角色互换，从服务器作为服务端，主服务器作为客户端重新部署一次，这样就可以双向实时同步了。</p>
<h1 id="6-附件："><a href="#6-附件：" class="headerlink" title="6 附件："></a>6 附件：</h1><p>=<a href="sersync2.5.4_64bit_binary_stable_final.tar.gz">sersync2.5.4_64bit_binary_stable_final.tar.gz</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>Bitnami_Liferay自定义路径</title>
    <url>/2018/09/07/Bitnami-Liferayx%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-修改文件存储路径"><a href="#1-修改文件存储路径" class="headerlink" title="1 修改文件存储路径"></a>1 修改文件存储路径</h1><p>#配置文件<code>portal-ext.properties</code>     修改文件存储路径</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@htest2 classes]# vi   <span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/apache-tomcat/</span>webapps<span class="regexp">/liferay/</span>WEB-INF<span class="regexp">/classes/</span>portal-ext.properties</span><br></pre></td></tr></table></figure>
<p>移动存储目录<code>/opt/liferay-6.2-7/apps/liferay/data/document_library</code>到<code>/drbd</code>,修改<code>portal-ext.properties</code>内<code>dl.store.file.system.root.dir=</code>参数（没有这项手动添加参数）</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">dl</span><span class="selector-class">.store</span><span class="selector-class">.file</span><span class="selector-class">.system</span><span class="selector-class">.root</span><span class="selector-class">.dir</span>=/drbd/document_library</span><br></pre></td></tr></table></figure>
<h1 id="2-修改数据库路径"><a href="#2-修改数据库路径" class="headerlink" title="2 修改数据库路径"></a>2 修改数据库路径</h1><p>移动<code>/opt/liferay-6.2-7/mysql/data/</code>到<code>/home/mysql/data</code></p>
<h2 id="2-1-修改my-cnf参数"><a href="#2-1-修改my-cnf参数" class="headerlink" title="2.1 修改my.cnf参数"></a>2.1 修改my.cnf参数</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@htest2 home]# <span class="keyword">vi</span>   /<span class="keyword">opt</span>/liferay-<span class="number">6.2</span>-<span class="number">7</span>/mysql/my.<span class="keyword">cnf</span></span><br></pre></td></tr></table></figure>
<p> 修改my.cnf数据库路径参数</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">datadir</span>=/opt/liferay<span class="number">-6.2</span><span class="number">-7</span>/mysql/<span class="class"><span class="keyword">data</span></span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line"><span class="title">datadir</span>=/home/mysql/<span class="class"><span class="keyword">data</span></span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-修改ctl-sh路径参数"><a href="#2-2-修改ctl-sh路径参数" class="headerlink" title="2.2 修改ctl.sh路径参数"></a>2.2 修改ctl.sh路径参数</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@htest2 drbd]# <span class="keyword">vi</span>   /<span class="keyword">opt</span>/liferay-<span class="number">6.2</span>-<span class="number">7</span>/mysql/scripts/ctl.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">MYSQL_PIDFILE=/   <span class="keyword">opt</span>/liferay-<span class="number">6.2</span>-<span class="number">7</span>/mysql/data/mysqld.pid</span><br><span class="line"></span><br><span class="line">MYSQL_START=<span class="comment">"/opt/liferay-6.2-7/mysql/bin/mysqld_safe   --defaults-file=/opt/lifer</span></span><br><span class="line"></span><br><span class="line">ay-<span class="number">6.2</span>-<span class="number">7</span>/mysql/my.<span class="keyword">cnf</span> --port=<span class="number">3306</span>   --socket=/<span class="keyword">opt</span>/liferay-<span class="number">6.2</span>-<span class="number">7</span>/mysql/tmp/mysql.<span class="keyword">so</span></span><br><span class="line"></span><br><span class="line">ck    --datadir=/<span class="keyword">opt</span>/liferay-<span class="number">6.2</span>-<span class="number">7</span>/mysql/data   --<span class="built_in">log</span>-error=/<span class="keyword">opt</span>/liferay-<span class="number">6.2</span>-<span class="number">7</span>/mysql</span><br><span class="line"></span><br><span class="line">/data/mysqld.<span class="built_in">log</span>  --pid-<span class="keyword">file</span>=$MYSQL_PIDFILE   --lower-case-table-names=<span class="number">1</span> <span class="comment">"</span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">MYSQL_PIDFILE=/home/mysql/data/mysqld.pid</span><br><span class="line"></span><br><span class="line">MYSQL_START=<span class="comment">"/opt/liferay-6.2-7/mysql/bin/mysqld_safe   --defaults-file=/opt/lifer</span></span><br><span class="line"></span><br><span class="line">ay-<span class="number">6.2</span>-<span class="number">7</span>/mysql/my.<span class="keyword">cnf</span> --port=<span class="number">3306</span>   --socket=/<span class="keyword">opt</span>/liferay-<span class="number">6.2</span>-<span class="number">7</span>/mysql/tmp/mysql.<span class="keyword">so</span></span><br><span class="line"></span><br><span class="line">ck    --datadir=/home/mysql/data --<span class="built_in">log</span>-error=/home/mysql/data/mysqld.<span class="built_in">log</span>  --pid-fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">le</span>=$MYSQL_PIDFILE   --lower-case-table-names=<span class="number">1</span> <span class="comment">"</span></span><br></pre></td></tr></table></figure>
<h1 id="3-修改插件目录路径-暂不修改"><a href="#3-修改插件目录路径-暂不修改" class="headerlink" title="3 修改插件目录路径(暂不修改)"></a>3 修改插件目录路径(暂不修改)</h1><h2 id="3-1-修改catalina-bat参数"><a href="#3-1-修改catalina-bat参数" class="headerlink" title="3.1 修改catalina.bat参数"></a>3.1 修改catalina.bat参数</h2><p>移动/opt/liferay-6.2-7/apache-tomcat/temp到/drbd,修改catalina.bat参数</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[htest2<span class="meta">@htest</span>2 bin]$ vi <span class="regexp">/opt/</span>liferay<span class="number">-6.2</span><span class="number">-7</span><span class="regexp">/apache-tomcat/</span>bin/   catalina.bat</span><br></pre></td></tr></table></figure>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="string">"%CATALINA_TMPDIR%"</span> ==   <span class="string">""</span> <span class="keyword">goto</span> gotTmpdir</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="string">"CATALINA_TMPDIR=%CATALINA_BASE%\temp"</span></span><br><span class="line"></span><br><span class="line">:gotTmpdir</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="string">"%CATALINA_TMPDIR%"</span> ==   <span class="string">""</span> <span class="keyword">goto</span> gotTmpdir</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="string">"CATALINA_TMPDIR=\drbd\temp"</span></span><br><span class="line"></span><br><span class="line">:gotTmpdir</span><br></pre></td></tr></table></figure>
<h2 id="3-2-修改ctl-sh"><a href="#3-2-修改ctl-sh" class="headerlink" title="3.2 修改ctl.sh"></a>3.2 修改ctl.sh</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[htest1<span class="meta">@htest</span>1 ~]$ vi   <span class="regexp">/opt/</span>liferay<span class="number">-6.2</span><span class="number">-7</span><span class="regexp">/apache-tomcat/</span>scripts/ctl.sh</span><br></pre></td></tr></table></figure>
<p>修改CATALINA_PID路径</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CATALINA_PID=/opt/liferay-6.2-7/apache-tomcat/temp/catalina.pid</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">CATALINA_PID=/drbd/temp/catalina.pid</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>bitnami</tag>
      </tags>
  </entry>
  <entry>
    <title>JIRA6.3.6部署及破解</title>
    <url>/2018/09/05/JIRA6-3-6%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="1-环境："><a href="#1-环境：" class="headerlink" title="1 环境："></a>1 环境：</h1><a id="more"></a>
<p>操作系统：CentOS7.2 1151</p>
<p>数据库：mysql 5.6.35</p>
<p>Java: java 1.8.0_65</p>
<p>平台软件：JIRA 6.3.6</p>
<h1 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2 安装步骤"></a>2 安装步骤</h1><h2 id="2-1-安装JDK"><a href="#2-1-安装JDK" class="headerlink" title="2.1 安装JDK"></a>2.1 安装JDK</h2><p>安装JDK 1.7或1.8，本次部署直接YUM安装，版本1.8.</p>
<h2 id="2-2-安装数据库"><a href="#2-2-安装数据库" class="headerlink" title="2.2 安装数据库"></a>2.2 安装数据库</h2><p>安装mysql5.6.35,并创建jira数据库。</p>
<h2 id="2-3-下载JIRA"><a href="#2-3-下载JIRA" class="headerlink" title="2.3 下载JIRA"></a>2.3 下载JIRA</h2><p>下载地址：<a href="https://www.atlassian.com/software/jira/download-archives" target="_blank" rel="noopener">https://www.atlassian.com/software/jira/download-archives</a></p>
<p>下载<code>atlassian-jira-6.3.6.tar.gz</code></p>
<h2 id="2-4-安装JIRA"><a href="#2-4-安装JIRA" class="headerlink" title="2.4 安装JIRA"></a>2.4 安装JIRA</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@jira<span class="number">-24</span> home]# tar zxvf atlassian-jira<span class="number">-6.3</span><span class="number">.6</span>.tar.gz</span><br><span class="line"></span><br><span class="line">[root@jira<span class="number">-24</span> home]# mv atlassian-jira<span class="number">-6.3</span><span class="number">.6</span> /opt/jira</span><br></pre></td></tr></table></figure>
<h2 id="2-5-修改端口"><a href="#2-5-修改端口" class="headerlink" title="2.5 修改端口"></a>2.5 修改端口</h2><p>修改端口号为80</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@jira-<span class="number">24</span> home]# <span class="keyword">vi</span> /<span class="keyword">opt</span>/jira/<span class="keyword">conf</span>/server.xml</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818800691.png" alt="图1"></p>
<h2 id="2-6-创建及配置jira-home"><a href="#2-6-创建及配置jira-home" class="headerlink" title="2.6 创建及配置jira_home"></a>2.6 创建及配置jira_home</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@jira</span>-<span class="number">24</span> home]<span class="comment"># mkdir /home/jira_home</span></span><br></pre></td></tr></table></figure>
<p>配置路径</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@jira-<span class="number">24</span> home]# vi <span class="regexp">/opt/</span>jira<span class="regexp">/atlassian-jira/</span>WEB-INF<span class="regexp">/classes/</span>jira-application.properties</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818812365.png" alt="图2"></p>
<h2 id="2-7-启动JIRA"><a href="#2-7-启动JIRA" class="headerlink" title="2.7 启动JIRA"></a>2.7 启动JIRA</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@jira</span>-<span class="number">24</span> home]<span class="comment"># /opt/jira/bin/start-jira.sh</span></span><br></pre></td></tr></table></figure>
<p>打开<a href="http://172.20.20.24" target="_blank" rel="noopener">http://172.20.20.24</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818823067.png" alt="图3"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818832651.png" alt="图4"></p>
<p>配置完数据库之后，在新界面录入程序标题，点击“向后”按钮<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818843220.png" alt="图5"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818860612.png" alt="图6"></p>
<p>输入临时授权码，进行注册：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818870090.png" alt="图7"></p>
<p>注册完之后，填写管理员账户和密码<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818879886.png" alt="图8"></p>
<h2 id="2-8-汉化"><a href="#2-8-汉化" class="headerlink" title="2.8 汉化"></a>2.8 汉化</h2><p>汉化包位置：<code>\\172.20.20.14\Software\Development\jira</code></p>
<p>中文软件包下载完毕后，我们需要登陆到jira系统找到Add-ons–Manage add-ons–upload add-on，如下：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818914154.png" alt="图9"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818899392.png" alt="图9.1"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818933200.png" alt="图10"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818942997.png" alt="图11"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818951983.png" alt="图12"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818962209.png" alt="图13"></p>
<p> 中文软件包安装完毕后，我们现在配置jira，如下：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818972974.png" alt="图14"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818981392.png" alt="图15"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571818989794.png" alt="图16"></p>
<p>通过上图，我们可以很明显的看出，jira已经被中文语言了。</p>
<h2 id="2-9-破解JIRA"><a href="#2-9-破解JIRA" class="headerlink" title="2.9 破解JIRA"></a>2.9 破解JIRA</h2><p>破解文件位置：<code>\\172.20.20.14\Software\Development\jira</code></p>
<p>到了这一步，就是<strong>破解的过程</strong>了，此时操作如下：</p>
<p>　　1）先将JIRA服务关掉，<strong>不必关闭浏览器</strong>。</p>
<p>　　2）解压破解包到你的硬盘指定目录下，然后按如下指令操作。</p>
<blockquote>
<p>1、用atlassian-extras-2.2.2.jar替换你的JIRA的安装目录的\atlassian-jira\WEB-INF\lib同名jar包。</p>
<p>2、用atlassian-universal-plugin-manager-plugin-2.10.1.jar替换你的JIRA的安装目录的\atlassian-jira\atlassian-bundled-plugins中的同名jar包。</p>
<p>3、根据自己的情况，按照keytpl.txt的格式填写好自己的license。</p>
</blockquote>
<p>点击右上角齿轮形状的管理图标，选择“系统”，再选择“授权”，看到使用日期不到1个月，如下所示：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571819003516.png" alt="图17"></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">填写授权码，授权码参数范例如下：</span><br><span class="line"></span><br><span class="line">Description=JIRA: Commercial,</span><br><span class="line"></span><br><span class="line">CreationDate=你的安装日期，格式（yyyy-mm-dd）,</span><br><span class="line"></span><br><span class="line">jira.LicenseEdition=ENTERPRISE,</span><br><span class="line"></span><br><span class="line">Evaluation=false,</span><br><span class="line"></span><br><span class="line">jira.LicenseTypeName=COMMERCIAL,</span><br><span class="line"></span><br><span class="line">jira.active=true,</span><br><span class="line"></span><br><span class="line">licenseVersion=2,</span><br><span class="line"></span><br><span class="line">MaintenanceExpiryDate=你想设置的失效日期如：2099-12-31,</span><br><span class="line"></span><br><span class="line">Organisation=joiandjoin,</span><br><span class="line"></span><br><span class="line">SEN=你申请到的SEN注意没有前缀LID,</span><br><span class="line"></span><br><span class="line">ServerID=你申请到的ServerID,</span><br><span class="line"></span><br><span class="line">jira.NumberOfUsers=-1,</span><br><span class="line"></span><br><span class="line">LicenseID=LID你申请到的SEN，注意LID前缀不要丢掉,</span><br><span class="line"></span><br><span class="line">LicenseExpiryDate=你想设置的失效日期如：2099-12-31,</span><br><span class="line"></span><br><span class="line">PurchaseDate=你的安装日期，格式（yyyy-mm-dd）</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">本次安装授权码实例为：</span><br><span class="line"></span><br><span class="line">Description=JIRA: Commercial,</span><br><span class="line"></span><br><span class="line">CreationDate=2017-01-25,</span><br><span class="line"></span><br><span class="line">jira.LicenseEdition=ENTERPRISE,</span><br><span class="line"></span><br><span class="line">Evaluation=false,</span><br><span class="line"></span><br><span class="line">jira.LicenseTypeName=COMMERCIAL,</span><br><span class="line"></span><br><span class="line">jira.active=true,</span><br><span class="line"></span><br><span class="line">licenseVersion=2,</span><br><span class="line"></span><br><span class="line">MaintenanceExpiryDate=2099-12-31,</span><br><span class="line"></span><br><span class="line">Organisation=pl,</span><br><span class="line"></span><br><span class="line">SEN=SEN-L9178727,</span><br><span class="line"></span><br><span class="line">ServerID=BIBT-L882-5ZZ3-F2IZ,</span><br><span class="line"></span><br><span class="line">jira.NumberOfUsers=-1,</span><br><span class="line"></span><br><span class="line">LicenseID=AAABdA0ODAoPeNp9UU1PwkAUvO+vaOJFD9vQRS2SbCK0a1JTwNBqIvGyloeswrZ5u0X011tojaDgc</span><br><span class="line"></span><br><span class="line">d7HvJl5J2kJzq3UDjt3WKvrse75pRMkaQU8n7wggJ7nRQHoxioDbUBMlVW55mKYivHdOEoEGZbLZ</span><br><span class="line"></span><br><span class="line">8DR7N4AGk498qpQun+qdyVmc2kglBb4hp62PMouSEOcfhQwlEvgwWgwEOMg6sXfLbEuFH7s7DHK2</span><br><span class="line"></span><br><span class="line">iTItZWZFQOpFvxtPS+l/lTX3mXbzfIlSQBXgFHI+1E/pXGnw+jFZNKmNyya1AILzKdlZt0NoCaf2</span><br><span class="line"></span><br><span class="line">XeJ4FaMagXcYgn12HHfB9I5ZKLSpy1oqbMjRv5R8yfE5k7lK47CRAxpfOX5HZ/5pAJ8r/APbWIlW</span><br><span class="line"></span><br><span class="line">kA+kwsDZIQvUisjt/5C0YtFL3kkAcK28vtdi1rBQyVoM8/2YoDKKRaoTJNgCCZDVWyZb6Nxz0kaC</span><br><span class="line"></span><br><span class="line">c5p/aCzp64jVnJRbm/Vmo+94FC4u8d39344a/wFDcT8NjAsAhRCNRjYwj4n0JHDJmMZWChYSaegE</span><br><span class="line"></span><br><span class="line">gIUd1blNKrDbGRX6QLiCbEyzoyRJnA=X02i6,</span><br><span class="line"></span><br><span class="line">LicenseExpiryDate=2099-12-31,</span><br><span class="line"></span><br><span class="line">PurchaseDate=2017-01-25</span><br></pre></td></tr></table></figure>
<p>将以上授权码信息填入授权码输入框，点击“增加”按钮，如下所示：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571819015644.png" alt="图18"></p>
<p>之后，看到授权信息更新了，就表示破解成功，会看到如下成功信息, 如下图：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/JIRA6.3.6部署及破解/1571819024647.png" alt="图19"></p>
<h2 id="2-10-插件破解"><a href="#2-10-插件破解" class="headerlink" title="2.10 插件破解"></a>2.10 插件破解</h2><p>插件破解和软件破解方法不一样，插件破解需要破解包内自带的Key.</p>
<p>破解Key在我百度云内。</p>
<p>参考资料：<a href="http://www.cnblogs.com/yangxia-test/p/4448002.html" target="_blank" rel="noopener">http://www.cnblogs.com/yangxia-test/p/4448002.html</a> </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>jira</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay+drbd双机热备部署</title>
    <url>/2018/09/07/Liferay-drbd%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="1-主节点配置"><a href="#1-主节点配置" class="headerlink" title="1 主节点配置"></a>1 主节点配置</h1><a id="more"></a>
<h2 id="1-1-添加硬盘"><a href="#1-1-添加硬盘" class="headerlink" title="1.1 添加硬盘"></a>1.1 添加硬盘</h2><p>为主服务器添加一块硬盘50G。</p>
<h2 id="1-2-创建分区"><a href="#1-2-创建分区" class="headerlink" title="1.2 创建分区"></a>1.2 创建分区</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fdisk</span> /dev/sdb</span><br></pre></td></tr></table></figure>
<p>为新硬盘创建分区<code>sdb1</code>,大小<code>50G</code>.分区格式<code>lvm</code></p>
<h2 id="1-3-创建物理卷"><a href="#1-3-创建物理卷" class="headerlink" title="1.3 创建物理卷"></a>1.3 创建物理卷</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pvcreate</span> /dev/sdb1</span><br></pre></td></tr></table></figure>
<h2 id="1-4-将物理卷添加入卷组"><a href="#1-4-将物理卷添加入卷组" class="headerlink" title="1.4 将物理卷添加入卷组"></a>1.4 将物理卷添加入卷组</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vgextend</span> vg_cosliferay /dev/sdb1</span><br></pre></td></tr></table></figure>
<p>卷组名通过<code>vgdisplay</code>查看。<code>vg_cosliferay</code>是卷组名。</p>
<h2 id="1-5-创建逻辑卷"><a href="#1-5-创建逻辑卷" class="headerlink" title="1.5 创建逻辑卷"></a>1.5 创建逻辑卷</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">lvcreate -L <span class="number">50</span>G -n drbdlv vg_cosliferay</span><br></pre></td></tr></table></figure>
<p>创建大小为<code>50G</code>，名字为<code>drbdlv</code>的逻辑卷。</p>
<h2 id="1-6-安装drbd"><a href="#1-6-安装drbd" class="headerlink" title="1.6 安装drbd"></a>1.6 安装drbd</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum</span> -y install drbd84-utils kmod-drbd84</span><br></pre></td></tr></table></figure>
<h3 id="1-6-1-配置global-common-conf"><a href="#1-6-1-配置global-common-conf" class="headerlink" title="1.6.1 配置global_common.conf"></a>1.6.1 配置global_common.conf</h3><p>编辑全局配置：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span>  /etc/drbd.d/global_common.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>确保文件中包含有下内容：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">global </span>&#123;  </span><br><span class="line"></span><br><span class="line">    usage-count yes;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="class">common </span>&#123;  </span><br><span class="line">    <span class="class">net </span>&#123;  </span><br><span class="line"></span><br><span class="line">      protocol C;  <span class="meta"># 使用协议C.表示收到远程主机的写入确认后,则认为写入完成.</span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>当然，还可以有其它配置，这是最基本的。</p>
<h3 id="1-6-2-配置r0资源："><a href="#1-6-2-配置r0资源：" class="headerlink" title="1.6.2 配置r0资源："></a>1.6.2 配置r0资源：</h3><p><strong>创建r0资源</strong>：</p>
<blockquote>
<p>注：r0可以随便命名。</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span>  /etc/drbd.d/r0.<span class="keyword">res</span></span><br></pre></td></tr></table></figure>
<p>写入文件内容：</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">resource r0&#123; </span><br><span class="line"></span><br><span class="line">        on masterNode&#123; </span><br><span class="line"></span><br><span class="line">                  device          /<span class="built_in">dev</span>/drbd1; #逻辑设备的路径 </span><br><span class="line"></span><br><span class="line">                  disk            /<span class="built_in">dev</span>/sda3;  #物理设备 </span><br><span class="line"></span><br><span class="line">                  address           <span class="number">192.168</span><span class="number">.58</span><span class="number">.128</span>:<span class="number">7788</span>; </span><br><span class="line"></span><br><span class="line">                  <span class="built_in">meta</span>-disk       internal; </span><br><span class="line"></span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        on backupNode&#123; </span><br><span class="line"></span><br><span class="line">                  device          /<span class="built_in">dev</span>/drbd1; </span><br><span class="line"></span><br><span class="line">                  disk            /<span class="built_in">dev</span>/sda3; </span><br><span class="line"></span><br><span class="line">                  address           <span class="number">192.168</span><span class="number">.58</span><span class="number">.129</span>:<span class="number">7788</span>; </span><br><span class="line"></span><br><span class="line">                  <span class="built_in">meta</span>-disk       internal; </span><br><span class="line"></span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要把上面用到的防火墙7788端口打开，这个端口是自定义的，如果嫌麻烦可以直接关掉防火墙。</p>
<blockquote>
<p>注：masterNode/ backupNode是主机名字，根据实际情况书写。</p>
</blockquote>
<p>说明：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">device  是自定义的物理设备的逻辑路径</span><br><span class="line"></span><br><span class="line"><span class="keyword">disk </span>       是磁盘设备，或者是逻辑分区</span><br><span class="line"></span><br><span class="line"><span class="keyword">address </span>  是机器监听地址和端口</span><br><span class="line"></span><br><span class="line">meta-<span class="keyword">disk </span>  这个还没弄明白，看到的资料都是设为：internal（局域网）</span><br></pre></td></tr></table></figure>
<h3 id="1-6-3-建立resource"><a href="#1-6-3-建立resource" class="headerlink" title="1.6.3 建立resource"></a>1.6.3 建立resource</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">modprobe drbd                               <span class="comment">//载入 drbd 模块  </span></span><br><span class="line"></span><br><span class="line">lsmod | <span class="keyword">grep</span> drbd                                            <span class="comment">//确认 drbd 模块是否载入</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay+drbd双机热备部署/1571819555627.png" alt="图1"></p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">dd </span><span class="string">if=</span>/<span class="string">dev/</span><span class="string">zero </span><span class="string">of=</span>/<span class="string">dev/</span><span class="string">sda2 </span><span class="string">bs=</span><span class="string">1M </span><span class="string">count=</span><span class="string">100 </span>   //把一些资料塞到 <span class="string">sda3 </span>內 (否则 <span class="built_in">create-md</span> 时会报错)  </span><br><span class="line"></span><br><span class="line"><span class="string">drbdadm </span><span class="built_in">create-md</span> <span class="string">r0 </span>                                    //建立 <span class="string">drbd </span><span class="string">resource </span> </span><br><span class="line"></span><br><span class="line"><span class="string">drbdadm </span><span class="string">up </span><span class="string">r0 </span>                   //   <span class="comment">#启用资源</span></span><br></pre></td></tr></table></figure>
<h1 id="2-备节点配置"><a href="#2-备节点配置" class="headerlink" title="2 备节点配置"></a>2 备节点配置</h1><p>把以上主节点的操作在备节点上操作一次，操作过程完全一样。</p>
<h2 id="2-1-设置Primary-Node"><a href="#2-1-设置Primary-Node" class="headerlink" title="2.1 设置Primary Node"></a>2.1 设置Primary Node</h2><p>将<code>masterNode</code>设为主服务器(<code>primary node</code>)，在<code>masterNode</code>上执行：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@backupNode</span> /]<span class="comment"># drbdadm primary --force r0</span></span><br></pre></td></tr></table></figure>
<p><strong>查看drbd状态：</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@backupNode /]</span># <span class="selector-tag">cat</span> /<span class="selector-tag">proc</span>/<span class="selector-tag">drbd</span>  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">version</span>: <span class="selector-tag">8</span><span class="selector-class">.4</span><span class="selector-class">.1</span> (<span class="attribute">api</span>:<span class="number">1</span>/<span class="attribute">proto</span>:<span class="number">86</span>-<span class="number">100</span>)  </span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">GIT-hash</span>: <span class="selector-tag">91b4c048c1a0e06777b5f65d312b38d47abaea80</span> <span class="selector-tag">build</span> <span class="selector-tag">by</span> <span class="selector-tag">root</span>@<span class="selector-tag">masterNode</span>, <span class="selector-tag">2012-05-27</span> <span class="selector-tag">18</span><span class="selector-pseudo">:34</span><span class="selector-pseudo">:27</span>  </span><br><span class="line"></span><br><span class="line">       <span class="selector-tag">1</span>: <span class="selector-tag">cs</span><span class="selector-pseudo">:Connected</span> <span class="selector-tag">ro</span><span class="selector-pseudo">:Primary</span>/<span class="selector-tag">Secondary</span> <span class="selector-tag">ds</span><span class="selector-pseudo">:UpToDate</span>/<span class="selector-tag">UpToDate</span> <span class="selector-tag">C</span> <span class="selector-tag">r-----</span>  </span><br><span class="line"></span><br><span class="line">     <span class="selector-tag">ns</span><span class="selector-pseudo">:4</span> <span class="selector-tag">nr</span><span class="selector-pseudo">:9504584</span> <span class="selector-tag">dw</span><span class="selector-pseudo">:9504588</span> <span class="selector-tag">dr</span><span class="selector-pseudo">:1017</span> <span class="selector-tag">al</span><span class="selector-pseudo">:1</span> <span class="selector-tag">bm</span><span class="selector-pseudo">:576</span> <span class="selector-tag">lo</span><span class="selector-pseudo">:0</span> <span class="selector-tag">pe</span><span class="selector-pseudo">:0</span> <span class="selector-tag">ua</span><span class="selector-pseudo">:0</span> <span class="selector-tag">ap</span><span class="selector-pseudo">:0</span> <span class="selector-tag">ep</span><span class="selector-pseudo">:1</span> <span class="selector-tag">wo</span><span class="selector-pseudo">:b</span> <span class="selector-tag">oos</span><span class="selector-pseudo">:0</span></span><br></pre></td></tr></table></figure>
<p> 已经变成了主服务器。</p>
<h2 id="2-2-创建DRBD文件系统"><a href="#2-2-创建DRBD文件系统" class="headerlink" title="2.2 创建DRBD文件系统"></a>2.2 创建DRBD文件系统</h2><p>上面已经完成了<code>/dev/drbd1</code>的初始化，现在来把<code>/dev/drbd1</code>格式化成<code>ext4</code>格式的文件系统,在<code>masterNode</code>上执行：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"> [root<span class="variable">@masterNode</span> /]<span class="comment"># mkfs.ext3 /dev/drbd1</span></span><br></pre></td></tr></table></figure>
<h1 id="3-安装配置keepalived"><a href="#3-安装配置keepalived" class="headerlink" title="3 安装配置keepalived"></a>3 安装配置keepalived</h1><h2 id="3-1-YUM安装keepalived"><a href="#3-1-YUM安装keepalived" class="headerlink" title="3.1 YUM安装keepalived"></a>3.1 YUM安装keepalived</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd1</span> rc3.d]<span class="comment"># yum install -y keepalived</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-配置keepalived-conf"><a href="#3-2-配置keepalived-conf" class="headerlink" title="3.2 配置keepalived.conf"></a>3.2 配置keepalived.conf</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@drbd</span>1 <span class="regexp">/]# vi /</span>etc<span class="regexp">/keepalived/</span>keepalived.conf</span><br></pre></td></tr></table></figure>
<h3 id="3-2-1-主服务器配置"><a href="#3-2-1-主服务器配置" class="headerlink" title="3.2.1 主服务器配置"></a>3.2.1 主服务器配置</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"></span><br><span class="line">   notification_email &#123;</span><br><span class="line"></span><br><span class="line">     acassen@firewall.loc</span><br><span class="line"></span><br><span class="line">     failover@firewall.loc</span><br><span class="line"></span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line"></span><br><span class="line">   smtp_server <span class="number">192.168</span><span class="number">.200</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line"></span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;          <span class="comment">//定义vrrp实例</span></span><br><span class="line"></span><br><span class="line">    <span class="section">state</span> MASTER              <span class="comment">//主节点 ，备用节点为BACKUP             </span></span><br><span class="line"></span><br><span class="line">    interface enp2s0          <span class="comment">//绑定的网卡</span></span><br><span class="line"></span><br><span class="line">    virtual_router_id <span class="number">51</span>     <span class="comment">//ID,默认就行 .同一实例下virtual_router_id必须相同</span></span><br><span class="line"></span><br><span class="line">    priority <span class="number">100</span>             <span class="comment">//优先级，备用节点设置为比100小的值</span></span><br><span class="line"></span><br><span class="line">    advert_int <span class="number">1</span>             <span class="comment">//MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒</span></span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line"></span><br><span class="line">        auth_type PASS       <span class="comment">//验证类型和密码 </span></span><br><span class="line"></span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line"></span><br><span class="line">        <span class="number">172.20</span><span class="number">.20</span><span class="number">.237</span>                  <span class="comment">//设置虚拟IP地址，可以多个</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-备服务器配置"><a href="#3-2-2-备服务器配置" class="headerlink" title="3.2.2 备服务器配置"></a>3.2.2 备服务器配置</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"></span><br><span class="line">   notification_email &#123;</span><br><span class="line"></span><br><span class="line">     acassen@firewall.loc</span><br><span class="line"></span><br><span class="line">     failover@firewall.loc</span><br><span class="line"></span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line"></span><br><span class="line">   smtp_server <span class="number">192.168</span><span class="number">.200</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line"></span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;          <span class="comment">//定义vrrp实例</span></span><br><span class="line"></span><br><span class="line">    <span class="section">state</span> BACKUP             <span class="comment">//备节点 ，主用节点为MASTER             </span></span><br><span class="line"></span><br><span class="line">    interface ens192          <span class="comment">//绑定的网卡</span></span><br><span class="line"></span><br><span class="line">    virtual_router_id <span class="number">51</span>     <span class="comment">//ID,默认就行 .同一实例下virtual_router_id必须相同</span></span><br><span class="line"></span><br><span class="line">    priority <span class="number">50</span>             <span class="comment">//优先级，备用节点设置为比100小的值</span></span><br><span class="line"></span><br><span class="line">    advert_int <span class="number">1</span>             <span class="comment">//MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒</span></span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line"></span><br><span class="line">        auth_type PASS       <span class="comment">//验证类型和密码 </span></span><br><span class="line"></span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line"></span><br><span class="line">        <span class="number">172.20</span><span class="number">.20</span><span class="number">.237</span>                  <span class="comment">//设置虚拟IP地址，可以多个</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-启动服务"><a href="#3-3-启动服务" class="headerlink" title="3.3 启动服务"></a>3.3 启动服务</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd1</span> /]<span class="comment"># systemctl start keepalived</span></span><br></pre></td></tr></table></figure>
<h1 id="4-问题"><a href="#4-问题" class="headerlink" title="4 问题"></a>4 问题</h1><p><code>Liferay</code>配置<code>drbd</code>双击热备中，在备机启动程序时，遇到以下问题。问题根本原因是原主机是32位系统安装32位程序，在备机64位系统运行32位程序没有运行库而报错。</p>
<h2 id="4-1-问题1："><a href="#4-1-问题1：" class="headerlink" title="4.1 问题1："></a>4.1 问题1：</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[<span class="number">09</span>:<span class="number">55</span>:<span class="number">50</span>][root@liferay-backup opt]<span class="comment">#   /opt/liferay-6.2-7/ctlscript.sh start</span></span><br><span class="line"></span><br><span class="line">[<span class="number">09</span>:<span class="number">55</span>:<span class="number">50</span>]<span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>bin<span class="regexp">/my_print_defaults:   /</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/bin/my</span>_print_defaults.bin:   <span class="regexp">/lib/</span>ld-linux.so.<span class="number">2</span>: bad ELF interpreter: 没有那个文件或目录</span><br><span class="line"></span><br><span class="line">[<span class="number">09</span>:<span class="number">55</span>:<span class="number">50</span>]<span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>bin<span class="regexp">/my_print_defaults:行12: /</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/bin/my</span>_print_defaults.bin: 成功</span><br><span class="line"></span><br><span class="line">[<span class="number">09</span>:<span class="number">55</span>:<span class="number">50</span>]<span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>bin<span class="regexp">/my_print_defaults:   /</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/bin/my</span>_print_defaults.bin: <span class="regexp">/lib/</span>ld-linux.so.<span class="number">2</span>: bad   ELF interpreter: 没有那个文件或目录</span><br><span class="line"></span><br><span class="line">[<span class="number">09</span>:<span class="number">55</span>:<span class="number">50</span>]<span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>bin<span class="regexp">/my_print_defaults:行12: /</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/bin/my</span>_print_defaults.bin: 成功</span><br><span class="line"></span><br><span class="line">[<span class="number">09</span>:<span class="number">55</span>:<span class="number">50</span>]<span class="number">161221</span> <span class="number">09</span>:<span class="number">55</span>:<span class="number">53</span> mysqld_safe   Logging to <span class="string">'/opt/liferay-6.2-7/mysql/data/mysqld.log'</span>.</span><br><span class="line"></span><br><span class="line">[<span class="number">09</span>:<span class="number">55</span>:<span class="number">50</span>]<span class="number">161221</span> <span class="number">09</span>:<span class="number">55</span>:<span class="number">53</span> mysqld_safe   Starting mysqld daemon with databases from <span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>data</span><br><span class="line"></span><br><span class="line">[<span class="number">09</span>:<span class="number">55</span>:<span class="number">50</span>]<span class="number">161221</span> <span class="number">09</span>:<span class="number">55</span>:<span class="number">53</span> mysqld_safe   mysqld from pid file <span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>data<span class="regexp">/mysqld.pid ended</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@liferay</span>-backup opt]<span class="comment">#  yum install   glibc.i686</span></span><br></pre></td></tr></table></figure>
<p>安装后<strong>又报错</strong>：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@liferay-backup data]<span class="comment">#   /opt/liferay-6.2-7/ctlscript.sh start</span></span><br><span class="line"></span><br><span class="line">[<span class="number">10</span>:<span class="number">30</span>:<span class="number">47</span>]libgcc_s.so.<span class="number">1</span> must be installed   <span class="keyword">for</span> pthread_cancel to work</span><br><span class="line"></span><br><span class="line">[<span class="number">10</span>:<span class="number">30</span>:<span class="number">47</span>]libgcc_s.so.<span class="number">1</span> must be installed   <span class="keyword">for</span> pthread_cancel to work</span><br><span class="line"></span><br><span class="line">[<span class="number">10</span>:<span class="number">30</span>:<span class="number">47</span>]<span class="number">161221</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">50</span> mysqld_safe   Logging to <span class="string">'/opt/liferay-6.2-7/mysql/data/mysqld.log'</span>.</span><br><span class="line"></span><br><span class="line">[<span class="number">10</span>:<span class="number">30</span>:<span class="number">47</span>]<span class="number">161221</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">50</span> mysqld_safe   Starting mysqld daemon with databases from <span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>data</span><br><span class="line"></span><br><span class="line">[<span class="number">10</span>:<span class="number">30</span>:<span class="number">48</span>]libgcc_s.so.<span class="number">1</span>   must be installed <span class="keyword">for</span> pthread_cancel to work</span><br><span class="line"></span><br><span class="line">[<span class="number">10</span>:<span class="number">30</span>:<span class="number">48</span>]<span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>bin<span class="regexp">/mysqld_safe:   行 165: 19283 已放弃               (吐核)LD_LIBRARY_PATH=/</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/lib\:/</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/lib\:/</span>opt<span class="regexp">/liferay-6.2-7/</span>sqlite<span class="regexp">/lib\:/</span>opt<span class="regexp">/liferay-6.2-7/</span>apache2<span class="regexp">/lib\:/</span>opt<span class="regexp">/liferay-6.2-7/</span>common<span class="regexp">/lib\:   nohup /</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/bin/my</span>sqld   --defaults-file=<span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/my</span>.cnf   --basedir=<span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql --datadir=/</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/data   --plugin-dir=/</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/lib/</span>plugin --user=mysql   --lower-case-table-names=<span class="number">1</span>   --log-error=<span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>data<span class="regexp">/mysqld.log   --pid-file=/</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/data/my</span>sqld.pid   --socket=<span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>tmp<span class="regexp">/mysql.sock --port=3306 &lt; /</span>dev<span class="regexp">/null   &gt;&gt; /</span>opt<span class="regexp">/liferay-6.2-7/my</span>sql<span class="regexp">/data/my</span>sqld.log <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">[<span class="number">10</span>:<span class="number">30</span>:<span class="number">48</span>]<span class="number">161221</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">51</span> mysqld_safe   mysqld from pid file <span class="regexp">/opt/</span>liferay-<span class="number">6.2</span>-<span class="number">7</span><span class="regexp">/mysql/</span>data<span class="regexp">/mysqld.pid ended</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>没有安装32位运行库</p>
</blockquote>
<p>直接安装<code>yum install glibc.i686</code>无法成功，系统已安装64位运行库，无法在安装。需要</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Linux的有些软件需要32位运行库才能运行，如Dr.com客户端等</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum在线安装： sudo yum <span class="keyword">install</span>   xulrunner.i686</span><br><span class="line"></span><br><span class="line">或者： sudo yum <span class="keyword">install</span>   ia32-libs.i686</span><br><span class="line"></span><br><span class="line">ubuntu下： sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> ia32-libs</span><br></pre></td></tr></table></figure>
<p>最终没有采用此方法，使用的方法为本博客内的<br><strong><a href="https://kxinter.github.io/kxinter.gitub.io/2018/09/04/rsync-sersync%E5%AE%9E%E6%97%B6%E5%8F%8C%E5%90%91%E5%90%8C%E6%AD%A5/" target="_blank" rel="noopener">Rsync+sersync实时双向同步</a></strong></p>
<p>参考资料1：<a href="http://blog.csdn.net/tmy257/article/details/41013985" target="_blank" rel="noopener">http://blog.csdn.net/tmy257/article/details/41013985</a></p>
<p>参考资料2：<a href="http://blog.csdn.net/attagain/article/details/17026433" target="_blank" rel="noopener">http://blog.csdn.net/attagain/article/details/17026433</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>双机</tag>
        <tag>liferay</tag>
        <tag>drbd</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK部署过程中问题总结</title>
    <url>/2018/09/07/ELK%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="1-错误1："><a href="#1-错误1：" class="headerlink" title="1 错误1："></a>1 错误1：</h1><a id="more"></a>
<p>启动<code>elasticsearch-5.3.0</code>报错<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署过程中问题总结/1571819360344.png" alt="图1"></p>
<p>不能使用root用户启动。新建用户elk，用户组elk.</p>
<h1 id="2-错误2："><a href="#2-错误2：" class="headerlink" title="2 错误2："></a>2 错误2：</h1><p>使用elk启动报错<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署过程中问题总结/1571819368271.png" alt="图2"></p>
<p>改变<code>elasticsearch</code>文件夹所有者到当前用户</p>
<h1 id="3-错误3："><a href="#3-错误3：" class="headerlink" title="3 错误3："></a>3 错误3：</h1><p>修改<code>network-name : 0.0.0.0</code>,后报错</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署过程中问题总结/1571819375593.png" alt="图3"></p>
<blockquote>
<p>注意： es启动要求提高一些系统参数配置，否则会报错</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>. 增大vm.max_map_count到至少<span class="number">262144</span></span><br><span class="line"></span><br><span class="line">$ sudo vim  /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">添加  vm.max_map_count=<span class="number">262144</span></span><br><span class="line"></span><br><span class="line">$ sudo sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span>. 增大文件句柄数至少 <span class="number">65536</span>  ulimit -a查看</span><br><span class="line"></span><br><span class="line">$ sudo vim /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* soft nofile 65536</span><br><span class="line"></span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure>
<h1 id="4-错误4："><a href="#4-错误4：" class="headerlink" title="4 错误4："></a>4 错误4：</h1><p>启动<code>elasticsearch</code>报错<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署过程中问题总结/1571819384227.png" alt="图4"></p>
<p>elasticsearch-head</p>
<p>·         不能放在<code>elasticsearch</code>的<code>plugins</code>、<code>modules</code> 目录下</p>
<p>·         不能使用 <code>elasticsearch-plugin install</code></p>
<p>移动<code>elasticsearch-head</code>,到别的目录，启动成功。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK部署</title>
    <url>/2018/09/07/ELK%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<p>系统：centos 7.2 x86_64 -1511</p>
<p>JDK: 1.8.0_111</p>
<p>ELK: elasticsearch kibana logstash</p>
<p><a href="https://www.elastic.co/cn/downloads" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819140562.png" alt="图1"></p>
<h1 id="2-Elasticsearch部署"><a href="#2-Elasticsearch部署" class="headerlink" title="2 Elasticsearch部署"></a>2 Elasticsearch部署</h1><p>下载并解压<code>elasticsearch-5.3.2.tar.gz</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">tar -zxvf elasticsearch-<span class="number">5.3</span>.<span class="number">2</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /home/elk</span><br></pre></td></tr></table></figure>
<h2 id="2-1-配置elasticsearch-yml"><a href="#2-1-配置elasticsearch-yml" class="headerlink" title="2.1 配置elasticsearch.yml"></a>2.1 配置elasticsearch.yml</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@elk</span>-node1 src]<span class="comment"># cat /etc/elasticsearch/elasticsearch.yml | grep -v “#”</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cluster<span class="selector-class">.name</span>: elk                                              #自定义集群名，相同集群内的节点设置相同的集群名</span><br><span class="line"></span><br><span class="line">node<span class="selector-class">.name</span>: elk-node1                                           #自定义节点名，建议统一采用节点hostname</span><br><span class="line"></span><br><span class="line">path<span class="selector-class">.data</span>: /var/lib/elasticsearch                              #data存储路径，可不取消注释，默认即此路径</span><br><span class="line"></span><br><span class="line">path<span class="selector-class">.logs</span>: /var/log/elasticsearch                              #log存储路径，可不取消注释，默认即此路径</span><br><span class="line"></span><br><span class="line">network<span class="selector-class">.host</span>: <span class="number">0.0</span>.<span class="number">0.0</span>                                          #es监听地址，采用”<span class="number">0.0</span>.<span class="number">0.0</span>”，允许所有设备访问</span><br><span class="line"></span><br><span class="line">http<span class="selector-class">.port</span>: <span class="number">9200</span>                                                #es监听端口，可不取消注释，默认即此端口</span><br><span class="line"></span><br><span class="line">discovery<span class="selector-class">.zen</span><span class="selector-class">.ping</span><span class="selector-class">.unicast</span><span class="selector-class">.hosts</span>: [<span class="string">"elk-node1"</span>, <span class="string">"elk-node2"</span>]   #集群节点发现列表，也可采用ip的形式</span><br><span class="line"></span><br><span class="line">discovery<span class="selector-class">.zen</span><span class="selector-class">.minimum_master_nodes</span>: <span class="number">2</span>                          #集群可做master的最小节点数</span><br><span class="line"></span><br><span class="line">#以下两项设置es5.x版本的head插件可以访问es</span><br><span class="line"></span><br><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.enabled</span>: true                                        #开启跨域访问支持，默认为false</span><br><span class="line"></span><br><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.allow-origin</span>: <span class="string">"*"</span>                                    #跨域访问允许的域名地址，使用正则表达式</span><br></pre></td></tr></table></figure>
<h2 id="2-2-配置head插件"><a href="#2-2-配置head插件" class="headerlink" title="2.2 配置head插件"></a>2.2 配置head插件</h2><h3 id="2-2-1-下载并配置nodejs"><a href="#2-2-1-下载并配置nodejs" class="headerlink" title="2.2.1 下载并配置nodejs"></a>2.2.1 下载并配置nodejs</h3><p>nodejs官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># cd /home/elk</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 elk]<span class="comment"># wget https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 elk]<span class="comment"># xz -d node-v6.10.2-linux-x64.tar.xz</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 elk]<span class="comment"># tar -xvf node-v6.10.2-linux-x64.tar -C /usr/local/</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># ln -s /usr/local/node-v6.10.2-linux-x64/bin/node /usr/bin/node</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># ln -s /usr/local/node-v6.10.2-linux-x64/bin/npm /usr/bin/npm</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># node -v</span></span><br><span class="line">v6.<span class="number">10.2</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># npm -v</span></span><br><span class="line"><span class="number">3.10</span>.<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-安装head插件"><a href="#2-2-2-安装head插件" class="headerlink" title="2.2.2 安装head插件"></a>2.2.2 安装head插件</h3><p>安装grunt</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@elk-node1 ~]# npm install -g grunt-cli</span><br><span class="line">[root@elk-node1 ~]# ln -s <span class="regexp">/usr/</span>local<span class="regexp">/node-v6.10.2-linux-x64/</span>lib<span class="regexp">/node_modules/g</span>runt-cli<span class="regexp">/bin/g</span>runt <span class="regexp">/usr/</span>bin<span class="regexp">/grunt</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819162733.png" alt="图2"></p>
<blockquote>
<p>#<code>grunt</code>是一个方便的构建工具，可以进行打包压缩、测试、执行等等的工作，5.x里的<code>head插件</code>就是通过<code>grunt</code>启动的；</p>
<p>#”<code>-g</code>”参数代表全局安装，一般安装到<code>nodejs</code>的”<code>lib/node_modules</code>”目录下；不带参数”<code>-g</code>”，则是本地安装，一般安装到运行<code>npm</code>命令时所在的目录，这里就需要安装到<code>head插件目录</code>；</p>
<p>#为<code>grunt</code>命令建软链接，方便全局执行，或加入环境变量；；</p>
<p>#如果镜像速度不理想，可提前切到国内的镜像，在安装<code>grunt-cli</code>前执行：<code>npm config set registry https://registry.npm.taobao.org</code>。</p>
</blockquote>
<h3 id="2-2-3-下载并配置head"><a href="#2-2-3-下载并配置head" class="headerlink" title="2.2.3 下载并配置head"></a>2.2.3 下载并配置head</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># cd /home/elk/elasticsearch</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 elasticsearch]<span class="comment"># git clone git://gitee.com/mobz/elasticsearch-head.git</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>#配置<code>elasticsearch.yml</code>文件允许<code>head</code>插件跨域访问<code>es</code>，请见上述章节。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819173354.png" alt="图3"></p>
</blockquote>
<h3 id="2-2-4-安装head"><a href="#2-2-4-安装head" class="headerlink" title="2.2.4 安装head"></a>2.2.4 安装head</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># cd /var/lib/elasticsearch/elasticsearch-head/</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 elasticsearch]<span class="comment"># npm install</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819185789.png" alt="图4"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819194840.png" alt="图5"><br><strong># 安装完成后可能有一些报错，不影响使用，报错原因未知，本人对nodejs不了解，github上有相近的问题，但并未解决。解决方法如下：</strong></p>
<p>(1) 查看报错信息”Error: Cannot find module ‘/var/lib/elasticsearch/elasticsearch-head/node_modules/phantomjs-prebuilt/install.js’”，未找到” phantomjs-prebuilt/install.js”文件；</p>
<p>(2) 采取比较土的办法，将完整的”phantomjs-prebuilt/”目录上传到相应位置，重新执行”npm install”，无报错。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819204143.png" alt="图6"></p>
<p><strong># 同时有3个警告信息，忽略即可，其中“npm WARN <a href="mailto:elasticsearch-head@0.0.0" target="_blank" rel="noopener">elasticsearch-head@0.0.0</a> license should be a valid SPDX license expression”警告信息可做如下处理：</strong><br><a href="http://www.itdadao.com/articles/c15a1031952p0.html" target="_blank" rel="noopener">http://www.itdadao.com/articles/c15a1031952p0.html</a></p>
<p>即修改”<code>./elasticsearch-head</code>”目录下“<code>package.json</code>”文件第<code>17行</code>的””<code>Apache2</code>“ “为”<code>Apache-2.0</code>“，涉及到开源软件与其他合作类软件的使用声明。</p>
<p><strong># 如果没有全局安装<code>grunt</code>二进制程序，可在”<code>elasticsearch-head</code>”目录下执行”<code>npm install grunt --save</code>“或” <code>npm install grunt-cli</code>“。</strong></p>
<h3 id="2-2-5-配置app-js和Guuntfile-js"><a href="#2-2-5-配置app-js和Guuntfile-js" class="headerlink" title="2.2.5 配置app.js和Guuntfile.js"></a>2.2.5 配置app.js和Guuntfile.js</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># cd /home/elk/elasticsearch-5.3.2/elasticsearch-head/</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 elasticsearch-head]<span class="comment"># cd _site/</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 _site]<span class="comment"># cp app.js app.js.bak</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 _site]<span class="comment"># vim app.js</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819215332.png" alt="图7"><br><strong>#在<code>4328行</code>将原”<code>http://localhost:9200</code>“修改为”<code>http://172.20.20.29:9200</code>“，否则head插件不能获取节点状态信息。</strong></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># cd /home/elk/elasticsearch-5.3.2/elasticsearch-head/</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 elasticsearch-head]<span class="comment"># cp Gruntfile.js Gruntfile.js.bak</span></span><br><span class="line">[root<span class="variable">@elk</span>-node1 elasticsearch-head]<span class="comment"># vim Gruntfile.js</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819228067.png" alt="图8"></p>
<p>#在93行新增”hostname: 0.0.0.0’, “，确保能被访问。</p>
<h2 id="2-3-启动并验证"><a href="#2-3-启动并验证" class="headerlink" title="2.3 启动并验证"></a>2.3 启动并验证</h2><ul>
<li>创建elk用户</li>
<li>使用<code>elk用户</code>启动<code>elasticsearch</code></li>
</ul>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">su</span> - elk -c <span class="string">"/home/elk/elasticsearch-5.3.2/bin/elasticsearch &amp;"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动head</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">cd /home/elk/elasticsearch<span class="number">-5.3</span><span class="number">.2</span>/elasticsearch-head/</span><br><span class="line">grunt server &amp;</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819238992.png" alt="图9"></p>
<p>#启动head插件，需要到head目录下</p>
<ol>
<li><p>访问<a href="https://172.20.20.29:9200" target="_blank" rel="noopener">https://172.20.20.29:9200</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819250027.png" alt="图10"></p>
</li>
<li><p>访问<a href="https://172.20.20.29:9100" target="_blank" rel="noopener">https://172.20.20.29:9100</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819257514.png" alt="图11"></p>
</li>
</ol>
<h1 id="3-Logstash部署"><a href="#3-Logstash部署" class="headerlink" title="3 Logstash部署"></a>3 Logstash部署</h1><h2 id="3-1-下载logstash"><a href="#3-1-下载logstash" class="headerlink" title="3.1 下载logstash"></a>3.1 下载logstash</h2><p>下载logstash-5.3.2</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">tar -zxvf logstash<span class="number">-5.3</span><span class="number">.2</span> -C /home/elk</span><br></pre></td></tr></table></figure>
<h2 id="3-2-配置logstahs"><a href="#3-2-配置logstahs" class="headerlink" title="3.2 配置logstahs"></a>3.2 配置logstahs</h2><h3 id="3-2-1-配置文件"><a href="#3-2-1-配置文件" class="headerlink" title="3.2.1 配置文件"></a>3.2.1 配置文件</h3><p>默认配置文件： /home/elk/logstash-5.3.2/config/logstash.yml</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[root@elk-node1 ~]<span class="comment"># cd /etc/logstash/</span></span><br><span class="line">[root@elk-node1 logstash]<span class="comment"># cat logstash.yml | grep -v "#"</span></span><br><span class="line">path.<span class="symbol">data:</span> /var/<span class="class"><span class="keyword">lib</span>/<span class="title">logstash</span></span></span><br><span class="line">path.<span class="symbol">config:</span> /etc/logstash/conf.d</span><br><span class="line">path.<span class="symbol">logs:</span> /var/log/logstash</span><br></pre></td></tr></table></figure>
<p>*#其中默认配置已经明确数据，日志，logstash pipeline实例文件的存储位置，保持默认即可；</p>
<p>#其中“http.host”参数指定数据输入主机，默认为localhost；“http.port”参数指定数据输入端口，默认为9600～9700（每实例占用1个），此验证暂时不做变更*</p>
<h3 id="3-2-2-pipeline文件"><a href="#3-2-2-pipeline文件" class="headerlink" title="3.2.2 pipeline文件"></a>3.2.2 pipeline文件</h3><p>根据默认配置，pipeline实例文件默认应放置于/home/elk/logstash-5.3.2/config/目录，此时目录下无实例文件，可根据实际情况新建实例，以处理本机log信息为例，如下：</p>
<figure class="highlight puppet"><table><tr><td class="code"><pre><span class="line">[root@elk-node1 config]<span class="comment"># vim messages.conf</span></span><br><span class="line"><span class="keyword">input</span> &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        <span class="attr">path</span> =&gt; <span class="string">"/var/log/messages"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">output</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        <span class="attr">hosts</span> =&gt; [<span class="string">"172.20.20.29:9200"</span>,<span class="string">"172..20.20.29:9200"</span>]</span><br><span class="line">        <span class="attr">index</span> =&gt; <span class="string">"messages-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">stdout</span> &#123;</span><br><span class="line"><span class="comment"># codec =&gt; rubydebug</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@elk-node1 conf.d]<span class="comment"># cd ..</span></span><br><span class="line">[root@elk-node1 logstash]<span class="comment"># chown -R logstash:logstash conf.d/</span></span><br><span class="line">[root@elk-node1 ~]<span class="comment"># chmod 644 /var/log/messages</span></span><br></pre></td></tr></table></figure>
<p>*#pipeline</p>
<p>#pipeline实例文件以”input”，”output”，”filter”等区域组成，前两者为必选项；</p>
<p>#”input”与”output”利用插件进行数据输入与输出，如这里”file”即输入插件，“elasticseach”与“stdout”即输出插件；</p>
<p>#在各插件内再具体定义行为，如”input”定义了数据源，“elasticseach”定义了输出节点与数据输出的索引与格式；</p>
<p>#“codec =&gt; rubydebug”会产生大量的debug文件至message（也可重定向到其他位置），此处注释掉；</p>
<p>#请注意权限，这里message常规权限是400，logstash无法读取，如果无法调用，在logstash的启动日志中会有相应的记录。*</p>
<h2 id="3-3-启动并验证"><a href="#3-3-启动并验证" class="headerlink" title="3.3 启动并验证"></a>3.3 启动并验证</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@elk-node1 ~]# <span class="regexp">/home/</span>elk<span class="regexp">/logstash-5.3.2/</span>bin<span class="regexp">/logstash -f /</span>home<span class="regexp">/elk/</span>logstash-<span class="number">5.3</span>.<span class="number">2</span><span class="regexp">/conf.d/m</span>essages.conf &amp;</span><br></pre></td></tr></table></figure>
<p>&amp; 是在后台启动</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@elk</span>-node1 ~]<span class="comment"># netstat -tunlp</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819271102.png" alt="图12"></p>
<p>浏览器访问<a href="http://172.20.20.29:9100" target="_blank" rel="noopener">http://172.20.20.29:9100</a></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819280045.png" alt="图13"></p>
<h1 id="4-Kibana部署"><a href="#4-Kibana部署" class="headerlink" title="4 Kibana部署"></a>4 Kibana部署</h1><h2 id="4-1-解压下载的kibana"><a href="#4-1-解压下载的kibana" class="headerlink" title="4.1 解压下载的kibana"></a>4.1 解压下载的kibana</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">tar -zxvf kibana-<span class="number">5.3</span>.<span class="number">2</span>-linux-x86_64<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /home/elk</span><br></pre></td></tr></table></figure>
<h2 id="4-2-配置kibana"><a href="#4-2-配置kibana" class="headerlink" title="4.2 配置kibana"></a>4.2 配置kibana</h2><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@elk</span>-node1 ~]<span class="meta"># cd /home/elk/kibana-5.3.2-linux-x86_64/config</span></span><br><span class="line">[root<span class="symbol">@elk</span>-node1 kibana]<span class="meta"># vim kibana.yml</span></span><br><span class="line">[root<span class="symbol">@elk</span>-node1 kibana]<span class="meta"># cat /etc/kibana/kibana.yml | grep -v <span class="string">"^$"</span> | grep -v <span class="string">"#"</span></span></span><br><span class="line">server.port: <span class="number">5601</span>                                   <span class="meta">#默认即5601</span></span><br><span class="line">server.host: <span class="string">"0.0.0.0"</span>                              <span class="meta">#允许被访问</span></span><br><span class="line">elasticsearch.url: <span class="string">"http://172.20.20.29:9200"</span>        <span class="meta">#es地址与端口</span></span><br></pre></td></tr></table></figure>
<h2 id="4-3-启动并验证"><a href="#4-3-启动并验证" class="headerlink" title="4.3 启动并验证"></a>4.3 启动并验证</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/home/elk/kibana<span class="number">-5.3</span><span class="number">.2</span>-linux-x86_64/bin/kibana &amp;</span><br></pre></td></tr></table></figure>
<p>&amp; 在后台启动</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | grep <span class="number">5601</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819290432.png" alt="图14"></p>
<h2 id="4-4-kibana展示"><a href="#4-4-kibana展示" class="headerlink" title="4.4 kibana展示"></a>4.4 kibana展示</h2><p>浏览器访问：<a href="http://172.20.20.29:5601" target="_blank" rel="noopener">http://172.20.20.29:5601</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819299454.png" alt="图15"></p>
<p>需要在“<code>Index name or pattern</code>”处创建索引名，<code>elassticsearch</code>中并没有以”<code>logstash-*</code>”命名的索引，则不能创建，新建索引对应<code>logstash</code>的<code>pipeline</code>输出插件定义的”<code>index</code>”，即”<code>messages-*</code>”，如下：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819307895.png" alt="图16"></p>
<p>在“<code>Index name or pattern</code>”处填写入正确的索引名字，”<code>@timestamp</code>”会自动填充，点击”<code>create</code>”创建，见到如下界面即索引创建完成；<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819316550.png" alt="图17"></p>
<p>在“<code>Discover</code>”页面，可以搜索与浏览<code>Elasticsearch</code>中的数据，默认搜索的是最近<code>15分钟</code>的数据，可以自定义选择时间。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/ELK部署/1571819323959.png" alt="图18"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay6.2-ce4官方原版安装简述</title>
    <url>/2018/09/07/Liferay6-2-ce4%E5%AE%98%E6%96%B9%E5%8E%9F%E7%89%88%E5%AE%89%E8%A3%85%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-软件："><a href="#1-软件：" class="headerlink" title="1 软件："></a>1 软件：</h1><p>Tomcat: apache-tomcat-7.0.61.tar.gz</p>
<p>Java: java version “1.7.0_76”</p>
<p>Liferay: liferay-portal-6.2-ce-ga4-20150416163831865.war</p>
<h1 id="2-简单步骤"><a href="#2-简单步骤" class="headerlink" title="2 简单步骤"></a>2 简单步骤</h1><ul>
<li>解压java、tomcat,设置环境变量</li>
<li>创建liferay目录，把java、tomcat放进这个目录</li>
<li>下载liferay依赖包，放到tomcat/lib/ext目录（重要）</li>
<li>新建setenc.sh</li>
<li>新建ROOT.xml</li>
<li>修改catalina.properties、server.xml</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>liferay</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay服务器迁移(32位迁移至64位)</title>
    <url>/2018/09/07/Liferay%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%81%E7%A7%BB-32%E4%BD%8D%E8%BF%81%E7%A7%BB%E8%87%B364%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="1-原运行环境："><a href="#1-原运行环境：" class="headerlink" title="1 原运行环境："></a>1 原运行环境：</h1><a id="more"></a>
<p>系统：CentOS 6.4 32位</p>
<p>Liferay:32位版本  bitnami-liferay-6.2-7-linux-installer</p>
<h1 id="2-新运行环境："><a href="#2-新运行环境：" class="headerlink" title="2 新运行环境："></a>2 新运行环境：</h1><p>系统：CentOS7.2 64位</p>
<p>Liferay:由原软件目录直接拷贝到新系统，修改java、apache-tomcat目录为64位安装版目录，迁移数据和配置文件：/opt/liferay/apache-tomcat/temp     /opt/liferay-6.2-7/apache-tomcat.bak/webapps/liferay/WEB-INF/classes/ portal-ext.properties</p>
<h1 id="3-新系统运行32位软件需安装"><a href="#3-新系统运行32位软件需安装" class="headerlink" title="3 新系统运行32位软件需安装"></a>3 新系统运行32位软件需安装</h1><p>64位系统运行32位软件，需要安装32位运行库等。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">glibc</span><span class="selector-class">.i686</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">xulrunner</span><span class="selector-class">.i686</span></span><br></pre></td></tr></table></figure>
<p>安装后访问平台流程插件需要重新安装，否则流程工作台无法正常工作及显示。</p>
<p>Liferay 集成公司OA流程控制台方法：</p>
<ol>
<li>用管理员登录liferay，进入应用程序管理页面，上传流程控制台插件，然后安装。如下图<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay服务器迁移(32位迁移至64位" alt="图1">/1571819590646.png)</li>
</ol>
<ol start="2">
<li><p>安装完后，可以在程序管理页面看到安装后的插件，如下图。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay服务器迁移(32位迁移至64位" alt="图2">/1571819598879.png)</p>
</li>
<li><p>切换到站点首页，添加页面内容，然后把任务提醒拉到要显示的位置，如下图：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay服务器迁移(32位迁移至64位" alt="图3">/1571819606383.png)</p>
</li>
</ol>
<ol start="4">
<li>ssh登录到服务器，将<code>/opt/liferay-6.2-7/apache-tomcat/webapps/workflow-portlet</code>目录备份更名，然后解压<code>workflow-portlet20170208.tar.gz</code>到<code>/opt/liferay-6.2-7/apache-tomcat/webapps/workflow-portlet</code>目录，如下图。 解压后，重启liferay。</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay服务器迁移(32位迁移至64位" alt="图4">/1571819614329.png)</p>
<ol start="5">
<li>在服务器上再次部署流程控制台web服务器tomcat。将tomcat程序复制到服务器/opt目录下，然后调整tomcat的端口，避免和liferay的tomcat端口冲突。修改/opt/tomcat7/conf/server.xml 文件。</li>
</ol>
<p>修改位置：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay服务器迁移(32位迁移至64位" alt="图5">/1571819623044.png)<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay服务器迁移(32位迁移至64位" alt="图6">/1571819631617.png)<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay服务器迁移(32位迁移至64位" alt="图7">/1571819640024.png)</p>
<ol start="6">
<li>tomcat配置好后，找研发人员要最新版本的流程开发程序包。文件名：DeWorkFlow.war。 将此文件放在/opt/tomcat7/webapps 目录下。如下图：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay服务器迁移(32位迁移至64位" alt="图8">/1571819648992.png)</li>
</ol>
<blockquote>
<p>备注：DeWorkFlow.war插件公司内部提供。</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>liferay</tag>
      </tags>
  </entry>
  <entry>
    <title>Bitnami_Liferay系统设置去掉后缀</title>
    <url>/2018/09/07/Bitnami-Liferay%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E5%8E%BB%E6%8E%89%E5%90%8E%E7%BC%80/</url>
    <content><![CDATA[<h1 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1 修改配置文件"></a>1 修改配置文件</h1><a id="more"></a>
<p>执行以下操作：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">mv <span class="regexp">/opt/</span>liferay<span class="number">-6.2</span><span class="number">-7</span><span class="regexp">/apache-tomcat/</span>webapps<span class="regexp">/ROOT/</span> <span class="regexp">/opt/</span>liferay<span class="number">-6.2</span><span class="number">-7</span><span class="regexp">/apache-tomcat/</span>webapps/ROOT.backup</span><br><span class="line"></span><br><span class="line">mv <span class="regexp">/opt/</span>liferay<span class="number">-6.2</span><span class="number">-7</span><span class="regexp">/apache-tomcat/</span>webapps<span class="regexp">/liferay /</span>opt<span class="regexp">/liferay-6.2-7/</span>apache-tomcat<span class="regexp">/webapps/</span>ROOT</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">'s/portal.ctx/#portal.ctx/g'</span>  <span class="regexp">/opt/</span>liferay<span class="number">-6.2</span><span class="number">-7</span><span class="regexp">/apache-tomcat/</span>webapps<span class="regexp">/ROOT/</span>WEB-INF<span class="regexp">/classes/</span>portal-ext.properties</span><br></pre></td></tr></table></figure>
<p>打开<code>/opt/liferay-6.2-7/apps/liferay/conf/httpd-app.conf</code>文件做如下修改：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">将<span class="params">&lt;Location /liferay&gt;</span></span><br><span class="line"></span><br><span class="line">  ProxyPass ajp:<span class="comment">//localhost:8009/liferay</span></span><br><span class="line"></span><br><span class="line">  <span class="params">&lt;IfModule pagespeed_module&gt;</span></span><br><span class="line"></span><br><span class="line">      ModPagespeedDisallow <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line">  <span class="params">&lt;/IfModule&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;/Location&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">改为：</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;Location /&gt;</span></span><br><span class="line"></span><br><span class="line">  ProxyPass ajp:<span class="comment">//localhost:8009/</span></span><br><span class="line"></span><br><span class="line">  <span class="params">&lt;IfModule pagespeed_module&gt;</span></span><br><span class="line"></span><br><span class="line">      ModPagespeedDisallow <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line">  <span class="params">&lt;/IfModule&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;/Location&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">并且在最后加上：</span><br><span class="line"></span><br><span class="line"><span class="meta"># App url redirect</span></span><br><span class="line"></span><br><span class="line">RewriteEngine On</span><br><span class="line"></span><br><span class="line">RedirectMatch ^/$ /</span><br></pre></td></tr></table></figure>
<h1 id="2-修改数据库"><a href="#2-修改数据库" class="headerlink" title="2 修改数据库"></a>2 修改数据库</h1><p>访问bitnami_liferay数据库，找到journalarticle表，用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> journalarticle <span class="keyword">set</span> <span class="keyword">content</span>=<span class="keyword">REPLACE</span> (<span class="keyword">content</span>,<span class="string">'/liferay/document'</span>,<span class="string">'/document'</span>)</span><br></pre></td></tr></table></figure>
<p>对表中<code>content</code>字段的记录进行批量替换</p>
<blockquote>
<p>最后手工修改“规章制度”和“文档模板”的链接<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Bitnami_Liferay系统设置去掉后缀/1571819065720.png" alt="图1"></p>
</blockquote>
<p>现在访问<a href="http://172.20.20.58已经可以正常显示了" target="_blank" rel="noopener">http://172.20.20.58已经可以正常显示了</a> </p>
<p>参考：<a href="https://wiki.bitnami.com/Applications/BitNami_Liferay#Manual_Approach" target="_blank" rel="noopener">https://wiki.bitnami.com/Applications/BitNami_Liferay#Manual_Approach</a> </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>bitnami</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay中文乱码(tomcat中文乱码)</title>
    <url>/2018/09/07/Liferay%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81-tomcat%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay中文乱码(tomcat中文乱码" alt="图1">/1571819676411.png)<br><a id="more"></a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay中文乱码(tomcat中文乱码" alt="图2">/1571819683261.png)<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Liferay中文乱码(tomcat中文乱码" alt="图3">/1571819691542.png)<br>都是修改tomcat配置文件<code>server.xml</code>,添加<code>URIEncoding=”UTF-8”</code>解决问题。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>liferay</tag>
      </tags>
  </entry>
  <entry>
    <title>Mediawiki优化</title>
    <url>/2018/09/07/Mediawiki%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-修改URL后缀"><a href="#1-修改URL后缀" class="headerlink" title="1 修改URL后缀"></a>1 修改URL后缀</h1><p>修改网址显示（<code>http://172.20.20.21/mediawiki/首页</code>改为<code>http://172.20.20.21/首页</code>）</p>
<ul>
<li>修改/opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/ LocalSettings.php文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">wgArticlePath = <span class="string">"/mediawiki/<span class="variable">$1</span>"</span>;</span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">wgArticlePath = <span class="string">"/<span class="variable">$1</span>"</span>;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>再修改/opt/mediawiki-1.26.2-2/apache2/conf/bitnami/bitnami.conf</li>
</ul>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost _default_:80&gt;</span><br><span class="line"></span><br><span class="line">DocumentRoot "/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/apache2/htdocs"</span><br><span class="line"></span><br><span class="line">&lt;Directory "/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/apache2/htdocs"&gt;</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost _default_:80&gt;</span><br><span class="line"></span><br><span class="line">DocumentRoot "/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/apps/mediawiki/htdocs"</span><br><span class="line"></span><br><span class="line">&lt;Directory "/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/apps/mediawiki/htdocs"&gt;</span><br></pre></td></tr></table></figure>
<h1 id="2-修改网站LOGO"><a href="#2-修改网站LOGO" class="headerlink" title="2 修改网站LOGO"></a>2 修改网站LOGO</h1><h2 id="2-1-右上角logo"><a href="#2-1-右上角logo" class="headerlink" title="2.1 右上角logo"></a>2.1 右上角logo</h2><p><strong>方法一</strong>,替换图片文件。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>mediawiki<span class="number">-1.26</span><span class="number">.2</span><span class="number">-2</span><span class="regexp">/apps/</span>mediawiki<span class="regexp">/htdocs/</span>resources<span class="regexp">/assets/</span>wiki.png</span><br></pre></td></tr></table></figure>
<p><strong>方法二</strong>，修改<code>LocalSettings.php</code>文件，重新指定LOGO路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">wgLogo             = <span class="string">"<span class="variable">$wgScriptPath</span>/resources/assets/huahe.png"</span>;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-左下角"><a href="#2-2-左下角" class="headerlink" title="2.2 左下角"></a>2.2 左下角</h2><p>在配置文件LocalSettings.php中加入如下行即<code>unset($wgFooterIcons[&#39;poweredby&#39;]);</code></p>
<h1 id="3-修改目录悬浮加自动隐藏"><a href="#3-修改目录悬浮加自动隐藏" class="headerlink" title="3 修改目录悬浮加自动隐藏"></a>3 修改目录悬浮加自动隐藏</h1><p>让目录悬浮起来，并且在不用时让它自动折叠起来，方便阅读和其他操作。自动折叠通过CSS的hover选择器实现，当鼠标移动到目录上时，目录框自动变大。</p>
<p>代码</p>
<p>先进入到下面页面（也许你需要将localhost替换成其他的）：</p>
<p><a href="http://localhost/mediawiki/index.php/MediaWiki:Common.css" target="_blank" rel="noopener">http://localhost/mediawiki/index.php/MediaWiki:Common.css</a></p>
<p>在此页你可以设置全局的css样式，在这里加入如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#toc</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: block;</span><br><span class="line"> <span class="attribute">position</span>: fixed;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line"> <span class="attribute">min-width</span>: <span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">max-width</span>: <span class="number">350px</span>;</span><br><span class="line"> <span class="attribute">max-height</span>: <span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#aaa</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span>;</span><br><span class="line"> <span class="attribute">-moz-border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(249,249,249,0.75);</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">8px</span> #;</span><br><span class="line"> <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">8px</span> #;</span><br><span class="line"> <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">8px</span> #;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-id">#toc</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: block;</span><br><span class="line"> <span class="attribute">position</span>: fixed;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line"> <span class="attribute">min-width</span>: <span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">max-width</span>: <span class="number">350px</span>;</span><br><span class="line"> <span class="attribute">max-height</span>: <span class="number">500px</span>;</span><br><span class="line"> <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#aaa</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span>;</span><br><span class="line"> <span class="attribute">-moz-border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(249,249,249,0.75);</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">8px</span> #;</span><br><span class="line"> <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">8px</span> #;</span><br><span class="line"> <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">8px</span> #;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">overflow-x</span>: hidden;&#125;</span><br></pre></td></tr></table></figure>
<p>保存，清除浏览器缓存，看看如何！</p>
<p>简直炫酷！。</p>
<p><strong>关键点解释</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">top</span>: <span class="number">100px</span>;　　目录框到顶部距离</span><br><span class="line"></span><br><span class="line"><span class="attribute">right</span>: <span class="number">0px</span>;　　   目录框到右边框距离</span><br><span class="line"></span><br><span class="line"><span class="attribute">min-width</span>: <span class="number">100px</span>;　　目录框最小宽度</span><br><span class="line"></span><br><span class="line"><span class="attribute">max-width</span>: <span class="number">350px</span>;　　目录框最大宽度</span><br><span class="line"></span><br><span class="line"><span class="attribute">max-height</span>: <span class="number">500px</span>;　　目录框最大高度</span><br><span class="line"></span><br><span class="line"><span class="attribute">background</span>: rgba(<span class="number">249</span>,<span class="number">249</span>,<span class="number">249</span>,<span class="number">0.75</span>);　　背景色和透明度</span><br></pre></td></tr></table></figure>
<p>MediaWiki版本</p>
<p>1.20.2</p>
<p>参考<br><a href="http://blog.klniu.com/post/mediawiki-floating-directory-and-scroll/" target="_blank" rel="noopener">http://blog.klniu.com/post/mediawiki-floating-directory-and-scroll/</a> </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mediawiki</tag>
        <tag>wiki</tag>
      </tags>
  </entry>
  <entry>
    <title>bitnami删除页面右下角Manage图标</title>
    <url>/2018/09/07/bitnami%E5%88%A0%E9%99%A4%E9%A1%B5%E9%9D%A2%E5%8F%B3%E4%B8%8B%E8%A7%92Manage%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<h1 id="Bitnami-info-page"><a href="#Bitnami-info-page" class="headerlink" title="Bitnami info page"></a>Bitnami info page</h1><a id="more"></a>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/bitnami删除页面右下角Manage图标/1571819104067.png" alt="图1"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/bitnami删除页面右下角Manage图标/1571819112877.png" alt="图2"><br><strong>How to remove the banner(如何删除旗帜)</strong></p>
<p>如果你想删除的旗帜，你只需要使用工具<code>bnconfig</code>,执行下面命令。</p>
<p><strong>Linux and OS X Systems</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sudo <span class="string">/opt/bitnami/apps/</span>软件目录<span class="string">/bnconfig</span> <span class="params">--disable_banner</span> 1</span><br></pre></td></tr></table></figure>
<p>然后重启APache:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ sudo /<span class="keyword">opt</span>/bitnami/ctlscript.<span class="keyword">sh</span> restart apache</span><br></pre></td></tr></table></figure>
<p><strong>Windows Systems</strong></p>
<p>进入算计路径：:</p>
<p><code>cd apps\</code>软件目录</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bnconfig.exe </span>--<span class="keyword">disable_banner </span><span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>bitnami</tag>
      </tags>
  </entry>
  <entry>
    <title>Mediawiki安装及LDAP认证问题</title>
    <url>/2018/09/07/Mediawiki%E5%AE%89%E8%A3%85%E5%8F%8ALDAP%E8%AE%A4%E8%AF%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<p>安装环境：CentOS-7-x86_64-DVD-1511</p>
<p>Mediawiki: bitnami-mediawiki-1.26.2-2-linux-x64-installer.run</p>
<p>LDAP扩展插件：LdapAuthentication-REL1_26-70ab129.tar.gz</p>
<h1 id="2-安装mediawiki"><a href="#2-安装mediawiki" class="headerlink" title="2 安装mediawiki"></a>2 安装mediawiki</h1><p>首先安装<code>bitnami-mediawiki-1.26.2-2-linux-x64-installer.run</code></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">#chmod   <span class="number">755</span> bitnami-mediawiki<span class="number">-1.26</span><span class="number">.2</span><span class="number">-2</span>-linux-x64-installer.run   <span class="comment">//赋予读写权限</span></span><br><span class="line"></span><br><span class="line">#./bitnami-mediawiki<span class="number">-1.26</span><span class="number">.2</span><span class="number">-2</span>-linux-x64-installer.run           <span class="comment">//执行安装</span></span><br></pre></td></tr></table></figure>
<p><strong>安装到最后出现mysql数据库错误</strong>：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Error: </span>Error running /opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/mysql/scripts/myscript.sh</span><br><span class="line"></span><br><span class="line">/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/mysql ****: FATAL ERROR: please install the following</span><br><span class="line"></span><br><span class="line">Perl modules before executing scripts/mysql_install_db:</span><br><span class="line"></span><br><span class="line">Data::Dumper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ERROR </span>2002 (HY000): Can't connect to local MySQL server through socket</span><br><span class="line"></span><br><span class="line">'/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/mysql/tmp/mysql.sock' (2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ERROR </span>2002 (HY000): Can't connect to local MySQL server through socket</span><br><span class="line"></span><br><span class="line">'/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/mysql/tmp/mysql.sock' (2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ERROR </span>2002 (HY000): Can't connect to local MySQL server through socket</span><br><span class="line"></span><br><span class="line">'/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/mysql/tmp/mysql.sock' (2)</span><br></pre></td></tr></table></figure>
<p>（根据提示，发现系统缺少Dumper模块）</p>
<p>根据提示安装Data-Dumper.x86_64</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="attr"># yum install perl-Data-Dumper.x86</span>_<span class="number">64</span>          <span class="comment">//安装插件模块。</span></span><br></pre></td></tr></table></figure>
<p>……………</p>
<p>OK,  Mediawiki安装成功。</p>
<h1 id="3-开启AD域用户认证登录"><a href="#3-开启AD域用户认证登录" class="headerlink" title="3 开启AD域用户认证登录"></a>3 开启AD域用户认证登录</h1><p>Ldap认证需要php支持ldap,需要安装ldap支持模块（<code>php-ldap</code>），及开启<code>php</code>的<code>ldap</code>功能(修改<code>php.ini</code>文件)。</p>
<pre><code>&gt; 备注：不安装php-ldap，LdapAuthentication插件不工作
</code></pre><p>1、  安装php-ldap模块：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@localhost</span> mediawiki]<span class="comment"># yum   install php-ldap</span></span><br></pre></td></tr></table></figure>
<p> 2、 开启<code>ldap</code>功能<br>即修改<code>php.ini</code>文件，将<code>extension=php_ldap.dll</code>前的分号去掉。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@localhost mediawiki]# vi   /opt/mediawiki<span class="number">-1.26</span><span class="number">.2</span><span class="number">-2</span>/php/etc/php.ini</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Mediawiki安装及LDAP认证问题/1571819784288.png" alt="图1"></p>
<p>3、下载<code>LdapAuthentication</code>插件：<code>LdapAuthentication-REL1_26-70ab129.tar.gz</code></p>
<p>解压插件到extensions目录：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># tar -xzf   LdapAuthentication-REL1_26<span class="number">-70</span>ab129.tar.gz   /opt/mediawiki<span class="number">-1.26</span><span class="number">.2</span><span class="number">-2</span>/apps/mediawiki/htdocs/extensions/</span><br></pre></td></tr></table></figure>
<p>4、编辑<code>LocalSettings.php</code>配置文件<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Mediawiki安装及LDAP认证问题/1571819794815.png" alt="图2"></p>
<p>在<code>LocalSettings.php</code> 末尾添加如下内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span>(<span class="string">"extensions/LdapAuthentication/LdapAuthentication.php"</span>);</span><br><span class="line"></span><br><span class="line">$wgAuth= <span class="keyword">new</span> LdapAuthenticationPlugin(); <span class="comment">## 这两行激活插件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$wgLDAPDomainNames = <span class="keyword">array</span>( <span class="string">"dealeasy"</span>   );    <span class="comment">//域名简写</span></span><br><span class="line"></span><br><span class="line">$wgLDAPServerNames = <span class="keyword">array</span>(   <span class="string">"dealeasy"</span>=&gt;<span class="string">"172.20.20.10"</span> );     <span class="comment">//域控域名或者ip</span></span><br><span class="line"></span><br><span class="line">$wgLDAPSearchStrings = <span class="keyword">array</span>(   <span class="string">"dealeasy"</span>=&gt;<span class="string">"USER-NAME@dealeasy"</span> );     <span class="comment">//USER-NAME 不要修改它,默认用户名替代位置，特定字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$wgLDAPBaseDNs = <span class="keyword">array</span>(   <span class="string">"dealeasy"</span>=&gt;<span class="string">"dc=dealeasy,dc=local"</span>);</span><br><span class="line"></span><br><span class="line">$wgLDAPSearchAttributes = <span class="keyword">array</span>(   <span class="string">"dealeasy"</span>=&gt;<span class="string">"sAMAccountName"</span>);    <span class="comment">//加上这两句就可以把DC上的用户名都同步过来了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$wgLDAPUseLocal = <span class="keyword">false</span>;       是否使用本地用户,ture代表使用，这里写入不使用</span><br><span class="line"></span><br><span class="line">$wgLDAPUpdateLDAP = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">$wgLDAPMailPassword = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$wgMinimalPasswordLength = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">$wgLDAPEncryptionType =   <span class="keyword">array</span>(<span class="string">"dealeasy"</span>=&gt;<span class="string">"clear"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$wgShowSQLErrors = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">$wgDebugDumpSql = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">$wgShowDBErrorBacktrace = <span class="keyword">true</span>;          <span class="comment">//这三行网上找到，因ldap用户登录出现数据库查询错误，添加这三行后，在出现错误时可以在页面上显示错误信息</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Mediawiki安装及LDAP认证问题/1571819804555.png" alt="图3"></p>
<p>Ok, <code>LocalSettings.php</code>编辑完成。</p>
<p>下面就可以直接使用域用户登录了。</p>
<h1 id="4-Database错误"><a href="#4-Database错误" class="headerlink" title="4 Database错误"></a>4 Database错误</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Mediawiki安装及LDAP认证问题/1571819811869.png" alt="图4"></p>
<p>报错（前面<code>LocalSettings.php</code>添加后三行才能看到报错详情）：</p>
<p><strong>Database error</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Mediawiki安装及LDAP认证问题/1571819821732.png" alt="图5"><br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">A database <span class="keyword">query</span> <span class="keyword">error</span> has occurred. This may indicate a bug <span class="keyword">in</span> the software.</span><br><span class="line"></span><br><span class="line">（翻译：数据库错误　　　　一个数据库查询错误发生。这可能表明软件中的缺陷。）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Query</span>:</span><br><span class="line"></span><br><span class="line">SELECT domain FROM `ldap_domains` WHERE user_id = '4' LIMIT 1</span><br><span class="line"></span><br><span class="line">Function: LdapAuthenticationPlugin::loadDomain</span><br><span class="line"></span><br><span class="line"><span class="keyword">Error</span>: 1146 <span class="keyword">Table</span> 'bitnami_mediawiki.ldap_domains' doesn't exist (localhost:3306)</span><br><span class="line"></span><br><span class="line">Backtrace:</span><br><span class="line"></span><br><span class="line">#0 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/<span class="keyword">db</span>/Database.php(1076): DatabaseBase-&gt;reportQueryError('<span class="keyword">Table</span> 'bitnami_...', 1146, 'SELECT  domain ...', 'LdapAuthenticat...', false)</span><br><span class="line"></span><br><span class="line">#1 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/<span class="keyword">db</span>/Database.php(1600): DatabaseBase-&gt;<span class="keyword">query</span>('SELECT  domain ...', 'LdapAuthenticat...')</span><br><span class="line"></span><br><span class="line">#2 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/<span class="keyword">db</span>/Database.php(1689): DatabaseBase-&gt;select('ldap_domains', Array, Array, 'LdapAuthenticat...', Array, Array)</span><br><span class="line"></span><br><span class="line">#3 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/extensions/LdapAuthentication/LdapAuthentication.php(2041): DatabaseBase-&gt;selectRow('ldap_domains', Array, Array, 'LdapAuthenticat...')</span><br><span class="line"></span><br><span class="line">#4 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/extensions/LdapAuthentication/LdapAuthentication.php(2060): LdapAuthenticationPlugin::loadDomain(Object(User))</span><br><span class="line"></span><br><span class="line">#5 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/extensions/LdapAuthentication/LdapAuthentication.php(1237): LdapAuthenticationPlugin::saveDomain(Object(User), 'dealeasy')</span><br><span class="line"></span><br><span class="line">#6 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/specials/SpecialUserlogin.php(830): LdapAuthenticationPlugin-&gt;updateUser(Object(User))</span><br><span class="line"></span><br><span class="line">#7 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/specials/SpecialUserlogin.php(958): LoginForm-&gt;authenticateUserData()</span><br><span class="line"></span><br><span class="line">#8 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/specials/SpecialUserlogin.php(341): LoginForm-&gt;processLogin()</span><br><span class="line"></span><br><span class="line">#9 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/specialpage/SpecialPage.php(384): LoginForm-&gt;execute(NULL)</span><br><span class="line"></span><br><span class="line">#10 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/specialpage/SpecialPageFactory.php(553): SpecialPage-&gt;<span class="keyword">run</span>(NULL)</span><br><span class="line"></span><br><span class="line">#11 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/MediaWiki.php(281): SpecialPageFactory::executePath(Object(Title), Object(RequestContext))</span><br><span class="line"></span><br><span class="line">#12 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/MediaWiki.php(714): MediaWiki-&gt;performRequest()</span><br><span class="line"></span><br><span class="line">#13 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/includes/MediaWiki.php(508): MediaWiki-&gt;main()</span><br><span class="line"></span><br><span class="line">#14 /opt/mediawiki-1.26.2-2/apps/mediawiki/htdocs/index.php(41): MediaWiki-&gt;<span class="keyword">run</span>()</span><br><span class="line"></span><br><span class="line">#15 &#123;main&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终，通过报错信息<code>Error: 1146 Table &#39;bitnami_mediawiki.ldap_domains&#39; doesn&#39;t exist (localhost:3306)</code>，发现不存在<code>ldap_domains</code>表，即<code>bitnami_mediawiki</code>不存在这个表，后来尝试在<code>phpmyAdmin</code>上为<code>bitnami_mediawiki</code>创建<code>ldap_domains</code>表，并在表内创建<code>user_id</code>和<code>domain</code>列，问题解决。</p>
<blockquote>
<p>备注：根据多次实验和页面错误提示，才确认建立<code>user_id</code>和<code>domain</code>列</p>
</blockquote>
<h1 id="5-备份"><a href="#5-备份" class="headerlink" title="5 备份"></a>5 备份</h1><p>备份数据库、配置文件、附件目录<code>images</code>、插件目录<code>extensions</code></p>
<h2 id="5-1-备份脚本"><a href="#5-1-备份脚本" class="headerlink" title="5.1 备份脚本"></a>5.1 备份脚本</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Now=$(date   +<span class="string">"%Y%m%d%H"</span>)</span><br><span class="line"></span><br><span class="line">File=bitnami_mediawiki-$Now.sql</span><br><span class="line"></span><br><span class="line">echo   **********start$Now************    &gt;&gt;    <span class="regexp">/mnt/</span>mediawiki-bak<span class="regexp">/log/</span>$Now.log</span><br><span class="line"></span><br><span class="line"><span class="regexp">/opt/</span>mediawiki<span class="number">-1.26</span><span class="number">.2</span><span class="number">-2</span><span class="regexp">/mysql/</span>bin<span class="regexp">/mysqldump   -uroot -pDe123456 bitnami_mediawiki &gt; /</span>mnt<span class="regexp">/mediawiki-bak/</span>$File</span><br><span class="line"></span><br><span class="line">echo   **********cp LocalSettings.php********** &gt;&gt;  <span class="regexp">/mnt/</span>mediawiki-bak<span class="regexp">/log/</span>$Now.log</span><br><span class="line"></span><br><span class="line">rsync   -avzrtopgL  --progress    <span class="regexp">/opt/</span>mediawiki<span class="number">-1.26</span><span class="number">.2</span><span class="number">-2</span><span class="regexp">/apps/</span>mediawiki<span class="regexp">/htdocs/</span>LocalSettings.php   <span class="regexp">/mnt/</span>mediawiki-bak/LocalSettings.php</span><br><span class="line"></span><br><span class="line">echo   *********cp images ******** &gt;&gt;    <span class="regexp">/mnt/</span>mediawiki-bak<span class="regexp">/log/</span>$Now.log</span><br><span class="line"></span><br><span class="line">rsync   -avzrtopgL  --progress   <span class="regexp">/opt/</span>mediawiki<span class="number">-1.26</span><span class="number">.2</span><span class="number">-2</span><span class="regexp">/apps/</span>mediawiki<span class="regexp">/htdocs/</span>images <span class="regexp">/mnt/</span>mediawiki-bak/</span><br><span class="line"></span><br><span class="line">echo   ********cp extensions ********* &gt;&gt;    <span class="regexp">/mnt/</span>mediawiki-bak<span class="regexp">/log/</span>$Now.log</span><br><span class="line"></span><br><span class="line">rsync   -avzrtopgL  --progress   <span class="regexp">/opt/</span>mediawiki<span class="number">-1.26</span><span class="number">.2</span><span class="number">-2</span><span class="regexp">/apps/</span>mediawiki<span class="regexp">/htdocs/</span>extensions <span class="regexp">/mnt/</span>mediawiki-bak<span class="regexp">/   &gt;&gt; /</span>mnt<span class="regexp">/mediawiki-bak/</span>log/$Now.log</span><br><span class="line"></span><br><span class="line">echo   ********end$Now********* &gt;&gt; <span class="regexp">/mnt/</span>mediawiki-bak<span class="regexp">/log/</span>$Now.log</span><br></pre></td></tr></table></figure>
<h1 id="6-安装包及插件等"><a href="#6-安装包及插件等" class="headerlink" title="6 安装包及插件等"></a>6 安装包及插件等</h1><p><img src="LdapAuthentication-REL1_26-70ab129.tar.gz" alt="LdapAuthentication-REL1_26-70ab129.tar.gz"></p>
<p><img src="LdapAuthentication-REL1_26-70ab129.tar.gz" alt="LdapAuthentication-REL1_26-70ab129.tar.gz"></p>
<p><img src="MsUpload-REL1_26-47cfb25.tar.gz" alt="MsUpload-REL1_26-47cfb25.tar.gz"></p>
<p><img src="SyntaxHighlight_GeSHi-REL1_26-a15f02e.tar.gz" alt="SyntaxHighlight_GeSHi-REL1_26-a15f02e.tar.gz"></p>
<p><img src="WikiEditor-REL1_26-72db6c7.tar.gz" alt="WikiEditor-REL1_26-72db6c7.tar.gz"></p>
<p>安装包：<code>bitnami_mediawiki</code>（自己下载）</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>wiki</tag>
        <tag>Mediawiki</tag>
      </tags>
  </entry>
  <entry>
    <title>bitnami软件修改URL方法</title>
    <url>/2018/09/07/bitnami%E8%BD%AF%E4%BB%B6%E4%BF%AE%E6%94%B9URL%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-更改首页页面"><a href="#1-更改首页页面" class="headerlink" title="1 更改首页页面"></a>1 更改首页页面</h1><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">install/apache2/<span class="keyword">conf</span>/bitnami/bitnami.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>修改<code>bitnami.con</code>文件，更改首页页面。</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost _default_:80&gt;</span><br><span class="line">  DocumentRoot "/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/apache2/htdocs"</span><br><span class="line">  &lt;Directory "/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/apache2/htdocs"&gt;</span><br><span class="line">   改为</span><br><span class="line">&lt;VirtualHost _default_:80&gt;</span><br><span class="line">  DocumentRoot "/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/apps/mediawiki/htdocs"</span><br><span class="line">  &lt;Directory "/opt/mediawiki<span class="string">-1</span>.26.2<span class="string">-2</span>/apps/mediawiki/htdocs"&gt;</span><br></pre></td></tr></table></figure>
<h1 id="2-更改应用访问地址后缀"><a href="#2-更改应用访问地址后缀" class="headerlink" title="2 更改应用访问地址后缀"></a>2 更改应用访问地址后缀</h1><p>例如：<a href="http://172.20.20.37/moodle" target="_blank" rel="noopener">http://172.20.20.37/moodle</a>   改为<a href="http://172.20.20.37" target="_blank" rel="noopener">http://172.20.20.37</a> </p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">Install/apps/moodle/<span class="keyword">conf</span>/httpd-prefix.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>修改<code>httpd-prefix.conf</code>文件，更改应用页面更目录</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Alias /moodle/ "C:<span class="tag">\<span class="name">Bitnami</span></span><span class="tag">\<span class="name">moodle</span></span>-2.8.5-1/apps/moodle/htdocs/login/"</span><br><span class="line">Alias /moodle "C:<span class="tag">\<span class="name">Bitnami</span></span><span class="tag">\<span class="name">moodle</span></span>-2.8.5-1/apps/moodle/htdocs/login/"</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">DocumentRoot "C:<span class="tag">\<span class="name">Bitnami</span></span><span class="tag">\<span class="name">moodle</span></span>-2.8.5-1/apps/moodle/htdocs/login"   </span><br><span class="line">#Alias /moodle/ "C:<span class="tag">\<span class="name">Bitnami</span></span><span class="tag">\<span class="name">moodle</span></span>-2.8.5-1/apps/moodle/htdocs/login/"</span><br><span class="line">#Alias /moodle "C:<span class="tag">\<span class="name">Bitnami</span></span><span class="tag">\<span class="name">moodle</span></span>-2.8.5-1/apps/moodle/htdocs/login/"</span><br></pre></td></tr></table></figure>
<h1 id="3-更改应用根目录。"><a href="#3-更改应用根目录。" class="headerlink" title="3 更改应用根目录。"></a>3 更改应用根目录。</h1><p>一般情况下，只需修改<code>bitnami.con</code>文件就可以达到URL后缀显示的问题，个别情况下需要修改<code>apps</code>下的<code>httpd-prefix.conf</code>文件。</p>
<p>还可以修改后缀名称。</p>
<p>例如：<a href="http://172.20.20.21/moodle" target="_blank" rel="noopener">http://172.20.20.21/moodle</a>     改为 <a href="http://172.20.20.21/mmkk" target="_blank" rel="noopener">http://172.20.20.21/mmkk</a> </p>
<p>也是修改<code>httpd-prefix.conf</code>文件。</p>
<h1 id="4-修改端口号：参考上面80位置"><a href="#4-修改端口号：参考上面80位置" class="headerlink" title="4 修改端口号：参考上面80位置"></a>4 修改端口号：参考上面80位置</h1><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">install/apache2/<span class="keyword">conf</span>/bitnami/bitnami.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>如果还不行，同时修改apache配置文件端口号。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">install/apache2/<span class="keyword">conf</span>/httpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>bitnami</tag>
      </tags>
  </entry>
  <entry>
    <title>OTRS发送邮件设置</title>
    <url>/2018/09/07/OTRS%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="分三步"><a href="#分三步" class="headerlink" title="分三步:"></a>分三步:</h1><a id="more"></a>
<ol>
<li>(图一)在<code>系统配置</code>里找到<code>Framework -&gt; Core::Sendmail</code> 配置你的 SMTP 信息, 如帐号, 密码, 邮件服务器地址<br>直达地址:<br><a href="https://your.otrs.host/otrs/in" target="_blank" rel="noopener">https://your.otrs.host/otrs/in</a> … ework</li>
</ol>
<blockquote>
<p> 如果发送邮件失败，按图中的位置把邮箱地址写上<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS发送邮件设置/1571819887041.png" alt="图1"></p>
</blockquote>
<ol start="2">
<li>(图二)在系统管理找到配置邮件发送地址管理, 增加系统邮件地址<br>直达地址:<br><a href="https://your.otrs.host/otrs/in" target="_blank" rel="noopener">https://your.otrs.host/otrs/in</a> … dress<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS发送邮件设置/1571819897029.png" alt="图2"></li>
</ol>
<ol start="3">
<li>(图三)在队列调用该邮件地址<br>直达地址:<br><a href="https://your.otrs.host/otrs/in" target="_blank" rel="noopener">https://your.otrs.host/otrs/in</a> … D%3D1<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS发送邮件设置/1571819905665.png" alt="图3"> </li>
</ol>
<ol start="4">
<li><p>创建工单, 测试发送邮件, 如果无法发送请抓系统日志来看.</p>
</li>
<li><p>可能遇到的问题, 通知邮件发送不出去, 请使用本网站的搜索功能, 此问题已经讨论过很多了. 如果你找很久(骂前面解决问题后失踪人)才找到, 那么请对有用的答案点赞, 这样就会影响问题的先后排序</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>otrs</tag>
      </tags>
  </entry>
  <entry>
    <title>rsyslog+loganalyzer+evtsys搭建日志服务器</title>
    <url>/2018/09/07/rsyslog-loganalyzer-evtsys%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="1-环境要求"><a href="#1-环境要求" class="headerlink" title="1 环境要求"></a>1 环境要求</h1><a id="more"></a>
<p>将所有的服务器的日志都集中保存在一台rsyslog日志服务器中，mysql作为数据库，loganalyzer将服务器的日志数据进行分析展现，evtsys是windows服务器提交日志的客户端软件。</p>
<p>实验环境如下：</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>OS</th>
<th>IP</th>
<th>网络</th>
</tr>
</thead>
<tbody>
<tr>
<td>rsyslog Server</td>
<td>Centos6.4</td>
<td>192.168.200.106</td>
<td>单网卡</td>
</tr>
<tr>
<td>Linux Client</td>
<td>Centos6.4</td>
<td>192.168.200.106</td>
<td>单网卡</td>
</tr>
<tr>
<td>Windows Client</td>
<td>Windows2008x64</td>
<td>192.168.200.31</td>
<td>单网卡</td>
</tr>
</tbody>
</table>
<!--more-->
<h1 id="2-rsyslog-loganalyzer日志服务器的部署"><a href="#2-rsyslog-loganalyzer日志服务器的部署" class="headerlink" title="2 rsyslog+loganalyzer日志服务器的部署"></a>2 rsyslog+loganalyzer日志服务器的部署</h1><h2 id="2-1-配置rsyslog日志服务器"><a href="#2-1-配置rsyslog日志服务器" class="headerlink" title="2.1 配置rsyslog日志服务器"></a>2.1 配置rsyslog日志服务器</h2><p>因为<code>rsyslog</code>要把日志存到<code>mysql</code>中，所以要有<code>mysql</code>服务器，还要有<code>rsyslog</code>配置文件加载。</p>
<h3 id="2-1-1-连接mysql的模块"><a href="#2-1-1-连接mysql的模块" class="headerlink" title="2.1.1 连接mysql的模块"></a>2.1.1 连接mysql的模块</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[iyunv<span class="variable">@rsyslog</span> ~]<span class="comment"># yum -y install rsyslog mysql-server   rsyslog-mysql</span></span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-配置数据库"><a href="#2-1-2-配置数据库" class="headerlink" title="2.1.2 配置数据库"></a>2.1.2 配置数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[iyunv@rsyslog ~]#   rpm -ql rsyslog-mysql            #首先查看rsyslog-mysql安装生成了那些文件</span><br><span class="line">/lib64/rsyslog/ommysql.so</span><br><span class="line">/usr/share/doc/rsyslog-mysql-5.8.10</span><br><span class="line">/usr/share/doc/rsyslog-mysql-5.8.10/createDB.sql   #此sql文件就是需要导入到数据库中的数据文件</span><br><span class="line">#</span><br><span class="line">[iyunv@rsyslog ~]# service mysqld start               #启动mysqld服务</span><br><span class="line">[iyunv@rsyslog ~]# mysql                              #连接mysql</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; or g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type '<span class="keyword">help</span>;' or 'h' for help. <span class="keyword">Type</span> <span class="string">'c'</span> <span class="keyword">to</span> <span class="keyword">clear</span> the <span class="keyword">current</span> <span class="keyword">input</span> statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)  #此时，只有<span class="number">3</span>个库</span><br><span class="line">#</span><br><span class="line">mysql&gt; source /usr/share/doc/rsyslog-mysql-5.8.10/createDB.sql;     #导入rsyslog的数据文件</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| Syslog             |</span><br><span class="line">| mysql              |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line">mysql&gt; use Syslog;                #Syslog即是记录日志文件的数据库</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| Tables_in_Syslog       |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| SystemEvents           |</span><br><span class="line">| SystemEventsProperties |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">#</span><br><span class="line">#接下来，即是为rsyslog服务器授权。此处一定是rsyslog服务器的IP</span><br><span class="line">#如果写成各服务器的IP，那就错了</span><br><span class="line">mysql&gt; <span class="keyword">grant</span> all <span class="keyword">on</span> Syslog.* <span class="keyword">to</span> <span class="string">'syslogroot'</span>@<span class="string">'127.0.0.1'</span> <span class="keyword">identified</span> <span class="keyword">by</span>   <span class="string">'syslogpass'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; grant all on Syslog.* to 'syslogroot'@'192.168.200.106' identified   by 'syslogpass';</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; q</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>
<h3 id="2-1-3-修改rsyslog日志服务器配置文件"><a href="#2-1-3-修改rsyslog日志服务器配置文件" class="headerlink" title="2.1.3 修改rsyslog日志服务器配置文件"></a>2.1.3 修改rsyslog日志服务器配置文件</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">[iyunv@rsyslog ~]#   grep -v <span class="string">"^$"</span> /etc/rsyslog.conf | grep -v <span class="string">"^#"</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ModLoad</span> imuxsock</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ModLoad</span> imklog</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ModLoad</span> imudp            #加载udp的模块</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$UDPServerRun</span> 514         #允许接收udp 514的端口传来的日志</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ModLoad</span> imtcp            #加载tcp的模块</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$InputTCPServerRun</span> 514    #允许接收tcp 514的端口传来的日志</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ModLoad</span> ommysql          #加载mysql的模块</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ActionFileDefaultTemplateRSYSLOG</span>_TraditionalFileFormat</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$IncludeConfig</span> /etc/rsyslog.d/*.conf</span></span><br><span class="line"><span class="comment">*.*         :ommysql:192.168.200.106,Syslog,syslogroot,syslogpass        #添加此行，所有设施的所有日志都记录到此数据库服务器的Syslog数据库中，以syslogroot用户，syslogpass密码访问数据库</span></span><br><span class="line">local7.*                            /var/<span class="built-in">log</span>/boot.<span class="built-in">log</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$template</span> SpiceTmpl,"%TIMESTAMP%.%TIMESTAMP:::date-subseconds%   %syslogtag%   %syslogseverity-text%:%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%"</span></span><br><span class="line">:programname, startswith, <span class="string">"spice-vdagent"</span>     /var/<span class="built-in">log</span>/spice-vdagent.<span class="built-in">log</span>;SpiceTmpl</span><br></pre></td></tr></table></figure>
<h3 id="2-1-4-修改完成后，重启rsyslog服务"><a href="#2-1-4-修改完成后，重启rsyslog服务" class="headerlink" title="2.1.4 修改完成后，重启rsyslog服务"></a>2.1.4 修改完成后，重启rsyslog服务</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">[iyunv@rsyslog ~]<span class="comment">#   service rsyslog restart</span></span><br><span class="line">Shutting down <span class="keyword">system</span> logger:                                   [  OK  ]</span><br><span class="line">Starting <span class="keyword">system</span> logger:                                        [  OK  ]</span><br></pre></td></tr></table></figure>
<h2 id="2-2-配置rsyslog客户端"><a href="#2-2-配置rsyslog客户端" class="headerlink" title="2.2 配置rsyslog客户端"></a>2.2 配置rsyslog客户端</h2><h3 id="2-2-1-修改配置文件"><a href="#2-2-1-修改配置文件" class="headerlink" title="2.2.1 修改配置文件"></a>2.2.1 修改配置文件</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">[iyunv@mariadb ~]#   grep -v <span class="string">"^$"</span> /etc/rsyslog.conf | grep -v <span class="string">"^#"</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ModLoad</span> imuxsock # provides support for local system logging (e.g. via   logger command)</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ModLoad</span> imklog   # provides kernel logging support (previously   done by rklogd)</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ActionFileDefaultTemplate</span> RSYSLOG_TraditionalFileFormat</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$IncludeConfig</span> /etc/rsyslog.d/*.conf</span></span><br><span class="line"><span class="comment">*.*       @192.168.200.106</span></span><br><span class="line"><span class="comment">*.*         :ommysql:192.168.200.106,Syslog,syslogroot,syslogpass</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$template</span> SpiceTmpl,"%TIMESTAMP%.%TIMESTAMP:::date-subseconds%   %syslogtag%   %syslogseverity-text%:%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%"</span></span><br><span class="line">:programname, startswith, <span class="string">"spice-vdagent"</span>     /var/<span class="built-in">log</span>/spice-vdagent.<span class="built-in">log</span>;SpiceTmpl</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-修改完成后，重启rsyslog服务"><a href="#2-2-2-修改完成后，重启rsyslog服务" class="headerlink" title="2.2.2 修改完成后，重启rsyslog服务"></a>2.2.2 修改完成后，重启rsyslog服务</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">[iyunv@rsyslog ~]<span class="comment">#   service rsyslog restart</span></span><br><span class="line">Shutting down <span class="keyword">system</span> logger:                                   [  OK  ]</span><br><span class="line">Starting <span class="keyword">system</span> logger:                                            [  OK  ]</span><br></pre></td></tr></table></figure>
<h2 id="2-3-验证客户端日志文件的存放"><a href="#2-3-验证客户端日志文件的存放" class="headerlink" title="2.3 验证客户端日志文件的存放"></a>2.3 验证客户端日志文件的存放</h2><h3 id="2-3-1-使用logger生成一条日志信息"><a href="#2-3-1-使用logger生成一条日志信息" class="headerlink" title="2.3.1 使用logger生成一条日志信息"></a>2.3.1 使用logger生成一条日志信息</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[iyunv<span class="variable">@mariadb</span> ~]<span class="comment">#   logger -p info "I'm mariadb"</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-在rsyslog服务器上验证"><a href="#2-3-2-在rsyslog服务器上验证" class="headerlink" title="2.3.2 在rsyslog服务器上验证"></a>2.3.2 在rsyslog服务器上验证</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[iyunv@rsyslog</span>   <span class="string">~]#</span> <span class="string">mysql</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">use</span> <span class="string">Syslog;</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">select</span> <span class="string">*</span> <span class="string">from</span> <span class="string">SystemEventsG</span></span><br><span class="line"><span class="string">***************************</span> <span class="number">279.</span> <span class="string">row</span> <span class="string">***************************</span></span><br><span class="line"><span class="attr">ID:</span> <span class="number">279</span></span><br><span class="line"><span class="attr">CustomerID:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">ReceivedAt:</span> <span class="number">2014</span><span class="bullet">-08</span><span class="bullet">-13</span> <span class="number">20</span><span class="string">:07:39</span></span><br><span class="line"><span class="attr">DeviceReportedTime:</span> <span class="number">2014</span><span class="bullet">-08</span><span class="bullet">-13</span> <span class="number">20</span><span class="string">:07:40</span></span><br><span class="line"><span class="attr">Facility:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Priority:</span> <span class="number">6</span></span><br><span class="line"><span class="attr">FromHost:</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">Message:</span>  <span class="string">I'm</span>   <span class="string">mariadb</span>        <span class="comment">#我在做的时候，就是因为第二部的1的（2）中mysql授权时，写的是客户端IP，导致这里获取不到数据。</span></span><br><span class="line"><span class="attr">NTSeverity:</span> <span class="literal">NULL</span>                  <span class="comment">#因此，在数据库授权的时候，要授权的是rsyslog日志服务器的IP</span></span><br><span class="line"><span class="attr">Importance:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">EventSource:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">EventUser:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">EventCategory:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">EventID:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">EventBinaryData:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">MaxAvailable:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">CurrUsage:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">MinUsage:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">MaxUsage:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">InfoUnitID:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">SysLogTag:</span> <span class="attr">root:</span></span><br><span class="line"><span class="attr">EventLogType:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">GenericFileName:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">SystemID:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">processid:</span></span><br><span class="line"><span class="attr">checksum:</span> <span class="number">0</span></span><br><span class="line"><span class="number">279</span> <span class="string">rows</span> <span class="string">in</span> <span class="string">set</span> <span class="string">(0.00</span> <span class="string">sec)</span></span><br></pre></td></tr></table></figure>
<p>到这里，<code>rsyslog</code>日志服务器就部署完成了，但此时日志处于<code>rsyslog</code>日志服务器的<code>mysql</code>数据库中，并不方便查看与管理，所以我们再部署一个<code>loganalyzer</code>日志分析器，来减小日志管理的复杂度。</p>
<h2 id="2-4-部署loganalyzer日志分析器"><a href="#2-4-部署loganalyzer日志分析器" class="headerlink" title="2.4 部署loganalyzer日志分析器"></a>2.4 部署loganalyzer日志分析器</h2><h3 id="2-4-1-安装LAMP环境"><a href="#2-4-1-安装LAMP环境" class="headerlink" title="2.4.1 安装LAMP环境"></a>2.4.1 安装LAMP环境</h3><figure class="highlight golo"><table><tr><td class="code"><pre><span class="line">[iyunv<span class="meta">@rsyslog</span> ~]<span class="comment">#   yum -y install httpd php php-mysql php-gd</span></span><br><span class="line">[iyunv<span class="meta">@rsyslog</span> ~]<span class="comment"># mkdir /var/www/html/loganalyzer/</span></span><br><span class="line">mkdir: created directory `/<span class="keyword">var</span>/www/html/loganalyzer/'</span><br></pre></td></tr></table></figure>
<h3 id="2-4-2-解压loganalyzer源码包"><a href="#2-4-2-解压loganalyzer源码包" class="headerlink" title="2.4.2 解压loganalyzer源码包"></a>2.4.2 解压loganalyzer源码包</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[iyunv<span class="variable">@rsyslog</span>   ~]<span class="comment"># tar xf loganalyzer-3.6.5.tar.gz</span></span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> ~]<span class="comment"># cd loganalyzer-3.6.5</span></span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> loganalyzer-<span class="number">3.6</span>.<span class="number">5</span>]<span class="comment">#</span></span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> loganalyzer-<span class="number">3.6</span>.<span class="number">5</span>]<span class="comment"># ls</span></span><br><span class="line">ChangeLog  contrib  COPYING  doc  INSTALL  src</span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> loganalyzer-<span class="number">3.6</span>.<span class="number">5</span>]<span class="comment"># mv src/* /var/www/html/loganalyzer/            #src下是php的网页文件</span></span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> loganalyzer-<span class="number">3.6</span>.<span class="number">5</span>]<span class="comment"># ls contrib/</span></span><br><span class="line">configure.sh  secure.sh</span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> loganalyzer-<span class="number">3.6</span>.<span class="number">5</span>]<span class="comment"># mv contrib/*   /var/www/html/loganalyzer/      #contrib目录下的两个脚本，可以打开看看</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> loganalyzer-<span class="number">3.6</span>.<span class="number">5</span>]<span class="comment"># cd /var/www/html/loganalyzer/</span></span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> loganalyzer]<span class="comment"># sh configure.sh                                        #执行脚本</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-3-配置httpd"><a href="#2-4-3-配置httpd" class="headerlink" title="2.4.3 配置httpd"></a>2.4.3 配置httpd</h3><p>修改DocumentRoot网页根目录</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[iyunv<span class="variable">@rsyslog</span> ~]<span class="comment">#   vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">DocumentRoot <span class="string">"/var/www/html/loganalyzer"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> ~]<span class="comment"># service httpd start</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-4-配置httpd和mysql开机启动"><a href="#2-4-4-配置httpd和mysql开机启动" class="headerlink" title="2.4.4 配置httpd和mysql开机启动"></a>2.4.4 配置httpd和mysql开机启动</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[iyunv<span class="variable">@rsyslog</span> ~]<span class="comment">#   chkconfig mysqld on</span></span><br><span class="line"></span><br><span class="line">[iyunv<span class="variable">@rsyslog</span> ~]<span class="comment"># chkconfig httpd on</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-5-创建loganalyzer数据库，并授权"><a href="#2-4-5-创建loganalyzer数据库，并授权" class="headerlink" title="2.4.5 创建loganalyzer数据库，并授权"></a>2.4.5 创建loganalyzer数据库，并授权</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[iyunv@rsyslog   ~]</span># <span class="selector-tag">mysql</span></span><br><span class="line"><span class="selector-tag">Enter</span> <span class="selector-tag">password</span>:</span><br><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">loganalyzer</span>;</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, 1 <span class="selector-tag">row</span> <span class="selector-tag">affected</span> (0<span class="selector-class">.04</span> <span class="selector-tag">sec</span>)</span><br><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">grant</span> <span class="selector-tag">all</span> <span class="selector-tag">on</span> <span class="selector-tag">loganalyzer</span>.* <span class="selector-tag">to</span> <span class="selector-tag">dianyi</span>@'<span class="keyword">192</span>.<span class="keyword">168</span>.<span class="keyword">200</span>.<span class="keyword">106</span>' identified   by <span class="string">'dianyi123'</span>;</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, 0 <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (0<span class="selector-class">.00</span> <span class="selector-tag">sec</span>)</span><br><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">flush</span> <span class="selector-tag">privileges</span>;</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, 0 <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (0<span class="selector-class">.00</span> <span class="selector-tag">sec</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-4-6-安装loganalyzer"><a href="#2-4-6-安装loganalyzer" class="headerlink" title="2.4.6 安装loganalyzer"></a>2.4.6 安装loganalyzer</h3><h4 id="2-4-6-1-安装界面"><a href="#2-4-6-1-安装界面" class="headerlink" title="2.4.6.1 安装界面"></a>2.4.6.1 安装界面</h4><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571819951390.png" alt="图1"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571819963433.png" alt="图2"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571819970033.png" alt="图3"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571819976887.png" alt="图4"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571819985368.png" alt="图5"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571819993917.png" alt="图6"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571820001202.png" alt="图7"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571820008966.png" alt="图8"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571820017353.png" alt="图9"><br>安装完成，enjoy it<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571820028842.png" alt="图10"></p>
<h2 id="2-5-Windows客户端的安装配置"><a href="#2-5-Windows客户端的安装配置" class="headerlink" title="2.5 Windows客户端的安装配置"></a>2.5 Windows客户端的安装配置</h2><h3 id="2-5-1-安装Syslog日志客户端"><a href="#2-5-1-安装Syslog日志客户端" class="headerlink" title="2.5.1 安装Syslog日志客户端"></a>2.5.1 安装Syslog日志客户端</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">下载<span class="selector-tag">Evtsys</span>软件，分32位和64位安装方法一样。解压后将<span class="selector-tag">evtsys</span><span class="selector-class">.dll</span>、<span class="selector-tag">evtsys</span><span class="selector-class">.exe</span>复制到<span class="selector-tag">c</span>:\<span class="selector-tag">windows</span>\<span class="selector-tag">system32</span>\下。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">cd</span>   <span class="selector-tag">c</span>:\<span class="selector-tag">windows</span>\<span class="selector-tag">system32</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">evtsys</span><span class="selector-class">.exe</span> <span class="selector-tag">-i</span> <span class="selector-tag">-h</span>   192<span class="selector-class">.168</span><span class="selector-class">.200</span><span class="selector-class">.31</span> <span class="selector-tag">-p</span> 514</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">net</span> <span class="selector-tag">start</span> <span class="selector-tag">evtsys</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-开启系统相关审计"><a href="#2-2-2-开启系统相关审计" class="headerlink" title="2.2.2 开启系统相关审计"></a>2.2.2 开启系统相关审计</h3><p>打开<code>windows组策略编辑器</code> (开始-&gt;运行 输入 <code>gpedit.msc</code>) 在<strong>windows 设置－&gt; 安全设置 －&gt; 本地策略－&gt;审核策略</strong>中，打开你需要记录的<code>windows日志</code>。<code>evtsys</code>会实时的判断是否有新的windows日志产生，然后把新产生的日志转换成<code>syslogd</code>可识别的格式,通过<code>UDP</code>端口发送给<code>syslogd</code>服务器。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/rsyslog+loganalyzer+evtsys搭建日志服务器/1571820040575.png" alt="图11"></p>
<h1 id="3-Mysql数据库的优化的一些想法"><a href="#3-Mysql数据库的优化的一些想法" class="headerlink" title="3 Mysql数据库的优化的一些想法"></a>3 Mysql数据库的优化的一些想法</h1><p>随着mysql数据库中的记录越来越多，查询的速度会越来越慢。我们可以定期到数据表中删除较早以前的记录来减少数据量从而起到优化的作用。可以定期执行如下SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> SystemEvents(数据表名) <span class="keyword">where</span> ReceivedAt(日期字段名)&lt;<span class="keyword">curdate</span>() - <span class="built_in">interval</span> <span class="number">3</span> <span class="keyword">month</span>;</span><br></pre></td></tr></table></figure>
<p>//表示删除” <code>SystemEvents</code>”数据表” <code>ReceivedAt</code>”日期字段大于3个月的记录</p>
<p>也可以考虑使用其他数据库，比如具有循环功能的<code>sqllite</code>数据库，不过这样的话就要进行二次开发了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>rsyslog</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7创建分区及扩展分区</title>
    <url>/2018/09/10/Centos7%E5%88%9B%E5%BB%BA%E5%88%86%E5%8C%BA%E5%8F%8A%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="1-添加硬盘并挂载"><a href="#1-添加硬盘并挂载" class="headerlink" title="1 添加硬盘并挂载"></a>1 添加硬盘并挂载</h1><a id="more"></a>
<h2 id="1-1-查询硬盘信息"><a href="#1-1-查询硬盘信息" class="headerlink" title="1.1 查询硬盘信息"></a>1.1 查询硬盘信息</h2><p>（如果使用的是新加硬盘，可以在最下方看到硬盘信息，例子使用本地空闲空间）</p>
<p>例如：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820318318.png" alt="图1"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"> [root<span class="variable">@bogon</span> /]<span class="comment"># fdisk -l</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820329306.png" alt="图2"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># df –h</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820337711.png" alt="图3"></p>
<h2 id="1-2-Fdisk创建分区"><a href="#1-2-Fdisk创建分区" class="headerlink" title="1.2 Fdisk创建分区"></a>1.2 Fdisk创建分区</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># fdisk /dev/sda</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820344825.png" alt="图4"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820352094.png" alt="图5"></p>
<h2 id="1-3-查看硬盘信息"><a href="#1-3-查看硬盘信息" class="headerlink" title="1.3 查看硬盘信息"></a>1.3 查看硬盘信息</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># fdisk –l</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820361468.png" alt="图6"></p>
<h2 id="1-4-Partprobe刷新分区表（注：最好每做一步遇到找不到问题都刷新一下）"><a href="#1-4-Partprobe刷新分区表（注：最好每做一步遇到找不到问题都刷新一下）" class="headerlink" title="1.4 Partprobe刷新分区表（注：最好每做一步遇到找不到问题都刷新一下）"></a>1.4 Partprobe刷新分区表（注：最好每做一步遇到找不到问题都刷新一下）</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># partprobe</span></span><br></pre></td></tr></table></figure>
<h2 id="1-5-创建物理卷（PV）"><a href="#1-5-创建物理卷（PV）" class="headerlink" title="1.5 创建物理卷（PV）"></a>1.5 创建物理卷（PV）</h2><p>使用<code>pvcreate</code> 命令创建物理卷，<code>pvdisplay</code> 查看物理卷信息：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">[root@bogon /]<span class="comment"># pvcreate /dev/sda2</span></span><br><span class="line"></span><br><span class="line">  Physical <span class="keyword">volume</span><span class="bash"> <span class="string">"/dev/sda2"</span> successfully created</span></span><br><span class="line"><span class="bash">  </span></span><br><span class="line"><span class="bash">[root@bogon /]<span class="comment"># pvdisplay</span></span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820370323.png" alt="图7"></p>
<h2 id="1-6-将PV加入卷组（VG）"><a href="#1-6-将PV加入卷组（VG）" class="headerlink" title="1.6 将PV加入卷组（VG）"></a>1.6 将PV加入卷组（VG）</h2><p>使用<code>vgdisplay</code> 查看卷组信息，下图显示卷组名为<code>centos</code>，空闲大小为<code>0</code>：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820378659.png" alt="图8"></p>
<p>使用 <code>vgextend</code> 命令把<code>/dev/vdb1</code>加入到<code>centos</code>：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># vgextend centos /dev/sda2</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820405745.png" alt="图9"></p>
<h2 id="1-7-创建逻辑卷（LV）"><a href="#1-7-创建逻辑卷（LV）" class="headerlink" title="1.7 创建逻辑卷（LV）"></a>1.7 创建逻辑卷（LV）</h2><p>使用<code>lvcreate</code> 命令从卷组里划分一个新的逻辑卷，这里创建了名称为<code>newlv</code>，大小9GB的逻辑卷分区；使用<code>lvdisplay</code> 查看逻辑卷信息：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># lvcreate -L 9G -n newlv centos</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">WARNING:</span> xfs signature detected on /dev/centos/newlv at offset <span class="number">0</span>. Wipe it? [y/n]: y</span><br><span class="line"></span><br><span class="line">Wiping xfs signature on /dev/centos/newlv.</span><br><span class="line"></span><br><span class="line">Logical volume <span class="string">"newlv"</span> created.</span><br></pre></td></tr></table></figure>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># lvdisplay</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820414399.png" alt="图10"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820425845.png" alt="图11"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># vgdisplay</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820432438.png" alt="图12"></p>
<h2 id="1-8-格式化逻辑卷并挂载"><a href="#1-8-格式化逻辑卷并挂载" class="headerlink" title="1.8 格式化逻辑卷并挂载"></a>1.8 格式化逻辑卷并挂载</h2><p>新逻辑卷经过格式化就可以挂载到系统里存储数据了。使用<code>mkfs.xfs</code> 格式化为CentOS7的<code>xfs</code>文件系统：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@bogon</span> <span class="regexp">/]# mkfs.xfs /</span>dev<span class="regexp">/centos/</span>newlv</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820439085.png" alt="图13"></p>
<p>创建<code>drbd</code>目录，并挂载到<code>/drbd</code>目录，挂载后查询容量为9个G.</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820447087.png" alt="图14"></p>
<p>设置开机自动挂载，编辑 <code>/etc/fstab</code>文件，加入最后一行：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7创建分区及扩展分区/1571820455587.png" alt="图15"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>分区</tag>
      </tags>
  </entry>
  <entry>
    <title>双机热备Heartbeat+drbd</title>
    <url>/2018/09/07/%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87Heartbeat-drbd/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<p>系统：Centos7.2 1151</p>
<p>软件：drbd84-utils-8.9.5-1.el7.elrepo.x86_64</p>
<p>主服务器：172.20.20.66</p>
<p>备服务器：172.20.20.35</p>
<p>虚拟IP（virtual_ip）：172.20.20.237</p>
<p>修改主服务器名称：masterNode  </p>
<p>修改备服务器名称： backupNode</p>
<p>主备服务器添加下方地址到/etc/hosts文件：</p>
<p><code>172.20.20.66  masterNode</code></p>
<p><code>172.20.20.35  backupNode</code></p>
<h1 id="2-简单说明"><a href="#2-简单说明" class="headerlink" title="2 简单说明"></a>2 简单说明</h1><p>主备服务器分别创建一个分区，挂载到新创建的目录drbd中，通过drbd目录完成数据同步。</p>
<p>只有主服务器挂载目录，备服务器不用挂载。</p>
<p>备服务器要挂载目录，需要先把主服务器设置成<code>secondary（备机）</code>，备服务器设置成<code>primary（主机）</code>，然后挂载到目录。</p>
<h1 id="3-添加硬盘并挂载"><a href="#3-添加硬盘并挂载" class="headerlink" title="3 添加硬盘并挂载"></a>3 添加硬盘并挂载</h1><h2 id="3-1-查询硬盘信息"><a href="#3-1-查询硬盘信息" class="headerlink" title="3.1 查询硬盘信息"></a>3.1 查询硬盘信息</h2><p><strong>（如果使用的是新加硬盘，可以在最下方看到硬盘信息，例子使用本地空闲空间）</strong></p>
<p><strong>例如：</strong>    </p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820106693.png" alt="图1">                              </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># fdisk -l</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820120161.png" alt="图2"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># df –h</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820129284.png" alt="图3"></p>
<h2 id="3-2-Fdisk创建分区"><a href="#3-2-Fdisk创建分区" class="headerlink" title="3.2 Fdisk创建分区"></a>3.2 Fdisk创建分区</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># fdisk /dev/sda</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820136664.png" alt="图4"></p>
<blockquote>
<p><strong>注：下图设置分区格式可以省略，后面会进行格式化。</strong></p>
</blockquote>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820144540.png" alt="图5"></p>
<h2 id="3-3-查看硬盘信息"><a href="#3-3-查看硬盘信息" class="headerlink" title="3.3 查看硬盘信息"></a>3.3 查看硬盘信息</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># fdisk –l</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820154583.png" alt="图6"></p>
<h2 id="3-4-Partprobe刷新分区表（注：最好每做一步遇到找不到问题都刷新一下）"><a href="#3-4-Partprobe刷新分区表（注：最好每做一步遇到找不到问题都刷新一下）" class="headerlink" title="3.4 Partprobe刷新分区表（注：最好每做一步遇到找不到问题都刷新一下）"></a>3.4 Partprobe刷新分区表（注：最好每做一步遇到找不到问题都刷新一下）</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> /]<span class="comment"># partprobe</span></span><br></pre></td></tr></table></figure>
<h1 id="4-安装配置drbd"><a href="#4-安装配置drbd" class="headerlink" title="4 安装配置drbd"></a>4 安装配置drbd</h1><h2 id="4-1-YUM安装drbd"><a href="#4-1-YUM安装drbd" class="headerlink" title="4.1 YUM安装drbd"></a>4.1 YUM安装drbd</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> mapper]# rpm --<span class="keyword">import</span> http:<span class="comment">//elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@localhost</span> mapper]# rpm -<span class="type">Uvh</span> http:<span class="comment">//www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@localhost</span> mapper]# yum -y install drbd84-utils kmod-drbd84</span><br></pre></td></tr></table></figure>
<h3 id="4-1-1-问题1"><a href="#4-1-1-问题1" class="headerlink" title="4.1.1 问题1"></a>4.1.1 问题1</h3><p>二次安装存在YUM安装失败，需要源码安装，源码安装包在<a href="http://oss.linbit.com/drbd/" target="_blank" rel="noopener">http://oss.linbit.com/drbd/</a> 下载。</p>
<p>Rpm包在<a href="https://pkgs.org/centos-7/elrepo-x86_64/kmod-drbd84-8.4.6-1.el7.elrepo.x86_64.rpm.html" target="_blank" rel="noopener">https://pkgs.org/centos-7/elrepo-x86_64/kmod-drbd84-8.4.6-1.el7.elrepo.x86_64.rpm.html</a></p>
<p><a href="https://pkgs.org/centos-7/elrepo-x86_64/drbd84-utils-8.9.5-1.el7.elrepo.x86_64.rpm/download/" target="_blank" rel="noopener">https://pkgs.org/centos-7/elrepo-x86_64/drbd84-utils-8.9.5-1.el7.elrepo.x86_64.rpm/download/</a>   下载。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@drbd2</span> home]# rpm -Uvh   http://elrepo.org/linux/elrepo/el<span class="number">7</span>/<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>/RPMS/drbd<span class="number">84</span>-utils<span class="number">-8.9</span>.<span class="number">5</span><span class="number">-1</span>.el<span class="number">7</span>.elrepo.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>.rpm   [root<span class="title">@htest2</span> home]# rpm -Uvh http://elrepo.org/linux/elrepo/el<span class="number">7</span>/<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>/RPMS/kmod-drbd<span class="number">84</span><span class="number">-8.4</span>.<span class="number">6</span><span class="number">-1</span>.el<span class="number">7</span>.elrepo.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>.rpm</span><br></pre></td></tr></table></figure>
<h2 id="4-2-配置global-common-conf"><a href="#4-2-配置global-common-conf" class="headerlink" title="4.2 配置global_common.conf"></a>4.2 配置global_common.conf</h2><p><strong>编辑全局配置：</strong></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span>  /etc/drbd.d/global_common.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>确保文件中包含有下内容：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">global </span>&#123;  </span><br><span class="line"></span><br><span class="line">    usage-count yes;  </span><br><span class="line"></span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"><span class="class">common </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="class">net </span>&#123;  </span><br><span class="line"></span><br><span class="line">    protocol C;  <span class="meta"># 使用协议C.表示收到远程主机的写入确认后,则认为写入完成.</span></span><br><span class="line"></span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>当然，还可以有其它配置，这是最基本的。</p>
<h2 id="4-3-配置r0资源："><a href="#4-3-配置r0资源：" class="headerlink" title="4.3 配置r0资源："></a>4.3 配置r0资源：</h2><p><strong>创建r0资源：</strong></p>
<blockquote>
<p>注：r0可以随便命名。</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span>  /etc/drbd.d/r0.<span class="keyword">res</span></span><br></pre></td></tr></table></figure>
<p>写入文件内容：</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">resource   r0&#123; </span><br><span class="line"></span><br><span class="line">        on masterNode&#123; </span><br><span class="line"></span><br><span class="line">                device          /<span class="built_in">dev</span>/drbd1; #逻辑设备的路径 </span><br><span class="line"></span><br><span class="line">                disk            /<span class="built_in">dev</span>/sda3;  #物理设备 </span><br><span class="line"></span><br><span class="line">                address         <span class="number">192.168</span><span class="number">.58</span><span class="number">.128</span>:<span class="number">7788</span>; </span><br><span class="line"></span><br><span class="line">                <span class="built_in">meta</span>-disk       internal; </span><br><span class="line"></span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        on backupNode&#123; </span><br><span class="line"></span><br><span class="line">                device          /<span class="built_in">dev</span>/drbd1; </span><br><span class="line"></span><br><span class="line">                disk            /<span class="built_in">dev</span>/sda3; </span><br><span class="line"></span><br><span class="line">                address         <span class="number">192.168</span><span class="number">.58</span><span class="number">.129</span>:<span class="number">7788</span>; </span><br><span class="line"></span><br><span class="line">                <span class="built_in">meta</span>-disk       internal; </span><br><span class="line"></span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要把上面用到的防火墙7788端口打开，这个端口是自定义的，如果嫌麻烦可以直接关掉防火墙。</p>
<blockquote>
<p>注：<code>masterNode/ backupNode</code>是主机名字，根据实际情况书写。</p>
</blockquote>
<p>说明：</p>
<p><code>device</code>  是自定义的物理设备的逻辑路径</p>
<p><code>disk</code>        是磁盘设备，或者是逻辑分区</p>
<p><code>address</code>   是机器监听地址和端口</p>
<p><code>meta-disk</code>   这个还没弄明白，看到的资料都是设为：internal（局域网）</p>
<h2 id="4-4-建立resource"><a href="#4-4-建立resource" class="headerlink" title="4.4 建立resource"></a>4.4 建立resource</h2><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">modprobe </span><span class="string">drbd </span>              //载入 <span class="string">drbd </span>模块  </span><br><span class="line"></span><br><span class="line"><span class="string">lsmod </span>| <span class="string">grep </span><span class="string">drbd </span>           //确认 <span class="string">drbd </span>模块是否载入</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820168718.png" alt="图7"></p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">dd </span><span class="string">if=</span>/<span class="string">dev/</span><span class="string">zero </span><span class="string">of=</span>/<span class="string">dev/</span><span class="string">sda2 </span><span class="string">bs=</span><span class="string">1M </span><span class="string">count=</span><span class="string">100 </span>   //把一些资料塞到 <span class="string">sda3 </span>內 (否则 <span class="built_in">create-md</span> 时会报错)  </span><br><span class="line"></span><br><span class="line"><span class="string">drbdadm </span><span class="built_in">create-md</span> <span class="string">r0 </span>                //建立 <span class="string">drbd </span><span class="string">resource </span> </span><br><span class="line"></span><br><span class="line"><span class="string">drbdadm </span><span class="string">up </span><span class="string">r0 </span>                   //   <span class="comment">#启用资源</span></span><br></pre></td></tr></table></figure>
<h3 id="4-4-1-我遇到的问题1："><a href="#4-4-1-我遇到的问题1：" class="headerlink" title="4.4.1 我遇到的问题1："></a>4.4.1 我遇到的问题1：</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">[root@backupNode /]<span class="comment"># drbdadm up r0  </span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Failure: (<span class="number">104</span>) Can <span class="keyword">not</span> <span class="keyword">open</span> backing device.  </span><br><span class="line"></span><br><span class="line">Command <span class="string">'drbdsetup attach 1 /dev/sda2 /dev/sda3 internal'</span> terminated with <span class="keyword">exit</span> code</span><br></pre></td></tr></table></figure>
<p>原因是我之前已经挂在了/dev/sda3，需要先卸载/dev/sda3设备，解决办法:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">umount</span> /dev/sda2</span><br></pre></td></tr></table></figure>
<p>问题解决.</p>
<h3 id="4-4-2-我遇到的问题2："><a href="#4-4-2-我遇到的问题2：" class="headerlink" title="4.4.2 我遇到的问题2："></a>4.4.2 我遇到的问题2：</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@backupNode</span> /]<span class="comment"># drbdadm create-md r0  </span></span><br><span class="line"></span><br><span class="line">‘r<span class="number">0</span>‘ <span class="keyword">not</span> <span class="keyword">defined</span> <span class="keyword">in</span> your config (<span class="keyword">for</span> this host).</span><br></pre></td></tr></table></figure>
<p>   原因是drbd.conf配置文件计算机名和本机的计算机名不一致。</p>
<p>   修改配置文件计算机名。<br>   问题解决。</p>
<h3 id="4-4-3-我遇到的问题3："><a href="#4-4-3-我遇到的问题3：" class="headerlink" title="4.4.3 我遇到的问题3："></a>4.4.3 我遇到的问题3：</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">[root@htest2 drbd.d]<span class="comment"># drbdadm create-md r0</span></span><br><span class="line"></span><br><span class="line">drbd.d/r0.res:<span class="number">3</span>: no minor <span class="keyword">given</span> nor device <span class="built_in">name</span> <span class="keyword">contains</span> a minor <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">drbd.d/r0.res:<span class="number">9</span>: no minor <span class="keyword">given</span> nor device <span class="built_in">name</span> <span class="keyword">contains</span> a minor <span class="built_in">number</span></span><br></pre></td></tr></table></figure>
<p><code>r0.res</code>中<code>drbd</code>资源必须含有数字，猜测与分区模块有重名。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820177821.png" alt="图8"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820185434.png" alt="图9"></p>
<p>问题解决。</p>
<h3 id="4-4-4-我遇到的问题4"><a href="#4-4-4-我遇到的问题4" class="headerlink" title="4.4.4 我遇到的问题4"></a>4.4.4 我遇到的问题4</h3><p>在centos 6.4上部署时，yum安装完成后加载模块报错。</p>
<figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line">正确安装drbd模块后，使用modprobe进行加载</span><br><span class="line"><span class="meta"># modprobe drbd</span></span><br><span class="line">FATAL: <span class="keyword">Module</span> drbd <span class="keyword">not</span> found.</span><br><span class="line">出现如上错误</span><br></pre></td></tr></table></figure>
<p>原因：这是因为系统默认的内核并不支持此模块，所以需要更新内核<br>更新内核的方法：<br>可以用 yum install kernel* 方式来更新。<br>如果你要节约点时间的话可以只更新一下的几个包：<br>            kernel-devel<br>            kernel<br>            kernel-headers</p>
<p>更新后，记得要重新启动操作系统！！！</p>
<p><strong>&gt; 注：以上每一步骤，都需要在主备服务器上进行配置设置。</strong></p>
<h2 id="4-5-设置Primary-Node"><a href="#4-5-设置Primary-Node" class="headerlink" title="4.5 设置Primary Node"></a>4.5 设置Primary Node</h2><p>将<code>masterNode</code>设为主服务器(<code>primary node</code>)，在<code>masterNode</code>上执行：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@backupNode</span> /]<span class="comment"># drbdadm primary --force r0</span></span><br></pre></td></tr></table></figure>
<p><strong>查看drbd状态：</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@backupNode /]</span># <span class="selector-tag">cat</span> /<span class="selector-tag">proc</span>/<span class="selector-tag">drbd</span>  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">version</span>: <span class="selector-tag">8</span><span class="selector-class">.4</span><span class="selector-class">.1</span> (<span class="attribute">api</span>:<span class="number">1</span>/<span class="attribute">proto</span>:<span class="number">86</span>-<span class="number">100</span>)  </span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">GIT-hash</span>: <span class="selector-tag">91b4c048c1a0e06777b5f65d312b38d47abaea80</span> <span class="selector-tag">build</span> <span class="selector-tag">by</span> <span class="selector-tag">root</span>@<span class="selector-tag">masterNode</span>, <span class="selector-tag">2012-05-27</span> <span class="selector-tag">18</span><span class="selector-pseudo">:34</span><span class="selector-pseudo">:27</span>  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">1</span>: <span class="selector-tag">cs</span><span class="selector-pseudo">:Connected</span> <span class="selector-tag">ro</span><span class="selector-pseudo">:Primary</span>/<span class="selector-tag">Secondary</span> <span class="selector-tag">ds</span><span class="selector-pseudo">:UpToDate</span>/<span class="selector-tag">UpToDate</span> <span class="selector-tag">C</span> <span class="selector-tag">r-----</span>  </span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">ns</span><span class="selector-pseudo">:4</span> <span class="selector-tag">nr</span><span class="selector-pseudo">:9504584</span> <span class="selector-tag">dw</span><span class="selector-pseudo">:9504588</span> <span class="selector-tag">dr</span><span class="selector-pseudo">:1017</span> <span class="selector-tag">al</span><span class="selector-pseudo">:1</span> <span class="selector-tag">bm</span><span class="selector-pseudo">:576</span> <span class="selector-tag">lo</span><span class="selector-pseudo">:0</span> <span class="selector-tag">pe</span><span class="selector-pseudo">:0</span> <span class="selector-tag">ua</span><span class="selector-pseudo">:0</span> <span class="selector-tag">ap</span><span class="selector-pseudo">:0</span> <span class="selector-tag">ep</span><span class="selector-pseudo">:1</span> <span class="selector-tag">wo</span><span class="selector-pseudo">:b</span> <span class="selector-tag">oos</span><span class="selector-pseudo">:0</span></span><br></pre></td></tr></table></figure>
<p>已经变成了主服务器。</p>
<h2 id="4-6-创建DRBD文件系统"><a href="#4-6-创建DRBD文件系统" class="headerlink" title="4.6 创建DRBD文件系统"></a>4.6 创建DRBD文件系统</h2><p>上面已经完成了/dev/drbd1的初始化，现在来把/dev/drbd1格式化成ext4格式的文件系统,在masterNode上执行：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@masterNode</span> /]<span class="comment"># mkfs.ext3 /dev/drbd1</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">mke<span class="number">2f</span>s <span class="number">1</span>.<span class="number">41</span>.<span class="number">12</span> (<span class="number">17</span>-May-2010)  </span><br><span class="line"></span><br><span class="line">文件系统标签=  </span><br><span class="line"></span><br><span class="line">操作系统:Linux  </span><br><span class="line"></span><br><span class="line">块大小=<span class="number">4096</span> (log=<span class="number">2</span>)  </span><br><span class="line"></span><br><span class="line"> 分块大小=<span class="number">4096</span> (log=<span class="number">2</span>)  </span><br><span class="line"></span><br><span class="line">Stride=<span class="number">0</span> <span class="keyword">blocks, </span>Stripe width=<span class="number">0</span> <span class="keyword">blocks </span> </span><br><span class="line"></span><br><span class="line"><span class="number">589824</span> inodes, <span class="number">2358959</span> <span class="keyword">blocks </span> </span><br><span class="line"></span><br><span class="line"><span class="number">117947</span> <span class="keyword">blocks </span>(<span class="number">5</span>.<span class="number">00</span>%) reserved for the super user  </span><br><span class="line"></span><br><span class="line">第一个数据块=<span class="number">0</span>  </span><br><span class="line"></span><br><span class="line">Maximum filesystem <span class="keyword">blocks=2415919104 </span> </span><br><span class="line"></span><br><span class="line"> <span class="number">72</span> <span class="keyword">block </span>groups  </span><br><span class="line"></span><br><span class="line"><span class="number">32768</span> <span class="keyword">blocks </span>per group, <span class="number">32768</span> fragments per group  </span><br><span class="line"></span><br><span class="line"> <span class="number">8192</span> inodes per group  </span><br><span class="line"></span><br><span class="line">Superblock <span class="keyword">backups </span>stored on <span class="keyword">blocks: </span> </span><br><span class="line"></span><br><span class="line">        <span class="number">32768</span>, <span class="number">98304</span>, <span class="number">163840</span>, <span class="number">229376</span>, <span class="number">294912</span>, <span class="number">819200</span>, <span class="number">884736</span>, <span class="number">1605632</span>  </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"> 正在写入inode表: 完成  </span><br><span class="line"></span><br><span class="line">Creating <span class="keyword">journal </span>(<span class="number">32768</span> <span class="keyword">blocks): </span>完成  </span><br><span class="line"></span><br><span class="line">Writing superblocks <span class="keyword">and </span>filesystem accounting information: 完成  </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">This filesystem will <span class="keyword">be </span>automatically checked every <span class="number">21</span> mounts <span class="keyword">or </span> </span><br><span class="line"></span><br><span class="line"> <span class="number">180</span> days, whichever comes first.  Use tune<span class="number">2f</span>s -c <span class="keyword">or </span>-i to override.</span><br></pre></td></tr></table></figure>
<p>然后，将<code>/dev/drbd1</code>挂载到之前创建好的<code>/drbd</code>目录：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@masterNode</span> <span class="regexp">/]# mount /</span>dev<span class="regexp">/drbd1 /</span>drbd</span><br></pre></td></tr></table></figure>
<p>现在只要把数据写入<code>/drbd</code>目录，<code>drbd</code>即会立刻把数据同步到<code>backupNode</code>的<code>/dev/sda2</code>分区上了。</p>
<h2 id="4-7-DRBD同步测试"><a href="#4-7-DRBD同步测试" class="headerlink" title="4.7 DRBD同步测试"></a>4.7 DRBD同步测试</h2><p>1、首先，在主服务器上先将设备卸载，同时将主服务器降为备用服务器：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@masterNode</span> /]<span class="comment"># umount /dev/drbd1  </span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@masterNode</span> /]<span class="comment"># drbdadm secondary r0</span></span><br></pre></td></tr></table></figure>
<p>2、然后，登录备用服务器，将备用服务器升为主服务器，同时挂载drbd1设备到 /drbd目录：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"> [root@masterNode /]<span class="comment"># ssh backup </span></span><br><span class="line"></span><br><span class="line">Last login: Sun May <span class="number">27</span> <span class="number">19</span>:<span class="number">57</span>:<span class="number">17</span> <span class="number">2012</span> <span class="keyword">from</span> masternode  </span><br><span class="line"></span><br><span class="line">[root@backupNode ~]<span class="comment"># drbdadm primary r0  </span></span><br><span class="line"></span><br><span class="line">[root@backupNode ~]<span class="comment"># mount /dev/drbd1 /drbd/</span></span><br></pre></td></tr></table></figure>
<p>3、最后，进入<code>/drbd</code>目录，就可以看到之前在另外一台机器上放入的数据了，如果没有看到，说明同步失败！</p>
<h2 id="4-8-设置开机启动"><a href="#4-8-设置开机启动" class="headerlink" title="4.8 设置开机启动"></a>4.8 设置开机启动</h2><blockquote>
<p>注：设置DRBD开机启动，需要手动设置主备级别，找到方法后补充。</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd2</span> rc.d]<span class="comment"># systemctl enable drbd</span></span><br></pre></td></tr></table></figure>
<h1 id="5-安装配置keepalived"><a href="#5-安装配置keepalived" class="headerlink" title="5 安装配置keepalived"></a>5 安装配置keepalived</h1><p>(使用Heartbeat代替，只做了解，功能和heartbeat一样，Heartbeat自带drbd检测脚本)</p>
<h1 id="5-1-YUM安装keepalived"><a href="#5-1-YUM安装keepalived" class="headerlink" title="5.1 YUM安装keepalived"></a>5.1 YUM安装keepalived</h1><p>Centos 7 自带 keepalived，可以直接YUM安装。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd1</span> rc3.d]<span class="comment"># yum install -y keepalived</span></span><br></pre></td></tr></table></figure>
<h1 id="5-2-配置keepalived-conf"><a href="#5-2-配置keepalived-conf" class="headerlink" title="5.2 配置keepalived.conf"></a>5.2 配置keepalived.conf</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@drbd</span>1 <span class="regexp">/]# vi /</span>etc<span class="regexp">/keepalived/</span>keepalived.conf</span><br></pre></td></tr></table></figure>
<h3 id="5-2-1-主服务器配置"><a href="#5-2-1-主服务器配置" class="headerlink" title="5.2.1 主服务器配置"></a>5.2.1 主服务器配置</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"></span><br><span class="line">   notification_email &#123;</span><br><span class="line"></span><br><span class="line">     acassen@firewall.loc</span><br><span class="line"></span><br><span class="line">     failover@firewall.loc</span><br><span class="line"></span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line"></span><br><span class="line">   smtp_server <span class="number">192.168</span><span class="number">.200</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line"></span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;          <span class="comment">//定义vrrp实例</span></span><br><span class="line"></span><br><span class="line">    <span class="section">state</span> MASTER              <span class="comment">//主节点 ，备用节点为BACKUP             </span></span><br><span class="line"></span><br><span class="line">    interface enp2s0          <span class="comment">//绑定的网卡</span></span><br><span class="line"></span><br><span class="line">    virtual_router_id <span class="number">51</span>     <span class="comment">//ID,默认就行 .同一实例下virtual_router_id必须相同</span></span><br><span class="line"></span><br><span class="line">    priority <span class="number">100</span>             <span class="comment">//优先级，备用节点设置为比100小的值</span></span><br><span class="line"></span><br><span class="line">    advert_int <span class="number">1</span>             <span class="comment">//MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒</span></span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line"></span><br><span class="line">        auth_type PASS       <span class="comment">//验证类型和密码 </span></span><br><span class="line"></span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line"></span><br><span class="line">        <span class="number">172.20</span><span class="number">.20</span><span class="number">.237</span>                  <span class="comment">//设置虚拟IP地址，可以多个</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-2-备服务器配置"><a href="#5-2-2-备服务器配置" class="headerlink" title="5.2.2 备服务器配置"></a>5.2.2 备服务器配置</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"></span><br><span class="line">   notification_email &#123;</span><br><span class="line"></span><br><span class="line">     acassen@firewall.loc</span><br><span class="line"></span><br><span class="line">     failover@firewall.loc</span><br><span class="line"></span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line"></span><br><span class="line">   smtp_server <span class="number">192.168</span><span class="number">.200</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line"></span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;          <span class="comment">//定义vrrp实例</span></span><br><span class="line"></span><br><span class="line">    <span class="section">state</span> BACKUP             <span class="comment">//备节点 ，主用节点为MASTER             </span></span><br><span class="line"></span><br><span class="line">    interface ens192          <span class="comment">//绑定的网卡</span></span><br><span class="line"></span><br><span class="line">    virtual_router_id <span class="number">51</span>     <span class="comment">//ID,默认就行 .同一实例下virtual_router_id必须相同</span></span><br><span class="line"></span><br><span class="line">    priority <span class="number">50</span>             <span class="comment">//优先级，备用节点设置为比100小的值</span></span><br><span class="line"></span><br><span class="line">    advert_int <span class="number">1</span>             <span class="comment">//MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒</span></span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line"></span><br><span class="line">        auth_type PASS       <span class="comment">//验证类型和密码 </span></span><br><span class="line"></span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line"></span><br><span class="line">        <span class="number">172.20</span><span class="number">.20</span><span class="number">.237</span>                  <span class="comment">//设置虚拟IP地址，可以多个</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-3-启动服务"><a href="#5-3-启动服务" class="headerlink" title="5.3 启动服务"></a>5.3 启动服务</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd1</span> /]<span class="comment"># systemctl start keepalived</span></span><br></pre></td></tr></table></figure>
<h2 id="5-4-查看网卡信息"><a href="#5-4-查看网卡信息" class="headerlink" title="5.4 查看网卡信息"></a>5.4 查看网卡信息</h2><p>   当启动<code>keepalived</code>后，查看网卡信息，主服务器会显示挂载虚拟IP<code>172.20.20.237</code>成功，备服务器没有挂载虚拟IP，如果主备服务器同时显示挂载虚拟Ip,则属于脑裂故障，需要继续调试。如果主服务器<code>keepalived</code>程序挂掉后，备用服务器会自动升级为主服务器，并挂载虚拟ip，主服务器恢复后恢复主从关系。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd1</span> /]<span class="comment"># ip a</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820202577.png" alt="图10"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820210176.png" alt="图11"></p>
<h2 id="5-5-验证测试"><a href="#5-5-验证测试" class="headerlink" title="5.5 验证测试"></a>5.5 验证测试</h2><p> 1、在主服务器上新建一个网页，内容为 <code>172.20.20.66</code></p>
<p> 2、在备用服务器上新建一个网页，内容为 <code>172.20.20.35</code></p>
<p> 3、启动主备服务器的<code>http</code>服务和<code>Keepalived</code>服务</p>
<p> 4、通过浏览数，输入虚拟IP地址 <code>172.20.20.237</code></p>
<pre><code>页面显示为 `172.20.20.66`
</code></pre><p>5、关闭主服务器的<code>Keepalived</code>服务，通过浏览器输入IP地址<code>172.20.20.237</code></p>
<pre><code>页面显示为 `172.20.20.35`
</code></pre><p>6、再次启动主服务器的<code>Keepalived</code>服务，通过浏览器输入IP地址<code>172.20.20.237</code></p>
<pre><code>页面显示为 `172.20.20.66`
</code></pre><h2 id="5-6-设置开机启动服务"><a href="#5-6-设置开机启动服务" class="headerlink" title="5.6 设置开机启动服务"></a>5.6 设置开机启动服务</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd2</span> rc.d]<span class="comment"># systemctl enable keepalived</span></span><br></pre></td></tr></table></figure>
<h1 id="6-安装配置heartbeat"><a href="#6-安装配置heartbeat" class="headerlink" title="6 安装配置heartbeat"></a>6 安装配置heartbeat</h1><h2 id="6-1-创建用户和组"><a href="#6-1-创建用户和组" class="headerlink" title="6.1 创建用户和组"></a>6.1 创建用户和组</h2><p>先创建用户和组，否则glue安装报错。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> groupadd -g 200 haclient              <span class="comment">#创建GID为200的用户组</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> useradd -g haclient -u 200 -s /bin/<span class="literal">false</span> -M   hacluster        <span class="comment">#创建用户（具体什么意思没懂）</span></span></span><br></pre></td></tr></table></figure>
<p>YUM安装所需组件</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum install -y libtool libtool-ltdl-devel   glib2-devel libxml2-devel libxml2 bzip2-devel e2fsprogs-devel libuuid-devel   libxslt-devel asciidoc docbook-style-xsl libnet</span></span><br></pre></td></tr></table></figure>
<h2 id="6-2-安装glue"><a href="#6-2-安装glue" class="headerlink" title="6.2 安装glue"></a>6.2 安装glue</h2><p>源码安装heartbeat之前首先得源码安装glue。</p>
<p>下载glue：<a href="http://www.linux-ha.org/wiki/Download" target="_blank" rel="noopener">http://www.linux-ha.org/wiki/Download</a><br>    进入源码目录安装：<strong>./autogen.sh</strong><br>    生成配置文件：<strong>./configure</strong><br>    编译安装：<strong>make &amp;&amp; make install</strong></p>
<p><strong>./autogen.sh安装报错及解决办法</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">报错信息：</span><br><span class="line"></span><br><span class="line">You must have autoconf installed <span class="built_in">to</span> compile <span class="keyword">the</span> cluster-glue package.</span><br><span class="line"></span><br><span class="line">Download <span class="keyword">the</span> appropriate package <span class="keyword">for</span> your <span class="keyword">system</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> <span class="built_in">get</span> <span class="keyword">the</span> source tarball <span class="keyword">at</span>: <span class="keyword">ftp</span>://<span class="keyword">ftp</span>.gnu.org/pub/gnu/autoconf/</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/双机热备Heartbeat+drbd/1571820220729.png" alt="图12"></p>
<p><strong>解决办法：</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum install    libtool</span></span><br></pre></td></tr></table></figure>
<h2 id="6-3-安装agents"><a href="#6-3-安装agents" class="headerlink" title="6.3 安装agents"></a>6.3 安装agents</h2><p>不安装agents的话，在安装Heartbeat时会报错，具体什么错误忘记记录了。</p>
<p>下载<a href="http://www.linux-ha.org/wiki/Download" target="_blank" rel="noopener">http://www.linux-ha.org/wiki/Download</a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">./autogen.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="keyword">make</span> &amp;&amp; <span class="keyword">make</span> install</span><br></pre></td></tr></table></figure>
<h2 id="6-4-安装heartbeat："><a href="#6-4-安装heartbeat：" class="headerlink" title="6.4 安装heartbeat："></a>6.4 安装heartbeat：</h2><blockquote>
<p>安装glue/agents/heartbeat,编译安装路径最好默认，自定义的话有报错。</p>
</blockquote>
<pre><code>下载heartbeat：http://www.linux-ha.org/wiki/Downloads

进入源码目录生成配置文件：`./ConfigureMe configure --disable-swig --disable-snmp-subagent`
</code></pre><p>编译安装：<code>make &amp;&amp; make install</code></p>
<p><strong>没有按照上述操作可能遇到的错误：</strong></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">libtoolize: putting   libltdl files <span class="keyword">in</span> `libltdl<span class="comment">'.</span></span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">libtoolize:   `COPYING.<span class="keyword">LIB</span><span class="comment">' not found in `/usr/share/libtool/libltdl</span></span><br><span class="line"></span><br><span class="line">./bootstrap   exiting due <span class="keyword">to</span> <span class="keyword">error</span> (sorry!).</span><br></pre></td></tr></table></figure>
<p>解决办法：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum   install libtool-ltdl-devel</span></span><br></pre></td></tr></table></figure>
<h2 id="6-5-同步时间"><a href="#6-5-同步时间" class="headerlink" title="6.5 同步时间"></a>6.5 同步时间</h2><p>同步两台节点的时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm -rf /etc/localtime</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> \cp -f /usr/share/zoneinfo/Asia/Shanghai   /etc/localtime</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install -y ntp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ntpdate -d cn.pool.ntp.org</span></span><br></pre></td></tr></table></figure>
<h2 id="6-6-配置主节点heartbeat"><a href="#6-6-配置主节点heartbeat" class="headerlink" title="6.6 配置主节点heartbeat"></a>6.6 配置主节点heartbeat</h2><p>总共有三个文件需要配置:<br><code>ha.cf</code> 监控配置文件<br><code>haresources</code> 资源管理文件<br><code>authkeys</code> 心跳线连接加密文件</p>
<p>配置文件位置 <code>/usr/share/doc/heartbeat/</code></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">cp</span> <span class="keyword">ha</span>.<span class="keyword">cf</span> haresources authkeys /etc/<span class="keyword">ha</span>.d/    #拷贝配置文件到/etc/<span class="keyword">ha</span>.d</span><br></pre></td></tr></table></figure>
<h3 id="6-6-1-修改ha-cf"><a href="#6-6-1-修改ha-cf" class="headerlink" title="6.6.1 修改ha.cf"></a>6.6.1 修改ha.cf</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">debugfile /var/log/ha-debug      #用于记录 heartbeat 的调试信息</span><br><span class="line"></span><br><span class="line">logfile /var/log/ha-log                  #指名heartbeat的日志存放位置。</span><br><span class="line"></span><br><span class="line">logfacility   local0                           #如果未定义上述的日志文件,那么日志信息将送往local0(对应的#/var/log/messages),如果这 <span class="number">3</span> 个日志文件都未定义,那么 heartbeat 默认情况下 将在/var/log 下建立 ha-debug 和 ha-log 来记录 相应的日志信息。 </span><br><span class="line"></span><br><span class="line">#bcast eth1                                     #指明心跳使用以太网广播方式，并且是在eth1接口上进行 广播。（实际操作中没有指明。）</span><br><span class="line"></span><br><span class="line">keepalive <span class="number">2</span>                                    #发送心跳报文的间隔,默认单位为秒,如果你毫秒为单位, 那么需要在后面跟 ms 单位,如 <span class="number">1500</span>ms 即代表 <span class="number">1.5</span>s </span><br><span class="line">  deadtime   <span class="number">30</span>                                  #指定若备用节点在<span class="number">30</span>秒内没有收到主节点的心跳信 号，则立即接管主节点的服务资源。 </span><br><span class="line"></span><br><span class="line">warntime <span class="number">10</span>                                  #指定心跳延迟的时间为<span class="number">10</span>秒。当<span class="number">10</span>秒钟内备份节点不能接收到主节点的心跳信号时，就会往日志中写入一 个警告日志，但此时不会切换服务。发出最后的心跳 警告 信息的间隔。</span><br><span class="line">  initdead <span class="number">120</span>                                   #在某些系统上，系统启动或重启之后需要经过一段时间 网络才能正常工作，该选项用于解决这种情况产生 的时 间间隔。取值至少为deadtime的两倍。  </span><br><span class="line">  udpport <span class="number">694</span>                                  #设置广播/单播通信使用的端口，<span class="number">694</span>为默认使用的端口号 </span><br><span class="line"></span><br><span class="line">ucast eth0 <span class="number">192.168</span><span class="number">.60</span><span class="number">.132</span>          #采用网卡eth0的udp单播来组织心跳，后面跟的</span><br><span class="line">  IP地址应为双机对方的IP地址。  对方IP</span><br><span class="line"></span><br><span class="line">auto_failback off                           #用来定义当主节点恢复后，是否将服务自动切回。如果不想启用，请设置为off，默认为on。heartbeat的两台主机分别为主节点和备份节点。主节点在正常情况下占用资源并运行所有的服务，遇到故障时把资源交给备份节点并由备份节点运行服务。在该选项设为on的情况下，一旦主节点恢复运行，则自动获取资源并取代备份节点；如果该选项设置为off，那么当主节点恢复后，将变为备份节点，而原来的备份节点成为主节点。根据实际情况，不能开启，选择off</span><br><span class="line"></span><br><span class="line">node drbd1                                  #主节点主机名，可以通过命令<span class="string">"uanme   -n"</span>查看。  </span><br><span class="line">  node drbd2                                 #备用节点主机名。  </span><br><span class="line"></span><br><span class="line">#ping <span class="number">192.168</span><span class="number">.60</span><span class="number">.1</span>                         #选择ping的节点，ping节点选择的越好，HA集群就 越强壮，可以选择固定的路由器作为ping节点，或者 应用服务器但是 最好不要选择集群中的成员作为ping 节点，ping节点 仅仅用来测试网络连接。如果指定了多个ping节点如ping   <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>那么只有当能ping通所有ping节点 时才认为网络是连通的，否则则认为不连通.实际中我没有开通检测。</span><br><span class="line"></span><br><span class="line">respawn hacluster /usr/libexec/heartbeat/ipfail #该选项是可选配置， 意思 是以 hacluster 这 个用户身份运行/usr/lib/heartbeat/ ipfail 这个 插件 respawn列出与heartbeat一起启动和关闭的 进 程，该进程一般是和heartbeat集成的插件，这些 进程遇到故障可以自动重新启动。最常用的进程是 ipfail，此进程用于检测和处理网络故障，需要配合 ping或者ping_group语句,其中指定的ping node 来检测网络的连通性。在v2版本中，ipfail和crm有 冲突，不能同时使用，如果启用crm的情况下，可以 使用pingd插件代替ipfail</span><br><span class="line"></span><br><span class="line">apiauth ipfail gid=haclient uid=hacluster   #指定对客户端 api 的访问控制,缺省为不可 访问，这里指定了 有权限访问 ipfail用户和组。(使用前边创建的用户和组)</span><br><span class="line"></span><br><span class="line">#apiauth <span class="section">default</span>  gid=haclient </span><br><span class="line">  （实际中没有开启此项设置，因为创建的用户和组就是默认用户和组的名字）当配置了默认用户组时，其他所有api授权命令失效且该用户组中的成员可以访问任何api库</span><br><span class="line"></span><br><span class="line">如果不在ha.cf文件指定api库的访问权限，则默认的访问权限如下</span><br><span class="line"></span><br><span class="line">service   <span class="section">default</span> apiauthipfailuid=haclusterccmgid=haclientpinggid=haclientcl_statusgid=haclientlha-snmpagentuid=rootcrmuid=hacluster</span><br></pre></td></tr></table></figure>
<h3 id="6-6-2-修改haresources"><a href="#6-6-2-修改haresources" class="headerlink" title="6.6.2 修改haresources"></a>6.6.2 修改haresources</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">drbd1 <span class="symbol">IPaddr:</span><span class="symbol">:</span><span class="number">192.168</span>.<span class="number">84.132</span>/<span class="number">24</span>/eno16777736   <span class="symbol">drbddisk:</span><span class="symbol">:r0</span> <span class="symbol">Filesystem:</span><span class="symbol">:/dev/drbd1</span><span class="symbol">:</span><span class="symbol">:/drbd</span></span><br><span class="line"></span><br><span class="line">drbd1是主节点主机名，主备配置文件都一样。</span><br><span class="line"></span><br><span class="line">解说：node1   <span class="symbol">IPaddr:</span><span class="symbol">:</span><span class="number">192.168</span>.<span class="number">60.200</span>/<span class="number">24</span>/eth<span class="number">0</span>/    <span class="symbol">Filesystem:</span><span class="symbol">:/dev/sdb5</span><span class="symbol">:</span><span class="symbol">:/webdata</span><span class="symbol">:</span><span class="symbol">:ext3</span>  httpd cp.sh <span class="symbol">db2:</span><span class="symbol">:db2inst1</span> 其中，node1是HA集群的主节点，IPaddr为heartbeat自带的一个执行脚步，Heartbeat首先将执行/etc/ha.d/resource.d/IPaddr   <span class="number">192.168</span>.<span class="number">60.200</span>/<span class="number">24</span> start的操作，也就是虚拟出一个子网掩码为<span class="number">255.255</span>.<span class="number">255.0</span>，IP为<span class="number">192.168</span>.<span class="number">60.200</span>的地址。此IP为Heartbeat对外提供服务的网络地址，同时指定此IP使用的网络接口为eth<span class="number">0</span>。接着，Heartbeat将执行共享磁盘分区的挂载操作，<span class="string">"Filesystem::/dev/sdb5::/webdata::ext3"</span>相当于在命令行下执行mount操作，即<span class="string">"mount -t ext3 /dev/sdb5   /webdata"</span>，然后启动httpd，接下列执行cp.sh这个脚本文件之后以db2inst1的身份启动db2。</span><br><span class="line"></span><br><span class="line">其中cp.sh必须放置在/etc/ha.d/resource.d/或/etc/init.d/目录中。</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意主节点和备份节点中资源文件haresources要完全一样。</strong></p>
</blockquote>
<h3 id="6-6-3-修改authkeys"><a href="#6-6-3-修改authkeys" class="headerlink" title="6.6.3 修改authkeys"></a>6.6.3 修改authkeys</h3><blockquote>
<p><strong>此配置文件必须设置权限为600（固定的）</strong></p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Chmod <span class="number">600</span> /etc/ha.d/authkeys</span><br></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">auth <span class="number">1</span>  </span><br><span class="line">  <span class="number">1</span> crc  </span><br><span class="line">  #<span class="number">2</span> sha1 sha1_any_password  </span><br><span class="line">  #<span class="number">3</span> md5 md5_any_password </span><br><span class="line"></span><br><span class="line">authkeys文件用于设定Heartbeat的认证方式，共有<span class="number">3</span>种可用的认证方式，即crc、md5和sha1。<span class="number">3</span>种认证方式的安全性依次提高，但是占用的系统资源也依次增加。如果Heartbeat集群运行在安全的网络上，可以使用crc方式；如果HA每个节点的硬件配置很高，建议使用sha1，这种认证方式安全级别最高；如果是处于网络安全和系统资源之间，可以使用md5认证方式。这里我们使用crc认证方式.</span><br><span class="line"></span><br><span class="line">需要说明的一点是：无论auth后面指定的是什么数字，在下一行必须作为关键字再次出现，例如指定了<span class="string">"auth   6"</span>，下面一定要有一行<span class="string">"6 认证类型"</span>。</span><br><span class="line">  最后确保这个文件的权限是<span class="number">600</span>（即-rw-------）。</span><br></pre></td></tr></table></figure>
<h3 id="6-6-4-对配置文件进行软链接"><a href="#6-6-4-对配置文件进行软链接" class="headerlink" title="6.6.4 对配置文件进行软链接"></a>6.6.4 对配置文件进行软链接</h3><p>在<code>/usr/etc/ha.d/</code>目录创建软链接，在部署中通过查看日志文件发现是通过此目录运行软件的，具体没搞明白，网上说拷贝的<code>/etc/ha.d</code>目录就行了，不知道为什么，为了省事，干脆创建软链接，这样就没问题了。此功能好用。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ln</span> -<span class="keyword">sv</span> /etc/<span class="keyword">ha</span>.d/shellfuncs /usr/etc/<span class="keyword">ha</span>.d/shellfuncs</span><br><span class="line"></span><br><span class="line"><span class="keyword">ln</span> -<span class="keyword">sv</span> /etc/<span class="keyword">ha</span>.d/<span class="keyword">ha</span>.<span class="keyword">cf</span> /usr/etc/<span class="keyword">ha</span>.d/<span class="keyword">ha</span>.<span class="keyword">cf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ln</span> -<span class="keyword">sv</span> /etc/<span class="keyword">ha</span>.d/authkeys /usr/etc/<span class="keyword">ha</span>.d/authkeys</span><br><span class="line"></span><br><span class="line"><span class="keyword">ln</span> -<span class="keyword">sv</span> /etc/<span class="keyword">ha</span>.d/resource.d /usr/etc/<span class="keyword">ha</span>.d/resource.d</span><br><span class="line"></span><br><span class="line"><span class="keyword">ln</span> -<span class="keyword">sv</span> /etc/<span class="keyword">ha</span>.d/haresources   /usr/etc/<span class="keyword">ha</span>.d/haresources</span><br><span class="line"></span><br><span class="line"><span class="keyword">ln</span> -<span class="keyword">sv</span> /etc/<span class="keyword">ha</span>.d/harc /usr/etc/<span class="keyword">ha</span>.d/harc</span><br><span class="line"></span><br><span class="line"><span class="keyword">ln</span> -<span class="keyword">sv</span> /etc/<span class="keyword">ha</span>.d/rc.d /usr/etc/<span class="keyword">ha</span>.d/rc.d</span><br></pre></td></tr></table></figure>
<p>复制ocf文件，如果没有，启动的时候会报错</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">cp /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">ocf</span>/<span class="title">lib</span>/<span class="title">heartbeat</span>/<span class="title">ocf</span>-<span class="title">binaries</span> /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">ocf</span>/<span class="title">resource</span>.<span class="title">d</span>/<span class="title">heartbeat</span>/.<span class="title">ocf</span>-<span class="title">binaries</span></span></span><br><span class="line"></span><br><span class="line">cp /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">ocf</span>/<span class="title">lib</span>/<span class="title">heartbeat</span>/<span class="title">ocf</span>-<span class="title">directories</span> /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">ocf</span>/<span class="title">resource</span>.<span class="title">d</span>/<span class="title">heartbeat</span>/.<span class="title">ocf</span>-<span class="title">directories</span></span></span><br><span class="line"></span><br><span class="line">cp /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">ocf</span>/<span class="title">lib</span>/<span class="title">heartbeat</span>/<span class="title">ocf</span>-<span class="title">returncodes</span> /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">ocf</span>/<span class="title">resource</span>.<span class="title">d</span>/<span class="title">heartbeat</span>/.<span class="title">ocf</span>-<span class="title">returncodes</span></span></span><br><span class="line"></span><br><span class="line">cp /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">ocf</span>/<span class="title">lib</span>/<span class="title">heartbeat</span>/<span class="title">ocf</span>-<span class="title">shellfuncs</span> /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">ocf</span>/<span class="title">resource</span>.<span class="title">d</span>/<span class="title">heartbeat</span>/.<span class="title">ocf</span>-<span class="title">shellfuncs</span></span></span><br></pre></td></tr></table></figure>
<p>这一块没有用到，发现默认情况下目录里面就存在这些文件，此处作为参考。</p>
<p>备用节点配置文件和主节点配置文件基本一样，只有一个地方有区别。就是</p>
<p><code>ucast eth0 192.168.60.132</code>   <strong>IP地址是对方的IP</strong></p>
<h1 id="7-启动程序顺序"><a href="#7-启动程序顺序" class="headerlink" title="7 启动程序顺序"></a>7 启动程序顺序</h1><p>第一步：启动主备节点drbd服务</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd1</span> ha.d]<span class="comment"># drbdadm up r0</span></span><br></pre></td></tr></table></figure>
<p>第二步：设置升级主节点为primary，并挂载到目录</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd1</span> ha.d]<span class="comment"># drbdadm primary r0</span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@drbd1</span> ha.d]<span class="comment"># mount /dev/drbd1 /drbd/</span></span><br></pre></td></tr></table></figure>
<p>第三步：启动主备节点Heartbeat服务</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd1</span> ha.d]<span class="comment"># service heartbeat start</span></span><br></pre></td></tr></table></figure>
<p>等待主备节点连接并配置完成，可以通过<code>ip a</code> 命令查看虚拟ip是否生效。以下环境部署完成。在进行主节点维护中，恢复的话必须手动操作，避免出错。</p>
<h1 id="8-附件"><a href="#8-附件" class="headerlink" title="8 附件"></a>8 附件</h1><p>链接: <a href="http://pan.baidu.com/s/1mibp7Uo" target="_blank" rel="noopener">http://pan.baidu.com/s/1mibp7Uo</a>   密码: y99z </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>双机</tag>
        <tag>drbd</tag>
        <tag>heartbeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7部署vpn服务器_PPTP</title>
    <url>/2018/09/10/Centos7%E9%83%A8%E7%BD%B2vpn%E6%9C%8D%E5%8A%A1%E5%99%A8-PPTP/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<p>系统：centos 7.2 1511</p>
<h1 id="2-详细步骤"><a href="#2-详细步骤" class="headerlink" title="2 详细步骤"></a>2 详细步骤</h1><h2 id="2-1-验证内核是否加载了MPPE模块："><a href="#2-1-验证内核是否加载了MPPE模块：" class="headerlink" title="2.1 验证内核是否加载了MPPE模块："></a>2.1 验证内核是否加载了MPPE模块：</h2><p>内核的<code>MPPE</code>模块用于支持<code>Microsoft Point-to-Point Encryption</code>。Windows自带的VPN客户端就是使用这种加密方式，主流的<code>Linux Desktop</code>也都有<code>MPPE</code>支持。其实到了我们这个内核版本，默认就已经加载了<code>MPPE</code>，只需要使用下面命令验证一下，显示<code>MPPE ok</code>即可：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">modprobe ppp-compress-<span class="number">18</span> &amp;&amp; <span class="keyword">echo</span> MPPE <span class="keyword">is</span> ok</span><br></pre></td></tr></table></figure>
<h2 id="2-2-安装所需的软件包："><a href="#2-2-安装所需的软件包：" class="headerlink" title="2.2 安装所需的软件包："></a>2.2 安装所需的软件包：</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum</span> install –y ppp pptpd iptables</span><br></pre></td></tr></table></figure>
<h2 id="2-3-修改ppp配置文件"><a href="#2-3-修改ppp配置文件" class="headerlink" title="2.3 修改ppp配置文件"></a>2.3 修改ppp配置文件</h2><p>配置<code>ppp</code>需要编辑它的两个配置文件，一个是<code>option</code>（选项）文件，一个是<code>用户账户</code>文件。首先编辑option文件：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">vi /etc/ppp/options.pptpd</span><br><span class="line"></span><br><span class="line">ms-dns <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>                  #去掉“＃”，设置ＤＮＳ</span><br><span class="line"></span><br><span class="line">ms-dns <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vi</span> /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>
<p>这个文件非常简单，其中用明文存储VPN客户的用户名、服务名称（<code>option.pptpd</code>文件<code>name pptpd</code>   vpn的服务器名字）、密码和IP地址范围，每行一个账户：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">user<span class="symbol">name1</span>         pptpd    passwd<span class="number">1</span>    *</span><br><span class="line"></span><br><span class="line">user<span class="symbol">name2</span>         pptpd    passwd<span class="number">2</span>    *</span><br></pre></td></tr></table></figure>
<p>其中第一第三列分别是用户名和密码；第二列应该和上面的文件<code>/etc/ppp/options.pptpd</code>中<code>name</code>后指定的服务名称一致；最后一列限制客户端IP地址，星号表示没有限制。</p>
<h2 id="2-4-修改pptpd配置文件"><a href="#2-4-修改pptpd配置文件" class="headerlink" title="2.4 修改pptpd配置文件"></a>2.4 修改pptpd配置文件</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">vi /etc/pptpd.conf</span><br><span class="line"></span><br><span class="line">option /etc/ppp/options.pptpd</span><br><span class="line"></span><br><span class="line">logwtmp</span><br><span class="line"></span><br><span class="line">localip <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">remoteip <span class="number">192.168</span><span class="number">.0</span><span class="number">.207</span><span class="number">-217</span></span><br></pre></td></tr></table></figure>
<p>其中<code>option</code>选项指定使用<code>/etc/ppp/options.pptpd</code>中的配置；<code>logwtmp</code>表示使用<code>WTMP日志</code>。</p>
<p>后面两行是比较重要的两行。VPN可以这样理解，Linux客户端使用一个虚拟网络设备<code>ppp0</code>（Windows客户端也可以理解成VPN虚拟网卡），连接到服务器的虚拟网络设备<code>ppp0</code>上，这样客户端就加入了服务器端<code>ppp0</code>所在的网络。<code>localip</code>就是可以分配给服务器端<code>ppp0</code>的IP地址，<code>remoteip</code>则是将要分配给客户端<code>ppp0</code>（或者虚拟网卡）的。</p>
<p>这两项都可以是多个IP，一般<code>localip</code>设置一个<code>IP</code>就行了，<code>remoteip</code>则视客户端数目，分配一段IP。其中<code>remoteip</code>的<code>IP段</code>需要和<code>localip</code>的<code>IP段</code>一致。</p>
<p><code>localip</code>和<code>remoteip</code>所处的<code>IP段</code>可以随意些指定，但其范围内不要包含实际网卡<code>eth0</code>的IP地址。一般情况下，使用上面配置文件中的配置就好使了，你需要做的只是把<code>192.168.0.207-217</code>这个IP区间修改成你喜欢的<code>192.168.0.a-b</code>，其中<code>1&lt;a&lt;b&lt;255</code>。</p>
<h2 id="2-5-打开内核的IP转发功能："><a href="#2-5-打开内核的IP转发功能：" class="headerlink" title="2.5 打开内核的IP转发功能："></a>2.5 打开内核的IP转发功能：</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">找到其中的行：</span><br><span class="line"></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.ip_forward</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.ip_forward</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>然后执行下面命令使上述修改生效：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sysctl</span> –p</span><br></pre></td></tr></table></figure>
<h2 id="2-6-配置iptables防火墙放行和转发规则："><a href="#2-6-配置iptables防火墙放行和转发规则：" class="headerlink" title="2.6 配置iptables防火墙放行和转发规则："></a>2.6 配置iptables防火墙放行和转发规则：</h2><p>最后，还需要配置防火墙。这里配置防火墙有三个目的：一是设置默认丢弃规则，保护服务器的安全；二是放行我们允许的数据包，提供服务；三是通过配置nat表的POSTROUTING链，增加NAT使得VPN客户端可以通过服务器访问互联网。总之我们的原则就是，只放行我们需要的服务，其他统统拒绝。</p>
<p>首先介绍跟PPTP VPN相关的几项：</p>
<ul>
<li><p>允许GRE(Generic Route Encapsulation)协议，PPTP使用GRE协议封装PPP数据包，然后封装成IP报文</p>
</li>
<li><p>放行1723端口的PPTP服务</p>
</li>
<li><p>放行状态为RELATED,ESTABLISHED的入站数据包（正常提供服务的机器上防火墙应该都已经配置了这一项）</p>
</li>
<li><p>放行VPN虚拟网络设备所在的192.168.0.0/24网段与服务器网卡eth0之间的数据包转发</p>
</li>
<li><p>为从VPN网段192.168.0.0/24转往网卡eth0的出站数据包做NAT</p>
</li>
</ul>
<p>如果你其他的防火墙规则已经配置好无需改动，只需要增加上述相关VPN相关的规则，那么执行下面几条命令即可（第三条一般不用执行，除非你原来的防火墙连这个规则都没允许，但是多执行一遍也无妨）：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p gre -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A INPUT -p tcp -m tcp --dport <span class="number">1723</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A INPUT -m <span class="section">state</span> --<span class="section">state</span> RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A FORWARD -s <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> -o eth0 -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A FORWARD -d <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> -i eth0 -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING -s <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure>
<h1 id="3-问题总结"><a href="#3-问题总结" class="headerlink" title="3 问题总结"></a>3 问题总结</h1><p>使用centos 6.5部署vpn pptp</p>
<p>遇到连接错误，总是连接不上</p>
<h2 id="3-1-日志错误1："><a href="#3-1-日志错误1：" class="headerlink" title="3.1 日志错误1："></a>3.1 日志错误1：</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">log</span>]<span class="comment">#vi /var/log/messages </span></span><br><span class="line">Jun <span class="number">13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">25</span> localhost pptpd[<span class="number">9248</span>]: CTRL: Client <span class="number">101.69</span><span class="number">.242</span><span class="number">.170</span> control connection started</span><br><span class="line">Jun <span class="number">13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">25</span> localhost pptpd[<span class="number">9248</span>]: CTRL: Starting call (launching pppd, opening GRE)</span><br><span class="line">Jun <span class="number">13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">25</span> localhost pppd[<span class="number">9249</span>]: Warning: can't open options <span class="built_in">file</span> /root/.ppprc: Permission denied</span><br><span class="line">Jun <span class="number">13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">25</span> localhost pppd[<span class="number">9249</span>]: The remote system <span class="keyword">is</span> required <span class="keyword">to</span> authenticate itself</span><br><span class="line">Jun <span class="number">13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">25</span> localhost pppd[<span class="number">9249</span>]: <span class="keyword">but</span> I couldn't find any suitable secret (password) <span class="keyword">for</span> <span class="keyword">it</span> <span class="keyword">to</span> use <span class="keyword">to</span> do so.</span><br><span class="line">Jun <span class="number">13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">25</span> localhost pppd[<span class="number">9249</span>]: (None <span class="keyword">of</span> <span class="keyword">the</span> available passwords would let <span class="keyword">it</span> use an IP address.)</span><br><span class="line">Jun <span class="number">13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">25</span> localhost pptpd[<span class="number">9248</span>]: GRE: <span class="built_in">read</span>(fd=<span class="number">6</span>,buffer=<span class="number">6124</span>a0,len=<span class="number">8196</span>) <span class="keyword">from</span> PTY failed: status = <span class="number">-1</span> <span class="keyword">error</span> = Input/output <span class="keyword">error</span>, usually caused <span class="keyword">by</span> unexpected termination <span class="keyword">of</span> pppd, check option syntax <span class="keyword">and</span> pppd logs</span><br><span class="line">Jun <span class="number">13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">25</span> localhost pptpd[<span class="number">9248</span>]: CTRL: PTY <span class="built_in">read</span> <span class="keyword">or</span> GRE <span class="built_in">write</span> failed (pty,gre)=(<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">Jun <span class="number">13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">25</span> localhost pptpd[<span class="number">9248</span>]: CTRL: Client <span class="number">101.69</span><span class="number">.242</span><span class="number">.170</span> control connection finished</span><br></pre></td></tr></table></figure>
<p>相关配置文件</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# more /etc/pptpd.conf |grep -v ^#</span><br><span class="line">option /etc/ppp/options.pptpd</span><br><span class="line">debug /var/log/pptpd.log</span><br><span class="line">localip <span class="number">10.10</span><span class="number">.1</span><span class="number">.20</span></span><br><span class="line">remoteip <span class="number">10.10</span><span class="number">.1</span><span class="number">.30</span><span class="number">-254</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# more /etc/ppp/options.pptpd|grep -v ^#</span><br><span class="line">name pptpd</span><br><span class="line">refuse-pap</span><br><span class="line">refuse-chap</span><br><span class="line">refuse-mschap</span><br><span class="line">require-mschap-v2</span><br><span class="line">require-mppe<span class="number">-128</span></span><br><span class="line">ms-dns <span class="number">221.228</span><span class="number">.255</span><span class="number">.1</span></span><br><span class="line">ms-dns <span class="number">223.6</span><span class="number">.6</span><span class="number">.6</span></span><br><span class="line">proxyarp</span><br><span class="line">lock</span><br><span class="line">nobsdcomp </span><br><span class="line">novj</span><br><span class="line">novjccomp</span><br><span class="line">nologfd</span><br></pre></td></tr></table></figure>
<p>我使用的centos 6.5 64bit ，相关安装包如下：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa |grep <span class="string">"ppp*"</span></span><br><span class="line">libreport-plugin-rhtsupport<span class="number">-2.0</span><span class="number">.9</span><span class="number">-19.</span>el6.centos.x86_64</span><br><span class="line">device-mapper-event-libs<span class="number">-1.02</span><span class="number">.79</span><span class="number">-8.</span>el6.x86_64</span><br><span class="line">ppl<span class="number">-0.10</span><span class="number">.2</span><span class="number">-11.</span>el6.x86_64</span><br><span class="line">pptpd<span class="number">-1.4</span><span class="number">.0</span><span class="number">-3.</span>el6.x86_64</span><br><span class="line">abrt-addon-ccpp<span class="number">-2.0</span><span class="number">.8</span><span class="number">-21.</span>el6.centos.x86_64</span><br><span class="line">device-mapper<span class="number">-1.02</span><span class="number">.79</span><span class="number">-8.</span>el6.x86_64</span><br><span class="line">device-mapper-event<span class="number">-1.02</span><span class="number">.79</span><span class="number">-8.</span>el6.x86_64</span><br><span class="line">tcp_wrappers<span class="number">-7.6</span><span class="number">-57.</span>el6.x86_64</span><br><span class="line">cloog-ppl<span class="number">-0.15</span><span class="number">.7</span><span class="number">-1.2</span>.el6.x86_64</span><br><span class="line">snappy<span class="number">-1.1</span><span class="number">.0</span><span class="number">-1.</span>el6.x86_64</span><br><span class="line">kernel_ppp_mppe<span class="number">-1.0</span><span class="number">.2</span><span class="number">-3</span>dkms.noarch</span><br><span class="line">pptp<span class="number">-1.7</span><span class="number">.2</span><span class="number">-8.1</span>.el6.x86_64</span><br><span class="line">device-mapper-libs<span class="number">-1.02</span><span class="number">.79</span><span class="number">-8.</span>el6.x86_64</span><br><span class="line">tcp_wrappers-libs<span class="number">-7.6</span><span class="number">-57.</span>el6.x86_64</span><br><span class="line">cpp<span class="number">-4.4</span><span class="number">.7</span><span class="number">-4.</span>el6.x86_64</span><br><span class="line">device-mapper-persistent-data<span class="number">-0.2</span><span class="number">.8</span><span class="number">-2.</span>el6.x86_64</span><br><span class="line">ppp<span class="number">-2.4</span><span class="number">.5</span><span class="number">-5.</span>el6.x86_64</span><br></pre></td></tr></table></figure>
<p>现在不知道问题出在什么地方，麻烦各位帮忙看看，谢谢！！！</p>
<p>已经解决，修改配置</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">options.pptpd把</span><br><span class="line"><span class="keyword">require</span>-mschap-v2</span><br><span class="line"><span class="keyword">require</span>-mppe-<span class="number">128</span></span><br></pre></td></tr></table></figure>
<p>这两行注释掉即可。如下图：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Centos7部署vpn服务器_PPTP/1571820272921.png" alt="图1"></p>
<blockquote>
<p><strong>这里是关闭加密，跳过加密。此方法修改过没有用处。</strong></p>
</blockquote>
<h2 id="3-2-错误2："><a href="#3-2-错误2：" class="headerlink" title="3.2 错误2："></a>3.2 错误2：</h2><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">[root@webserver ~]# sysctl -p</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line"></span><br><span class="line">kernel.sysrq = 0</span><br><span class="line"></span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">error: </span>"net.bridge.bridge-nf-call-ip6tables" is an unknown key</span><br><span class="line"></span><br><span class="line"><span class="keyword">error: </span>"net.bridge.bridge-nf-call-iptables" is an unknown key</span><br><span class="line"></span><br><span class="line"><span class="keyword">error: </span>"net.bridge.bridge-nf-call-arptables" is an unknown key</span><br><span class="line"></span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line"></span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line"></span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line"></span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line"></span><br><span class="line">You have mail in /var/spool/mail/root</span><br></pre></td></tr></table></figure>
<p>版本没错但是发现转发有错</p>
<blockquote>
<p><strong>加载模块然后重启解决</strong></p>
</blockquote>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">[root@webserver ~]<span class="comment"># modprobe bridge</span></span><br><span class="line"></span><br><span class="line">[root@webserver ~]<span class="comment"># lsmod | grep bridge</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bridge </span>                <span class="number">79078</span>  <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">stp                     <span class="number">2218</span>  <span class="number">1</span> <span class="keyword">bridge</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">llc </span>                    <span class="number">5546</span>  <span class="number">2</span> <span class="keyword">bridge,stp</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">[root@webserver </span>~]<span class="comment"># service pptpd restart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Shutting </span>down pptpd:                                       [  OK  ]</span><br><span class="line"></span><br><span class="line">Starting pptpd:                                            [  OK  ]</span><br><span class="line"></span><br><span class="line"><span class="symbol">Warning:</span> a pptpd restart does not terminate existing </span><br><span class="line"></span><br><span class="line">connections, so new connections may <span class="keyword">be </span>assigned the same IP </span><br><span class="line"></span><br><span class="line"><span class="keyword">address </span><span class="keyword">and </span><span class="built_in">cause</span> unexpected results.  Use restart-kill to </span><br><span class="line"></span><br><span class="line">destroy existing connections during a restart.</span><br></pre></td></tr></table></figure>
<div class="note info"><p>此处是重新加载<code>bridge</code>模块，重新加载了，没有作用，后来实验，发现是否重新加载，都不影响vpn使用,最终就没管他，不知道是否有影响。</p></div>



<p>最终如何解决的，其实也没有做什么修改，就是重新<code>yum remove –y ppp* pptp*</code>后，重新<code>yum install –y ppp* pptp* iptables*</code> 后，多次重启，和重设置vpn帐号，又可以用了，<strong>I don’t know why.</strong></p>
<p><strong>最终解决方案：</strong></p>
<p>后来发现一个问题，当客户端开启防火墙的时候就能连接，当关闭防火墙的时候就无法连接报错。I don’t know why.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>vpn</tag>
        <tag>pptp</tag>
      </tags>
  </entry>
  <entry>
    <title>OTRS部署及优化过程</title>
    <url>/2018/09/10/OTRS%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<p>系统：centos 7.2 1511</p>
<p>Otrs：otrs-5.0.14-02.noarch.rpm</p>
<p>Mysql：5.5.50-MariaDB</p>
<p>Apache: Apache/2.4.6</p>
<h1 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2 安装步骤"></a>2 安装步骤</h1><h2 id="2-1-禁用SELinux"><a href="#2-1-禁用SELinux" class="headerlink" title="2.1 禁用SELinux"></a>2.1 禁用SELinux</h2><p>在文件<code>/etc/selinux/config</code>中配置<code>SELINUX=disabled</code></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@drbd2</span> home]<span class="comment"># vi /etc/selinux/config</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820685033.png" alt="图1"></p>
<p>重启系统。重启后确认命令getenforce返回为Disabled</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820694283.png" alt="图2"></p>
<h2 id="2-2-安装数据库"><a href="#2-2-安装数据库" class="headerlink" title="2.2 安装数据库"></a>2.2 安装数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@drbd2 home] yum -y <span class="keyword">install</span>   mariadb-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p>这会在你的系统上使用默认选项安装MySQL，你需要修改默认设置以适用于OTRS。使用文本编辑器来</p>
<p>创建一个新文件<code>/etc/my.cnf.d/zotrs.cnf</code>，包含如下内容：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820701220.png" alt="图3"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820709338.png" alt="图4"></p>
<p>现在执行<code>systemctl start mariadb</code>来重启数据库服务器并激活刚才的修改内容。然后运行命令<code>/usr/bin/mysql_secure_installation</code>，并按照屏幕上的指令来设置数据库的root密码、移除匿名访问及删除test数据库。</p>
<h2 id="2-3-安装otrs"><a href="#2-3-安装otrs" class="headerlink" title="2.3 安装otrs"></a>2.3 安装otrs</h2><p>使用<code>yum</code>通过命令行来安装<code>OTRS</code>，它还会拉入一些依赖包如<code>Apache WEB</code>服务器和一些<code>Perl模块</code>。</p>
<div class="“note" success”=""><p>备注<br>确保你已经将OTRS RPM文件复制到了当前目录。(必须在otrsrpm安装包的目录运行安装命令)</p><br><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@drbd2 home]</span># <span class="selector-tag">yum</span> <span class="selector-tag">install</span>   <span class="selector-tag">--nogpgcheck</span> <span class="selector-tag">otrs-5</span><span class="selector-class">.0</span><span class="selector-class">.14-02</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><br><br>现在使用命令<code>systemctl restart httpd.service</code>重启<code>Apache</code>以载入为<code>OTRS</code>修改的配置。<br><br>## 2.4 安装额外的perl模块<br><br>除了通过<code>RPM包</code>安装的<code>Perl模块</code>外，<code>OTRS</code>还需要一些其它的<code>Perl模块</code>，你可以手动安装。通过执行位于目录<code>/opt/otrs</code>下的文件<code>bin/otrs.CheckModules.pl</code>来检查缺失的模块。一些模块只是可选的功能才需要，比如与<code>IMAP</code>服务器通讯或生成<code>PDF</code>。具体可参考《OTRS-4.0.5系统安装手册 otrs_5.0_管理员说明书》。<br><br>## 2.5 使用Web安装器<br><br>在安装完<code>OTRS</code>软件后，你可以使用<code>OTRS</code>的<code>WEB安装器</code>来设置和配置<code>OTRS数据库</code>。WEB安装器是一个能通过浏览器访问的WEB页面。WEB安装器的地址是：<a href="http://localhost/otrs/installer.pl" target="_blank" rel="noopener">http://localhost/otrs/installer.pl</a> 。<br><br>启动WEB安装器后，请跟随下面的步骤来设置你的系统：<br><br>1、 检验OTRS办公室信息并点击‘下一步’以继续（见下图）。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820717744.png" alt="图5"><br><br><br>2、 阅读GNU Affero通用公共许可证（见下图）并页面底部的相应按钮接受许可。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820725101.png" alt="图6"><br><br><br>3、 选择你要在OTRS中使用的数据库。如果你选择<code>MySQL</code>或<code>PostgreSQL</code>，你还能在这里选择是通过WEB安装器新建一个数据库还是使用你的数据库管理员已经创建好的空数据库。<br><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820732416.png" alt="图7"><br><br>4、 根据你选择的数据库的不同，以及在上一步中是用WEB安装器新建数据库还是使用已有数据库，这个窗口可用有一点点差异。在这个窗口输入数据库认证信息。<br><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820739697.png" alt="图8"><br><br>5、 创建一个新的数据库用户，选择一个数据库名称，并点击‘下一步’（见下图）。<br><br><div class="note info"><p>OTRS会为你生成一个强密码，当然如果你愿意也可以输入你自己的密码。这个密码会写入到配置文件Kernel/Config.pm，所以无需记住这个密码。</p></div><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820746757.png" alt="图9"><br>6、 如果需要会创建数据库，并填充相应数据，如图所示。点击‘下一步’进入下一个窗口。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820758189.png" alt="图10"><br><br><br>7、 提供所有必填的系统设置，并点击‘下一步’（如下图）。<br><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820764700.png" alt="图11"><br><br>8、 若需要，你可以提供需要的数据来配置收发邮件，或者点击窗口底部右边的按钮跳过这一步（如下图）。<br><br><div class="note info"><p>暂时先跳过这一步，后期在进行配置。</p></div><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820772581.png" alt="图12"><br><br><br>9、 记录管理员密码，安装完成。<br><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820779453.png" alt="图13"><br><br>## 2.6 登陆地址<br><br>服务人员登录地址：<a href="http://172.20.22.108/otrs/index.pl" target="_blank" rel="noopener">http://172.20.22.108/otrs/index.pl</a><br><br>客户登陆地址：<a href="http://172.20.22.108/otrs/customer.pl" target="_blank" rel="noopener">http://172.20.22.108/otrs/customer.pl</a><br><br># 3 备份与恢复<br><br>## 3.1 备份<br><br>有两种类型的数据需要备份：应用程序文件（如<code>/opt/otrs</code>目录下的文件）和存储在<code>数据库</code>中的数据。<br><br>为了简化备份，在每个OTRS安装中已经包括了脚本<code>scripts/backup.pl</code>。运行它可以备份所有重要的数据。<br><br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">[root@drbd2   scripts]<span class="comment"># ./backup.pl -d /home/</span></span><br><span class="line"></span><br><span class="line">Backup   <span class="string">/home//2016-12-13_13-18/Config.tar.gz</span> <span class="string">...</span> done</span><br><span class="line"></span><br><span class="line">Backup <span class="string">/home//2016-12-13_13-18/Application.tar.gz</span>   <span class="string">...</span> done</span><br><span class="line"></span><br><span class="line">Dump MySQL   rdbms <span class="string">...</span> done</span><br><span class="line"></span><br><span class="line">Compress   SQL-file.<span class="string">..</span> done</span><br></pre></td></tr></table></figure><br><br>所有数据都保存在目录<code>/home/2016-12-13_13-18/</code>下。另外，这些数据被保存到一个<code>.tar.gz文件</code>。<br><br>## 3.2 恢复<br><br>要恢复一个备份，保存的应用程序数据必须被写回到安装目录，如<code>/opt/otrs</code>。还必须要恢复数据库。<br><br>每个OTRS安装都自带了一个脚本文件<code>scripts/restore.pl</code>（见下面的脚本），它简化了恢复过程，支持<code>MySQL</code>和<code>PostgreSQL</code>。<br><br><div class="note danger"><p>恢复要求数据库为空</p></div>

<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@drbd2 scripts]# ./restore.pl -b   /home/<span class="number">2016</span><span class="number">-12</span><span class="number">-13</span>_13<span class="number">-18</span> -d /opt/otrs</span><br><span class="line"></span><br><span class="line">Restore /home/<span class="number">2016</span><span class="number">-12</span><span class="number">-13</span>_13<span class="number">-18</span><span class="comment">//Config.tar.gz   ...</span></span><br><span class="line"></span><br><span class="line">Restore /home/<span class="number">2016</span><span class="number">-12</span><span class="number">-13</span>_13<span class="number">-18</span><span class="comment">//Application.tar.gz   ...</span></span><br><span class="line"></span><br><span class="line">create MySQL</span><br><span class="line"></span><br><span class="line">decompresses SQL-file ...</span><br><span class="line"></span><br><span class="line">cat SQL-file into MySQL database</span><br><span class="line"></span><br><span class="line">compress SQL-file...</span><br></pre></td></tr></table></figure>
<h1 id="4-优化"><a href="#4-优化" class="headerlink" title="4 优化"></a>4 优化</h1><h2 id="4-1-开启工单关注"><a href="#4-1-开启工单关注" class="headerlink" title="4.1 开启工单关注"></a>4.1 开启工单关注</h2><p>系统配置》搜索配置参数<code>Ticket::watcher</code>》激活功能。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820790303.png" alt="图14"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820820163.png" alt="图15"></p>
<h2 id="4-2-PDF打印中文乱码"><a href="#4-2-PDF打印中文乱码" class="headerlink" title="4.2 PDF打印中文乱码"></a>4.2 PDF打印中文乱码</h2><p><strong>解决方案</strong></p>
<p>此方法适合于<code>Linux，Win</code>系列可以直接跳过拷贝文件设定配置即可解决，也可安装其它字体。</p>
<p>安装中文字体</p>
<ol>
<li><p>从windows 7/vista/2008 系统中拷贝微软雅黑字体msyh.ttf文件</p>
</li>
<li><p>将字体文件上传至/usr/share/fonts/chinese/TrueType/msyh.ttf</p>
</li>
<li><p>打开OTRS配置页面</p>
</li>
</ol>
<p>在otrs配置 <code>core::PDF</code>中添加字体文件的绝对路径<code>/usr/share/fonts/chinese/TrueType/msyh.ttf</code></p>
<p>Win下可直接设定字体名称，otrs系统会自动至Fonts目录查找指定的字体用于处理中文。</p>
<p>进入 <code>OTRS to Admin &gt; SysConfig &gt; Framework &gt; Core::PDF</code>并更新字体位置，为PDF打印选择指定的新字体</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820829326.png" alt="图16"></p>
<h2 id="4-3-FAQ显示更多属性"><a href="#4-3-FAQ显示更多属性" class="headerlink" title="4.3 FAQ显示更多属性"></a>4.3 FAQ显示更多属性</h2><p>首先，在系统配置的FAQ中选择配置项<code>Frontend::Agent::FAQ::ViewExplorer</code>。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820839505.png" alt="图17"></p>
<p>然后在打开的页面中找到配置项<code>FAQ::Frontend::AgentFAQExplorer###ShowColumns</code>。按照下图进行配置。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820847340.png" alt="图18"></p>
<p>最后，我们返回到FAQ浏览器页面，就可以看到FAQ文章的更多属性。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/OTRS部署及优化过程/1571820853657.png" alt="图19"></p>
</div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>otrs</tag>
        <tag>工单</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows2003域控迁移到Windows2008域控</title>
    <url>/2018/09/10/Windows2003%E5%9F%9F%E6%8E%A7%E8%BF%81%E7%A7%BB%E5%88%B0Windows2008%E5%9F%9F%E6%8E%A7/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-前期背景："><a href="#1-前期背景：" class="headerlink" title="1 前期背景："></a>1 前期背景：</h1><p>现有<code>DNS</code>、<code>DHCP</code>服务器域控为<code>Windows 2003</code> 系统，需要将<code>Windows 2003</code> 域控升级为<code>2008</code>.</p>
<h1 id="2-环境："><a href="#2-环境：" class="headerlink" title="2 环境："></a>2 环境：</h1><p>主域控 ：<code>Server 2003 X86</code></p>
<p>迁移域控服务器：<code>Server 2008 R2 X64</code> </p>
<h1 id="3-操作步骤"><a href="#3-操作步骤" class="headerlink" title="3 操作步骤"></a>3 操作步骤</h1><h2 id="3-1-配置Windows-server-2008域控兼容环境"><a href="#3-1-配置Windows-server-2008域控兼容环境" class="headerlink" title="3.1 配置Windows server 2008域控兼容环境"></a>3.1 配置Windows server 2008域控兼容环境</h2><ol>
<li>首先将<code>Windows 2008</code>系统加入 <code>Windows 2003</code> 域控的域中。这里为测试的，暂为 <code>shdc.com</code>。加入以后重启2008系统。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/1.png" alt="1"></li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/2.png" alt="2"></p>
<ol start="2">
<li>重启后用<code>shdc\administrator</code>登录2008系统。在测试进行之前，我们来查看一下， 现有的<code>FSMO</code>角色情况。（运行CMD，输入 <code>etdom query fsmo</code>），显示结果所有的角色都在2003的域控<code>shdc-1</code>中。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/3.png" alt="3"></li>
</ol>
<ol start="3">
<li><p>在升级域控到 <code>Windows Server 2008</code>之前，必须进行相关的扩展，这一点，与从<code>Windows Server 2000</code>域升级到<code>Windows Server 2003</code>域一样。在这里我们必须在原 <code>Windows Server 2003</code> 域控制 器上运行<code>Windows Server 2008</code>的 <code>ADPREP工具</code>，该工具位于 <code>Windows Server 2008</code>光盘中的 <code>Source\adprep</code>目录下，请复制 <code>adprep</code>目录到<code>Windows Server 2003</code>域控制上的任意磁盘分区中（<strong>计算机名为:shdc-1</strong>），本案例将此文件夹复制 到<code>SHDC-1</code>的磁盘分区<code>C</code>。<br><div class="note warning"><p>特别说明，敬请留意：<br>原 Windows Server 2000域升级到 Windows Server 2003域，只需对 Forest和 Domian进行扩展，但在 Windows Server 2003域升级到 Windows Server 2008域中，还必须对 RODC进行扩展，以便 Windows Server 2008能在基于 Windows Server 2003的域中担任域控制器类型角色</p></div><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/4.png" alt="4"></p>
</li>
<li><p>下面操作在<code>shdc-1</code>（域控制器）上进行操作。 </p>
</li>
</ol>
<p><code>开始 －运行 －CMD</code>，进入C分区的<code>ADPREP</code>目录输入 <code>adprep  /forestprep</code>根据提示，选择”<code>C</code> “，并按下<code>Enter键</code>继续。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/5.png" alt="5"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/6.png" alt="6"></p>
<ol start="5">
<li>完成 <code>Forest扩展</code>。接下来的是<code>RODC</code>请输入：<code>adprep  /rodcprep</code>（从显示结果</li>
</ol>
<p>来看，似乎这些扩展已经更新了，但之前尝试过跳过 RODC扩展时，不能继续。）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/7.png" alt="7"></p>
<ol start="6">
<li>完成 <code>RODC</code>的扩展之后，接下来进行的是<code>Domain</code>的扩展。 输入：<code>adprep /domainprep /gpprep</code> 结果出现如下错误。</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/8.png" alt="8"></p>
<p>网络搜索发现，没有提升域模式，在Active Directory用户和计算机中点击右键，提升域功能级别。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/9.png" alt="9"></p>
<p>选择 Windows 2000纯模式。点提升。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/10.png" alt="10"></p>
<ol start="7">
<li>再次运行<code>adprep /domainprep /gpprep</code> ，如下图。</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/11.png" alt="11"></p>
<ol start="8">
<li>OK，我们已经做好了将 Windows Server2008（计算机名 Server2008）提升为域控 制器的准备工作。</li>
</ol>
<h2 id="3-2-提升Windows-2008-为域控制器"><a href="#3-2-提升Windows-2008-为域控制器" class="headerlink" title="3.2 提升Windows 2008 为域控制器"></a>3.2 提升Windows 2008 为域控制器</h2><ol>
<li>现在，以<code>shdc\administrator</code>身份登录成员服务器 <code>Server 2008</code>。 <code>开始 －运行 － dcpromo</code>（和Windows 2003中的类似）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/12.png" alt="12"></li>
</ol>
<ol start="2">
<li>出现”<code>Active Directory 域服务安装向导</code>“，在该向导中，我们选中”`使用高级模式</li>
</ol>
<p>安装<code>“，点击</code>下一步`：</p>
<p><img src="13.png" alt="13"></p>
<ol start="3">
<li>在” <code>Active Directory 域服务安装向导</code>“中，我们选中” <code>现有林</code>“中的”`向现有域添加</li>
</ol>
<p>域控制器<code>”，并点击“</code>下一步` ”<br><img src="14.png" alt="14"></p>
<ol start="4">
<li>点击“ <code>下一步</code> ”继续</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/15.png" alt="15"></p>
<ol start="5">
<li>选择域，点击“ <code>下一步</code> ”继续</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/16.png" alt="16"></p>
<ol start="6">
<li>选择站点，点击“ 下一步 ”继续</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/17.png" alt="17"></p>
<ol start="7">
<li>“ 其他域控制器选项”，以这个选项中，默认的 角色为“ DNS服务器“和” 全局编录</li>
</ol>
<p>“ ，而” 只读域控制器“，则为不可选，点击“ 下一步 ”继续</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/18.png" alt="18"></p>
<ol start="8">
<li>选择”是”继续。</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/19.png" alt="19"></p>
<ol start="9">
<li>默认选项，从现有的域控制器上接收更新数据。点击“下一步 ”继续<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/20.png" alt="20"></li>
</ol>
<ol start="10">
<li>点击“ 下一步 ”继续<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/21.png" alt="21"></li>
</ol>
<ol start="11">
<li>点击“ 下一步 ”继续<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/22.png" alt="22"></li>
</ol>
<ol start="12">
<li>设置目录服务还原模式密码。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/23.png" alt="23"></li>
</ol>
<ol start="13">
<li>点击“ 下一步 ”开始提升 Server 2008为域控制器。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/24.png" alt="24"></li>
</ol>
<ol start="14">
<li>其过程如图：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/25.png" alt="25"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/26.png" alt="26"></li>
</ol>
<ol start="15">
<li>因为选中了“ 完成后重新启动 “，故 DCPROMO完成之后，系统自动启动。让我们来看 Server 2008提升为域控制器之后，ADUC的对比情况。 </li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/27.png" alt="27"></p>
<h2 id="3-3-角色转移"><a href="#3-3-角色转移" class="headerlink" title="3.3 角色转移"></a>3.3 角色转移</h2><ol>
<li><p>接下来的工作，就是传说中的 <code>FSMO角色</code>的转移，首先我们要进行的是对架构主机角色的转移，在这之前，我们必须使用 <code>regsvr32 schmmgmt.dll</code>来注册<code>Active Directory 架构</code> 。以便利用 <code>MMC工具</code>来添加 架构 管理控制台。<br><div class="note primary"><p>这个地方要注意，要以管理员身份运行CMD，否则会出错。2008直接在运行里输CMD似乎权限不够</p></div><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/28.png" alt="28"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/29.png" alt="29"></p>
</li>
<li><p><code>开始 －运行 －MMC</code>，打开微软管理控制台。这里我们要添加 <code>Activer Directory架构</code> 管理控制台。如下图。</p>
</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/30.png" alt="30"></p>
<ol start="3">
<li>右键单击“ Active Directory 架构 “根部，并且选择 “ 更改Active Directory 域控制器 “ </li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/31.png" alt="31"></p>
<ol start="4">
<li>选取要连接的域控制器 <code>shdc-2.shdc.com</code>。</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/32.png" alt="32"></p>
<ol start="5">
<li>再次右键单击“ Active Directory 架构 “根部，并且选择 “ 操作主机 “在对话框中，点击“ 更改“，系统会提示您” 你确实要更改操作主机？“点击” 是 ”继续<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/33.png" alt="33"></li>
</ol>
<p>系统提示架构主机角色的已成功转移到 shdc-2.shdc.com 。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/34.png" alt="34"></p>
<ol start="6">
<li>接下来的工作，就是分别将RID、PDC、基础结构主机角色转移到 shdc-2.com 。<br><div class="note info"><p>请在运行中输入<code>dsa.msc</code>打开 <code>Active Directory 用户和计算机</code>。 </p></div></li>
</ol>
<p>注意：在以下主机角色转移之前，请右键 <code>shdc.com</code>根部，选择“<code>更改域控制器</code>“，</p>
<p>并且选中 <code>2008域控</code>。 </p>
<p>请右键 <code>shdc.com</code>根部，选择“ <code>操作主机</code>“，依次将<code>RID、PDC、Infrastructure</code>主机角色转移到 <code>shdc-2.com</code></p><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/35.png" alt="35"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/36.png" alt="36"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/37.png" alt="37"><p></p>
<ol start="7">
<li>最后我们需要做的是将域命名（Domain Name）主机，转移到 shdc-2.com上，打开 Active Directory域和信任关系，完成域命名主机的转移。</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/38.png" alt="38"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/39.png" alt="39"></p>
<ol start="8">
<li>最后需要做的是取消 <code>shdc-1.com</code>的 <code>GC</code>（全局编录）角色，打开 <code>Active Directory 站点和服务</code>，依次选中 <code>Site – Default First Site Name – Servers – shdc-1</code> ，右键单击 <code>NTDS Setting</code>，选择<code>属性</code>，然后将 <code>全局编录</code> 前面的勾去掉，只何留<code>shdc-2.com</code>（Windows 2008）为<code>GC</code>即可。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/40.png" alt="40"></li>
</ol>
<ol start="9">
<li>最后确定一下各种主机角色的状态，在运行里输入 cmd进行命令提示行，输入 </li>
</ol>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">netdom <span class="keyword">query</span> fsmo</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/41.png" alt="41"></p>
<ol start="10">
<li>至此 Windows Server 2003迁移到 Windows Server 2008完毕。</li>
</ol>
<h1 id="4-错误"><a href="#4-错误" class="headerlink" title="4 错误"></a>4 错误</h1><h2 id="4-1-错误1："><a href="#4-1-错误1：" class="headerlink" title="4.1 错误1："></a>4.1 错误1：</h2><p>输入<code>adprep  /rodcprep</code>报错</p>
<p>症状如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">Adprep could <span class="keyword">not</span> contact a replica <span class="keyword">for</span>   partition DC=DomainDnsZones,DC=Contoso,DC=com </span><br><span class="line">  Adprep failed the operation <span class="keyword">on</span> partition   DC=DomainDnsZones,DC=Contoso,DC=com Skipping <span class="keyword">to</span> <span class="keyword">next</span> partition. </span><br><span class="line">  </span><br><span class="line">  Adprep could <span class="keyword">not</span> contact a replica <span class="keyword">for</span>   partition DC=ForestDnsZones,DC=Contoso,DC=com </span><br><span class="line">  Adprep encountered an LDAP <span class="keyword">error</span>. <span class="keyword">Error</span> code: <span class="number">0x0</span>.   <span class="built_in">Server</span> extended <span class="keyword">error</span> code: <span class="number">0x0</span>, <span class="built_in">Server</span> <span class="keyword">error</span> message: (<span class="literal">null</span>). </span><br><span class="line">  </span><br><span class="line">  Adprep failed the operation <span class="keyword">on</span> partition   DC=ForestDnsZones,DC=Contoso,DC=com Skipping <span class="keyword">to</span> <span class="keyword">next</span> partition. </span><br><span class="line">  Adprep completed <span class="keyword">with</span> errors. <span class="keyword">Not</span> all partitions are   updated.</span><br></pre></td></tr></table></figure>
<p><strong>原因是：</strong></p>
<ol>
<li><p>分区或在错误消息中不再存在引用分区</p>
</li>
<li><p>为引用的分区或分区结构主机已经强行降级或离线。</p>
</li>
</ol>
<p><strong>解决办法：</strong></p>
<p><strong>参考资料：</strong></p>
<p><a href="https://support.microsoft.com/zh-cn/kb/949257" target="_blank" rel="noopener">https://support.microsoft.com/zh-cn/kb/949257</a></p>
<p><a href="http://bbs.51cto.com/thread-1067016-1-1.html" target="_blank" rel="noopener">http://bbs.51cto.com/thread-1067016-1-1.html</a></p>
<p><a href="http://www.68idc.cn/help/jiabenmake/qita/2014040986015.html" target="_blank" rel="noopener">http://www.68idc.cn/help/jiabenmake/qita/2014040986015.html</a></p>
<p><div class="note info"><p>备注：微软给出的fixfsmo.vbs脚本无需更改内容（当时纠结了一天，挺着心肝尝试了下，惨确定无须修改。)</p></div><br><strong>Fixfsmo.vbs脚本内容如下</strong></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="comment">'-------fixfsmo.vbs------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>   ADS_NAME_INITTYPE_GC = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>   ADS_NAME_TYPE_1779 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>   ADS_NAME_TYPE_CANONICAL = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>   inArgs = WScript.Arguments</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>   (inArgs.Count = <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">' Assume the command line argument is the   NDNC (in DN form) to use.</span></span><br><span class="line"></span><br><span class="line">    NdncDN = inArgs(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line"></span><br><span class="line">    Wscript.StdOut.Write <span class="string">"usage: cscript   fixfsmo.vbs NdncDN"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span>   <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>   (NdncDN &lt;&gt; <span class="string">""</span>) <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">' Convert the DN form of the NDNC into   DNS dotted form.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span> objTranslator =   CreateObject(<span class="string">"NameTranslate"</span>)</span><br><span class="line"></span><br><span class="line">    objTranslator.Init ADS_NAME_INITTYPE_GC,   <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    objTranslator.<span class="keyword">Set</span> ADS_NAME_TYPE_1779,   NdncDN</span><br><span class="line"></span><br><span class="line">    strDomainDNS =   objTranslator.<span class="keyword">Get</span>(ADS_NAME_TYPE_CANONICAL)</span><br><span class="line"></span><br><span class="line">    strDomainDNS = Left(strDomainDNS, len(strDomainDNS)<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    Wscript.Echo <span class="string">"DNS name: "</span> &amp;   strDomainDNS</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">' Find a domain controller that hosts   this NDNC and that is online.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> objRootDSE =   GetObject(<span class="string">"LDAP://"</span> &amp; strDomainDNS &amp; <span class="string">"/RootDSE"</span>)</span><br><span class="line"></span><br><span class="line">    strDnsHostName =   objRootDSE.<span class="keyword">Get</span>(<span class="string">"dnsHostName"</span>)</span><br><span class="line"></span><br><span class="line">    strDsServiceName =   objRootDSE.<span class="keyword">Get</span>(<span class="string">"dsServiceName"</span>)</span><br><span class="line"></span><br><span class="line">    Wscript.Echo <span class="string">"Using DC "</span> &amp;   strDnsHostName</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">' Get the current infrastructure fsmo.</span></span><br><span class="line"></span><br><span class="line">    strInfraDN =   <span class="string">"CN=Infrastructure,"</span> &amp; NdncDN</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> objInfra =   GetObject(<span class="string">"LDAP://"</span> &amp; strInfraDN)</span><br><span class="line"></span><br><span class="line">    Wscript.Echo <span class="string">"infra fsmo is "</span>   &amp; objInfra.fsmoroleowner</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">' If the current fsmo holder is deleted,   set the fsmo holder to this domain controller.</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (InStr(objInfra.fsmoroleowner,   <span class="string">"\0ADEL:"</span>) &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">' Set the fsmo holder to this domain   controller.</span></span><br><span class="line"></span><br><span class="line">        objInfra.Put   <span class="string">"fSMORoleOwner"</span>,    strDsServiceName</span><br><span class="line"></span><br><span class="line">        objInfra.SetInfo</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">' Read the fsmo holder back.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> objInfra =   GetObject(<span class="string">"LDAP://"</span> &amp; strInfraDN)</span><br><span class="line"></span><br><span class="line">        Wscript.Echo <span class="string">"infra fsmo changed   to:"</span> &amp; objInfra.fsmoroleowner</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span>   <span class="keyword">if</span></span><br></pre></td></tr></table></figure>
<p><strong>分别运行运行脚本：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">cscript fixfsmo.vbs <span class="attr">DC</span> = ForestDnsZones，<span class="attr">DC</span> = dealeasy，<span class="attr">DC</span> = local</span><br><span class="line"></span><br><span class="line">cscript fixfsmo.vbs <span class="attr">DC</span> = DomainDnsZones，<span class="attr">DC</span> = dealeasy，<span class="attr">DC</span> = local</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Windows2003域控迁移到Windows2008域控/42.png" alt="42"></p>
<p>问题解决</p>
<h1 id="5-附件："><a href="#5-附件：" class="headerlink" title="5 附件："></a>5 附件：</h1><p>链接: <a href="http://pan.baidu.com/s/1kVBPuuV" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVBPuuV</a>   密码: aevv</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>工作域</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7系统安装配置kvm软件步骤</title>
    <url>/2018/09/10/centos7%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEkvm%E8%BD%AF%E4%BB%B6%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-kvm相关安装包及其作用"><a href="#1-kvm相关安装包及其作用" class="headerlink" title="1 kvm相关安装包及其作用"></a>1 kvm相关安装包及其作用</h1><p><code>qemu-kvm</code> 主要的KVM程序包</p>
<p><code>python-virtinst</code> 创建虚拟机所需要的命令行工具和程序库</p>
<p><code>virt-manager</code> GUI虚拟机管理工具</p>
<p><code>virt-top</code> 虚拟机统计命令</p>
<p><code>virt-viewer</code> GUI连接程序，连接到已配置好的虚拟机</p>
<p><code>libvirt</code> C语言工具包，提供libvirt服务</p>
<p><code>libvirt-client</code> 为虚拟客户机提供的C语言工具包</p>
<p><code>virt-install</code> 基于libvirt服务的虚拟机创建命令</p>
<p><code>bridge-utils</code> 创建和管理桥接设备的工具</p>
<h1 id="2-安装kvm-软件"><a href="#2-安装kvm-软件" class="headerlink" title="2 安装kvm 软件"></a>2 安装kvm 软件</h1><p>大致列下步骤：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">[root<span class="subst">@361</span>way ~]<span class="meta"># yum -y install qemu-kvm   libvirt virt-install bridge-utils virt-manager</span></span><br></pre></td></tr></table></figure>
<h2 id="2-1-查看是否加载kvm模块"><a href="#2-1-查看是否加载kvm模块" class="headerlink" title="2.1 查看是否加载kvm模块"></a>2.1 查看是否加载kvm模块</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@kvm ~]# lsmod|grep kvm</span><br><span class="line"></span><br><span class="line">kvm_intel             <span class="number">138567</span>  <span class="number">0</span></span><br><span class="line"></span><br><span class="line">kvm                   <span class="number">441119</span>  <span class="number">1</span> kvm_intel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#如果没有这两条，可以用<span class="string">"modprobe kvm"</span>加载；</span><br><span class="line"></span><br><span class="line">#相关命令<span class="string">"insmod;rmmod;modinfo"</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-启动libvirtd"><a href="#2-2-启动libvirtd" class="headerlink" title="2.2 启动libvirtd"></a>2.2 启动libvirtd</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@localhost</span> ~]<span class="comment"># systemctl start libvirtd           # 启动</span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@localhost</span> ~]<span class="comment"># systemctl enable libvirtd          # 开机启动</span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@localhost</span> ~]<span class="comment"># systemctl list-unit-files|grep libvirtd      # 检测是否开机启动</span></span><br><span class="line"></span><br><span class="line">libvirtd.service                            enabled</span><br></pre></td></tr></table></figure>
<h1 id="3-置网卡桥接"><a href="#3-置网卡桥接" class="headerlink" title="3 置网卡桥接"></a>3 置网卡桥接</h1><h2 id="3-1-修改网卡文件eno16777736"><a href="#3-1-修改网卡文件eno16777736" class="headerlink" title="3.1 修改网卡文件eno16777736"></a>3.1 修改网卡文件eno16777736</h2><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"> [root<span class="symbol">@kvm</span> ~]<span class="meta"># cd   /etc/sysconfig/network-scripts/</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@kvm</span> network-scripts]<span class="meta"># echo <span class="string">"BRIDGE=br0"</span>   &gt;&gt; ifcfg-eno16777736  </span></span><br><span class="line"><span class="meta"># 在ifcfg-e**原网卡文件中增加<span class="string">"BRIDGE=br0"</span></span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-新建网桥文件ifcfg-br0-网桥名称-增加内容如下"><a href="#3-2-新建网桥文件ifcfg-br0-网桥名称-增加内容如下" class="headerlink" title="3.2 新建网桥文件ifcfg-br0(网桥名称),增加内容如下"></a>3.2 新建网桥文件ifcfg-br0(网桥名称),增加内容如下</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">[root@kvm network-scripts]<span class="comment"># vi ifcfg-br0</span></span><br><span class="line"></span><br><span class="line">*************************************************</span><br><span class="line"></span><br><span class="line">DEVICE=br0                                 </span><br><span class="line"></span><br><span class="line">TYPE=<span class="string">"Bridge"</span>      <span class="comment">#大小写敏感，所以必须是Bridge</span></span><br><span class="line"></span><br><span class="line">BOOTPROTO=<span class="string">"dhcp"</span> </span><br><span class="line"></span><br><span class="line">ONBOOT=<span class="string">"yes"</span></span><br><span class="line"></span><br><span class="line">DELAY=<span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">STP=<span class="string">"yes"</span>         <span class="comment">#这一行是来启动STP,和brctl命令行出来的结果有关</span></span><br><span class="line"></span><br><span class="line">*************************************************</span><br></pre></td></tr></table></figure>
<h2 id="3-3-重启NetworkManager及network服务："><a href="#3-3-重启NetworkManager及network服务：" class="headerlink" title="3.3 重启NetworkManager及network服务："></a>3.3 重启NetworkManager及network服务：</h2><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">[root@kvm network-scripts]<span class="comment"># systemctl restart NetworkManager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当你手动修改了网卡文件后，需要重启NetworkManager服务来重新接管网络配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网卡配置文件和NetworkManager配置冲突时，解决方案:｛1、重启NetworkManager;2、关闭NetworkManager｝</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">[root@kvm network-scripts]<span class="comment"># systemctl restart network</span></span><br><span class="line"></span><br><span class="line">[root@kvm network-scripts]<span class="comment"># ip a                                                   #ip命令用来查看和管理ip信息</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: lo: <span class="variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="number">65536</span> qdisc noqueue <span class="keyword">state</span> UNKNOWN</span><br><span class="line"></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">inet</span> <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line"></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inet6</span> ::<span class="number">1</span>/<span class="number">128</span> scope host</span><br><span class="line"></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>: eno16777736: <span class="variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast master br0 <span class="keyword">state</span> UP qlen <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">61</span>:<span class="number">5</span>c:<span class="number">1</span>d brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>: virbr0: <span class="variable">&lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="number">1500</span> qdisc noqueue <span class="keyword">state</span> DOWN</span><br><span class="line"></span><br><span class="line">    link/ether <span class="number">52</span>:<span class="number">54</span>:<span class="number">00</span>:b6:<span class="number">45</span>:<span class="number">5</span>b brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inet</span> <span class="number">192.168</span>.<span class="number">122.1</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">122.255</span> scope <span class="keyword">global</span> virbr0</span><br><span class="line"></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>: virbr0-nic: <span class="variable">&lt;BROADCAST,MULTICAST&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast master virbr0 <span class="keyword">state</span> DOWN qlen <span class="number">500</span></span><br><span class="line"></span><br><span class="line">    link/ether <span class="number">52</span>:<span class="number">54</span>:<span class="number">00</span>:b6:<span class="number">45</span>:<span class="number">5</span>b brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>: br0: <span class="variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc noqueue <span class="keyword">state</span> UP</span><br><span class="line"></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">61</span>:<span class="number">5</span>c:<span class="number">1</span>d brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inet</span> <span class="number">192.168</span>.<span class="number">0.32</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">0.255</span> scope <span class="keyword">global</span> dynamic br0</span><br><span class="line"></span><br><span class="line">       valid_lft <span class="number">11979</span>sec preferred_lft <span class="number">11979</span>sec</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inet6</span> fe80::<span class="number">20</span>c:<span class="number">29</span>ff:fe61:<span class="number">5</span>c1d/<span class="number">64</span> scope link</span><br><span class="line"></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>: vnet0: <span class="variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast master br0 <span class="keyword">state</span> UNKNOWN qlen <span class="number">500</span></span><br><span class="line"></span><br><span class="line">    link/ether fe:<span class="number">54</span>:<span class="number">00</span>:cb:<span class="number">63</span>:b2 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inet6</span> fe80::fc54:ff:fecb:<span class="number">63</span>b2/<span class="number">64</span> scope link</span><br><span class="line"></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>
<h2 id="3-4-查看网桥连接"><a href="#3-4-查看网桥连接" class="headerlink" title="3.4 查看网桥连接"></a>3.4 查看网桥连接</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">[root@kvm network-<span class="keyword">scripts]# </span><span class="keyword">brctl </span><span class="keyword">show </span>                                              <span class="comment">#brctl是一个网桥连接管理命令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bridge </span>name     <span class="keyword">bridge </span>id               STP enabled     interfaces  <span class="comment">#如果上面不设置STP=yes，这里就会显示no</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">br0 </span>            <span class="number">8000</span>.<span class="number">000</span>c29615c1d       yes             eno16777736</span><br><span class="line"></span><br><span class="line">                                                                                 vnet0</span><br><span class="line"></span><br><span class="line">virbr0          <span class="number">8000</span>.<span class="number">525400</span>b<span class="number">6455b</span>       yes             virbr0-nic</span><br></pre></td></tr></table></figure>
<h1 id="4-selinux防火墙关闭"><a href="#4-selinux防火墙关闭" class="headerlink" title="4 selinux防火墙关闭"></a>4 selinux防火墙关闭</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> setenforce  0</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> sed -i <span class="string">'s/=enforcing/=disabled/g'</span> /etc/selinux/config</span></span><br></pre></td></tr></table></figure>
<p>5 打开图形界面</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@bogon</span> ~]<span class="comment"># virt-manager</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Openkm部署</title>
    <url>/2018/09/10/Openkm%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="1-环境："><a href="#1-环境：" class="headerlink" title="1 环境："></a>1 环境：</h1><a id="more"></a>
<p>系统：Centos7.1</p>
<p>软件：openkm-6.3.1-community-linux-x64-installer.run</p>
<p>辅助插件：Apache_OpenOffice_4.1.2_Linux_x86-64_install-rpm_zh-CN.tar.gz</p>
<p>数据库：mariadb-5.5.47-1.el7_2.x86_64</p>
<h1 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2 安装步骤"></a>2 安装步骤</h1><h2 id="2-1-数据库安装"><a href="#2-1-数据库安装" class="headerlink" title="2.1 数据库安装"></a>2.1 数据库安装</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@bogon</span> openkm]# yum install mysql  -y        <span class="comment">//yum安装数据库</span></span><br></pre></td></tr></table></figure>
<p>//登录数据库<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820498453.png" alt="图1"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820508402.png" alt="图2"></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> okmdb DEFAULT CHARACTER <span class="keyword">SET</span> utf8 DEFAULT <span class="keyword">COLLATE</span> utf8_bin;               //创建okmdb数据库,支持utf8</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820515146.png" alt="图3"></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="literal">none</span>)]&gt; grant all <span class="keyword">on</span> <span class="title">okmdb</span>.* <span class="title">to</span> <span class="title">openkm</span>@<span class="title">localhost</span> <span class="title">identified</span> <span class="title">by</span> <span class="string">'openkm'</span>;</span><br><span class="line">//创建本地用户并赋予数据库okmdb所有权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="literal">none</span>)]&gt; flush privileges;                     <span class="comment"> ///刷新权限</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-openKM安装"><a href="#2-2-openKM安装" class="headerlink" title="2.2 openKM安装"></a>2.2 openKM安装</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@bogon openkm]# chmod <span class="number">755</span> openkm<span class="number">-6.3</span><span class="number">.1</span>-community-linux-x64-installer.run</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋予安装包权限</span></span><br><span class="line"></span><br><span class="line">[root@bogon openkm]# ./openkm<span class="number">-6.3</span><span class="number">.1</span>-community-linux-x64-installer.run   <span class="comment">//安装软件</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-1-配置数据库迁移（数据库由HSQL迁移到mysql）"><a href="#2-2-1-配置数据库迁移（数据库由HSQL迁移到mysql）" class="headerlink" title="2.2.1  配置数据库迁移（数据库由HSQL迁移到mysql）"></a>2.2.1  配置数据库迁移（数据库由HSQL迁移到mysql）</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[root@bogon openkm]# vi /opt/openkm<span class="number">-6.3</span><span class="number">.1</span>-community/tomcat/OpenKM.cfg</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820523032.png" alt="图4"></p>
<p>//修改<code>HSQLDialect</code>（代表HSQL数据库）为<code>MySQL5Dialect</code>（代表mysql数据库）,   <code>none</code>改为<code>create</code>(初始化数据库)。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@bogon openkm]# <span class="keyword">vi</span> /<span class="keyword">opt</span>/openkm-<span class="number">6.3</span>.<span class="number">1</span>-community/tomcat/<span class="keyword">conf</span>/server.xml</span><br></pre></td></tr></table></figure>
<p>//修改配置文件<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820530798.png" alt="图5"></p>
<p>//修改mysql相关</p>
<h3 id="2-2-2-修改web浏览端口号"><a href="#2-2-2-修改web浏览端口号" class="headerlink" title="2.2.2 修改web浏览端口号"></a>2.2.2 修改web浏览端口号</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@bogon openkm]# <span class="keyword">vi</span> /<span class="keyword">opt</span>/openkm-<span class="number">6.3</span>.<span class="number">1</span>-community/tomcat/<span class="keyword">conf</span>/server.xml</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820539044.png" alt="图6"></p>
<h1 id="3-办公插件安装"><a href="#3-办公插件安装" class="headerlink" title="3 办公插件安装"></a>3 办公插件安装</h1><h2 id="3-1-Openoffice安装"><a href="#3-1-Openoffice安装" class="headerlink" title="3.1 Openoffice安装"></a>3.1 Openoffice安装</h2><p>软件下载地址：<a href="http://www.openoffice.org/download/index.html" target="_blank" rel="noopener">http://www.openoffice.org/download/index.html</a></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@bogon</span> openkm]# wget http:<span class="comment">//freefr.dl.sourceforge.net/project/openofficeorg.mirror/4.1.2/binaries/zh-CN/Apache_OpenOffice_4.1.2_Linux_x86-64_install-rpm_zh-CN.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下载安装包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@bogon</span> openkm]# tar -zxvf <span class="type">Apache_OpenOffice_4</span><span class="number">.1</span><span class="number">.2</span>_Linux_x86<span class="number">-64</span>_install-rpm_zh-<span class="type">CN</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">//解压缩安装包</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@bogon</span> openkm]# cd zh-<span class="type">CN</span>/<span class="type">RPMS</span>/            <span class="comment">// 进入解压后的目录</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@bogon</span> <span class="type">RPMS</span>]# rpm -<span class="type">Uvih</span> *rpm              <span class="comment">//安装新版本，默认将会安装/升级Apache OpenOffice到/opt目录</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820549155.png" alt="图7"></p>
<p>修改配置，指向<code>openoffice</code>安装目录，实现office文档预览。</p>
<h2 id="3-2-swftools安装"><a href="#3-2-swftools安装" class="headerlink" title="3.2 swftools安装"></a>3.2 swftools安装</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@bogon</span> openkm]# yum install gcc* automake zlib-devel libjpeg-devel giflib-devel freetype-devel</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装所需的库和组件</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@bogon</span> openkm]# wget http:<span class="comment">//www.swftools.org/swftools-0.9.2.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下载安装包</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@bogon</span> openkm]# tar vxzf swftools<span class="number">-0.9</span><span class="number">.2</span>.tar.gz        <span class="comment">//解压安装包</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@bogon</span> openkm]# cd swftools<span class="number">-0.9</span><span class="number">.2</span>/                      <span class="comment">//进入解压目录</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@bogon</span> swftools<span class="number">-0.9</span><span class="number">.2</span>]# ./configure --prefix=<span class="regexp">/usr/</span>local/swftools</span><br><span class="line"></span><br><span class="line"><span class="comment">//编辑文件，并指定安装位置</span></span><br><span class="line"></span><br><span class="line">[root<span class="meta">@bogon</span> swftools<span class="number">-0.9</span><span class="number">.2</span>]# make install                  <span class="comment">//安装</span></span><br></pre></td></tr></table></figure>
<p><strong>报错：</strong></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820558108.png" alt="图8"></p>
<p><strong>解决办法：</strong></p>
<p>修改<code>swftools-0.9.2/swfs</code>下的</p>
<p><code>Makefile</code>和<code>Makefile.in</code>文件； </p>
<div class="note info no-cion"><p>install:<br>$(mkinstalldirs) $(pkgdatadir)<br>$(mkinstalldirs) $(pkgdatadir)/swfs<br>$(INSTALL_DATA) ./simple_viewer.swf $(pkgdatadir)/swfs/simple_viewer.swf<br>$(INSTALL_DATA) ./keyboard_viewer.swf $(pkgdatadir)/swfs/keyboard_viewer.swf<br>$(INSTALL_DATA) ./PreLoaderTemplate.swf $(pkgdatadir)/swfs/PreLoaderTemplate.swf<br>$(INSTALL_DATA) ./tessel_loader.swf $(pkgdatadir)/swfs/tessel_loader.swf<br>$(INSTALL_DATA) ./swft_loader.swf $(pkgdatadir)/swfs/swft_loader.swf<br><code>rm -f $(pkgdatadir)/swfs/default_viewer.swf -o -L $(pkgdatadir)/swfs/default_viewer.swf</code><br>$(LN_S) $(pkgdatadir)/swfs/simple_viewer.swf $(pkgdatadir)/swfs/default_viewer.swf<br><code>rm -f $(pkgdatadir)/swfs/default_loader.swf -o -L $(pkgdatadir)/swfs/default_loader.swf</code><br>$(LN_S) $(pkgdatadir)/swfs/tessel_loader.swf $(pkgdatadir)/swfs/default_loader.swf</p></div>

<p>将两个文件中的标记红色的<code>-o -L</code> 去掉；</p>
<p>然后删除安装目录<code>/usr/local/swftools</code>,重新编译安装即可；</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@bogon swftools<span class="number">-0.9</span><span class="number">.2</span>]# vi /etc/profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//编辑文件，添加如下内容，设置swftools环境变量，使pdf2swf成为一个可执行命令</span></span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/usr/local/swftools/bin/</span><br></pre></td></tr></table></figure>
<p>安装xpdf语言包。下载<a href="ftp://ftp.foolabs.com/pub/xpdf/xpdf-chinese-simplified.tar.gz" target="_blank" rel="noopener">xpdf-chinese-simplified.tar.gz</a>文件，解压到<code>/usr/local</code>下，编辑<code>add-to-xpdfrc</code>文件，如下：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# <span class="keyword">vi</span> /usr/local/xpdf-chinese-simplified/<span class="built_in">add</span>-<span class="keyword">to</span>-xpdfrc</span><br></pre></td></tr></table></figure>
<p>//编辑文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">fontDir <span class="regexp">/usr/</span>share<span class="regexp">/fonts/</span>win </span><br><span class="line">displayCIDFontTT Adobe-GB1 <span class="regexp">/usr/</span>share<span class="regexp">/fonts/</span>win/simhei.ttf</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820568075.png" alt="图9"><br>//管理-配置-编辑路径</p>
<h2 id="3-3-ImageMagick安装"><a href="#3-3-ImageMagick安装" class="headerlink" title="3.3 ImageMagick安装"></a>3.3 ImageMagick安装</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@bogon</span> ~]# yum install <span class="type">ImageMagick</span> –y                <span class="comment">//yum安装插件</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/Openkm部署/1571820606356.png" alt="图10"></p>
<p>//管理-配置-添加路径</p>
<h1 id="4-资料"><a href="#4-资料" class="headerlink" title="4 资料"></a>4 资料</h1><p>linux-安装openkm6.3.doc</p>
<p>xpdf-chinese-simplified.tar.gz</p>
<p>swftools-0.9.2.tar.gz</p>
<p>OpenKM_6_zh-CN.rar</p>
<p>链接: <a href="http://pan.baidu.com/s/1slFGCOl" target="_blank" rel="noopener">所有相关文件</a> 密码: iryc</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>openkm</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache搭建环境经验与问题-WinX86版</title>
    <url>/2018/09/11/Apache%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%E7%BB%8F%E9%AA%8C%E4%B8%8E%E9%97%AE%E9%A2%98-WinX86%E7%89%88/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-搭建环境："><a href="#1-搭建环境：" class="headerlink" title="1 搭建环境："></a>1 搭建环境：</h1><p>OS: server 2008 Enterprise sp1（X86） ,   VMware-workstation-full-9.0.2-1031769下搭建</p>
<h1 id="2-软件版本-X86-："><a href="#2-软件版本-X86-：" class="headerlink" title="2 软件版本(X86)："></a>2 软件版本(X86)：</h1><p>1)  VC11(VSU_4\vcredist_x86.exe)<br>   <a href="http://www.microsoft.com/en-us/download/details.aspx?id=30679" target="_blank" rel="noopener">http://www.microsoft.com/en-us/download/details.aspx?id=30679</a></p>
<p>2)  apache 2.4.10 (httpd-2.4.10-win32-VC11)<br>   <a href="http://www.apachelounge.com/download/" target="_blank" rel="noopener">http://www.apachelounge.com/download/</a> </p>
<div class="note info"><p>apache版本并不是越新越好，不同版本apache对系统要求不一样(旧版本支持XP 、2003，新版本不支持XP、2003)</p></div>

<p>3)  PHP5.6.12(php-5.6.12-win32-VC11-X86) Thread safe版本<br>   <a href="http://windows.php.net/download/" target="_blank" rel="noopener">http://windows.php.net/download/</a></p>
<div class="note info"><p>搭建PHP与apache使用安全线程（Thread safe）搭建PHP与iis使用非安全线程版（NO Thread safe）</p></div>


<p>4)  mysql5.6.26(mysql-5.6.26-win32.zip”免安装版”)</p>
<p><a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/</a></p>
<h1 id="3-apache安装"><a href="#3-apache安装" class="headerlink" title="3 apache安装"></a>3 apache安装</h1><p>在安装中，apache修改<code>httpd.conf</code>文件正常，未有出错，注意”<code>\</code>”要改成“<code>/</code>”,结尾新增加语句注意有<code>空格</code>，按教程走没有任何错误问题。</p>
<h2 id="3-1-出现问题1："><a href="#3-1-出现问题1：" class="headerlink" title="3.1 出现问题1："></a>3.1 出现问题1：</h2><p>在<code>CMD窗口</code>启动安装<code>apache</code>（如下图启动路径内的安装执行文件），出现</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Installing the Apache2. 2 service</span><br><span class="line"></span><br><span class="line">The Apache2. 2<span class="built_in"> service </span>is successfully installed</span><br><span class="line"></span><br><span class="line"> testing httpd.conf<span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line"> Errors reported here must be corrected before the<span class="built_in"> service </span>can be started.</span><br></pre></td></tr></table></figure>
<div class="note danger"><p>Errors reported here must be corrected before the service can be started结尾，并不是错误，而是提示：如果这行下边出现错误提示则解决错误后再启动！（当时以为是出错了）</p></div>

<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Apache搭建环境经验与问题-WinX86版/1.png" alt="1"></p>
<p>服务安装成功后在系统服务里面会有<code>apache服务</code>，如图<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Apache搭建环境经验与问题-WinX86版/2.png" alt="2"></p>
<p>此时服务是未启动状态，可以右键启动，也可以去目录找到<code>ApacheMonitor.exe</code>打开执行<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Apache搭建环境经验与问题-WinX86版/3.png" alt="3"></p>
<p>双击<code>ApacheMonitor.exe</code><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Apache搭建环境经验与问题-WinX86版/4.png" alt="4"></p>
<div class="note danger"><p>点击start出现弹窗错误，the requested operation has failed</p></div><br>无法启动apache服务，后来是通过在cmd命令窗口执行<code>netsh winsock reset</code>命令重启后恢复正常。方法具体内容见结尾<br><br>重启后打开apache,点击start按钮正常开启，如下图，图标变绿<br><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Apache搭建环境经验与问题-WinX86版/5.png" alt="5"><br><br># 4 问题<br><div class="note info"><p>解决Apache无法启动解决 the requested operation has failed错误，方法页面</p></div>

<p>APACHE启动出现<code>the requested operation has failed</code>，别复制其他地方的答案啊，情况不一样，<code>NETSTAT</code>和<code>httpd.exe -w -n &quot;Apache&quot; -k start</code>都不好使了，<code>80</code>端口好象也没问题，<code>2.2</code>版本选的也是对的，还有其他什么可能么，系统启动起来的时候就提示有一个服务启动错误应该就是APACHE的</p>
<p><strong>补充：</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Apache搭建环境经验与问题-WinX86版/6.png" alt="6"></p>
<p><code>httpd.exe -w -n &quot;Apache&quot; -k start</code>提示的是没有服务，但是服务开不了啊</p>
<h2 id="4-1-解决问题："><a href="#4-1-解决问题：" class="headerlink" title="4.1 解决问题："></a>4.1 解决问题：</h2><p><strong>原因一：80端口占用</strong><br>例如IIS，另外就是迅雷。我的apache服务器就是被迅雷害得无法启用！</p>
<p><strong>原因二：软件冲突</strong><br>装了某些软件会使<code>apache</code>无法启动如<code>Dr.com</code>你打开<code>网络连接-&gt;TcpIp属性-&gt;高级-&gt;WINS标签</code> 把<code>netbios</code>的<code>lmhosts</code>对勾去掉，禁用<code>tcp/ip</code>的<code>netbios</code>. 然后再启动应该就可以了。</p>
<p><strong>原因三：httpd.conf配置错误</strong><br>如果apache的配置文件<code>httpd.conf</code>搞错了，在<code>windows</code>里启动它，会提示<code>the requested operation has failed</code>，这是比较郁闷的事，因为查错要看个半天。<br>其实可以用命令行模式启动<code>apache</code>，并带上参数，<code>apach</code>e会提示你哪句有误，然后就可以针对性的解决，命令如下： <code>httpd.exe -w -n &quot;Apache2&quot; -k start</code></p>
<p><strong>还有一种情况：</strong><br>即使你这次启动了，下次你都有可能启动失败<br>在运行里输入：<code>netsh winsock reset</code> （<strong>本人通过这个命令解决问题</strong>）<br>一会儿cmd会提示你重启，不用理会，现在APACHE已经可以启动了。<br>其实就是一个<code>winsock的修复</code></p>
<h1 id="5-附件"><a href="#5-附件" class="headerlink" title="5 附件"></a>5 附件</h1><p>链接: <a href="http://pan.baidu.com/s/1bo3HYIN" target="_blank" rel="noopener">http://pan.baidu.com/s/1bo3HYIN</a>   密码: 11ky</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>httpd</tag>
      </tags>
  </entry>
  <entry>
    <title>openvpn部署之部署基于AD域认证访问内网</title>
    <url>/2018/09/10/openvpn%E9%83%A8%E7%BD%B2%E4%B9%8B%E9%83%A8%E7%BD%B2%E5%9F%BA%E4%BA%8EAD%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1 安装环境"></a>1 安装环境</h1><p>Centos6.5</p>
<p>openvpn2.3.11</p>
<h1 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2 步骤"></a>2 步骤</h1><h2 id="2-1-添加fedora的yum源"><a href="#2-1-添加fedora的yum源" class="headerlink" title="2.1 添加fedora的yum源"></a>2.1 添加fedora的yum源</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rpm -ivh http:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/fedora/</span>epel<span class="regexp">/6/</span>x86_64<span class="regexp">/epel-release-6-8.noarch.rpm</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-安装openvpn"><a href="#2-2-安装openvpn" class="headerlink" title="2.2 安装openvpn"></a>2.2 安装openvpn</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> openvpn -y</span><br><span class="line"></span><br><span class="line">yum -y <span class="keyword">install</span> openssl openssl-devel -y </span><br><span class="line"></span><br><span class="line">yum -y <span class="keyword">install</span> lzo lzo-devel  -y </span><br><span class="line"></span><br><span class="line">yum <span class="keyword">install</span> -y libgcrypt libgpg-<span class="keyword">error</span> libgcrypt-devel</span><br></pre></td></tr></table></figure>
<h2 id="2-3-安装openvpn认证插件（LDAP认证使用）"><a href="#2-3-安装openvpn认证插件（LDAP认证使用）" class="headerlink" title="2.3 安装openvpn认证插件（LDAP认证使用）"></a>2.3 安装openvpn认证插件（LDAP认证使用）</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">yum install openvpn-auth-ldap -<span class="built_in">y</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-安装easy-rsa"><a href="#2-4-安装easy-rsa" class="headerlink" title="2.4 安装easy-rsa"></a>2.4 安装easy-rsa</h2><p>由于openvpn2.3之后，在openvpn里面剔除了easy-rsa文件，所以需要单独安装</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">yum install easy-rsa</span><br><span class="line"> </span><br><span class="line">cp -rf <span class="regexp">/usr/</span>share<span class="regexp">/easy-rsa/</span><span class="number">3.0</span><span class="number">.6</span> <span class="regexp">/etc/</span>opevpn/easy-rsa</span><br></pre></td></tr></table></figure>
<h2 id="2-5-生成openvpn的key及证书"><a href="#2-5-生成openvpn的key及证书" class="headerlink" title="2.5 生成openvpn的key及证书"></a>2.5 生成openvpn的key及证书</h2><p>修改<code>/opt/openvpn/etc/easy-rsa/2.0/vars</code>参数</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">$ vi vars</span><br><span class="line"><span class="keyword">export</span> KEY_COUNTRY=<span class="string">"CN"</span>                 国家</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> KEY_PROVINCE=<span class="string">"ZJ"</span>                省份</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> KEY_CITY=<span class="string">"NingBo"</span>                城市</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> KEY_ORG=<span class="string">"TEST-VPN"</span>               组织</span><br><span class="line"></span><br><span class="line">exportKEY_EMAIL=<span class="string">"81367070@qq.com"</span>             邮件</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> KEY_OU=<span class="string">"baidu"</span>                   单位</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<h3 id="2-5-1-创建服务器证书"><a href="#2-5-1-创建服务器证书" class="headerlink" title="2.5.1 创建服务器证书"></a>2.5.1 创建服务器证书</h3><p><code>./easyrsa clean-all</code>  初始化目录，清理历史证书</p>
<p><code>./easyrsa build-ca</code>  创建ca证书,设置ca证书密码，必须记着密码，为服务起名<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583810965577.png" alt="1"><br><code>./easyrsa gen-req server nopass</code> 创建服务端证书，为server起名<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583811000201.png" alt="2"><br><code>./easyrsa sign server server</code>  签约服务端证书，输入上面ca证书的密码<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583811014010.png" alt="3"><br><code>./easyrsa gen-dh</code>  创建数据穿越密钥<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583811028939.png" alt="4"></p>
<h3 id="2-5-2-创建客户端证书（使用客户端证书认证使用）"><a href="#2-5-2-创建客户端证书（使用客户端证书认证使用）" class="headerlink" title="2.5.2 创建客户端证书（使用客户端证书认证使用）"></a>2.5.2 创建客户端证书（使用客户端证书认证使用）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/openvpn/client/</span><br><span class="line">cp -rf /usr/share/easy-rsa/3.06 /etc/opevpn/client/</span><br><span class="line">cd client/3.0.6</span><br></pre></td></tr></table></figure>
<p><code>./easyrsa init-pki</code>  初始化目录<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583811422788.png" alt="5"><br><code>./easyrsa build-ca</code> 创建ca证书,记住密码，客户端登录要用<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583811498005.png" alt="6"><br><code>./easyrsa gen-req client1</code>    创建客户端证书，输入客户端ca证书密码，也是客户端登陆密码<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583811543097.png" alt="7"><br> <code>cd /etc/openvpn/easy-rsa/3.0.6</code><br><code>./easyrsa import-req   /etc/openvpn/client/ 3.0.6/pki/reqs/client1.req client1</code>  导入客户端证书<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583811615404.png" alt="8"></p>
<h2 id="2-6-编辑openvpn服务端配置"><a href="#2-6-编辑openvpn服务端配置" class="headerlink" title="2.6 编辑openvpn服务端配置"></a>2.6 编辑openvpn服务端配置</h2><h3 id="2-6-1-拷贝配置文件"><a href="#2-6-1-拷贝配置文件" class="headerlink" title="2.6.1 拷贝配置文件"></a>2.6.1 拷贝配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/openpvn/easy-rsa/3.0.6/pki/</span><br><span class="line">cp ca.crt /etc/openvpn/server/</span><br><span class="line">cp private/server.key /etc/openvpn/server/</span><br><span class="line">cp issued/server.crt /etc/openvpn/server/</span><br><span class="line">cp dh.pem /etc/openvpn/server/</span><br><span class="line">cp ca.crt /etc/openvpn/client/</span><br><span class="line">cp issued/client1.crt /etc/openvpn/client/</span><br><span class="line">cp /etc/openvpn/client/client/easyrsa3/pki/private/client1.key /etc/openvpn/client/</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> cd /etc/openvpn/server</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583811834098.png" alt="9"><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/openvpn/client</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/3/10/openvpn部署之部署基于AD域认证访问内网/1583811881190.png" alt="10"></p>
<h3 id="2-6-2-配置服务端配置文件"><a href="#2-6-2-配置服务端配置文件" class="headerlink" title="2.6.2 配置服务端配置文件"></a>2.6.2 配置服务端配置文件</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> /etc/openvpn/server.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">port <span class="number">1194</span></span><br><span class="line">proto tcp</span><br><span class="line">dev tun</span><br><span class="line"><span class="meta"># 证书路径</span></span><br><span class="line">ca keys/ca.crt</span><br><span class="line">cert keys/server.crt</span><br><span class="line"><span class="built_in">key</span> keys/server.<span class="built_in">key</span>  <span class="meta"># This file should be kept secret</span></span><br><span class="line"><span class="meta"># 密钥路径</span></span><br><span class="line">dh keys/dh.pem</span><br><span class="line">server <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>    <span class="comment">//客户端分配的ip地址</span></span><br><span class="line"><span class="keyword">push</span> <span class="string">"route 172.20.17.0 255.255.255.0"</span>  <span class="comment">//推送客户端的路由</span></span><br><span class="line"><span class="keyword">push</span> <span class="string">"route 172.20.18.0 255.255.255.0"</span></span><br><span class="line"><span class="keyword">push</span> <span class="string">"route 172.20.19.0 255.255.255.0"</span></span><br><span class="line"><span class="keyword">push</span> <span class="string">"route 172.20.20.0 255.255.255.0"</span></span><br><span class="line"><span class="keyword">push</span> <span class="string">"route 172.20.22.0 255.255.255.0"</span></span><br><span class="line"><span class="keyword">push</span> <span class="string">"redirect-gateway"</span>   <span class="comment">//修改客户端的网关，使其直接走vpn流量，不配置走客户端流量</span></span><br><span class="line">ifconfig-pool-persist ipp.txt    </span><br><span class="line">keepalive <span class="number">10</span> <span class="number">120</span></span><br><span class="line">comp-lzo                <span class="comment">//客户端和服务端保持一致</span></span><br><span class="line">persist-<span class="built_in">key</span></span><br><span class="line">persist-tun</span><br><span class="line">status openvpn-status.<span class="built_in">log</span>      <span class="comment">//登录日志</span></span><br><span class="line">verb <span class="number">3</span></span><br><span class="line"><span class="meta"># LDAP认证插件，使用时配置</span></span><br><span class="line">plugin /usr/lib64/openvpn/plugin/<span class="keyword">lib</span>/openvpn-auth-ldap.so <span class="string">"/etc/openvpn/auth/ldap.conf"</span> </span><br><span class="line"><span class="meta"># 禁用客户端证书认证</span></span><br><span class="line">client-cert-<span class="keyword">not</span>-required</span><br><span class="line">username-as-common-name </span><br><span class="line"><span class="built_in">log</span> /var/<span class="built_in">log</span>/openvpn.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p><strong>举例<code>server.conf</code>LDAP方式配置文件</strong></p></div>
<figure class="highlight pf.conf"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="comment"># Sample OpenVPN 2.0 config file for            #</span></span><br><span class="line"><span class="comment"># multi-client server.                          #</span></span><br><span class="line"><span class="comment">#                                               #</span></span><br><span class="line"><span class="comment"># This file is for the server side              #</span></span><br><span class="line"><span class="comment"># of a many-clients &lt;-&gt; one-server              #</span></span><br><span class="line"><span class="comment"># OpenVPN configuration.                        #</span></span><br><span class="line"><span class="comment">#                                               #</span></span><br><span class="line"><span class="comment"># OpenVPN also supports                         #</span></span><br><span class="line"><span class="comment"># single-machine &lt;-&gt; single-machine             #</span></span><br><span class="line"><span class="comment"># configurations (See the Examples page         #</span></span><br><span class="line"><span class="comment"># on the web site for more info).               #</span></span><br><span class="line"><span class="comment">#                                               #</span></span><br><span class="line"><span class="comment"># This config should work on Windows            #</span></span><br><span class="line"><span class="comment"># or Linux/BSD systems.  Remember on            #</span></span><br><span class="line"><span class="comment"># Windows to quote pathnames and use            #</span></span><br><span class="line"><span class="comment"># double backslashes, e.g.:                     #</span></span><br><span class="line"><span class="comment"># "C:\\Program Files\\OpenVPN\\config\\foo.key" #</span></span><br><span class="line"><span class="comment">#                                               #</span></span><br><span class="line"><span class="comment"># Comments are preceded with '#' or ';'         #</span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Which local IP address should OpenVPN</span></span><br><span class="line"><span class="comment"># listen on? (optional)</span></span><br><span class="line">;local a.b.c.d</span><br><span class="line"><span class="comment"># Which TCP/UDP port should OpenVPN listen on?</span></span><br><span class="line"><span class="comment"># If you want to run multiple OpenVPN instances</span></span><br><span class="line"><span class="comment"># on the same machine, use a different port</span></span><br><span class="line"><span class="comment"># number for each one.  You will need to</span></span><br><span class="line"><span class="comment"># open up this port on your firewall.</span></span><br><span class="line"><span class="keyword">port</span> <span class="number">1194</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP or UDP server?</span></span><br><span class="line"><span class="comment"># ;proto tcp</span></span><br><span class="line"><span class="comment"># proto udp</span></span><br><span class="line"><span class="keyword">proto</span> tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># "dev tun" will create a routed IP tunnel,</span></span><br><span class="line"><span class="comment"># "dev tap" will create an ethernet tunnel.</span></span><br><span class="line"><span class="comment"># Use "dev tap0" if you are ethernet bridging</span></span><br><span class="line"><span class="comment"># and have precreated a tap0 virtual interface</span></span><br><span class="line"><span class="comment"># and bridged it with your ethernet interface.</span></span><br><span class="line"><span class="comment"># If you want to control access policies</span></span><br><span class="line"><span class="comment"># over the VPN, you must create firewall</span></span><br><span class="line"><span class="comment"># rules for the the TUN/TAP interface.</span></span><br><span class="line"><span class="comment"># On non-Windows systems, you can give</span></span><br><span class="line"><span class="comment"># an explicit unit number, such as tun0.</span></span><br><span class="line"><span class="comment"># On Windows, use "dev-node" for this.</span></span><br><span class="line"><span class="comment"># On most systems, the VPN will not function</span></span><br><span class="line"><span class="comment"># unless you partially or fully disable</span></span><br><span class="line"><span class="comment"># the firewall for the TUN/TAP interface.</span></span><br><span class="line"><span class="comment"># ;dev tap</span></span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows needs the TAP-Win32 adapter name</span></span><br><span class="line"><span class="comment"># from the Network Connections panel if you</span></span><br><span class="line"><span class="comment"># have more than one.  On XP SP2 or higher,</span></span><br><span class="line"><span class="comment"># you may need to selectively disable the</span></span><br><span class="line"><span class="comment"># Windows firewall for the TAP adapter.</span></span><br><span class="line"><span class="comment"># Non-Windows systems usually don't need this.</span></span><br><span class="line">;dev-node MyTap</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSL/TLS root certificate (ca), certificate</span></span><br><span class="line"><span class="comment"># (cert), and private key (key).  Each client</span></span><br><span class="line"><span class="comment"># and the server must have their own cert and</span></span><br><span class="line"><span class="comment"># key file.  The server and all clients will</span></span><br><span class="line"><span class="comment"># use the same ca file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See the "easy-rsa" directory for a series</span></span><br><span class="line"><span class="comment"># of scripts for generating RSA certificates</span></span><br><span class="line"><span class="comment"># and private keys.  Remember to use</span></span><br><span class="line"><span class="comment"># a unique Common Name for the server</span></span><br><span class="line"><span class="comment"># and each of the client certificates.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Any X509 key management system can be used.</span></span><br><span class="line"><span class="comment"># OpenVPN can also use a PKCS #12 formatted key file</span></span><br><span class="line"><span class="comment"># (see "pkcs12" directive in man page).</span></span><br><span class="line"><span class="comment"># 证书路径</span></span><br><span class="line">ca /etc/openvpn/ca.crt </span><br><span class="line">cert /etc/openvpn/server.crt</span><br><span class="line">key /etc/openvpn/server.key  <span class="comment"># This file should be kept secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Diffie hellman parameters.</span></span><br><span class="line"><span class="comment"># Generate your own with:</span></span><br><span class="line"><span class="comment">#   openssl dhparam -out dh2048.pem 2048</span></span><br><span class="line"><span class="comment"># dh dh2048.pem</span></span><br><span class="line"><span class="comment"># 密钥路径</span></span><br><span class="line">dh /etc/openvpn/dh.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># Network topology</span></span><br><span class="line"><span class="comment"># Should be subnet (addressing via IP)</span></span><br><span class="line"><span class="comment"># unless Windows clients v2.0.9 and lower have to</span></span><br><span class="line"><span class="comment"># be supported (then net30, i.e. a /30 per client)</span></span><br><span class="line"><span class="comment"># Defaults to net30 (not recommended)</span></span><br><span class="line">;topology subnet</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure server mode and supply a VPN subnet</span></span><br><span class="line"><span class="comment"># for OpenVPN to draw client addresses from.</span></span><br><span class="line"><span class="comment"># The server will take 10.8.0.1 for itself,</span></span><br><span class="line"><span class="comment"># the rest will be made available to clients.</span></span><br><span class="line"><span class="comment"># Each client will be able to reach the server</span></span><br><span class="line"><span class="comment"># on 10.8.0.1. Comment this line out if you are</span></span><br><span class="line"><span class="comment"># ethernet bridging. See the man page for more info.</span></span><br><span class="line">server <span class="number">10.8</span>.<span class="number">0.0</span> <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maintain a record of client &lt;-&gt; virtual IP address</span></span><br><span class="line"><span class="comment"># associations in this file.  If OpenVPN goes down or</span></span><br><span class="line"><span class="comment"># is restarted, reconnecting clients can be assigned</span></span><br><span class="line"><span class="comment"># the same virtual IP address from the pool that was</span></span><br><span class="line"><span class="comment"># previously assigned.</span></span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure server mode for ethernet bridging.</span></span><br><span class="line"><span class="comment"># You must first use your OS's bridging capability</span></span><br><span class="line"><span class="comment"># to bridge the TAP interface with the ethernet</span></span><br><span class="line"><span class="comment"># NIC interface.  Then you must manually set the</span></span><br><span class="line"><span class="comment"># IP/netmask on the bridge interface, here we</span></span><br><span class="line"><span class="comment"># assume 10.8.0.4/255.255.255.0.  Finally we</span></span><br><span class="line"><span class="comment"># must set aside an IP range in this subnet</span></span><br><span class="line"><span class="comment"># (start=10.8.0.50 end=10.8.0.100) to allocate</span></span><br><span class="line"><span class="comment"># to connecting clients.  Leave this line commented</span></span><br><span class="line"><span class="comment"># out unless you are ethernet bridging.</span></span><br><span class="line">;server-bridge <span class="number">10.8</span>.<span class="number">0.4</span> <span class="number">255.255</span>.<span class="number">255.0</span> <span class="number">10.8</span>.<span class="number">0.50</span> <span class="number">10.8</span>.<span class="number">0.100</span></span><br><span class="line"><span class="comment"># Configure server mode for ethernet bridging</span></span><br><span class="line"><span class="comment"># using a DHCP-proxy, where clients talk</span></span><br><span class="line"><span class="comment"># to the OpenVPN server-side DHCP server</span></span><br><span class="line"><span class="comment"># to receive their IP address allocation</span></span><br><span class="line"><span class="comment"># and DNS server addresses.  You must first use</span></span><br><span class="line"><span class="comment"># your OS's bridging capability to bridge the TAP</span></span><br><span class="line"><span class="comment"># interface with the ethernet NIC interface.</span></span><br><span class="line"><span class="comment"># Note: this mode only works on clients (such as</span></span><br><span class="line"><span class="comment"># Windows), where the client-side TAP adapter is</span></span><br><span class="line"><span class="comment"># bound to a DHCP client.</span></span><br><span class="line">;server-bridge</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push routes to the client to allow it</span></span><br><span class="line"><span class="comment"># to reach other private subnets behind</span></span><br><span class="line"><span class="comment"># the server.  Remember that these</span></span><br><span class="line"><span class="comment"># private subnets will also need</span></span><br><span class="line"><span class="comment"># to know to route the OpenVPN client</span></span><br><span class="line"><span class="comment"># address pool (10.8.0.0/255.255.255.0)</span></span><br><span class="line"><span class="comment"># back to the OpenVPN server.</span></span><br><span class="line">;push <span class="string">"route 192.168.10.0 255.255.255.0"</span></span><br><span class="line">;push <span class="string">"route 192.168.20.0 255.255.255.0"</span></span><br><span class="line"><span class="comment"># 发送路由</span></span><br><span class="line">push <span class="string">"route 192.168.0.0 255.255.0.0"</span></span><br><span class="line"><span class="comment"># To assign specific IP addresses to specific</span></span><br><span class="line"><span class="comment"># clients or if a connecting client has a private</span></span><br><span class="line"><span class="comment"># subnet behind it that should also have VPN access,</span></span><br><span class="line"><span class="comment"># use the subdirectory "ccd" for client-specific</span></span><br><span class="line"><span class="comment"># configuration files (see man page for more info).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EXAMPLE: Suppose the client</span></span><br><span class="line"><span class="comment"># having the certificate common name "Thelonious"</span></span><br><span class="line"><span class="comment"># also has a small subnet behind his connecting</span></span><br><span class="line"><span class="comment"># machine, such as 192.168.40.128/255.255.255.248.</span></span><br><span class="line"><span class="comment"># First, uncomment out these lines:</span></span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route <span class="number">192.168</span>.<span class="number">40.128</span> <span class="number">255.255</span>.<span class="number">255.248</span></span><br><span class="line"><span class="comment"># Then create a file ccd/Thelonious with this line:</span></span><br><span class="line"><span class="comment">#   iroute 192.168.40.128 255.255.255.248</span></span><br><span class="line"><span class="comment"># This will allow Thelonious' private subnet to</span></span><br><span class="line"><span class="comment"># access the VPN.  This example will only work</span></span><br><span class="line"><span class="comment"># if you are routing, not bridging, i.e. you are</span></span><br><span class="line"><span class="comment"># using "dev tun" and "server" directives.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EXAMPLE: Suppose you want to give</span></span><br><span class="line"><span class="comment"># Thelonious a fixed VPN IP address of 10.9.0.1.</span></span><br><span class="line"><span class="comment"># First uncomment out these lines:</span></span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route <span class="number">10.9</span>.<span class="number">0.0</span> <span class="number">255.255</span>.<span class="number">255.252</span></span><br><span class="line"><span class="comment"># Then add this line to ccd/Thelonious:</span></span><br><span class="line"><span class="comment">#   ifconfig-push 10.9.0.1 10.9.0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Suppose that you want to enable different</span></span><br><span class="line"><span class="comment"># firewall access policies for different groups</span></span><br><span class="line"><span class="comment"># of clients.  There are two methods:</span></span><br><span class="line"><span class="comment"># (1) Run multiple OpenVPN daemons, one for each</span></span><br><span class="line"><span class="comment">#     group, and firewall the TUN/TAP interface</span></span><br><span class="line"><span class="comment">#     for each group/daemon appropriately.</span></span><br><span class="line"><span class="comment"># (2) (Advanced) Create a script to dynamically</span></span><br><span class="line"><span class="comment">#     modify the firewall in response to access</span></span><br><span class="line"><span class="comment">#     from different clients.  See man</span></span><br><span class="line"><span class="comment">#     page for more info on learn-address script.</span></span><br><span class="line">;learn-address ./script</span><br><span class="line"></span><br><span class="line"><span class="comment"># If enabled, this directive will configure</span></span><br><span class="line"><span class="comment"># all clients to redirect their default</span></span><br><span class="line"><span class="comment"># network gateway through the VPN, causing</span></span><br><span class="line"><span class="comment"># all IP traffic such as web browsing and</span></span><br><span class="line"><span class="comment"># and DNS lookups to go through the VPN</span></span><br><span class="line"><span class="comment"># (The OpenVPN server machine may need to NAT</span></span><br><span class="line"><span class="comment"># or bridge the TUN/TAP interface to the internet</span></span><br><span class="line"><span class="comment"># in order for this to work properly).</span></span><br><span class="line">;push <span class="string">"redirect-gateway def1 bypass-dhcp"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Certain Windows-specific network settings</span></span><br><span class="line"><span class="comment"># can be pushed to clients, such as DNS</span></span><br><span class="line"><span class="comment"># or WINS server addresses.  CAVEAT:</span></span><br><span class="line"><span class="comment"># http://openvpn.net/faq.html#dhcpcaveats</span></span><br><span class="line"><span class="comment"># The addresses below refer to the public</span></span><br><span class="line"><span class="comment"># DNS servers provided by opendns.com.</span></span><br><span class="line">;push <span class="string">"dhcp-option DNS 208.67.222.222"</span></span><br><span class="line">;push <span class="string">"dhcp-option DNS 208.67.220.220"</span></span><br><span class="line"><span class="comment"># 设置发送的DNS</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 114.114.114.114"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment this directive to allow different</span></span><br><span class="line"><span class="comment"># clients to be able to "see" each other.</span></span><br><span class="line"><span class="comment"># By default, clients will only see the server.</span></span><br><span class="line"><span class="comment"># To force clients to only see the server, you</span></span><br><span class="line"><span class="comment"># will also need to appropriately firewall the</span></span><br><span class="line"><span class="comment"># server's TUN/TAP interface.</span></span><br><span class="line"><span class="comment"># 开启客户端互相访问</span></span><br><span class="line">client-to-client</span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment this directive if multiple clients</span></span><br><span class="line"><span class="comment"># might connect with the same certificate/key</span></span><br><span class="line"><span class="comment"># files or common names.  This is recommended</span></span><br><span class="line"><span class="comment"># only for testing purposes.  For production use,</span></span><br><span class="line"><span class="comment"># each client should have its own certificate/key</span></span><br><span class="line"><span class="comment"># pair.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IF YOU HAVE NOT GENERATED INDIVIDUAL</span></span><br><span class="line"><span class="comment"># CERTIFICATE/KEY PAIRS FOR EACH CLIENT,</span></span><br><span class="line"><span class="comment"># EACH HAVING ITS OWN UNIQUE "COMMON NAME",</span></span><br><span class="line"><span class="comment"># UNCOMMENT THIS LINE OUT.</span></span><br><span class="line">;duplicate-cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># The keepalive directive causes ping-like</span></span><br><span class="line"><span class="comment"># messages to be sent back and forth over</span></span><br><span class="line"><span class="comment"># the link so that each side knows when</span></span><br><span class="line"><span class="comment"># the other side has gone down.</span></span><br><span class="line"><span class="comment"># Ping every 10 seconds, assume that remote</span></span><br><span class="line"><span class="comment"># peer is down if no ping received during</span></span><br><span class="line"><span class="comment"># a 120 second time period.</span></span><br><span class="line"><span class="comment"># 心跳侦测</span></span><br><span class="line">keepalive <span class="number">10</span> <span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For extra security beyond that provided</span></span><br><span class="line"><span class="comment"># by SSL/TLS, create an "HMAC firewall"</span></span><br><span class="line"><span class="comment"># to help block DoS attacks and UDP port flooding.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Generate with:</span></span><br><span class="line"><span class="comment">#   openvpn --genkey --secret ta.key</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The server and each client must have</span></span><br><span class="line"><span class="comment"># a copy of this key.</span></span><br><span class="line"><span class="comment"># The second parameter should be '0'</span></span><br><span class="line"><span class="comment"># on the server and '1' on the clients.</span></span><br><span class="line"><span class="comment"># tls-auth ta.key 0 # This file is secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Select a cryptographic cipher.</span></span><br><span class="line"><span class="comment"># This config item must be copied to</span></span><br><span class="line"><span class="comment"># the client config file as well.</span></span><br><span class="line"><span class="comment"># Note that v2.4 client/server will automatically</span></span><br><span class="line"><span class="comment"># negotiate AES-256-GCM in TLS mode.</span></span><br><span class="line"><span class="comment"># See also the ncp-cipher option in the manpage</span></span><br><span class="line"><span class="comment"># 加密方式</span></span><br><span class="line">cipher AES-<span class="number">256</span>-CBC</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable compression on the VPN link and push the</span></span><br><span class="line"><span class="comment"># option to the client (v2.4+ only, for earlier</span></span><br><span class="line"><span class="comment"># versions see below)</span></span><br><span class="line">;compress lz4-v2</span><br><span class="line">;push <span class="string">"compress lz4-v2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For compression compatible with older clients use comp-lzo</span></span><br><span class="line"><span class="comment"># If you enable it here, you must also</span></span><br><span class="line"><span class="comment"># enable it in the client config file.</span></span><br><span class="line"><span class="comment"># 和客户端保持一致</span></span><br><span class="line">comp-lzo</span><br><span class="line"></span><br><span class="line"><span class="comment"># The maximum number of concurrently connected</span></span><br><span class="line"><span class="comment"># clients we want to allow.</span></span><br><span class="line">;max-clients <span class="number">100</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line">max-clients <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It's a good idea to reduce the OpenVPN</span></span><br><span class="line"><span class="comment"># daemon's privileges after initialization.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can uncomment this out on</span></span><br><span class="line"><span class="comment"># non-Windows systems.</span></span><br><span class="line">;<span class="keyword">user</span> nobody</span><br><span class="line">;<span class="keyword">group</span> nobody</span><br><span class="line"></span><br><span class="line"><span class="comment"># The persist options will try to avoid</span></span><br><span class="line"><span class="comment"># accessing certain resources on restart</span></span><br><span class="line"><span class="comment"># that may no longer be accessible because</span></span><br><span class="line"><span class="comment"># of the privilege downgrade.</span></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output a short status file showing</span></span><br><span class="line"><span class="comment"># current connections, truncated</span></span><br><span class="line"><span class="comment"># and rewritten every minute.</span></span><br><span class="line"><span class="comment"># 开启状态日志</span></span><br><span class="line">status openvpn-status.<span class="keyword">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, log messages will go to the syslog (or</span></span><br><span class="line"><span class="comment"># on Windows, if running as a service, they will go to</span></span><br><span class="line"><span class="comment"># the "\Program Files\OpenVPN\log" directory).</span></span><br><span class="line"><span class="comment"># Use log or log-append to override this default.</span></span><br><span class="line"><span class="comment"># "log" will truncate the log file on OpenVPN startup,</span></span><br><span class="line"><span class="comment"># while "log-append" will append to it.  Use one</span></span><br><span class="line"><span class="comment"># or the other (but not both).</span></span><br><span class="line">;<span class="keyword">log</span>         openvpn.<span class="keyword">log</span></span><br><span class="line">;log-append  openvpn.<span class="keyword">log</span></span><br><span class="line"><span class="comment"># 日志路径</span></span><br><span class="line"><span class="keyword">log</span> /var/<span class="keyword">log</span>/openvpn.<span class="keyword">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the appropriate level of log</span></span><br><span class="line"><span class="comment"># file verbosity.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 0 is silent, except for fatal errors</span></span><br><span class="line"><span class="comment"># 4 is reasonable for general usage</span></span><br><span class="line"><span class="comment"># 5 and 6 can help to debug connection problems</span></span><br><span class="line"><span class="comment"># 9 is extremely verbose</span></span><br><span class="line">verb <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Silence repeating messages.  At most 20</span></span><br><span class="line"><span class="comment"># sequential messages of the same message</span></span><br><span class="line"><span class="comment"># category will be output to the log.</span></span><br><span class="line">;mute <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Notify the client that when the server restarts so it</span></span><br><span class="line"><span class="comment"># can automatically reconnect.</span></span><br><span class="line"><span class="comment"># explicit-exit-notify 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP认证</span></span><br><span class="line">plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so <span class="string">"/etc/openvpn/auth/ldap.conf"</span></span><br><span class="line"><span class="comment"># 关闭证书认证</span></span><br><span class="line">client-cert-not-required</span><br></pre></td></tr></table></figure>
<h2 id="2-7-修改openvpn-ldap-auth的配置文件："><a href="#2-7-修改openvpn-ldap-auth的配置文件：" class="headerlink" title="2.7 修改openvpn-ldap-auth的配置文件："></a>2.7 修改openvpn-ldap-auth的配置文件：</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>openvpn<span class="regexp">/auth/</span>ldap.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="variable">&lt;LDAP&gt;</span></span><br><span class="line">    <span class="comment"># LDAP server URL</span></span><br><span class="line">    <span class="comment">#更改为AD服务器的ip</span></span><br><span class="line">    URL     ldap://172.20.20.10:389               </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Bind DN (If your LDAP server doesn't support anonymous binds)</span></span><br><span class="line">    <span class="comment"># BindDN        uid=Manager,ou=People,dc=example,dc=com</span></span><br><span class="line">    <span class="comment">#更改为域管理的dn,可以通过ldapsearch进行查询,-h的ip替换为服务器ip，-d换为管理员的dn，-b为基础的查询dn，*为所有</span></span><br><span class="line">    <span class="comment">#ldapsearch -LLL -x -h 172.16.76.238 -D "administrator@xx.com" -W -b "dc=xx,dc=com" "*"</span></span><br><span class="line">    BindDN      <span class="string">" cn=administrator,cn=users,dc=dealeasy,dc=local"</span> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Bind Password</span></span><br><span class="line">    <span class="comment"># Password  SecretPassword</span></span><br><span class="line">    <span class="comment">#域管理员的密码</span></span><br><span class="line">    Password    passwd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Network timeout (in seconds)</span></span><br><span class="line">    Timeout     15</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Enable Start TLS</span></span><br><span class="line">    TLSEnable   no</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Follow LDAP Referrals (anonymously)</span></span><br><span class="line">    FollowReferrals no</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># TLS CA Certificate File</span></span><br><span class="line">    <span class="comment">#TLSCACertFile  /usr/local/etc/ssl/ca.pem</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># TLS CA Certificate Directory</span></span><br><span class="line">    <span class="comment">#TLSCACertDir   /etc/ssl/certs</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Client Certificate and key</span></span><br><span class="line">    <span class="comment"># If TLS client authentication is required</span></span><br><span class="line">    <span class="comment">#TLSCertFile    /usr/local/etc/ssl/client-cert.pem</span></span><br><span class="line">    <span class="comment">#TLSKeyFile /usr/local/etc/ssl/client-key.pem</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Cipher Suite</span></span><br><span class="line">    <span class="comment"># The defaults are usually fine here</span></span><br><span class="line">    <span class="comment"># TLSCipherSuite    ALL:!ADH:@STRENGTH</span></span><br><span class="line"><span class="variable">&lt;/LDAP&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">&lt;Authorization&gt;</span></span><br><span class="line">    <span class="comment"># Base DN</span></span><br><span class="line">    <span class="comment">#查询认证的基础dn</span></span><br><span class="line">    BaseDN      <span class="string">" ou=de,dc=dealeasy,dc=local"</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># User Search Filter</span></span><br><span class="line">    <span class="comment">#SearchFilter   "(&amp;(uid=%u)(accountStatus=active))"</span></span><br><span class="line">    <span class="comment">#其中sAMAccountName=%u的意思是把sAMAccountName的字段取值为用户名，后面“memberof=CN=myvpn,DC=xx,DC=com”指向要认证的vpn用户组，这样任何用户使用vpn，只要加入这个组就好了</span></span><br><span class="line">    SearchFilter    <span class="string">"( (&amp;(sAMAccountName=%u)(memberof=cn=myvpn,ou=vpn,ou=de,DC=dealeasy,DC=local"</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Require Group Membership</span></span><br><span class="line">    RequireGroup    false</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Add non-group members to a PF table (disabled)</span></span><br><span class="line">    <span class="comment">#PFTable    ips_vpn_users</span></span><br><span class="line"> </span><br><span class="line">    <span class="variable">&lt;Group&gt;</span></span><br><span class="line">        <span class="comment">#BaseDN     "ou=Groups,dc=example,dc=com"</span></span><br><span class="line">        <span class="comment">#SearchFilter   "(|(cn=developers)(cn=artists))"</span></span><br><span class="line">        <span class="comment">#MemberAttribute    uniqueMember</span></span><br><span class="line">        <span class="comment"># Add group members to a PF table (disabled)</span></span><br><span class="line">        <span class="comment">#PFTable    ips_vpn_eng</span></span><br><span class="line">        BaseDN      <span class="string">" ou=vpn,ou=de,dc=dealeasy,dc=local"</span></span><br><span class="line">        SearchFilter    <span class="string">" (cn=myvpn)"</span></span><br><span class="line">        MemberAttribute     <span class="string">"member"</span></span><br><span class="line">    <span class="variable">&lt;/Group&gt;</span></span><br><span class="line"><span class="variable">&lt;/Authorization&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note success"><p><strong>例子：openldap配置示例</strong><br>使用了上面安装的openvpn-auth-ldap认证插件<br>client-cert-not-required不再需要客户端证书，将改为使用OpenLDAP中的用户认证<br><strong>注意:上面的<code>ldap.conf</code>中<code>RequireGroup true</code>以及Group的配置实际我们期望是必须是LDAP中的名称为vpn的组下的用户才可以登录VPN。但根据这个ISSUE <a href="https://github.com/threerings/openvpn-auth-ldap/issues/7，当前2.0.3的openvpn-auth-ldap不支持。因此如果只想限制LDAP中某些用户可以使用VPN的话，只能设置`RequireGroup" target="_blank" rel="noopener">https://github.com/threerings/openvpn-auth-ldap/issues/7，当前2.0.3的openvpn-auth-ldap不支持。因此如果只想限制LDAP中某些用户可以使用VPN的话，只能设置`RequireGroup</a> false<code>，然后可以在</code>SearchFilter<code>中做一些文章，比如</code>(&amp;(uid=%u)(ou=vpn))`即只有用户的ou字段为vpn的才可以。</strong></p></div>
<figure class="highlight pf.conf"><table><tr><td class="code"><pre><span class="line"><span class="variable">&lt;LDAP&gt;</span></span><br><span class="line">	<span class="comment"># LDAP server URL</span></span><br><span class="line">	URL		ldap://<span class="number">192.168</span>.<span class="number">0.129</span>:<span class="number">389</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Bind DN (If your LDAP server doesn't support anonymous binds)</span></span><br><span class="line">	<span class="comment"># BindDN		uid=Manager,ou=People,dc=example,dc=com</span></span><br><span class="line">        BindDN      cn=admin,dc=zhjx,dc=com </span><br><span class="line">        Password *******</span><br><span class="line">	<span class="comment"># Bind Password</span></span><br><span class="line">	<span class="comment"># Password	SecretPassword</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Network timeout (in seconds)</span></span><br><span class="line">	Timeout		<span class="number">15</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Enable Start TLS</span></span><br><span class="line">	<span class="comment"># TLSEnable	yes</span></span><br><span class="line">        TLSEnable       no</span><br><span class="line"></span><br><span class="line">	<span class="comment"># Follow LDAP Referrals (anonymously)</span></span><br><span class="line">	<span class="comment"># FollowReferrals yes</span></span><br><span class="line">        FollowReferrals   no</span><br><span class="line"></span><br><span class="line">	<span class="comment"># TLS CA Certificate File</span></span><br><span class="line">	<span class="comment"># TLSCACertFile	/usr/local/etc/ssl/ca.pem</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># TLS CA Certificate Directory</span></span><br><span class="line">	<span class="comment"># TLSCACertDir	/etc/ssl/certs</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Client Certificate and key</span></span><br><span class="line">	<span class="comment"># If TLS client authentication is required</span></span><br><span class="line">	<span class="comment">#TLSCertFile	/usr/local/etc/ssl/client-cert.pem</span></span><br><span class="line">	<span class="comment">#TLSKeyFile	/usr/local/etc/ssl/client-key.pem</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Cipher Suite</span></span><br><span class="line">	<span class="comment"># The defaults are usually fine here</span></span><br><span class="line">	<span class="comment"># TLSCipherSuite	ALL:!ADH:@STRENGTH</span></span><br><span class="line">&lt;/LDAP&gt;</span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;Authorization&gt;</span></span><br><span class="line">	<span class="comment"># Base DN</span></span><br><span class="line">	BaseDN		<span class="string">"ou=People,dc=zhjx,dc=com"</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># User Search Filter</span></span><br><span class="line">	<span class="comment"># SearchFilter	"(&amp;(uid=%u)(accountStatus=active))"</span></span><br><span class="line">        SearchFilter  <span class="string">"(uid=%u)"</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Require Group Membership</span></span><br><span class="line">	 RequireGroup	false</span><br><span class="line">        <span class="comment">#RequireGroup    true</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Add non-group members to a PF table (disabled)</span></span><br><span class="line">	<span class="comment">#PFTable	ips_vpn_users</span></span><br><span class="line"></span><br><span class="line">	<span class="variable">&lt;Group&gt;</span></span><br><span class="line">		BaseDN		<span class="string">"ou=Group,dc=zhjx,dc=com"</span></span><br><span class="line">		SearchFilter	<span class="string">"cn=openvpn"</span></span><br><span class="line">		MemberAttribute	memberUid</span><br><span class="line">		<span class="comment"># Add group members to a PF table (disabled)</span></span><br><span class="line">		<span class="comment">#PFTable	ips_vpn_eng</span></span><br><span class="line">	&lt;/Group&gt;</span><br><span class="line">&lt;/Authorization&gt;</span><br></pre></td></tr></table></figure>
<h2 id="2-8-拷贝-etc-openvpn-key目录下的ca-crt证书，以备客户端使用。"><a href="#2-8-拷贝-etc-openvpn-key目录下的ca-crt证书，以备客户端使用。" class="headerlink" title="2.8 拷贝/etc/openvpn/key目录下的ca.crt证书，以备客户端使用。"></a>2.8 拷贝/etc/openvpn/key目录下的ca.crt证书，以备客户端使用。</h2><div class="note info"><p>注：客户端使用ca.crt和客户端配置文件即可正常使用openvpn了</p></div>

<h3 id="2-8-1-配置客户端配置文件"><a href="#2-8-1-配置客户端配置文件" class="headerlink" title="2.8.1 配置客户端配置文件"></a>2.8.1 配置客户端配置文件</h3><div class="note success"><p><strong>注意:</strong><br>客户端ca证书使用的是和服务端一样的ca证书，都是创建服务端证书用到的ca文件</p></div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi client.ovpn</span></span><br></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto tcp                  <span class="comment">//注意协议，跟服务器保持一致</span></span><br><span class="line">remote <span class="number">172.20</span><span class="number">.20</span><span class="number">.25</span> <span class="number">1194</span>     <span class="comment">//xx.xx.com替换为你的服务器ip</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-<span class="type">key</span></span><br><span class="line">persist-tun</span><br><span class="line">ca ca.crt</span><br><span class="line">auth-user-pass            <span class="comment">//客户端使用账户密码登陆的选项，用于客户端弹出认证用户的窗口</span></span><br><span class="line">comp-lzo</span><br><span class="line">verb <span class="number">3</span></span><br></pre></td></tr></table></figure>
<div class="note success"><p><strong>例子：openldap方式客户端配置示例，与上方server版示例对照</strong></p></div>
<figure class="highlight pf.conf"><table><tr><td class="code"><pre><span class="line"><span class="comment">##############################################</span></span><br><span class="line"><span class="comment"># Sample client-side OpenVPN 2.0 config file #</span></span><br><span class="line"><span class="comment"># for connecting to multi-client server.     #</span></span><br><span class="line"><span class="comment">#                                            #</span></span><br><span class="line"><span class="comment"># This configuration can be used by multiple #</span></span><br><span class="line"><span class="comment"># clients, however each client should have   #</span></span><br><span class="line"><span class="comment"># its own cert and key files.                #</span></span><br><span class="line"><span class="comment">#                                            #</span></span><br><span class="line"><span class="comment"># On Windows, you might want to rename this  #</span></span><br><span class="line"><span class="comment"># file so it has a .ovpn extension           #</span></span><br><span class="line"><span class="comment">##############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify that we are a client and that we</span></span><br><span class="line"><span class="comment"># will be pulling certain config file directives</span></span><br><span class="line"><span class="comment"># from the server.</span></span><br><span class="line"><span class="comment"># 服务端类型</span></span><br><span class="line">client</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the same setting as you are using on</span></span><br><span class="line"><span class="comment"># the server.</span></span><br><span class="line"><span class="comment"># On most systems, the VPN will not function</span></span><br><span class="line"><span class="comment"># unless you partially or fully disable</span></span><br><span class="line"><span class="comment"># the firewall for the TUN/TAP interface.</span></span><br><span class="line"><span class="comment"># dev tap</span></span><br><span class="line"><span class="comment"># 与服务端一致</span></span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows needs the TAP-Win32 adapter name</span></span><br><span class="line"><span class="comment"># from the Network Connections panel</span></span><br><span class="line"><span class="comment"># if you have more than one.  On XP SP2,</span></span><br><span class="line"><span class="comment"># you may need to disable the firewall</span></span><br><span class="line"><span class="comment"># for the TAP adapter.</span></span><br><span class="line"><span class="comment">#dev-node MyTap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Are we connecting to a TCP or</span></span><br><span class="line"><span class="comment"># UDP server?  Use the same setting as</span></span><br><span class="line"><span class="comment"># on the server.</span></span><br><span class="line"><span class="comment"># 与服务端一致</span></span><br><span class="line"><span class="keyword">proto</span> tcp</span><br><span class="line"><span class="comment">#proto udp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The hostname/IP and port of the server.</span></span><br><span class="line"><span class="comment"># You can have multiple remote entries</span></span><br><span class="line"><span class="comment"># to load balance between the servers.</span></span><br><span class="line"><span class="comment"># 连接地址与端口</span></span><br><span class="line">remote XXX.imwork.net <span class="number">1194</span></span><br><span class="line"><span class="comment">#remote my-server-2 1194</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose a random host from the remote</span></span><br><span class="line"><span class="comment"># list for load-balancing.  Otherwise</span></span><br><span class="line"><span class="comment"># try hosts in the order specified.</span></span><br><span class="line">;remote-random</span><br><span class="line"></span><br><span class="line"><span class="comment"># Keep trying indefinitely to resolve the</span></span><br><span class="line"><span class="comment"># host name of the OpenVPN server.  Very useful</span></span><br><span class="line"><span class="comment"># on machines which are not permanently connected</span></span><br><span class="line"><span class="comment"># to the internet such as laptops.</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line"></span><br><span class="line"><span class="comment"># Most clients don't need to bind to</span></span><br><span class="line"><span class="comment"># a specific local port number.</span></span><br><span class="line">nobind</span><br><span class="line"></span><br><span class="line"><span class="comment"># Downgrade privileges after initialization (non-Windows only)</span></span><br><span class="line">;<span class="keyword">user</span> nobody</span><br><span class="line">;<span class="keyword">group</span> nobody</span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to preserve some state across restarts.</span></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you are connecting through an</span></span><br><span class="line"><span class="comment"># HTTP proxy to reach the actual OpenVPN</span></span><br><span class="line"><span class="comment"># server, put the proxy server/IP and</span></span><br><span class="line"><span class="comment"># port number here.  See the man page</span></span><br><span class="line"><span class="comment"># if your proxy server requires</span></span><br><span class="line"><span class="comment"># authentication.</span></span><br><span class="line">;http-proxy-retry <span class="comment"># retry on connection failures</span></span><br><span class="line">;http-proxy [proxy server] [proxy <span class="keyword">port</span> <span class="comment">#]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Wireless networks often produce a lot</span></span><br><span class="line"><span class="comment"># of duplicate packets.  Set this flag</span></span><br><span class="line"><span class="comment"># to silence duplicate packet warnings.</span></span><br><span class="line">;mute-replay-warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSL/TLS parms.</span></span><br><span class="line"><span class="comment"># See the server config file for more</span></span><br><span class="line"><span class="comment"># description.  It's best to use</span></span><br><span class="line"><span class="comment"># a separate .crt/.key file pair</span></span><br><span class="line"><span class="comment"># for each client.  A single ca</span></span><br><span class="line"><span class="comment"># file can be used for all clients.</span></span><br><span class="line"><span class="comment"># ldap方式只使用ca证书</span></span><br><span class="line">ca ca.crt</span><br><span class="line"><span class="comment"># cert client.crt</span></span><br><span class="line"><span class="comment"># key client.key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify server certificate by checking that the</span></span><br><span class="line"><span class="comment"># certicate has the correct key usage set.</span></span><br><span class="line"><span class="comment"># This is an important precaution to protect against</span></span><br><span class="line"><span class="comment"># a potential attack discussed here:</span></span><br><span class="line"><span class="comment">#  http://openvpn.net/howto.html#mitm</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To use this feature, you will need to generate</span></span><br><span class="line"><span class="comment"># your server certificates with the keyUsage set to</span></span><br><span class="line"><span class="comment">#   digitalSignature, keyEncipherment</span></span><br><span class="line"><span class="comment"># and the extendedKeyUsage to</span></span><br><span class="line"><span class="comment">#   serverAuth</span></span><br><span class="line"><span class="comment"># EasyRSA can do this for you.</span></span><br><span class="line"><span class="comment"># remote-cert-tls server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If a tls-auth key is used on the server</span></span><br><span class="line"><span class="comment"># then every client must also have the key.</span></span><br><span class="line"><span class="comment">#tls-auth ta.key 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Select a cryptographic cipher.</span></span><br><span class="line"><span class="comment"># If the cipher option is used on the server</span></span><br><span class="line"><span class="comment"># then you must also specify it here.</span></span><br><span class="line"><span class="comment"># Note that v2.4 client/server will automatically</span></span><br><span class="line"><span class="comment"># negotiate AES-256-GCM in TLS mode.</span></span><br><span class="line"><span class="comment"># See also the ncp-cipher option in the manpage</span></span><br><span class="line"><span class="comment"># 与服务的保持一致</span></span><br><span class="line">cipher AES-<span class="number">256</span>-CBC</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable compression on the VPN link.</span></span><br><span class="line"><span class="comment"># Don't enable this unless it is also</span></span><br><span class="line"><span class="comment"># enabled in the server config file.</span></span><br><span class="line"><span class="comment"># 与服务的保持一致</span></span><br><span class="line">comp-lzo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set log file verbosity.</span></span><br><span class="line">verb <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Silence repeating messages</span></span><br><span class="line">;mute <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># auth-user-pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启账户密码认证</span></span><br><span class="line">ns-cert-type server</span><br><span class="line">auth-user-pass</span><br></pre></td></tr></table></figure>
<h2 id="2-9-开启路由转发"><a href="#2-9-开启路由转发" class="headerlink" title="2.9 开启路由转发"></a>2.9 开启路由转发</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> /etc/sysctl.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>修改参数</p>
</li>
<li><p><code>net.ipv4.ip_forward = 1</code>（默认为<code>0</code>，修改成<code>1</code> 表示开启路由转发，如果默认是空内容，请自行加上-腾讯云貌似就是空的）</p>
</li>
</ol>
<p>重启sysctl生效路由转发：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sysctl -p</span></span><br></pre></td></tr></table></figure>
<h3 id="2-9-1-配置防火墙及路由转发策略："><a href="#2-9-1-配置防火墙及路由转发策略：" class="headerlink" title="2.9.1 配置防火墙及路由转发策略："></a>2.9.1 配置防火墙及路由转发策略：</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> -o eth0 -j MASQUERADE        #做NAT转换</span><br><span class="line"></span><br><span class="line">iptables -A INPUT -p TCP --dport <span class="number">1194</span> -j ACCEPT                                         #OpenVPN服务端口，可自定义，不可冲突</span><br><span class="line"></span><br><span class="line">service iptables save</span><br><span class="line"></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>
<h2 id="2-10-开启-HTTP代理连接openvpn服务器"><a href="#2-10-开启-HTTP代理连接openvpn服务器" class="headerlink" title="2.10 开启 HTTP代理连接openvpn服务器"></a>2.10 开启 HTTP代理连接openvpn服务器</h2><p>通过此方法可以解决跨运营商连接中断及缓慢的问题，首先需要有一台三网HTTP代理服务器。公司使用的是景安的云服务器做HTTP代理。</p>
<p>参考资料：<a href="http://www.365mini.com/page/18.htm" target="_blank" rel="noopener">http://www.365mini.com/page/18.htm</a></p>
<p>1、 在景安云服务器部署代理软件<code>CCProxy</code>,并开启HTTP代理，端口<code>443</code>（可自定义）。</p>
<p>2、 在客户端配置文件添加如下语句。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">http-proxy <span class="number">122.114</span><span class="number">.100</span><span class="number">.229</span> <span class="number">443</span></span><br></pre></td></tr></table></figure>
<p>配置完成。可以正常连接使用。</p>
<h1 id="3-用到的文件下载："><a href="#3-用到的文件下载：" class="headerlink" title="3 用到的文件下载："></a>3 用到的文件下载：</h1><p>=<a href="./attachments/easy-rsa-master.zip">easy-rsa-master.zip</a><br>=<a href="./attachments/lzo-2.09.tar.gz">lzo-2.09.tar.gz</a><br>=<a href="./attachments/openvpn-2.3.11.tar.gz">openvpn-2.3.11.tar.gz</a><br>=<a href="./attachments/openvpn2.3.exe">openvpn2.3.exe</a><br>=<a href="./attachments/openvpn-auth-ldap-2.0.3-1.1.x86_64.rpm">openvpn-auth-ldap-2.0.3-1.1.x86_64.rpm</a><br>=<a href="./attachments/openvpn-auth-ldap-2.0.3-9.fc17.i686.rpm">openvpn-auth-ldap-2.0.3-9.fc17.i686.rpm</a><br>=<a href="./attachments/openvpn安装说明.docx">openvpn安装说明.docx</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>openvpn</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix在php7下安装always-populate-raw-post-data=-1问题</title>
    <url>/2018/09/10/zabbix%E5%9C%A8php7%E4%B8%8B%E5%AE%89%E8%A3%85always-populate-raw-post-data-1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix在php7下安装always-populate-raw-post-data=-1问题/1571822024467.png" alt="图1"><br><a id="more"></a><br>LNMP 平台 php7 ，<code>zabbix 安装</code>可能会出现的问题<code>always-populate-raw-post-data = -1</code>，解决方案：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/目录/</span>zabbix<span class="regexp">/include/</span>classes<span class="regexp">/setup/</span>CFrontendSetup.php</span><br></pre></td></tr></table></figure>
<p>找到下面代码、关于<code>always-populate-raw-post-data</code>;<br>添加 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$current = <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPhpAlwaysPopulateRawPostData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                $current = ini_get(<span class="string">'always_populate_raw_post_data'</span>);</span><br><span class="line">                $current = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">                        <span class="string">'name'</span> =&gt; _(<span class="string">'PHP always_populate_raw_post_data'</span>),</span><br><span class="line">                        <span class="string">'current'</span> =&gt; ($current != <span class="number">-1</span>) ? _(<span class="string">'on'</span>) : _(<span class="string">'off'</span>),</span><br><span class="line">                        <span class="string">'required'</span> =&gt; _(<span class="string">'off'</span>),</span><br><span class="line">                        <span class="string">'result'</span> =&gt; ($current != <span class="number">-1</span>) ? <span class="keyword">self</span>::CHECK_FATAL : <span class="keyword">self</span>::CHECK_OK,</span><br><span class="line">                        <span class="string">'error'</span> =&gt; _(<span class="string">'PHP always_populate_raw_post_data must be set to -1.'</span>)</span><br><span class="line">                );</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>重新刷新 zabbix 安装页面即可；</p>
]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用系统性能诊断工具</title>
    <url>/2018/09/14/Linux%E5%B8%B8%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p><img src="https://www.github.com/kxinter/images/raw/master/2019/10/23/Linux常用系统性能诊断工具/1571821958134.png" alt="图1"><br><div class="note info no-cion"><p><strong>简介</strong>：<br>Linux下的系统性能诊断工具特别的多，例如：top、iotop、tiptop、slabtop、iostat、mpstat、vmstat、dstat、pidstat、netstat、iptraf、nicstat、ss、sar、free、strace、ltrace、ftrace、dtrace、blktrace、perf、stap、ktap、ebpf、lttng等等，下面一张图宏观的标注出来，更加的方便记忆！</p></div><br><img src="https://www.github.com/kxinter/images/raw/master/2019/10/23/Linux常用系统性能诊断工具/1571821964128.png" alt="图2"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>运维工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay+keepalive+sersync+rsync主从同步</title>
    <url>/2018/09/11/Liferay-keepalive-sersync-rsync%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><table>
<thead>
<tr>
<th>服务器</th>
<th>系统</th>
<th>软件</th>
<th>JAVA</th>
<th>MYSQL</th>
<th>IP</th>
</tr>
</thead>
<tbody>
<tr>
<td>Liferay-a</td>
<td>Centos7</td>
<td>Liferay+keepalive+sersync</td>
<td>1.7.0_80</td>
<td>5.5.42</td>
<td>172.20.20.59</td>
</tr>
<tr>
<td>Liferay-b</td>
<td>Centos7</td>
<td>Liferay+keepalive+rsync</td>
<td>1.7.0_80</td>
<td>5.5.42</td>
<td>172.20.20.60</td>
</tr>
<tr>
<td>虚拟IP:    172.20.20.58</td>
</tr>
</tbody>
</table>
<h1 id="2-安装liferay"><a href="#2-安装liferay" class="headerlink" title="2 安装liferay"></a>2 安装liferay</h1><p>安装liferay官方版本<code>6.2-ce4</code>,方法自行度娘。恢复数据参考《liferay备份还原文档》</p>
<h1 id="3-安装keepalive"><a href="#3-安装keepalive" class="headerlink" title="3 安装keepalive"></a>3 安装keepalive</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Yum install keepalive</span></span><br></pre></td></tr></table></figure>
<h2 id="3-1-编辑配置文件"><a href="#3-1-编辑配置文件" class="headerlink" title="3.1 编辑配置文件"></a>3.1 编辑配置文件</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Yum install keepalive</span></span><br></pre></td></tr></table></figure>
<p><strong>Liferay-a:</strong></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/1.png" alt="1"></p>
<p><strong>Liferay-b:</strong></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/2.png" alt="2"></p>
<p>启动keepalive，建立虚拟IP，主服务器当机，从服务器获得Ip.</p>
<h1 id="4-mysql主从同步"><a href="#4-mysql主从同步" class="headerlink" title="4 mysql主从同步"></a>4 mysql主从同步</h1><p>下载<code>mysql-5.5.42-linux2.6-x86_64.tar.gz</code></p>
<p>解压到<code>/usr/local</code>,重命名为<code>mysql</code></p>
<h2 id="4-1-编辑配置文件"><a href="#4-1-编辑配置文件" class="headerlink" title="4.1 编辑配置文件"></a>4.1 编辑配置文件</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Vi</span> /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p><strong>Liferay-a:</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/3.png" alt="3"></p>
<p><strong>Liferay-b</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/4.png" alt="4"></p>
<h2 id="4-2-建立mysql主从同步"><a href="#4-2-建立mysql主从同步" class="headerlink" title="4.2 建立mysql主从同步"></a>4.2 建立mysql主从同步</h2><ol>
<li>查看<code>liferay-a</code>(主服务器)，查看<code>mysql</code>（主）信息，并建立同步帐号：</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON bitnami_liferay.* TO 'tongbu'@'%' IDENTIFIED BY 'De123456' WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/5.png" alt="5"></p>
<ol start="2">
<li>进入<code>liferay-b</code>（从服务器），在<code>mysql</code>中输入命令，建立连接</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST='172.20.20.59',  MASTER_USER='tongbu', MASTER_PASSWORD='De123456', MASTER_LOG_FILE='mysql-bin.000022',MASTER_LOG_POS=151424110;</span><br></pre></td></tr></table></figure>
<p>输入命令，查看备服务器信息</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW SLAVE STATUS\G</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/6.png" alt="6"></p>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><p>通过<code>mysql</code>命令恢复<code>bitnami_liferay</code>数据库备份到<code>lifreay-a</code>(主服务器)，自动实时同步数据到从服务器。</p>
<h1 id="5-目录同步"><a href="#5-目录同步" class="headerlink" title="5 目录同步"></a>5 目录同步</h1><h2 id="5-1-安装rsync-liferay-b"><a href="#5-1-安装rsync-liferay-b" class="headerlink" title="5.1 安装rsync(liferay-b)"></a>5.1 安装rsync(liferay-b)</h2><p>只需在<code>liferay-b</code>服务器上安装<code>rsync</code>。</p>
<p><code>Liferay-b</code>作为<code>rsync</code>服务器，<code>lifray-a</code>作为客户端，实时同步目录数据到<code>liferay-b</code></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Yum install rsync</span></span><br></pre></td></tr></table></figure>
<h3 id="5-1-1-编辑配置文件"><a href="#5-1-1-编辑配置文件" class="headerlink" title="5.1.1 编辑配置文件"></a>5.1.1 编辑配置文件</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> /etc/rsyncd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p><strong>liferay-b:</strong></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/7.png" alt="7"></p>
<h3 id="5-1-2-新建rsyncd-pass1密码文件在-etc-目录"><a href="#5-1-2-新建rsyncd-pass1密码文件在-etc-目录" class="headerlink" title="5.1.2 新建rsyncd.pass1密码文件在/etc/目录"></a>5.1.2 新建rsyncd.pass1密码文件在/etc/目录</h3><p><strong>文件格式</strong>  <code>帐号:密码</code></p>
<p><strong>设置文件权限为600（必须）</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/8.png" alt="8"></p>
<h2 id="5-2-安装sersync（liferay-a）"><a href="#5-2-安装sersync（liferay-a）" class="headerlink" title="5.2 安装sersync（liferay-a）"></a>5.2 安装sersync（liferay-a）</h2><p><code>Liferay-a</code>安装实时同步工具<code>sersync2.5.4_64bit_binary_stable_final.tar.gz</code></p>
<p>下载<code>sersync2.5.4_64bit_binary_stable_final.tar.gz</code></p>
<p>解压到<code>/usr/local</code></p>
<h3 id="5-2-1-编辑confxml-xml"><a href="#5-2-1-编辑confxml-xml" class="headerlink" title="5.2.1 编辑confxml.xml"></a>5.2.1 编辑confxml.xml</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">confxml</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/9.png" alt="9"></p>
<h3 id="5-2-2-在-etc-目录创建密码文件rsyncd-pass1"><a href="#5-2-2-在-etc-目录创建密码文件rsyncd-pass1" class="headerlink" title="5.2.2 在/etc/目录创建密码文件rsyncd.pass1"></a>5.2.2 在/etc/目录创建密码文件rsyncd.pass1</h3><p>文件格式只填写密码（注意和同步服务器的密码文件内的密码一样）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Liferay+keepalive+sersync+rsync主从同步/10.png" alt="10"></p>
<h3 id="5-2-3-启动sersync，开启实时同步"><a href="#5-2-3-启动sersync，开启实时同步" class="headerlink" title="5.2.3 启动sersync，开启实时同步"></a>5.2.3 启动sersync，开启实时同步</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/sersync/</span>sersync2 -d -r -o <span class="regexp">/usr/</span>local<span class="regexp">/sersync/</span>confxml.xml</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>keepalived</tag>
        <tag>rsync</tag>
        <tag>liferay</tag>
        <tag>同步</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker自动登陆脚本</title>
    <url>/2018/09/13/Docker%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="安装expect命令"><a href="#安装expect命令" class="headerlink" title="安装expect命令"></a>安装expect命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install expect -y</span><br></pre></td></tr></table></figure>
<p><strong>示例脚本</strong></p>
<figure class="highlight vim"><figcaption><span>docker自动登陆脚本</span></figcaption><table><tr><td class="code"><pre><span class="line">#！/usr/bin/expect</span><br><span class="line"><span class="keyword">set</span> timeout <span class="number">2</span>                   # 超时时间<span class="number">2</span>s</span><br><span class="line">spawn docker login <span class="number">192.168</span>.<span class="number">0.200</span>:<span class="number">5000</span>   # 要执行的命令</span><br><span class="line">expect <span class="string">"Username"</span>                # 匹配字符Username</span><br><span class="line">send <span class="string">"user\r"</span>                  # 键入用户user \r 回车</span><br><span class="line">expect <span class="string">"password"</span>               # 匹配password</span><br><span class="line">send <span class="string">"pass\r"</span>                 # 键入密码pass \r 回车</span><br><span class="line">interact</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins报错</title>
    <url>/2018/09/13/jenkins%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-ERROR-Exception-when-publishing-exception-message-Exec-timed-out-or-was-interrupted-after-XXX-ms"><a href="#1-ERROR-Exception-when-publishing-exception-message-Exec-timed-out-or-was-interrupted-after-XXX-ms" class="headerlink" title="1 ERROR: Exception when publishing, exception message [Exec timed out or was interrupted after XXX ms]"></a>1 ERROR: Exception when publishing, exception message [Exec timed out or was interrupted after XXX ms]</h1><div class="note danger no-icon"><p>我在使用Jenkins进行远程部署时,执行的命令突然中断，包如下错误：<br><code>ERROR: Exception when publishing, exception message [Exec timed out or was interrupted after 12,001 ms]</code></p></div>
<p><img src="https://www.github.com/kxinter/images/raw/master/2019/10/23/jenkins报错/1571821987065.png" alt="图1"></p>
<p><strong>解决办法：</strong><br><img src="https://www.github.com/kxinter/images/raw/master/2019/10/23/jenkins报错/1571821993766.png" alt="图2"></p>
<div class="note success"><p><strong>参考资料：</strong><br><a href="https://blog.csdn.net/u013066244/article/details/52788407" target="_blank" rel="noopener">https://blog.csdn.net/u013066244/article/details/52788407</a> </p></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker清除日志脚本</title>
    <url>/2018/09/11/Docker%E6%B8%85%E9%99%A4%E6%97%A5%E5%BF%97%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<figure class="highlight bash"><figcaption><span>清除日志脚本Docker</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"==================== start clean docker containers logs =========================="</span></span><br><span class="line"> </span><br><span class="line">logs=$(find /var/lib/docker/containers/ -name *-json.log)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">log</span> <span class="keyword">in</span> <span class="variable">$logs</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"clean logs : <span class="variable">$log</span>"</span></span><br><span class="line">                cat /dev/null &gt; <span class="variable">$log</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"==================== end clean docker containers logs   =========================="</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux输出记录到文件</title>
    <url>/2018/09/18/Linux%E8%BE%93%E5%87%BA%E8%AE%B0%E5%BD%95%E5%88%B0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-如何把命令运行的结果保存到文件当中"><a href="#1-如何把命令运行的结果保存到文件当中" class="headerlink" title="1 如何把命令运行的结果保存到文件当中"></a>1 如何把命令运行的结果保存到文件当中</h1><p>这个问题太简单了，大家都知道，用<code>&gt;</code> 把输出转向就可以了<br>　　<strong>例子:</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">　　[lhd@hongdi ~]$ ls &gt; ls.txt</span><br><span class="line">　　[lhd@hongdi ~]$ cat ls.txt</span><br><span class="line">　　<span class="number">1</span><span class="selector-class">.gtkrc-2</span>.<span class="number">0</span></span><br><span class="line">　　<span class="number">2009</span></span><br><span class="line">　　a</span><br><span class="line">　　amsn_received</span><br><span class="line">　　<span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p>说明:<br> <code>&gt;</code> 是把输出转向到指定的文件，如文件已存在的话也会重新写入，文件原内容不会保留<br> <code>&gt;&gt;</code>是把输出附向到文件的后面，文件原内容会保留下来</p></div>
<h1 id="2-如何能在输出信息的同时把信息记录到文件中"><a href="#2-如何能在输出信息的同时把信息记录到文件中" class="headerlink" title="2 如何能在输出信息的同时把信息记录到文件中"></a>2 如何能在输出信息的同时把信息记录到文件中</h1><p>　　我们在上面的例子中可以看到，我们使用输出转向，命令在终端上的输出转向到了文件中，但如果我希望能同时在终端上看到输出信息怎么办？<br>　　我们可以使用这个命令: <code>tee</code><br><div class="note info no-cion"><p>解释一下<code>tee</code>的作用:<br>read from standard input and write to standard output and files<br>它从标准输入读取内容并将其写到标准输出和文件中</p></div><br>　　<strong>看例子:</strong></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">　　[lhd@hongdi ~]$ ls | tee ls_tee.txt</span><br><span class="line">　　<span class="number">1.</span>gtkrc<span class="number">-2.0</span></span><br><span class="line">　　<span class="number">2009</span></span><br><span class="line">　　a</span><br><span class="line">　　amsn_received</span><br><span class="line">　　a.tar.gz</span><br><span class="line">　　[lhd@hongdi ~]$ cat ls_tee.txt</span><br><span class="line">　　<span class="number">1.</span>gtkrc<span class="number">-2.0</span></span><br><span class="line">　　<span class="number">2009</span></span><br><span class="line">　　a</span><br><span class="line">　　amsn_received</span><br><span class="line">　　a.tar.gz</span><br></pre></td></tr></table></figure>
<p>备注：使用<code>tee</code>时,如果想保留目标文件原有的内容怎么办？<br>　　可以使用<code>-a</code>参数<br><div class="note info no-cion"><p><code>-a, --append</code><br>append to the given FILEs, do not overwrite<br>附加至给出的文件，而不是覆盖它</p></div></p>
<h1 id="3-多个命令的输出都需要记录，可以用script"><a href="#3-多个命令的输出都需要记录，可以用script" class="headerlink" title="3 多个命令的输出都需要记录，可以用script"></a>3 多个命令的输出都需要记录，可以用script</h1><p>　　<code>script</code>这个命令很强大，可以记录终端的所有输出到相应的文件中<br>　　<strong>看例子:</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">　　[lhd@hongdi ~]$ script</span><br><span class="line">　　Script. started, file is typescript</span><br><span class="line">　　[lhd@hongdi ~]$ ls</span><br><span class="line">　　<span class="number">1</span>.gtkrc-<span class="number">2.0</span> c.tar kmess-<span class="number">2.0</span>alpha2.tar.gz secpanel-<span class="number">0.5</span>.<span class="number">3</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line">　　<span class="number">2009</span> DownZipAction.php kmesslog secpanel-<span class="number">0.5</span>.<span class="number">4</span>-<span class="number">2</span>.noarch.rpm</span><br><span class="line">　　[lhd@hongdi ~]$ <span class="keyword">exit</span></span><br><span class="line">　　<span class="keyword">exit</span></span><br><span class="line">　　Script. done, file is typescript</span><br><span class="line">　　[lhd@hongdi ~]$ cat typescript</span><br><span class="line">　　Script. started on <span class="number">2009</span>年<span class="number">02</span>月<span class="number">08</span>日 星期日 <span class="number">18</span>时<span class="number">56</span>分<span class="number">52</span>秒</span><br><span class="line">　　[lhd@hongdi ~]$ ls</span><br><span class="line">　　<span class="number">1</span>.gtkrc-<span class="number">2.0</span> c.tar kmess-<span class="number">2.0</span>alpha2.tar.gz secpanel-<span class="number">0.5</span>.<span class="number">3</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line">　　<span class="number">2009</span> DownZipAction.php kmesslog secpanel-<span class="number">0.5</span>.<span class="number">4</span>-<span class="number">2</span>.noarch.rpm</span><br><span class="line">　　[lhd@hongdi ~]$ <span class="keyword">exit</span></span><br><span class="line">　　<span class="keyword">exit</span></span><br><span class="line">　　Script. done on <span class="number">2009</span>年<span class="number">02</span>月<span class="number">08</span>日 星期日 <span class="number">18</span>时<span class="number">57</span>分<span class="number">00</span>秒</span><br></pre></td></tr></table></figure>
<p>　　说明:<br>　　1. 我们在启动<code>script</code>时没有指定文件名，它会自动记录到当前目录下一个名为 <code>typescript</code>的文件中。也可以用<code>-a</code>参数 指定文件名<br>　　<strong>例子:</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">　　[lhd@hongdi ~]$ script. -<span class="selector-tag">a</span> example.txt</span><br><span class="line">　　Script. started, file is example.txt</span><br></pre></td></tr></table></figure>
<p>　　此时终端的输出内容被记录到 <code>example.txt</code>这个文件中<br>　　2. 退出<code>script</code>时，用<code>exit</code><br>　　感到奇怪吗？事实上script就是启动了一个shell<br>　　　　看一下<code>ps auxfww</code>的信息就知道了</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">　　lhd 17738 0.1 3.2 152028 33328 ? Sl 18:30 0:03 /usr/bin/konsole</span><br><span class="line">　　lhd 17740 0.0 0.1 6372 1720 pts/1 Ss 18:30 0:00 \_ /bin/bash</span><br><span class="line">　　lhd 17900 0.0 0.0 5344 628 pts/1 S 19:01 0:00 | \_ script</span><br><span class="line">　　lhd 17901 0.0 0.0 5348 464 pts/1 S 19:01 0:00 | \_ script</span><br><span class="line">　　lhd 17902 0.5 0.1 6372 1688 pts/2 Ss 19:01 0:00 | \_ bash -i</span><br></pre></td></tr></table></figure>
<p>　　3. 查看<code>typescript</code>的内容，可以看到它同时记录下了<code>script</code>的启动和结束时间</p>
<h1 id="4-用script录制并播放session的内容"><a href="#4-用script录制并播放session的内容" class="headerlink" title="4 用script录制并播放session的内容"></a>4 用script录制并播放session的内容</h1><p>　　我们可以用 <code>script</code>把整个终端会话的所有操作和输出录制下来，然后再用<code>scriptreplay</code>进行播放。<br>  <div class="note info"><p>如果录制时记录下来了操作时的时间数据，那么播放时和操作时的使用时间完全相同。</p></div>
**这个很有用吧，比如：我们可以把安装软件时编译的过程记录下来，然后给别人进行演示**
**看例子:**

undefined

<div class="note info"><p>说明: <code>-t 2&gt;example.time</code> <code>-t</code>是把时间数据输出到标准错误(<code>standard error</code>)，所以我们使用 <code>2&gt;example.time</code> 把数据转向到 <code>example.time</code>这个文件当中如何播放所记录的内容?</p></div></p>
<h2 id="4-1-安装scriptreplay"><a href="#4-1-安装scriptreplay" class="headerlink" title="4.1 安装scriptreplay"></a>4.1 安装scriptreplay</h2><p><strong>下载</strong>　</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">wget linux<span class="regexp">/utils/</span>util-linux<span class="regexp">/util-linux-2.12r.tar.bz2"&gt;ftp:/</span><span class="regexp">/ftp.kernel.org/</span>pub<span class="regexp">/linux/</span>utils<span class="regexp">/util-linux/</span>util-linux<span class="number">-2.12</span>r.tar.bz2</span><br></pre></td></tr></table></figure>
<p><strong>解压</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-jxvf</span> <span class="selector-tag">util-linux-2</span><span class="selector-class">.12r</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br></pre></td></tr></table></figure>
<p>之后复制文件到系统的命令目录中即可</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">　　[root<span class="variable">@hongdi</span> 下载]<span class="comment"># cp util-linux-2.12r/misc-utils/scriptreplay.pl /usr/bin/scriptreplay</span></span><br><span class="line">　　[root<span class="variable">@hongdi</span> 下载]<span class="comment"># chmod 755 /usr/bin/scriptreplay</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p>备注: <code>fedora 10</code>的<code>util-linux-ng-2.14.1-3.2.fc10.i386.rpm</code>此包中已包含 <code>scriptreplay</code>,已无需另行安装</p></div>
<h2 id="4-2-播放所录制的session内容"><a href="#4-2-播放所录制的session内容" class="headerlink" title="4.2 播放所录制的session内容"></a>4.2 播放所录制的session内容</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">　　[lhd<span class="variable">@hongdi</span> ~]<span class="variable">$ </span>scriptreplay example1.time example1.txt</span><br><span class="line">　　[lhd<span class="variable">@hongdi</span> ~]<span class="variable">$ </span>ls</span><br><span class="line">　　<span class="number">1</span>.gtkrc-<span class="number">2.0</span> c.tar jeffray_lee<span class="variable">@hotmail</span>.com pass</span><br><span class="line">　　[lhd<span class="variable">@hongdi</span> ~]<span class="variable">$ </span>abcd</span><br><span class="line">　　<span class="symbol">bash:</span> <span class="symbol">abcd:</span> command <span class="keyword">not</span> found</span><br><span class="line"></span><br><span class="line">　　[lhd<span class="variable">@hongdi</span> ~]<span class="variable">$ </span>exit</span><br></pre></td></tr></table></figure>
<p>转载：<a href="http://www.eetop.cn/blog/html/03/6503-25123.html" target="_blank" rel="noopener">http://www.eetop.cn/blog/html/03/6503-25123.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境SVN钉钉通知</title>
    <url>/2018/12/11/Linux%E7%8E%AF%E5%A2%83SVN%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<h1 id="1-参考资料"><a href="#1-参考资料" class="headerlink" title="1 参考资料"></a>1 参考资料</h1><a id="more"></a>
<p><a href="https://www.cnblogs.com/jianxuanbing/p/6835765.html" target="_blank" rel="noopener">https://www.cnblogs.com/jianxuanbing/p/6835765.html</a></p>
<h1 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2 步骤"></a>2 步骤</h1><p><img src="3.jpg" alt="3"></p>
<h2 id="2-1-修改pre-commit"><a href="#2-1-修改pre-commit" class="headerlink" title="2.1 修改pre-commit"></a>2.1 修改pre-commit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#"!/bin/sh</span></span><br><span class="line"></span><br><span class="line">REPOS=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">TXN=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line">SVNLOOK=/usr/bin/svnlook  <span class="comment"># 同pre-commit.tmpl文件中的SVNLOOK</span></span><br><span class="line">LOGMSG=`<span class="variable">$SVNLOOK</span> <span class="built_in">log</span> -t <span class="string">"<span class="variable">$TXN</span>"</span> <span class="string">"<span class="variable">$REPOS</span>"</span> | grep <span class="string">"[a-zA-Z0-9]"</span> | wc -c`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$LOGMSG</span>"</span> -lt 10 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"提交失败： 注释不能低于10个字符"</span> 1&gt;&amp;2</span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-修改post-commit"><a href="#2-2-修改post-commit" class="headerlink" title="2.2 修改post-commit"></a>2.2 修改post-commit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 设置默认字符集，否则post信息到钉钉时中文乱码</span></span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="comment"># svn中变量1为仓库路径，2为提交版本号</span></span><br><span class="line">REPOS=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">REV=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line">time=$(date +%F/%T)</span><br><span class="line"><span class="comment"># 下方svnlook命令获取相应的结果</span></span><br><span class="line">AUTHOR=$(/usr/bin/svnlook author -r <span class="variable">$&#123;REV&#125;</span> <span class="variable">$&#123;REPOS&#125;</span>)</span><br><span class="line">CHANGEDDIRS=$(/usr/bin/svnlook <span class="built_in">dirs</span>-changed <span class="variable">$REPOS</span>)</span><br><span class="line">MESSAGE=$(/usr/bin/svnlook <span class="built_in">log</span> -r <span class="variable">$REV</span> <span class="variable">$REPOS</span>)</span><br><span class="line"></span><br><span class="line">CONTENT=提交时间：<span class="variable">$&#123;time&#125;</span>\\n提交版本：<span class="variable">$&#123;REV&#125;</span>\\n作者：<span class="variable">$&#123;AUTHOR&#125;</span>\\n提交备注：<span class="variable">$&#123;MESSAGE&#125;</span>\\n修改目录：<span class="variable">$CHANGEDDIRS</span></span><br><span class="line"><span class="built_in">cd</span> /home/</span><br><span class="line">/usr/<span class="built_in">local</span>/jdk1.8.0_152/bin/java Request 92bfa50db10658ee1c37f9ab6b7a000e14ce94a901002170762e472af3754fbf  <span class="variable">$CONTENT</span></span><br></pre></td></tr></table></figure>
<div class="note info no-cion"><p><strong>备注</strong>：</p>
<ol>
<li>脚本需要设置LANG变量为UTF8,否则中文乱码</li>
<li>CONTENT变量赋值种的<code>:</code>为中文书写方式，输出的消息存在空格的效果。</li>
<li>Request为java请求文件编译后的class文件，下面讲解</li>
</ol></div>
<p><strong>效果对比：</strong><br><img src="1.jpg" alt="1"><br><img src="2.jpg" alt="2"></p>
<h2 id="3-配置Java请求文件"><a href="#3-配置Java请求文件" class="headerlink" title="3 配置Java请求文件"></a>3 配置Java请求文件</h2><p>由于钉钉提供的接口是https协议，curl需要支持https，因此通过java代码发起Post请求，打包成可运行的class文件，然后用<code>post-commit</code>调用，传入信息即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">package com.wolf.util;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.HttpsURLConnection;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws Exception &#123;</span><br><span class="line">        <span class="built_in">String</span> token = args[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">String</span> content = args[<span class="number">1</span>];</span><br><span class="line">        content = <span class="string">"&#123;\"msgtype\": \"text\",\"text\": &#123;\"content\": \""</span>+content+<span class="string">"\"&#125;&#125;"</span>;</span><br><span class="line">        httpsRequest(<span class="string">"https://oapi.dingtalk.com/robot/send?access_token="</span>+token, <span class="string">"POST"</span>, content);</span><br><span class="line">        System.out.println(<span class="string">"OK"</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送https请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">String</span> httpsRequest(<span class="built_in">String</span> requestUrl, <span class="built_in">String</span> requestMethod, <span class="built_in">String</span> outputStr) throws Exception &#123;</span><br><span class="line">        HttpsURLConnection conn = <span class="literal">null</span>;</span><br><span class="line">        BufferedReader bufferedReader = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(requestUrl);</span><br><span class="line">            conn = (HttpsURLConnection) url.openConnection();</span><br><span class="line">            conn.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="literal">true</span>);</span><br><span class="line">            conn.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">            conn.setRequestMethod(requestMethod);</span><br><span class="line">            conn.setRequestProperty(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != outputStr) &#123;</span><br><span class="line">                OutputStream outputStream = conn.getOutputStream();</span><br><span class="line">                outputStream.write(outputStr.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream(), <span class="string">"utf-8"</span>));</span><br><span class="line">            <span class="built_in">String</span> str = <span class="literal">null</span>;</span><br><span class="line">            StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                buffer.append(str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buffer.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                conn.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><p><strong>备注：</strong><br>将上面代码使用eclipse工具导出为<code>java</code>文件，然后<code>javac Request.java</code>命令生成<code>class</code>文件，<code>java Request</code>命令执行<code>class</code>文件。</p></div>
<h1 id="3-问题汇总"><a href="#3-问题汇总" class="headerlink" title="3 问题汇总"></a>3 问题汇总</h1><h2 id="3-1-乱码问题"><a href="#3-1-乱码问题" class="headerlink" title="3.1 乱码问题"></a>3.1 乱码问题</h2><p>参考上面讲述，及解决方法</p>
<h2 id="3-2-消息：后空格问题"><a href="#3-2-消息：后空格问题" class="headerlink" title="3.2 消息：后空格问题"></a>3.2 消息：后空格问题</h2><p>参考上面代码<code>：</code>使用中文写法。</p>
<h1 id="4-附件"><a href="#4-附件" class="headerlink" title="4 附件"></a>4 附件</h1><p><a href="https://gitee.com/kxinter/kxinter.github.io/raw/master/2018/12/11/Linux%E7%8E%AF%E5%A2%83SVN%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/Request.class" target="_blank" rel="noopener">Request.class</a><br><a href="https://gitee.com/kxinter/kxinter.github.io/blob/master/2018/12/11/Linux%E7%8E%AF%E5%A2%83SVN%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/Request.java" target="_blank" rel="noopener">Request.java</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>钉钉</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>mount挂载共享文件夹报错</title>
    <url>/2018/12/05/mount%E6%8C%82%E8%BD%BD%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="mount挂载报错"><a href="#mount挂载报错" class="headerlink" title="mount挂载报错"></a>mount挂载报错</h1><a id="more"></a>
<h2 id="1-失败-关键字已过期"><a href="#1-失败-关键字已过期" class="headerlink" title="1 失败: 关键字已过期"></a>1 失败: 关键字已过期</h2><p><img src="https://www.github.com/kxinter/images/raw/master/2019/10/23/mount挂载共享文件夹报错/1571821929636.png" alt="图1"></p>
<p><strong>原因：账号密码过期，更换账号或设置密码永不过期。</strong></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>小知识</tag>
        <tag>基础运维</tag>
      </tags>
  </entry>
  <entry>
    <title>nohup输出重定向</title>
    <url>/2018/09/20/nohup%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<a id="more"></a>
<p><code>Linux shell</code>中有三种输入输出，分别为<strong>标准输入</strong>，<strong>标准输出</strong>，<strong>错误输出</strong>，分别对应<code>0</code>，<code>1</code>，<code>2</code>。我们可以直接通过输出重定向<code>&gt;</code>（或<code>&gt;&gt;</code>，表示追加）将某种输出重定向到其他地方，如设备，文件，比如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls &gt; ls.log  <span class="comment">#标准输出重定向</span></span><br><span class="line">ls 2&gt; ls.log <span class="comment">#标准错误重定向</span></span><br><span class="line">ls &gt; /dev/null <span class="comment">#重定向到null设备，相当于直接忽略输出</span></span><br></pre></td></tr></table></figure>
<p>但是，有时候，我们想把标准输出以及错误输出一起重定向某个文件，这是可以通过 <code>2&gt;&amp;1</code> 实现，也可以通过两个同时重定向到某个文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls &gt;ls.log 2&gt;&amp;1           //标准输出重定向到ls.log,而错误又重定向到标准输出，这两个位置不可换</span><br><span class="line">ls 2&gt;&gt;ls.log 1&gt;&gt;ls.log</span><br></pre></td></tr></table></figure>
<p>转载：<a href="http://mblog.sigma.me/2011/08/15/linux-output-redirect.html" target="_blank" rel="noopener">http://mblog.sigma.me/2011/08/15/linux-output-redirect.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat优化</title>
    <url>/2018/12/21/tomcat%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-常用配置详解"><a href="#1-常用配置详解" class="headerlink" title="1 常用配置详解"></a>1 常用配置详解</h1><h2 id="1-1-目录结构"><a href="#1-1-目录结构" class="headerlink" title="1.1 目录结构"></a>1.1 目录结构</h2><p> <strong>/bin</strong>：脚本文件目录。<br> <strong>/common/lib</strong>：存放所有web项目都可以访问的公共jar包（使用Common类加载器加载）。<br> <strong>/conf</strong>：存放配置文件，最重要的是server.xml。<br> <strong>/logs</strong>：存放日志文件。<br> <strong>/server/webapps</strong>：来管理Tomcat-web服务用的。仅对TOMCAT可见，对所有的WEB APP都不可见（使用Catalina类加载器加载）。<br> <strong>/shared/lib</strong>：仅对所有WEB APP可见，对TOMCAT不可见（使用Shared类加载器加载）。<br> <strong>/temp</strong>：Tomcat运行时候存放临时文件用的。<br> <strong>/webapps</strong>：web应用发布目录。<br> <strong>/work</strong>：Tomcat把各种由jsp生成的servlet文件放在这个目录下。删除后，启动时会自动创建。</p>
<h2 id="1-2-配置文件"><a href="#1-2-配置文件" class="headerlink" title="1.2 配置文件"></a>1.2 配置文件</h2><p> <code>server.xml</code>：主要的配置文件。<br> <code>web.xml</code>：缺省的web app配置，WEB-INF/web.xml会覆盖该配置。<br> <code>context.xml</code>：不清楚跟server.xml里面的context是否有关系。</p>
<p> <strong>server.xml配置</strong><br> ==<strong><em>server标签</em></strong>==<br> <code>port</code>：指定一个端口，这个端口负责监听关闭tomcat的请求。<br> <code>shutdown</code>：指定向端口发送的命令字符串。</p>
<p> ==<strong><em>service标签</em></strong>==<br> <code>name</code>：指定service的名字。</p>
<p> ==<strong><em><code>Connector</code>(表示客户端和service之间的连接)标签</em></strong>==</p>
<p> <code>port</code>：指定服务器端要创建的端口号，并在这个端口监听来自客户端的请求。<br> <code>minProcessors</code>：服务器启动时创建的处理请求的线程数。<br> <code>maxProcessors</code>：最大可以创建的处理请求的线程数。<br> <code>enableLookups</code>：如果为true，则可以通过调用request.getRemoteHost()进行DNS查询来得到远程客户端的实际主机名，若为false则不进行DNS查询，而是返回其ip地址。<br> <code>redirectPort</code>：指定服务器正在处理http请求时收到了一个SSL传输请求后重定向的端口号。<br> <code>acceptCount</code>：指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理。<br> <code>connectionTimeout</code>：指定超时的时间数(以毫秒为单位)。</p>
<p> ==<strong><em><code>Engine</code>(表示指定service中的请求处理机，接收和处理来自Connector的请求)标签</em></strong>==<br> <code>defaultHost</code>：指定缺省的处理请求的主机名，它至少与其中的一个host元素的name属性值是一样的。</p>
<p> ==<strong><em><code>Context</code>(表示一个web应用程序，通常为WAR文件，关于WAR的具体信息见servlet规范)标签</em></strong>==<br> <code>docBase</code>：该web应用的文档基准目录（Document Base，也称为Context Root），或者是WAR文件的路径。可以使用绝对路径，也可以使用相对于context所属的Host的appBase路径。<br> path：表示此web应用程序的url的前缀，这样请求的url为<a href="http://localhost:8080/path/****。" target="_blank" rel="noopener">http://localhost:8080/path/****。</a><br> <strong><em><code>reloadable</code>：这个属性非常重要，如果为true，则tomcat会自动检测应用程序的/WEB-INF/lib和/WEB-INF/classes目录的变化，自动装载新的应用程序，我们可以在不重起tomcat的情况下改变应用程序。</em></strong><br> <code>useNaming</code>：如果希望Catalina为该web应用使能一个JNDI InitialContext对象，设为true。该InitialialContext符合J2EE平台的约定，缺省值为true。<br> <code>workDir</code>：Context提供的临时目录的路径，用于servlet的临时读/写。利用javax.servlet.context.tempdir属性，servlet可以访问该目录。如果没有指定，使用$CATALINA_HOME/work下一个合适的目录。<br> <code>swallowOutput</code>：如果该值为true，System.out和System.err的输出被重定向到web应用的logger。如果没有指定，缺省值为false<br> <code>debug</code>：与这个Engine关联的Logger记录的调试信息的详细程度。数字越大，输出越详细。如果没有指定，缺省为0。</p>
<p> ==<strong><em><code>host</code>(表示一个虚拟主机)标签</em></strong>==<br> <code>name</code>：指定主机名。<br> <code>appBase</code>：应用程序基本目录，即存放应用程序的目录。<br> <code>unpackWARs</code>：如果为true，则tomcat会自动将WAR文件解压，否则不解压，直接从WAR文件中运行应用程序。</p>
<p> ==<strong><em><code>Logger</code>(表示日志，调试和错误信息)标签</em></strong>==<br> <code>className</code>：指定logger使用的类名，此类必须实现org.apache.catalina.Logger接口。<br> <code>prefix</code>：指定log文件的前缀。<br> <code>suffix</code>：指定log文件的后缀。<br> <code>timestamp</code>：如果为true，则log文件名中要加入时间，如下例:localhost_log.2001-10-04.txt。</p>
<p> ==<strong><em><code>Realm</code>(表示存放用户名，密码及role的数据库)标签</em></strong>==<br> <code>className</code>：指定Realm使用的类名，此类必须实现org.apache.catalina.Realm接口。</p>
<p> ==<strong><em><code>Valve</code>(功能与Logger差不多，其prefix和suffix属性解释和Logger  中的一样)标签</em></strong>==<br> <code>className</code>：指定Valve使用的类名，如用org.apache.catalina.valves.AccessLogValve类可以记录应用程序的访问信息。<br><code>directory</code>：指定log文件存放的位置。<br> <code>pattern</code>：有两个值，common方式记录远程主机名或ip地址，用户名，日期，第一行请求的字符串，HTTP响应代码，发送的字节数。combined方式比common方式记录的值更多。</p>
<h2 id="1-3-配置虚拟目录"><a href="#1-3-配置虚拟目录" class="headerlink" title="1.3 配置虚拟目录"></a>1.3 配置虚拟目录</h2><ol>
<li>直接部署到<code>webapps</code>目录下面访问。</li>
<li>修改<code>conf/server.xml</code>文件。在<code>&lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;&lt;/host&gt;中加入&lt;Context path=&quot;/test&quot; docBase=&quot;webdemo&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;</code>。docBase目录默认使用appBase=”webapps”这个目录。也可以是绝对路径。<br>配置主目录，可以将path=””。</li>
<li><p>当项目没有放在webapps目录下时，可以在<code>conf/Catalina/localhost</code>新建一个XXX.XML文件。里面加入<code>&lt;Context docBase=&quot;E:webdemo&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;</code>。</p>
<div class="note info no-cion"><p><strong>注意</strong>：<br>  这里的path属性不需要设置，设置了也不会起作用的。</p></div>
<p>也可以使用该方法建立主目录指向另一个目录，例如：<code>&lt;Context docBase=&quot;E:webdemo&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;</code>命名为<code>ROOT.xml</code>，这样默认访问的主目录就被修改过了。</p>
</li>
<li><p>配置连接数<br><code>maxThreads</code>：Tomcat使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数。<br><code>acceptCount</code>：指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理。<br><code>minSpareThreads</code>：Tomcat初始化时创建的线程数。<br><code>maxSpareThreads</code>：一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。<br><code>enableLookups</code>：是否反查域名，取值为：true或false。为了提高处理能力，应设置为false<br><code>connectionTimeout</code>：网络连接超时，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。默认可设置为20000毫秒。</p>
<p>web server允许的最大连接数还受制于操作系统的内核参数设置，通常Windows是2000个左右，Linux是1000个左右。</p>
</li>
<li><p>配置内存大小<br>修改<code>bin/catalina.bat</code>中的<code>set CATALINA_OPTS=-Xms64m -Xmx128m</code>。<br>Xms指最小内存，Xmx指最大内存。</p>
</li>
<li><p>安全配置<br>1）将<code>&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</code><strong>SHUTDOWN</strong>修改为其他一些字符串。否则就容易被人给停止掉了。</p>
<p>2）对应tomcat3.1中，屏蔽目录文件自动列出<br>修改<code>conf/web.xml中</code>的</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span><span class="comment">&lt;!-- 改成false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  3）访问日志设置<br> 在<code>server.xml</code>中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">directory</span>=<span class="string">"logs"</span>  <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">pattern</span>=<span class="string">"common"</span> <span class="attr">resolveHosts</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p> 这样访问日志会记录到Logs中。</p>
<p>  4）修改用户名、密码<br> conf/tomcat-users.xml</p>
<p>  5）屏蔽后台管理入口<br> <strong>方法一</strong>：从控制用户和权限着手。废掉要管理权限的用户就可以了。<br> <strong>方法二</strong>：将conf/Catalina/localhost/manager.xml改名。</p>
<p>  6）配置403,404,500错误页面<br> 默认情况下，报出HTTP错误的时候会暴露tomcat版本号。如果不想暴露的话，就需要重新定义错误跳转页面。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>401<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">location</span>&gt;</span>/401.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <div class="note info no-cion"><p><strong>注意</strong>：<br> 在测试的时候碰到一个奇怪的现象，平时项目里面的时候测试正常的。可是今天在tomcat目录里面新建一个测试目录测试并不能跳转到指定错误页面。暂时不知道为什么。</p></div>
<ol start="7">
<li>配置Log4j日志记录<br>项目中抛出的异常，抛到tomcat中的异常会被tomcat记录下来，存放至<code>logs/localhost.yyyy-MM-dd.log</code>文件中。<br>平时我们在项目中使用的log4j记录日志跟tomcat是没有任何关系的，是独立的一个程序，记录的文件是自定义的。<br>我们可以在tomcat中定义一个log4j的公共日志处理方式，这样在项目中就不需要在定义log4j的配置了。<br>1）将log4j-1.2.15.jar加入到commonlib目录。<br>2）将log4j.properties加入到commonclasses目录。<br>内容例如：</li>
</ol>
<blockquote>
<p> <strong>Output pattern : date [thread] priority category - message</strong><br>log4j.rootLogger=DEUBG, stdout, logfile<br>log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br>log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br>log4j.appender.stdout.layout.ConversionPattern=%d [%t] %-5p [%c] -<br>%m%n<br>log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender<br>log4j.appender.logfile.File=${catalina.home}/logs/tomcat_app.log<br>log4j.appender.logfile.layout=org.apache.log4j.PatternLayout<br>log4j.appender.logfile.layout.ConversionPattern=%d [%t] %-5p [%c] -<br>%m%n    #3rd party library level<br>log4j.logger.org.hibernate.cache=ERROR</p>
</blockquote>
 <div class="note info no-cion"><p><strong>注意</strong>：<br> 我们项目中使用e.printStackTrace();输出的异常会在控制台输出来，但是，不会记录到tomcat日志中。<br> 而且，也不会记录到log4j的日志中。要想记录到log4j日志中，必须使用log4j输出来。<br> 所以，实际上web项目中进行异常处理应该将e.printStackTrace();写写法多改成log4j的形式才对！<br> 但是，实际项目中很多项目多偷懒使用了e.printStackTrace();方式输出异常。当出现异常的时候在控制台上查看一下就可以了，也不考虑实际运行时候的维护。假如有人不小心关了控制台，那么，你不就看不到异常了吗？<br> 个人介意使用log4j的形式记入web异常！</p></div>
<ol start="8">
<li>Tomcat5乱码问题<br>Tomcat5跟Tomcat4对参数处理是不一样的，在Tomcat4中get与post的编码是一样的，所以只要在过滤器中通过request.setCharacterEncoding()设定一次就可以解决get与set的问题。然而，在Tomcat5中，get与post的处理是分开的，对get请求使用URIEncoding进行处理，对post使用request.setCharacterEncoding()处理。Tomcat5中，在server.xml的Connector元素增加了以下配置参数：<br><code>URIEncoding</code>：用来设定通过URI传递的</li>
</ol>
<h1 id="2-tomcat优化配置参数"><a href="#2-tomcat优化配置参数" class="headerlink" title="2 tomcat优化配置参数"></a>2 tomcat优化配置参数</h1><h2 id="2-1-内存优化"><a href="#2-1-内存优化" class="headerlink" title="2.1 内存优化"></a>2.1 内存优化</h2><p>优化内存，主要是在<code>bin/catalina.bat/sh</code> 配置文件中进行。linux上，在<code>catalina.sh</code>中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS="-server -Xms1G -Xmx2G -Xss256K -Djava.awt.headless=true -Dfile.encoding=utf-8 -XX:MaxPermSize=256m -XX:PermSize=128M -XX:MaxPermSize=256M"</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<p>• <code>-serve</code>：启用jdk的server版本。<br>• <code>-Xms</code>：虚拟机初始化时的最小堆内存。<br>• <code>-Xmx</code>：虚拟机可使用的最大堆内存。 #-Xms与-Xmx设成一样的值，避免JVM因为频繁的GC导致性能大起大落<br>• <code>-XX:PermSize</code>：设置非堆内存初始值,默认是物理内存的1/64。<br>• <code>-XX:MaxNewSize</code>：新生代占整个堆内存的最大值。<br>• <code>-XX:MaxPermSize：Perm</code>（俗称方法区）占整个堆内存的最大值，也称内存最大永久保留区域。</p>
<h3 id="2-1-1-错误提示：java-lang-OutOfMemoryError-Java-heap-space"><a href="#2-1-1-错误提示：java-lang-OutOfMemoryError-Java-heap-space" class="headerlink" title="2.1.1 错误提示：java.lang.OutOfMemoryError:Java heap space"></a>2.1.1 错误提示：java.lang.OutOfMemoryError:Java heap space</h3><p>Tomcat默认可以使用的内存为128MB，在较大型的应用项目中，这点内存是不够的，有可能导致系统无法运行。常见的问题是报Tomcat内存溢出错误，Outof Memory(系统内存不足)的异常，从而导致客户端显示500错误，一般调整Tomcat的-Xms和-Xmx即可解决问题，通常将-Xms和-Xmx设置成一样，堆的最大值设置为物理可用内存的最大值的80%。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_OPTS=-Xms512m-Xmx512m</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-错误提示：java-lang-OutOfMemoryError-PermGenspace"><a href="#2-1-2-错误提示：java-lang-OutOfMemoryError-PermGenspace" class="headerlink" title="2.1.2 错误提示：java.lang.OutOfMemoryError: PermGenspace"></a>2.1.2 错误提示：java.lang.OutOfMemoryError: PermGenspace</h3><p>PermGenspace的全称是Permanent Generationspace,是指内存的永久保存区域，这块内存主要是被JVM存放Class和Meta信息的,Class在被Loader时就会被放到PermGenspace中，它和存放类实例(Instance)的Heap区域不同,GC(Garbage Collection)不会在主程序运行期对PermGenspace进行清理，所以如果你的应用中有很CLASS的话,就很可能出现PermGen space错误，这种错误常见在web服务器对JSP进行precompile的时候。如果你的WEB APP下都用了大量的第三方jar, 其大小超过了jvm默认的大小(4M)那么就会产生此错误信息了。解决方法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">setJAVA_OPTS=-XX:PermSize=128M</span><br></pre></td></tr></table></figure>
<h3 id="2-1-3-垃圾回收机制"><a href="#2-1-3-垃圾回收机制" class="headerlink" title="2.1.3 垃圾回收机制"></a>2.1.3 垃圾回收机制</h3><p>在使用-Xms和-Xmx调整tomcat的堆大小时，还需要考虑垃圾回收机制。如果系统花费很多的时间收集垃圾，请减小堆大小。一次完全的垃圾收集应该不超过3-5 秒。如果垃圾收集成为瓶颈，那么需要指定代的大小，检查垃圾收集的详细输出，研究垃圾收集参数对性能的影响。一般说来，你应该使用物理内存的 80% 作为堆大小。当增加处理器时，记得增加内存，因为分配可以并行进行，而垃圾收集不是并行的。</p>
<h2 id="2-2-连接数优化："><a href="#2-2-连接数优化：" class="headerlink" title="2.2 连接数优化："></a>2.2 连接数优化：</h2><p>#优化连接数，主要是在<code>conf/server.xml</code>配置文件中进行修改。</p>
<h3 id="2-2-1-优化线程数"><a href="#2-2-1-优化线程数" class="headerlink" title="2.2.1 优化线程数"></a>2.2.1 优化线程数</h3><p>找到<code>Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</code>，增加<code>maxThreads</code>和<code>acceptCount</code>属性（使<code>acceptCount</code>大于等于<code>maxThreads</code>），如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span><span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span><span class="attr">acceptCount</span>=<span class="string">"500"</span> <span class="attr">maxThreads</span>=<span class="string">"400"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<p>• <code>maxThreads</code>：tomcat可用于请求处理的最大线程数，默认是200<br>• <code>minSpareThreads</code>：tomcat初始线程数，即最小空闲线程数<br>• <code>maxSpareThreads</code>：tomcat最大空闲线程数，超过的会被关闭<br>• <code>acceptCount</code>：当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理.默认100</p>
<h3 id="2-2-2-使用线程池"><a href="#2-2-2-使用线程池" class="headerlink" title="2.2.2 使用线程池"></a>2.2.2 使用线程池</h3><p>在<code>server.xml</code>中增加<code>executor</code>节点，然后配置<code>connector</code>的<code>executor</code>属性，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">namePrefix</span>=<span class="string">"req-exec-"</span><span class="attr">maxThreads</span>=<span class="string">"1000"</span> <span class="attr">minSpareThreads</span>=<span class="string">"50"</span><span class="attr">maxIdleTime</span>=<span class="string">"60000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span><span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<p>•<code>namePrefix</code>：线程池中线程的命名前缀<br>• <code>maxThreads</code>：线程池的最大线程数<br>• <code>minSpareThreads</code>：线程池的最小空闲线程数<br>• <code>maxIdleTime</code>：超过最小空闲线程数时，多的线程会等待这个时间长度，然后关闭<br>• <code>threadPriority</code>：线程优先级<br><div class="note info no-cion"><p><strong>注</strong>：<br>当tomcat并发用户量大的时候，单个jvm进程确实可能打开过多的文件句柄，这时会报java.net.SocketException:Too many open files错误。可使用下面步骤检查：</p></div><br>•<code>ps -ef |grep tomcat</code>查看tomcat的进程ID，记录ID号，假设进程ID为10001<br>• <code>lsof -p 10001|wc -l</code> 查看当前进程id为10001的 文件操作数<br>• 使用命令：<code>ulimit -a</code> 查看每个用户允许打开的最大文件数</p>
<h2 id="2-3-Tomcat-Connector三种运行模式（BIO-NIO-APR）"><a href="#2-3-Tomcat-Connector三种运行模式（BIO-NIO-APR）" class="headerlink" title="2.3 Tomcat Connector三种运行模式（BIO, NIO, APR）"></a>2.3 Tomcat Connector三种运行模式（BIO, NIO, APR）</h2><h3 id="2-3-1-三种模式比较："><a href="#2-3-1-三种模式比较：" class="headerlink" title="2.3.1 三种模式比较："></a>2.3.1 三种模式比较：</h3><p>1）<strong>BIO</strong>：一个线程处理一个请求。缺点：并发量高时，线程数较多，浪费资源。Tomcat7或以下在Linux系统中默认使用这种方式。</p>
<p>2）<strong>NIO</strong>：利用Java的异步IO处理，可以通过少量的线程处理大量的请求。Tomcat8在Linux系统中默认使用这种方式。Tomcat7必须修改Connector配置来启动（conf/server.xml配置文件）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span><span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span><span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>3）<strong>APR</strong>(Apache Portable Runtime)：从操作系统层面解决io阻塞问题。Linux如果安装了apr和native，Tomcat直接启动就支持apr。</p>
<h3 id="2-3-2-apr模式"><a href="#2-3-2-apr模式" class="headerlink" title="2.3.2 apr模式"></a>2.3.2 apr模式</h3><p>安装<code>apr</code>以及<code>tomcat-native</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install apr apr-devel</span><br></pre></td></tr></table></figure>
<p>进入<code>tomcat/bin</code>目录，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/<span class="built_in">local</span>/tomcat/bin/</span><br><span class="line">tar xzfv tomcat-native.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tomcat-native-1.1.32-src/jni/native</span><br><span class="line">./configure --with-apr=/usr/bin/apr-1-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<div class="note info no-cion"><p><strong>注意</strong>：</p>
<p>#最新版本的tomcat自带tomcat-native.war.gz，不过其版本相对于yum安装的apr过高，configure的时候会报错。</p></div>
<p><strong>解决</strong>：<code>yum remove apr apr-devel –y</code>,卸载yum安装的apr和apr-devel,下载最新版本的apr源码包，编译安装;或者下载低版本的tomcat-native编译安装</p>
<p>安装成功后还需要对tomcat设置环境变量，方法是在catalina.sh文件中增加1行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS=<span class="string">"-Djava.library.path=/usr/local/apr/lib"</span></span><br></pre></td></tr></table></figure>
<p><em>#apr下载地址：<a href="http://apr.apache.org/download.cgi" target="_blank" rel="noopener">http://apr.apache.org/download.cgi</a></em></p>
<p><em>#tomcat-native下载地址：<a href="http://tomcat.apache.org/download-native.cgi" target="_blank" rel="noopener">http://tomcat.apache.org/download-native.cgi</a></em></p>
<p>修改8080端对应的conf/server.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">protocol="org.apache.coyote.http11.Http11AprProtocol"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span></span></span><br><span class="line"><span class="tag"><span class="attr">port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag"><span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">enableLookups</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag"><span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>PS:启动以后查看日志 显示如下表示开启 apr 模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sep 19, 2016 3:46:21 PM org.apache.coyote.AbstractProtocol start</span><br><span class="line">INFO: Starting ProtocolHandler [<span class="string">"http-apr-8081"</span>]</span><br></pre></td></tr></table></figure>
<h1 id="3-tomcat常见面试题"><a href="#3-tomcat常见面试题" class="headerlink" title="3 tomcat常见面试题"></a>3 tomcat常见面试题</h1><h2 id="3-1-Tomcat的缺省是多少，怎么修改"><a href="#3-1-Tomcat的缺省是多少，怎么修改" class="headerlink" title="3.1 Tomcat的缺省是多少，怎么修改"></a>3.1 Tomcat的缺省是多少，怎么修改</h2><p>Tomcat的缺省端口号是8080.修改Tomcat端口号：</p>
<ol>
<li><p>找到Tomcat目录下的conf文件夹</p>
</li>
<li><p>进入conf文件夹里面找到server.xml文件</p>
</li>
<li><p>打开server.xml文件</p>
</li>
<li><p>在server.xml文件里面找到下列信息</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">maxThreads=”150″ minSpareThreads=”25″ maxSpareThreads=”75″ enableLookups=”false” redirectPort=”8443″ acceptCount=”100″ connectionTimeout=”20000″ disableUploadTimeout=”true” /&gt;</span><br></pre></td></tr></table></figure>
<p>5.把port=”8080″改成port=”8888″，并且保存</p>
<p>6.启动Tomcat，并且在IE浏览器里面的地址栏输入<a href="http://127.0.0.1:8888/" target="_blank" rel="noopener">http://127.0.0.1:8888/</a></p>
<p>7、tomcat默认采用的BIO模型，在几百并发下性能会有很严重的下降。tomcat自带还有NIO的模型，另外也可以调用APR的库来实现操作系统级别控制。NIO模型是内置的，调用很方便，只需要将上面配置文件中protocol修改成 org.apache.coyote.http11.Http11NioProtocol，重启即可生效。如下面的参数配置，默认的是<code>HTTP/1.1</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">”8080″</span> <span class="attr">protocol</span>=<span class="string">”org.apache.coyote.http11.Http11NioProtocol”</span> <span class="attr">connectionTimeout</span>=<span class="string">”20000″</span> <span class="attr">redirectPort</span>=<span class="string">”8443″</span> <span class="attr">maxThreads</span>=<span class="string">”500″</span> <span class="attr">minSpareThreads</span>=<span class="string">”20″</span> <span class="attr">acceptCount</span>=<span class="string">”100″</span> <span class="attr">disableUploadTimeout</span>=<span class="string">”true”</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">enableLookups</span>=<span class="string">”false”</span> <span class="attr">URIEncoding</span>=<span class="string">”UTF-8″</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-tomcat-如何优化？"><a href="#3-2-tomcat-如何优化？" class="headerlink" title="3.2 tomcat 如何优化？"></a>3.2 tomcat 如何优化？</h2><h3 id="3-2-1优化连接配置"><a href="#3-2-1优化连接配置" class="headerlink" title="3.2.1优化连接配置"></a>3.2.1优化连接配置</h3><p>这里以tomcat7的参数配置为例，需要修改<code>conf/server.xml</code>文件，修改连接数，关闭客户端dns查询。</p>
<p>参数解释：</p>
<p><code>URIEncoding=”UTF-8″</code> :使得tomcat可以解析含有中文名的文件的url，真方便，不像apache里还有搞个mod_encoding，还要手工编译</p>
<p><code>maxSpareThreads</code> : 如果空闲状态的线程数多于设置的数目，则将这些线程中止，减少这个池中的线程总数。</p>
<p><code>minSpareThreads</code> : 最小备用线程数，tomcat启动时的初始化的线程数。</p>
<p><code>enableLookups</code> : 这个功效和Apache中的HostnameLookups一样，设为关闭。</p>
<p><code>connectionTimeout</code> : connectionTimeout为网络连接超时时间毫秒数。</p>
<p><code>maxThreads</code>: maxThreads Tomcat使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数，即最大并发数。</p>
<p><code>acceptCount</code>: acceptCount是当线程数达到maxThreads后，后续请求会被放入一个等待队列，这个acceptCount是这个队列的大小，如果这个队列也满了，就直接refuse connection</p>
<p><code>maxProcessors</code>与<code>minProcessors</code> : 在 Java中线程是程序运行时的路径，是在一个程序中与其它控制线程无关的、能够独立运行的代码段。它们共享相同的地址空间。多线程帮助程序员写出CPU最 大利用率的高效程序，使空闲时间保持最低，从而接受更多的请求。</p>
<p><strong>通常Windows是1000个左右，Linux是2000个左右。</strong></p>
<p><code>useURIValidationHack</code>:</p>
<p>我们来看一下tomcat中的一段源码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">【security】</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (connector.getUseURIValidationHack()) &#123;</span><br><span class="line"></span><br><span class="line">String uri = validate(request.getRequestURI());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (uri == null) &#123;</span><br><span class="line"></span><br><span class="line">res.setStatus(400);</span><br><span class="line"></span><br><span class="line">res.setMessage(“Invalid URI”);</span><br><span class="line"></span><br><span class="line">throw new IOException(“Invalid URI”);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">req.requestURI().setString(uri);</span><br><span class="line"></span><br><span class="line">// Redoing the URI decoding</span><br><span class="line"></span><br><span class="line">req.decodedURI().duplicate(req.requestURI());</span><br><span class="line"></span><br><span class="line">req.getURLDecoder().convert(req.decodedURI(), <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>可以看到如果把<code>useURIValidationHack</code>设成”<code>false</code>”，可以减少它对一些url的不必要的检查从而减省开销。</p>
<p><code>enableLookups=”false”</code> ： 为了消除DNS查询对性能的影响我们可以关闭DNS查询，方式是修改server.xml文件中的enableLookups参数值。</p>
<p><code>disableUploadTimeout</code> ：类似于Apache中的keeyalive一样</p>
<p><strong>给Tomcat配置gzip压缩(HTTP压缩)功能</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">compression=”on” compressionMinSize=”2048″ compressableMimeType=”text/html,text/xml,text/javascript,text/css,text/plain”</span><br></pre></td></tr></table></figure>
<p>HTTP 压缩可以大大提高浏览网站的速度，它的原理是，在客户端请求网页后，从服务器端将网页文件压缩，再下载到客户端，由客户端的浏览器负责解压缩并浏览。相对于普通的浏览过程HTML,CSS,Javascript , Text ，它可以节省40%左右的流量。更为重要的是，它可以对动态生成的，包括CGI、PHP , JSP , ASP , Servlet,SHTML等输出的网页也能进行压缩，压缩效率惊人。</p>
<p>1)<code>compression=”on”</code> 打开压缩功能</p>
<p>2)<code>compressionMinSize=”2048″</code> 启用压缩的输出内容大小，这里面默认为2KB</p>
<p>3)<code>noCompressionUserAgents=”gozilla, traviata”</code> 对于以下的浏览器，不启用压缩</p>
<p>4)<code>compressableMimeType=”text/html,text/xml”</code>　压缩类型</p>
<p>最后不要忘了把8443端口的地方也加上同样的配置，因为如果我们走https协议的话，我们将会用到8443端口这个段的配置，对吧？｛</p>
<p><strong>tomcat设置https端口时,8443和443区别:</strong></p>
<ol>
<li><p>8443端口在访问时需要加端口号,相当于http的8080,不可通过域名直接访问,需要加上端口号;<a href="https://yuming.com:8443。" target="_blank" rel="noopener">https://yuming.com:8443。</a></p>
</li>
<li><p>443端口在访问时不需要加端口号,相当于http的80,可通过域名直接访问;例:<a href="https://yuming.com。" target="_blank" rel="noopener">https://yuming.com。</a></p>
</li>
</ol>
<p>*问:https使用域名访问网站,而不显示端口号?</p>
<p> 答:将端口号设置为443,即可通过域名直接访问网站</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">!–enable</span> <span class="attr">tomcat</span> <span class="attr">ssl</span>–&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">”8443″</span> <span class="attr">protocol</span>=<span class="string">”HTTP/1.1″</span> <span class="attr">URIEncoding</span>=<span class="string">”UTF-8″</span> <span class="attr">minSpareThreads</span>=<span class="string">”25″</span> <span class="attr">maxSpareThreads</span>=<span class="string">”75″</span> <span class="attr">enableLookups</span>=<span class="string">”false”</span> <span class="attr">disableUploadTimeout</span>=<span class="string">”true”</span> <span class="attr">connectionTimeout</span>=<span class="string">”20000″</span> <span class="attr">acceptCount</span>=<span class="string">”300″</span> <span class="attr">maxThreads</span>=<span class="string">”300″</span> <span class="attr">maxProcessors</span>=<span class="string">”1000″</span> <span class="attr">minProcessors</span>=<span class="string">”5″</span> <span class="attr">useURIValidationHack</span>=<span class="string">”false”</span> <span class="attr">compression</span>=<span class="string">”on”</span> <span class="attr">compressionMinSize</span>=<span class="string">”2048″</span> <span class="attr">compressableMimeType</span>=<span class="string">”text/html,text/xml,text/javascript,text/css,text/plain”</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">SSLEnabled</span>=<span class="string">”true”scheme</span>=<span class="string">”https”</span> <span class="attr">secure</span>=<span class="string">”true”clientAuth</span>=<span class="string">”false”</span> <span class="attr">sslProtocol</span>=<span class="string">”TLS”keystoreFile</span>=<span class="string">”d:/tomcat2/conf/shnlap93.jks”</span> <span class="attr">keystorePass</span>=<span class="string">”aaaaaa”/</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>好了，所有的Tomcat优化的地方都加上了。</p>
<h3 id="3-2-2优化JDK"><a href="#3-2-2优化JDK" class="headerlink" title="3.2.2优化JDK"></a>3.2.2优化JDK</h3><p>Tomcat默认可以使用的内存为128MB,Windows下,在文件{tomcat_home}/bin/catalina.bat，Unix下，在文件<code>$CATALINA_HOME/bin/catalina.sh</code>的前面，增加如下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS=”‘<span class="variable">$JAVA_OPTS</span>” -Xms[初始化内存大小] -Xmx[可以使用的最大内存]</span><br></pre></td></tr></table></figure>
<p>或</p>
<p>设置环境变量：<code>export JAVA_OPTS=””$JAVA_OPTS” -Xms[初始化内存大小] -Xmx[可以使用的最大内存]”</code></p>
<p>一般说来，你应该使用物理内存的 80% 作为堆大小。如果本机上有Apache服务器，可以先折算Apache需要的内存，然后修改堆大小。建议设置为70％；建议设置[[初始化内存大小]等于[可以使用的最大内存]，这样可以减少平凡分配堆而降低性能。</p>
<p>本例使用加入环境变量的方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/profile</span></span><br></pre></td></tr></table></figure>
<p>加入：<code>export JAVA_OPTS=””$JAVA_OPTS” -Xms700 —Xmx700</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure>
<p><strong>【参数说明】</strong></p>
<p><code>-Xms</code> 是指设定程序启动时占用内存大小。一般来讲，大点，程序会启动的 快一点，但是也可能会导致机器暂时间变慢。</p>
<p><code>-Xmx</code> 是指设定程序运行期间最大可占用的内存大小。如果程序运行需要占 用更多的内存，超出了这个设置值，就会抛出OutOfMemory 异常。</p>
<p><code>-Xss</code> 是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程 大约需要占用多少内存，可能会有多少线程同时运行等。</p>
<p><code>-XX:PermSize</code>设置非堆内存初始值，默认是物理内存的1/64 。</p>
<p><code>-XX:MaxPermSize</code>设置最大非堆内存的大小，默认是物理内存的1/4。</p>
<h2 id="3-3-tomcat-有那几种Connector-运行模式？"><a href="#3-3-tomcat-有那几种Connector-运行模式？" class="headerlink" title="3.3 tomcat 有那几种Connector 运行模式？"></a>3.3 tomcat 有那几种Connector 运行模式？</h2><p>tomcat的运行模式有3种.修改他们的运行模式.3种模式的运行是否成功,可以看他的启动控制台,或者启动日志.或者登录他们的默认页面<a href="http://localhost:8080/查看其中的服务器状态。" target="_blank" rel="noopener">http://localhost:8080/查看其中的服务器状态。</a></p>
<p>1)<code>bio</code></p>
<p>默认的模式,性能非常低下,没有经过任何优化处理和支持.</p>
<p>2)<code>nio</code></p>
<p>利用java的异步io护理技术,no blocking IO技术.</p>
<p>想运行在该模式下，直接修改server.xml里的Connector节点,修改protocol为</p>
<p><code>&lt;Connector port=”80″ protocol=”org.apache.coyote.http11.Http11NioProtocol” connectionTimeout=”20000″ URIEncoding=”UTF-8″ useBodyEncodingForURI=”true” enableLookups=”false” redirectPort=”8443″ /&gt;</code>启动后,就可以生效。</p>
<p>3)<code>apr</code></p>
<p>安装起来最困难,但是从操作系统级别来解决异步的IO问题,大幅度的提高性能.</p>
<p>必须要安装<code>apr</code>和<code>native</code>，直接启动就支持<code>apr</code>。下面的修改纯属多余，仅供大家扩充知识,但仍然需要安装<code>apr</code>和<code>native</code>。如<code>nio</code>修改模式,修改<code>protocol</code>为<code>org.apache.coyote.http11.Http11AprProtocol</code></p>
<h2 id="3-4-tomcat调优"><a href="#3-4-tomcat调优" class="headerlink" title="3.4 tomcat调优"></a>3.4 tomcat调优</h2><ol>
<li><strong>JVM参数调优</strong><br><code>-Xms&lt;size&gt;</code> 表示JVM初始化堆的大小，<code>-Xmx&lt;size&gt;</code>表示JVM堆的最大值。这两个值的大小一般根据需要进行设置。当应用程序需要的内存超出堆的最大值时虚拟机就会提示内存溢出，并且导致应用服务崩溃。因此一般建议堆的最大值设置为可用内存的最大值的80%。在<code>catalina.bat</code>中，设置<code>JAVA_OPTS=&#39;-Xms256m -Xmx512m&#39;</code>，表示初始化内存为256MB，可以使用的最大内存为512MB。 </li>
<li><strong>禁用DNS查询</strong><br>　当web应用程序想要记录客户端的信息时，它也会记录客户端的IP地址或者通过域名服务器查找机器名转换为IP地址。DNS查询需要占用网络，并且包括可能从很多很远的服务器或者不起作用的服务器上去获取对应的IP的过程，这样会消耗一定的时间。为了消除DNS查询对性能的影响我们可以关闭DNS查询，方式是修改<code>server.xml</code>文件中的<code>enableLookups</code>参数值：<br>　Tomcat4 </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">className</span>=<span class="string">"org.apache.coyote.tomcat4.CoyoteConnector"</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">minProcessors</span>=<span class="string">"5"</span> <span class="attr">maxProcessors</span>=<span class="string">"75"</span> <span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">acceptCount</span>=<span class="string">"100"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">useURIValidationHack</span>=<span class="string">"false"</span> <span class="attr">disableUploadTimeout</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>Tomcat5 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">minSpareThreads</span>=<span class="string">"25"</span> <span class="attr">maxSpareThreads</span>=<span class="string">"75"</span> <span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">acceptCount</span>=<span class="string">"100"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">disableUploadTimeout</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>调整线程数</strong><br>通过应用程序的连接器（Connector）进行性能控制的的参数是创建的处理请求的线程数。Tomcat使用线程池加速响应速度来处理请求。在Java中线程是程序运行时的路径，是在一个程序中与其它控制线程无关的、能够独立运行的代码段。它们共享相同的地址空间。多线程帮助程序员写出CPU最大利用率的高效程序，使空闲时间保持最低，从而接受更多的请求。<br>Tomcat4中可以通过修改<code>minProcessors</code>和<code>maxProcessors</code>的值来控制线程数。这些值在安装后就已经设定为默认值并且是足够使用的，但是随着站点的扩容而改大这些值。<code>minProcessors</code>服务器启动时创建的处理请求的线程数应该足够处理一个小量的负载。也就是说，如果一天内每秒仅发生5次单击事件，并且每个请求任务处理需要1秒钟，那么预先设置线程数为5就足够了。但在你的站点访问量较大时就需要设置更大的线程数，指定为参数<code>maxProcessors</code>的值。<code>maxProcessors</code>的值也是有上限的，应防止流量不可控制（或者恶意的服务攻击），从而导致超出了虚拟机使用内存的大小。如果要加大并发连接数，应同时加大这两个参数。web server允许的最大连接数还受制于操作系统的内核参数设置，<strong>通常Windows是2000个左右，Linux是1000个左右</strong>。<br>在Tomcat5对这些参数进行了调整，请看下面属性：<br><code>maxThreads</code>    Tomcat使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数。<br><code>acceptCount</code>    指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理。<br><code>connnectionTimeout</code>    网络连接超时，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000毫秒。<br><code>minSpareThreads</code>    Tomcat初始化时创建的线程数。<br><code>maxSpareThreads</code>     一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。<br>最好的方式是多设置几次并且进行测试，观察响应时间和内存使用情况。在不同的机器、操作系统或虚拟机组合的情况下可能会不同，而且并不是所有人的web站点的流量都是一样的，因此没有一刀切的方案来确定线程数的值。 </li>
</ol>
<p><strong>Tomcat作为Web服务器，它的处理性能直接关系到用户体验，下面是几种常见的优化措施：</strong></p>
<pre><code>一、掉对web.xml的监视，把jsp提前编辑成Servlet。有富余物理内存的情况，加大tomcat使用的jvm的内存

二、服务器资源
</code></pre><p>　　服务器所能提供CPU、内存、硬盘的性能对处理能力有决定性影响。<br>　　(1) 对于高并发情况下会有大量的运算，那么CPU的速度会直接影响到处理速度。<br>　　(2) 内存在大量数据处理的情况下，将会有较大的内存容量需求，可以用-Xmx -Xms -XX:MaxPermSize等参数对内存不同功能块进行划分。我们之前就遇到过内存分配不足，导致虚拟机一直处于full GC，从而导致处理能力严重下降。<br>　　(3) 硬盘主要问题就是读写性能，当大量文件进行读写时，磁盘极容易成为性能瓶颈。最好的办法还是利用下面提到的缓存。</p>
<pre><code>三、利用缓存和压缩
</code></pre><p>　　对于静态页面最好是能够缓存起来，这样就不必每次从磁盘上读。这里我们采用了Nginx作为缓存服务器，将图片、css、js文件都进行了缓存，有效的减少了后端tomcat的访问。<br>　　另外，为了能加快网络传输速度，开启gzip压缩也是必不可少的。但考虑到tomcat已经需要处理很多东西了，所以把这个压缩的工作就交给前端的Nginx来完成。<br>　　除了文本可以用gzip压缩，其实很多图片也可以用图像处理工具预先进行压缩，找到一个平衡点可以让画质损失很小而文件可以减小很多。曾经我就见过一个图片从300多kb压缩到几十kb，自己几乎看不出来区别。</p>
<pre><code>四、采用集群
</code></pre><p>　　单个服务器性能总是有限的，最好的办法自然是实现横向扩展，那么组建tomcat集群是有效提升性能的手段。我们还是采用了Nginx来作为请求分流的服务器，后端多个tomcat共享session来协同工作。</p>
<pre><code>五、 优化tomcat参数
</code></pre><p>　　这里以tomcat7的参数配置为例，需要修改conf/server.xml文件，主要是优化连接配置，关闭客户端dns查询。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span>   </span></span><br><span class="line"><span class="tag">           <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>  </span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span>  </span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span>   </span></span><br><span class="line"><span class="tag">           <span class="attr">maxThreads</span>=<span class="string">"500"</span>   </span></span><br><span class="line"><span class="tag">           <span class="attr">minSpareThreads</span>=<span class="string">"20"</span>  </span></span><br><span class="line"><span class="tag">           <span class="attr">acceptCount</span>=<span class="string">"100"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">disableUploadTimeout</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">enableLookups</span>=<span class="string">"false"</span>   </span></span><br><span class="line"><span class="tag">           <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-5-Tomcat-部署项目的三种方法"><a href="#3-5-Tomcat-部署项目的三种方法" class="headerlink" title="3.5 Tomcat 部署项目的三种方法"></a>3.5 Tomcat 部署项目的三种方法</h2><p>目录</p>
<p>1、下载 Tomcat 服务器<br>2、启动并部署 Tomcat 服务器<br>3、Tomcat 的目录结构<br>4、部署项目的第一种方法（项目直接放入 webapps 目录中）<br>5、部署项目的第二种方法（修改 conf/server.xml 文件 ）<br>6、部署项目的第三种方法（apache-tomcat-7.0.52\conf\Catalina\localhost ）</p>
<h3 id="3-5-1-下载-Tomcat-服务器"><a href="#3-5-1-下载-Tomcat-服务器" class="headerlink" title="3.5.1 下载 Tomcat 服务器"></a>3.5.1 下载 Tomcat 服务器</h3><p>　　①、官网下载地址：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p>
<p>　　②、tomcat 8.0 64位百度云下载地址：<a href="http://pan.baidu.com/s/1slbKPsx" target="_blank" rel="noopener">http://pan.baidu.com/s/1slbKPsx</a> 密码：ewui</p>
<p>　　③、tomcat 8.0 32位百度云下载地址：<a href="http://pan.baidu.com/s/1o8G28rS" target="_blank" rel="noopener">http://pan.baidu.com/s/1o8G28rS</a> 密码：k11n</p>
<h3 id="3-5-2-启动并部署-Tomcat-服务器"><a href="#3-5-2-启动并部署-Tomcat-服务器" class="headerlink" title="3.5.2 启动并部署 Tomcat 服务器"></a>3.5.2 启动并部署 Tomcat 服务器</h3><p>　　①、解压 tomcat 安装包到一个非中文目录下<br>　　②、配置环境变量。JAVA_HOME(指向 JDK 安装的根目录)<br>　　③、双击 apache-tomcat-6.0.16\bin 目录下的 startup.bat，启动服务器(如果一闪而过，那就是没有配置 JAVA_HOME 的环境变量)<br>　　④、在浏览器中输入 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>
<p>注意：Tomcat 启动不了的时候注意配置 JAVA_HOME:C:\Program Files\Java\jdk1.6.0_43这是安装 JDK的根目录</p>
<h3 id="3-5-3-Tomcat-的目录结构"><a href="#3-5-3-Tomcat-的目录结构" class="headerlink" title="3.5.3 Tomcat 的目录结构"></a>3.5.3 Tomcat 的目录结构</h3><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Tomcat优化/1.png" alt="1"></p>
<h3 id="3-5-4-部署项目的第一种方法（项目直接放入-webapps-目录中）"><a href="#3-5-4-部署项目的第一种方法（项目直接放入-webapps-目录中）" class="headerlink" title="3.5.4 部署项目的第一种方法（项目直接放入 webapps 目录中）"></a>3.5.4 部署项目的第一种方法（项目直接放入 webapps 目录中）</h3><p>1、将编写并编译好的web项目(注意要是编译好的，如果是 eclipse，可以将项目打成 war 包放入)，放入到 webapps 中<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Tomcat优化/2.png" alt="2"><br>2、启动tomcat服务器（双击 apache-tomcat-6.0.16\bin 目录下的 startup.bat，启动服务器）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Tomcat优化/3.png" alt="3"><br>3、在浏览器输入：<a href="http://localhost:8080/项目名/访问的文件名" target="_blank" rel="noopener">http://localhost:8080/项目名/访问的文件名</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Tomcat优化/4.png" alt="4"></p>
<h3 id="3-5-5-部署项目的第二种方法（修改-conf-server-xml-文件-）"><a href="#3-5-5-部署项目的第二种方法（修改-conf-server-xml-文件-）" class="headerlink" title="3.5.5 部署项目的第二种方法（修改 conf/server.xml 文件 ）"></a>3.5.5 部署项目的第二种方法（修改 conf/server.xml 文件 ）</h3><p>①、打开tomcat下conf/server.xml，在<host> </host>标签之间输入项目配置信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/WebProject"</span> <span class="attr">docBase</span>=<span class="string">"D:/WebProject"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>　　<code>path</code>:浏览器访问时的路径名</p>
<p>　　<code>docBase</code>:web项目的WebRoot所在的路径，注意是WebRoot的路径，不是项目的路径。其实也就是编译后的项目</p>
<p>　　<code>reloadble</code>:设定项目有改动时，tomcat是否重新加载该项目</p>
<p>②、双击 startup.bat，启动 tomcat 服务器，然后在浏览器输入访问的项目名称路径<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Tomcat优化/5.png" alt="5"><br>注意：如果你配置的 path=”/xx”,那么访问的时候就是这样：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Tomcat优化/6.png" alt="6"></p>
<h3 id="3-5-6-部署项目的第三种方法（apache-tomcat-7-0-52-conf-Catalina-localhost-）"><a href="#3-5-6-部署项目的第三种方法（apache-tomcat-7-0-52-conf-Catalina-localhost-）" class="headerlink" title="3.5.6 部署项目的第三种方法（apache-tomcat-7.0.52\conf\Catalina\localhost ）"></a>3.5.6 部署项目的第三种方法（apache-tomcat-7.0.52\conf\Catalina\localhost ）</h3><p>①、进入到 apache-tomcat-7.0.52\conf\Catalina\localhost 目录，新建一个 项目名.xml 文件<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Tomcat优化/7.png" alt="7"><br>②、在 那个新建的 xml 文件中，增加下面配置语句（和上面的是一样的,但是不需要 path 配置，加上也没什么用）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span>  <span class="attr">docBase</span>=<span class="string">"D:/WebProject"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Tomcat优化/8.png" alt="8"><br>③、在浏览器输入路径：localhost:8080/xml文件名/访问的文件名<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Tomcat优化/9.png" alt="9"><br><strong>总结：</strong></p>
<p>①、第一种方法比较普通，但是我们需要将编译好的项目重新 copy 到 webapps 目录下，多出了两步操作</p>
<p>②、第二种方法直接在 server.xml 文件中配置，但是从 tomcat5.0版本开始后，server.xml 文件作为 tomcat 启动的主要配置文件，一旦 tomcat 启动后，便不会再读取这个文件，因此无法再 tomcat 服务启动后发布 web 项目</p>
<p>③、第三种方法是最好的，每个项目分开配置，tomcat 将以\conf\Catalina\localhost 目录下的 xml 文件的文件名作为 web 应用的上下文路径，而不再理会 <context>中配置的 path 路径，因此在配置的时候，可以不写 path。</context></p>
<p>通常我们使用第三种方法</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql优化</title>
    <url>/2019/04/25/mysql%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-缓存优化之QueryCache"><a href="#1-缓存优化之QueryCache" class="headerlink" title="1 缓存优化之QueryCache"></a>1 缓存优化之QueryCache</h1><a id="more"></a>
<p>从 MySQL4开始，出现了<code>QueryCache</code>查询缓存，如果使用了<code>QueryCache</code>，当查询接收到一个和之前同样的查询，服务器将会从查询缓存种检索结果，而不是再次分析和执行上次的查询。这样就大大提高了性能，节省时间，非常有用。</p>
<p>打开查询缓存，是通过几个步骤来设置的，例如：虽然你设置Mysql允许查询缓存，但是如果你设置的查询缓存大小为了<code>0</code>，这和没有允许没什么区别。所以必须是几个步骤的设置才能真正打开查询缓存这个功能。</p>
<h2 id="1-1-查询开启状态"><a href="#1-1-查询开启状态" class="headerlink" title="1.1  查询开启状态"></a>1.1  查询开启状态</h2><p> 一般，我们会把 <code>query_cache_type</code> 设置为 <code>ON</code>,默认情况下应该是<code>ON</code>(其实5.6默认是OFF)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@query_cache_type;              # 查询开启状态</span><br></pre></td></tr></table></figure>
<p> +——————–+<br>| @@query_cache_type |<br>+——————–+<br>| ON |<br>+——————–+<br>这样 当我们执行 <code>select id,name from tableName;</code> 这样就会用到查询缓存。在 <code>query_cache_type</code> 打开的情况下，如果你不想使用缓存，需要指明<code>select sql_no_cache id,name from tableName;</code>当然也可以禁用查询缓存：<code>mysql&gt; set session uery_cache_type=off;</code><br>这里我们不讨论这个，我们演示常用的设置。</p>
<div class="note success"><p><strong>介绍</strong><br> <code>query_cache_size</code>: 主要用来缓存MySQL中的<code>ResultSet</code>，也就是一条SQL语句执行的结果集，所以仅仅只能针对<code>select语句</code>。当我们打开了 Query Cache功能，MySQL在接受到一条select语句的请求后，如果该语句满足<code>Query Cache</code>的要求(未显式说明不允许使用<code>Query Cache</code>，或者已经显式申明需要使用<code>Query Cache</code>)，MySQL会直接根据预先设定好的HASH算法将接受到的select语句以字符串方式进行hash，然后到Query Cache中直接查找是否已经缓存。也就是说，如果已经在缓存中，该select请求就会直接将数据返回，从而省略了后面所有的步骤(如SQL语句的解析，优化器优化以及向存储引擎请求数据等)，极大的提高性能。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。</p>
<p>当然，<code>Query Cache</code>也有一个致命的<strong>缺陷</strong>，那就是当某个表的数据有任何任何变化，都会导致所有引用了该表的select语句在<code>Query Cache</code>中的缓存<strong>数据失效</strong>。所以，当我们的数据变化非常频繁的情况下，使用Query Cache可能会得不偿失</p>
<p>   <code>Query Cache</code>的使用需要多个参数配合，其中最为关键的是<code>query_cache_size</code>和<code>query_cache_type</code>，前者设置用于<strong>缓存 ResultSet的内存大小</strong>，后者设置<strong>在何场景下使用<code>Query Cache</code></strong>。在以往的经验来看，如果不是用来缓存基本不变的数据的MySQL数据库，<code>query_cache_size</code>一般<code>256MB</code>是一个比较合适的大小。当然，这可以通过计算<code>Query Cache的命中率(Qcache_hits/(Qcache_hits+Qcache_inserts)*100</code>))来进行调整.</p>
<p>   <code>query_cache_type</code>可以设置为<strong>0</strong>(OFF)，<strong>1</strong>(ON)或者<strong>2</strong>(DEMOND)，分别表示完全不使用query cache，除显式要求不使用query cache(使用sql_no_cache)之外的所有的select都使用query cache，只有显示要求才使用query cache(使用sql_cache)。</p>
<p>   如果<code>Qcache_lowmem_prunes</code>的值非常大，则表明经常出现缓冲. 如果<code>Qcache_hits</code>的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；</p>
<p>根据命中率<code>(Qcache_hits/(Qcache_hits+Qcache_inserts)*100))</code>进行调整，一般不建议太大，256MB可能已经差不多了，大型的配置型静态数据可适当调大.</p>
<p>可以通过命令：<code>show status like &#39;Qcache_%&#39;;</code>查看目前系统<code>Query catch</code>使用大小</p>
<p>| Qcache_hits             | 1892463  |</p>
<p>| Qcache_inserts          | 35627  </p>
<p>命中率<code>98.17%=1892463/(1892463 +35627 )*100</code></p></div>
<h2 id="1-2-系统变量-have-query-cache-设置查询缓存是否可用"><a href="#1-2-系统变量-have-query-cache-设置查询缓存是否可用" class="headerlink" title="1.2 系统变量 have_query_cache 设置查询缓存是否可用"></a>1.2 系统变量 have_query_cache 设置查询缓存是否可用</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'have_query_cache';</span><br></pre></td></tr></table></figure>
<p>+——————+——-+<br>| Variable_name | Value |<br>+——————+——-+<br>| have_query_cache | YES |<br>+——————+——-+<br>上面的显示，表示设置查询缓存是可用的。</p>
<h2 id="1-3-系统变量-query-cache-size"><a href="#1-3-系统变量-query-cache-size" class="headerlink" title="1.3 系统变量 query_cache_size"></a>1.3 系统变量 query_cache_size</h2><p>表示查询缓存大小，也就是分配内存大小给查询缓存，如果你分配大小为0，<br>那么 第一步 和 第二步 起不到作用，还是没有任何效果。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@global.query_cache_size;</span><br></pre></td></tr></table></figure>
<p>+—————————+<br>| @@global.query_cache_size |<br>+—————————+<br>| 16777216 |<br>+—————————+<br>上面是 mysql6.0设置默认的，之前的版本好像默认是0的，那么就要自己设置下。<br>设置<code>set @@global.query_cache_size=1000000;</code> 这里是设置1M左右，900多K。<br>再次查看下 <code>select @@global.query_cache_size;</code><br>+—————————+<br>| @@global.query_cache_size |<br>+—————————+<br>| 999424 |<br>+—————————+<br>显示我们设置新的大小，表示设置成功。</p>
<h2 id="1-4-query-cache-limit-控制缓存查询结果的最大值"><a href="#1-4-query-cache-limit-控制缓存查询结果的最大值" class="headerlink" title="1.4 query_cache_limit 控制缓存查询结果的最大值"></a>1.4 query_cache_limit 控制缓存查询结果的最大值</h2><p>例如： 如果查询结果很大， 也缓存？？？？这个明显是不可能的。<br>MySql 可以设置一个最大的缓存值，当你查询缓存数结果数据超过这个值就不会<br>进行缓存。缺省为1M，也就是超过了1M查询结果就不会缓存。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@global.query_cache_limit;</span><br></pre></td></tr></table></figure>
<p>+—————————-+<br>| @@global.query_cache_limit |<br>+—————————-+<br>| 1048576 |<br>+—————————-+<br>这个是默认的数值，如果需要修改，就像设置缓存大小一样设置，使用set重新指定大小。<br>好了，通过4个步骤就可以 打开了查询缓存，具体值的大小和查询的方式 这个因不同的情况来指定了。</p>
<h2 id="1-5-缓存合理性，优化"><a href="#1-5-缓存合理性，优化" class="headerlink" title="1.5 缓存合理性，优化"></a>1.5 缓存合理性，优化</h2><h3 id="1-5-1-query-cache-size-优化"><a href="#1-5-1-query-cache-size-优化" class="headerlink" title="1.5.1 query_cache_size 优化"></a>1.5.1 query_cache_size 优化</h3><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/mysql优化/1571821623699.png" alt="图1"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/mysql优化/1571821630640.png" alt="图2"><br>通过调节以下几个参数可以知道query_cache_size设置得是否合理</p>
<p><strong>Qcache_inserts<br>Qcache_hits<br>Qcache_lowmem_prunes<br>Qcache_free_blocks</strong></p>
<p>如果<code>Qcache_lowmem_prunes</code> 的值非常大，则表明经常出现缓存不够的情况，如果<code>Qcache_hits</code>的值非常大，则表明查询缓存冲使用非常频繁，如果该值较小反而影响效率，那么可以考虑不用查询缓存；</p>
<p><code>Qcache_free_blocks</code>   值非常大，则表明缓存区中的碎片很多，可能需要需找合适的机会进行整理</p>
<p><code>Qcache_hits</code>        表示多少次命中，通过这个参数我们可以查看到 <code>Query Cache</code>的基本效果；</p>
<p><code>Qcache_inserts</code>    表示多少次未命中然后插入，通过<code>Qcache_hits</code> 和 <code>Qcache_inserts</code> 两个参数可以算出<code>Query Cache的命中率</code></p>
<p><code>Query Cache命中率 = Qcache_hits / (Qcache_hits + Qcache_inserts)</code> </p>
<p><code>Qcache_lowmem_prunes</code>   表示多少条Query 因为内存不足而被清除出<code>Query Cache</code>，通过<code>Qcache_lowmem_prunes</code>和<code>Qcache_free_memory</code>相互结合，能够更清楚地了解到系统中<code>Query Cache</code>的内存大小是否真的足够，是否频繁出现因为内存不足而有Query被换出的情况</p>
<h3 id="1-5-2-query-cache-min-res-unit-优化"><a href="#1-5-2-query-cache-min-res-unit-优化" class="headerlink" title="1.5.2 query_cache_min_res_unit 优化"></a>1.5.2 query_cache_min_res_unit 优化</h3><p>开启了数据库缓存后用 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">show status like 'qcache%';     ##  查看缓存`query_cache_min_res_unit` 默认是4k</span><br></pre></td></tr></table></figure>
<p>发现  <code>Qcache_free_blocks</code>  数目大 说明可能有碎片。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/mysql优化/1571821639211.png" alt="图3"><br><code>Qcache_free_blocks</code>:  表示查询缓存中目前还有多少剩余的blocks，如果该值显示较大，则说明查询缓存中的内存碎片过多了，可能在一定的时间进行整理。    <strong>减少碎片</strong>： 合适的<code>query_cache_min_res_unit</code>可以减少碎片，这个参数最合适的大小和应用程序查询结果的平均大小直接相关.</p>
<p>可以通过内存实际消耗<code>（ query_cache_size - Qcache_free_memory ）除以 Qcache_queries_in_cache</code> 计算平均缓存大小。</p>
<p>其中 <code>Qcache_free_memory</code> 和 <code>Qcache_queries_in_cache</code>  在上面已将有了 分别是<code>119423544</code>和 <code>13205</code><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/mysql优化/1571821645930.png" alt="图4"><br><code>query_cache_size</code> 是自己设置的可以通过 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE '%query_cache%';    # 查看</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt="5"><br><code>（ query_cache_size - Qcache_free_memory ）除以 Qcache_queries_in_cache</code><br>就是 <code>（134217728 - 119423544）/13205=1120.34</code><br>所以在设置的的时候 <code>query_cache_min_res_unit</code>可以设置成<code>2k</code><br>修改<code>my.cnf</code>,配置如下：</p>
<p><strong>query_cache_min_res_unit= 2k</strong></p>
<p>然后在查看他的<code>Qcache_free_blocks</code>运行一段时间有没有减少</p>
<h1 id="2-缓存优化之-Innodb"><a href="#2-缓存优化之-Innodb" class="headerlink" title="2 缓存优化之 Innodb"></a>2 缓存优化之 Innodb</h1><p>当使用innoDB存储引擎的时候，<code>innodb_buffer_pool_size</code>参数可能是影响性能的最为关键的一个参数了，用来设置用于缓存innoDB索引及数据块的内存区域大小，更像是Oracle数据库的<code>db_cache_size</code>。简单来说，当操作一个InnoDB表的时候，返回的所有数据或者查询过程中用到的任何一个索引块，都会在这个内存区域中区查询一遍。</p>
<p>和<code>key_buffer_size</code> 对于MyISAM引擎一样，<code>innodb_buffer_pool_size</code>设置了InnoDB存储引擎需求最大的一块内存区域的大小，直接关系到InnoDB存储引擎的性能，所有如果有足够的内存，尽可将该参数设置到足够大，将尽可能多的InnoDB的索引及数据都放入到该缓存区域中，直至全部。</p>
<p>可以通过<code>(innodb_buffer_pool_read_requests - innodb_buffer_pool_reads) / innodb_buffer_pool_read_requests * 100%</code>计算缓存命中率，并根据命中率来调整<code>innodb_buffer_pool_size</code>参数大小进行优化。<br><img src="6.png" alt="6"><br><img src="8.png" alt="8"></p>
<h1 id="3-缓存优化之table-cache"><a href="#3-缓存优化之table-cache" class="headerlink" title="3 缓存优化之table_cache"></a>3 缓存优化之table_cache</h1><p>另外，<code>table_cache</code>是一个非常重要的MySQL性能参数，主要用于设置<code>table高速缓存的**数量**</code>，由于每个用户端链接都会至少访问一个表，因此该参数是与<code>max_connections</code>有关。当某一连接访问一个表时，MySQL会检查当前已缓存表的数量。如果该表已经在缓存中打开，则会直接访问缓存中的表以加快查询速度；</p>
<p>如果该表未被缓存，则会将当前的表添加进缓存并进行查询。在执行缓存操作前，<code>table_cache</code>参数用于限制缓存表的最大数目；如果当前已经缓存的表未达到<code>table_cache</code>数目，则会将新表添加进去，若已经达到此值，MySQL将根据缓存表的最后查询时间，查询率，等规则释放之前的缓存。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'open%_tables'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="7.png" alt="7"><br>来查看这两个参数的值。其中<code>Open_tables</code>是当前正在打开表的数量，<code>Opened_tables</code>是所有已经打开表的数量。</p>
<h1 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h1><p><a href="https://blog.csdn.net/qq_40460909/article/details/81236624" target="_blank" rel="noopener">https://blog.csdn.net/qq_40460909/article/details/81236624</a><br><a href="https://blog.csdn.net/z13615480737/article/details/82621116" target="_blank" rel="noopener">https://blog.csdn.net/z13615480737/article/details/82621116</a><br><a href="https://www.cnblogs.com/onlysun/p/4513029.html" target="_blank" rel="noopener">https://www.cnblogs.com/onlysun/p/4513029.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql部署</title>
    <url>/2019/03/01/postgresql%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="1-Postgres部署手册"><a href="#1-Postgres部署手册" class="headerlink" title="1 Postgres部署手册"></a>1 Postgres部署手册</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><a id="more"></a>
<h3 id="1-1-1安装软件库"><a href="#1-1-1安装软件库" class="headerlink" title="1.1.1安装软件库"></a>1.1.1安装软件库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm</span><br><span class="line">yum install epel-release               <span class="comment">#安装postgis时提示部分依赖无法安装</span></span><br></pre></td></tr></table></figure>
<h3 id="1-1-2-安装软件"><a href="#1-1-2-安装软件" class="headerlink" title="1.1.2 安装软件"></a>1.1.2 安装软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install postgresql10 &amp;&amp; yum install postgresql10-server</span><br></pre></td></tr></table></figure>
<h3 id="1-1-3-初始化及开机启动"><a href="#1-1-3-初始化及开机启动" class="headerlink" title="1.1.3 初始化及开机启动"></a>1.1.3 初始化及开机启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/pgsql-10/bin/postgresql-10-setup initdb</span><br><span class="line">systemctl <span class="built_in">enable</span> postgresql-10</span><br><span class="line">systemctl start postgresql-10</span><br></pre></td></tr></table></figure>
<h3 id="1-1-4-设置postgres密码"><a href="#1-1-4-设置postgres密码" class="headerlink" title="1.1.4 设置postgres密码"></a>1.1.4 设置postgres密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sudo –u postgres psql</span><br><span class="line">postgres=<span class="comment"># ALTER USER postgres WITH PASSWORD 'zhjx123'</span></span><br></pre></td></tr></table></figure>
<h3 id="1-1-5-开启远程访问"><a href="#1-1-5-开启远程访问" class="headerlink" title="1.1.5 开启远程访问"></a>1.1.5 开启远程访问</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /var/lib/pgsql/10/data/postgresql.conf </span><br><span class="line"><span class="comment"># 修改#listen_addresses = 'localhost' 为 listen_addresses='*' 当然，此处‘*’也可以改为任何你想开放的服务器IP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim /var/lib/pgsql/10/data/pg_hba.conf</span><br><span class="line">   修改如下内容，信任指定服务器连接</span><br><span class="line"><span class="comment"># IPv4 local connections:</span></span><br><span class="line">host    all            all      192.168.0.0/23（需要连接的服务器IP）  md5</span><br></pre></td></tr></table></figure>
<h2 id="1-2-安装postgis插件（补充）"><a href="#1-2-安装postgis插件（补充）" class="headerlink" title="1.2 安装postgis插件（补充）"></a>1.2 安装postgis插件（补充）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install postgis25_10</span><br></pre></td></tr></table></figure>
<h1 id="2-greenplum部署手册"><a href="#2-greenplum部署手册" class="headerlink" title="2    greenplum部署手册"></a>2    greenplum部署手册</h1><h2 id="2-1修改Linux内核参数"><a href="#2-1修改Linux内核参数" class="headerlink" title="2.1修改Linux内核参数"></a>2.1修改Linux内核参数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/sysctl.conf</span></span><br><span class="line"></span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 1</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.sem = 250 64000 100 512</span><br><span class="line">kernel.shmmax = 500000000</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.shmall = 4000000000</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class="line">net.core.netdev_max_backlog = 10000</span><br><span class="line">vm.overcommit_memory = 2</span><br><span class="line">net.ipv4.conf.all.arp_filter = 1</span><br></pre></td></tr></table></figure>
<h2 id="2-2-修改Linux最大限制"><a href="#2-2-修改Linux最大限制" class="headerlink" title="2.2 修改Linux最大限制"></a>2.2 修改Linux最大限制</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/security/limits.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#greenplum configs</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 131072 </span><br><span class="line">* hard nproc 131072</span><br></pre></td></tr></table></figure>
<h2 id="2-3-关闭selinux"><a href="#2-3-关闭selinux" class="headerlink" title="2.3 关闭selinux"></a>2.3 关闭selinux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/selinux/conf</span></span><br><span class="line">修改如下：</span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># setenforce 0   # 临时关闭，重启恢复。</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-greenplum安装"><a href="#2-4-greenplum安装" class="headerlink" title="2.4 greenplum安装"></a>2.4 greenplum安装</h2><h3 id="2-4-1-创建数据库用户"><a href="#2-4-1-创建数据库用户" class="headerlink" title="2.4.1 创建数据库用户"></a>2.4.1 创建数据库用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> groupadd -g 530 gpadmin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> useradd -g 530 -u530 -m -d /home/gpadmin -s /bin/bash gpadmin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> passwd gpadmin</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-2-修改hosts"><a href="#2-4-2-修改hosts" class="headerlink" title="2.4.2 修改hosts"></a>2.4.2 修改hosts</h3><p>设置集群解析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/hosts</span></span><br><span class="line">192.168.0.174 mdw sdw</span><br></pre></td></tr></table></figure>
<h3 id="2-4-3-下载安装包"><a href="#2-4-3-下载安装包" class="headerlink" title="2.4.3 下载安装包"></a>2.4.3 下载安装包</h3><p>官网<a href="https://network.pivotal.io/products/pivotal-gpdb#/releases/1683" target="_blank" rel="noopener">https://network.pivotal.io/products/pivotal-gpdb#/releases/1683</a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/postgresql部署/1571821790562.png" alt="图1"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/postgresql部署/1571821798083.png" alt="图2"></p>
<h3 id="2-4-3-赋权及安装"><a href="#2-4-3-赋权及安装" class="headerlink" title="2.4.3 赋权及安装"></a>2.4.3 赋权及安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> unzip greenplum-db-5.9.0-rhel7-x86_64.zip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod +x greenplum-db-5.9.0-rhel7-x86_64.bin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./ greenplum-db-5.9.0-rhel7-x86_64.bin</span></span><br><span class="line">一路yes,安装完成</span><br></pre></td></tr></table></figure>
<p>默认目录/usr/loca/greenplum-db</p>
<h3 id="2-4-4-设置gpadmin用户环境"><a href="#2-4-4-设置gpadmin用户环境" class="headerlink" title="2.4.4 设置gpadmin用户环境"></a>2.4.4 设置gpadmin用户环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /home/gpadmin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi .bash_profile</span></span><br><span class="line"></span><br><span class="line">.bashrc和.bash_profile最后都添加下面两行</span><br><span class="line">source /usr/local/greenplum-db/greenplum_path.sh</span><br><span class="line">export MASTER_DATA_DIRECTORY=/home/gpadmin/gpdata/gpmaster/gpseg-1</span><br><span class="line">export PGPORT=5433   # 应为本机有postsql，端口占用，所以使用5433端口</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> PGDATABASE=testDB</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-4-准备节点服务器信息文件"><a href="#2-4-4-准备节点服务器信息文件" class="headerlink" title="2.4.4 准备节点服务器信息文件"></a>2.4.4 准备节点服务器信息文件</h3><p>后面的批量安装会用到这两个文件，如果all_host和all_segment内容一样，可以只创建一个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mdw ~]# cd /home/gp</span><br><span class="line">[root@mdw~ ]# touch all_host</span><br><span class="line">[root@mdw ~]# touch all_segment</span><br><span class="line">all_host和all_segment内容：</span><br><span class="line">mdw</span><br><span class="line">sdw</span><br></pre></td></tr></table></figure>
<h3 id="2-4-5-建立节点服务器间的信任"><a href="#2-4-5-建立节点服务器间的信任" class="headerlink" title="2.4.5 建立节点服务器间的信任"></a>2.4.5 建立节点服务器间的信任</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpssh-exkeys -f /opt/gpinit/all_host</span><br></pre></td></tr></table></figure>
<h3 id="2-4-6-批量安装"><a href="#2-4-6-批量安装" class="headerlink" title="2.4.6 批量安装"></a>2.4.6 批量安装</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">gpseginstall -f /home/gpadmin/all_host -u gpadmin -<span class="selector-tag">p</span> gpadmin</span><br></pre></td></tr></table></figure>
<h3 id="2-4-7-检查批量安装情况"><a href="#2-4-7-检查批量安装情况" class="headerlink" title="2.4.7 检查批量安装情况"></a>2.4.7 检查批量安装情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpssh -f /usr/<span class="built_in">local</span>/greenplum-db/all_host -e ls -l <span class="variable">$GPHOME</span> <span class="comment">#检查安装情况</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-8-创建存储目录"><a href="#2-4-8-创建存储目录" class="headerlink" title="2.4.8 创建存储目录"></a>2.4.8 创建存储目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[gpadmin@mdw conf]$ gpssh -f /home/gpadmin/all_host</span><br><span class="line">=&gt; mkdir gpdata</span><br><span class="line">[sdw3]</span><br><span class="line">[ mdw]</span><br><span class="line">[sdw2]</span><br><span class="line">[sdw1]</span><br><span class="line">=&gt; cd gpdata</span><br><span class="line">[sdw3]</span><br><span class="line">[ mdw]</span><br><span class="line">[sdw2]</span><br><span class="line">[sdw1]</span><br><span class="line">=&gt; mkdir gpmaster gpdatap1 gpdatap2 gpdatam1 gpdatam2</span><br><span class="line">[sdw3]</span><br><span class="line">[ mdw]</span><br><span class="line">[sdw2]</span><br><span class="line">[sdw1]</span><br><span class="line">=&gt; ll</span><br><span class="line">[sdw3] 总用量 20</span><br><span class="line">[sdw3] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatam1</span><br><span class="line">[sdw3] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatam2</span><br><span class="line">[sdw3] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatap1</span><br><span class="line">[sdw3] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatap2</span><br><span class="line">[sdw3] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpmaster</span><br><span class="line">[ mdw] 总用量 20</span><br><span class="line">[ mdw] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatam1</span><br><span class="line">[ mdw] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatam2</span><br><span class="line">[ mdw] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatap1</span><br><span class="line">[ mdw] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatap2</span><br><span class="line">[ mdw] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpmaster</span><br><span class="line">[sdw2] 总用量 20</span><br><span class="line">[sdw2] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatam1</span><br><span class="line">[sdw2] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatam2</span><br><span class="line">[sdw2] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatap1</span><br><span class="line">[sdw2] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatap2</span><br><span class="line">[sdw2] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpmaster</span><br><span class="line">[sdw1] 总用量 20</span><br><span class="line">[sdw1] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatam1</span><br><span class="line">[sdw1] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatam2</span><br><span class="line">[sdw1] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatap1</span><br><span class="line">[sdw1] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpdatap2</span><br><span class="line">[sdw1] drwxrwxr-x 2 gpadmin gpadmin 4096 7月  18 19:46 gpmaster</span><br><span class="line">=&gt; exit</span><br></pre></td></tr></table></figure>
<h3 id="2-4-9-配置-bash-profile环境变量"><a href="#2-4-9-配置-bash-profile环境变量" class="headerlink" title="2.4.9 配置.bash_profile环境变量"></a>2.4.9 配置.bash_profile环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[gpadmin@mdw ~]$ vim /home/gpadmin/.bash_profile</span><br><span class="line"></span><br><span class="line">source /opt/greenplum/greenplum-db/greenplum_path.sh</span><br><span class="line">export MASTER_DATA_DIRECTORY=/home/gpadmin/gpdata/gpmaster/gpseg-1</span><br><span class="line">export PGPORT=5433</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> PGDATABASE=testDB</span></span><br><span class="line">[gpadmin@mdw ~]$ source .bash_profile(让环境变量生效)</span><br></pre></td></tr></table></figure>
<h3 id="2-4-10-创建初始化配置文件"><a href="#2-4-10-创建初始化配置文件" class="headerlink" title="2.4.10 创建初始化配置文件"></a>2.4.10 创建初始化配置文件</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">[gpadmin@mdw ~]$ vim /home/gpadmin/gpinitsystem_config</span><br><span class="line">ARRAY_NAME=<span class="string">"Greenplum"</span></span><br><span class="line">SEG_PREFIX=gpseg</span><br><span class="line">PORT_BASE=33000</span><br><span class="line">declare -a DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatap1  /home/gpadmin/gpdata/gpdatap2)</span><br><span class="line">MASTER_HOSTNAME=mdw</span><br><span class="line">MASTER_DIRECTORY=/home/gpadmin/gpdata/gpmaster</span><br><span class="line">MASTER_PORT=5433</span><br><span class="line">TRUSTED_SHELL=/usr/bin/ssh</span><br><span class="line">MIRROR_PORT_BASE=43000</span><br><span class="line">REPLICATION_PORT_BASE=34000</span><br><span class="line">MIRROR_REPLICATION_PORT_BASE=44000</span><br><span class="line">declare -a MIRROR_DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatam1 /home/gpadmin/gpdata/gpdatam2)</span><br><span class="line">MACHINE_LIST_FILE=/home/gpadmin/seg_hosts</span><br></pre></td></tr></table></figure>
<h3 id="2-4-11-初始化数据库"><a href="#2-4-11-初始化数据库" class="headerlink" title="2.4.11 初始化数据库"></a>2.4.11 初始化数据库</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[gpadmin<span class="variable">@mdw</span> ~]<span class="variable">$ </span>gpinitsystem -c /home/gpadmin/gpinitsystem_config -s mdw</span><br></pre></td></tr></table></figure>
<h3 id="2-4-12-启动-关闭-状态"><a href="#2-4-12-启动-关闭-状态" class="headerlink" title="2.4.12 启动/关闭/状态"></a>2.4.12 启动/关闭/状态</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Gpadmin用户执行命令gpstart<span class="regexp">/gpstop/</span>gpstate</span><br></pre></td></tr></table></figure>
<h1 id="3-安装postgis插件"><a href="#3-安装postgis插件" class="headerlink" title="3    安装postgis插件"></a>3    安装postgis插件</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">gppkg</span> <span class="selector-tag">-i</span> <span class="selector-tag">postgis-2</span><span class="selector-class">.1</span><span class="selector-class">.5</span>+<span class="selector-tag">pivotal</span><span class="selector-class">.1-gp5-rhel7-x86_64</span><span class="selector-class">.gppkg</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下run包制作</title>
    <url>/2019/03/28/Linux%E4%B8%8Brun%E5%8C%85%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-Run软件包介绍"><a href="#1-Run软件包介绍" class="headerlink" title="1 Run软件包介绍"></a>1 Run软件包介绍</h1><p>run 程序安装包实质上是一个安装脚本加要安装的程序，如下所示：</p>
<p>|—————–——|<br>|                        |<br>|     安装脚本       |<br>|                        |<br>|—————–——|<br>|                        |<br>|      程序            |<br>|                        |<br>|—————–——|</p>
<p>这样整个 run 安装包结构就一目了然了，实际上因为实际需要结构多少有点变动但这个无关紧要，只需要明白原理就行了。<br><strong>安装文件的优点：</strong></p>
<p>（1）只有一个包文件；</p>
<p>（2）可以直接运行在 Linux上，因为它是 sh（它的前半部分是sh）；</p>
<p>（3）在 sh 中可以包含需要用户接收的协议信息，而且提示用户接收，如果用户不接收，安装退出。</p>
<h1 id="2-制作run安装包"><a href="#2-制作run安装包" class="headerlink" title="2 制作run安装包"></a>2 制作run安装包</h1><h2 id="2-1-压缩环境包"><a href="#2-1-压缩环境包" class="headerlink" title="2.1 压缩环境包"></a>2.1 压缩环境包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zcvf app.tar.gz app/</span><br></pre></td></tr></table></figure>
<h2 id="2-2-制作安装脚本"><a href="#2-2-制作安装脚本" class="headerlink" title="2.2 制作安装脚本"></a>2.2 制作安装脚本</h2><p>install.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">lines=13                <span class="comment">#这个值是指这个脚本的行数加 1，这个脚本共有 12 行</span></span><br><span class="line">tail -n +<span class="variable">$lines</span> <span class="variable">$0</span> &gt; /tmp/app.tar.gz       </span><br><span class="line"><span class="comment"># $0 表示脚本本身，这个命令用来把从 $lines 开始的内容写入一个 /tmp 目录的 scan.tar.gz 文件里。</span></span><br><span class="line">tar zxvf /tmp/app.tar.gz</span><br><span class="line">cp -pR app /opt/</span><br><span class="line">rm -rf app/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"********************************************************************************************************************"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"*****Install Success  **********************************************************************************************"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"*****Installation path: /opt/app  **********************************************************************************"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"*****Explain: Modify the start.sh configuration parameter, and then execute the start.sh script startup program.****"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"********************************************************************************************************************"</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<h1 id="3-生成run文件"><a href="#3-生成run文件" class="headerlink" title="3 生成run文件"></a>3 生成run文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat install.sh app.tar.gz &gt; app.run</span><br></pre></td></tr></table></figure>
<p>这样就得到了 app.run 文件，它的结构如下：<br>|—————–———| 第1行<br>|                            |<br>|         install.sh         |<br>|                              | 第12行<br>|—————–———|<br>|       app.tar.gz       | 第13行<br>|                               |<br>|—————–———| 结尾</p>
<p>可通过<code>vi/vim app.run</code> 查看脚本内容</p>
<p>在运行 apprun 时，运行到第 12 行的 exit 0 ，脚本就会自动退出了，不会去运行第 13 行以下的二进制数据（即 app.tar.gz 文件），这样 shell 就不会因为识别不了二进制数据而出错了。这里我们巧妙地使用了 tail 命令，把第 12 行以下的数据重新生成了一个app.tar.gz文件，然后再执行安装。运行超级简单，使用 sh app.run 或赋予可执行权限然后直接执行 ./app.run 就可以安装了。</p>
<p>run 安装包制作较小的程序包是很好的选择，但是它也有缺点，做逻辑比较复杂的安装包，写的安装脚本将会很麻烦，因此此时还是用其他的安装包更好。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>run</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftp示例1</title>
    <url>/2019/01/21/vsftp%E7%A4%BA%E4%BE%8B1/</url>
    <content><![CDATA[<h1 id="1-部署要求"><a href="#1-部署要求" class="headerlink" title="1 部署要求"></a>1 部署要求</h1><p>在<strong>阿里云</strong>服务器上部署FTP.<br>服务要求：FTP用户A、B可互相访问，A对B有写权限，B对A只有读权限。<br><a id="more"></a></p>
<h1 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2 步骤"></a>2 步骤</h1><h2 id="2-1-安装vsftpd"><a href="#2-1-安装vsftpd" class="headerlink" title="2.1 安装vsftpd"></a>2.1 安装vsftpd</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure>
<h2 id="2-2-修改配置文件"><a href="#2-2-修改配置文件" class="headerlink" title="2.2 修改配置文件"></a>2.2 修改配置文件</h2><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">vim </span>/<span class="string">etc/</span><span class="string">vsftpd/</span><span class="string">vsftpd.</span><span class="string">conf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">配</span>置如下：</span><br><span class="line"><span class="string">anonymous_enable=</span><span class="string">NO</span></span><br><span class="line"><span class="string">chroot_local_user=</span><span class="string">YES</span></span><br><span class="line"><span class="string">chroot_list_enable=</span><span class="string">NO</span></span><br><span class="line"><span class="string">chroot_list_file=</span>/<span class="string">etc/</span><span class="string">vsftpd/</span><span class="string">chroot_list</span></span><br><span class="line"><span class="string">local_root=</span>/<span class="string">home/</span><span class="string">vsftpd</span></span><br><span class="line"><span class="string">allow_writeable_chroot=</span><span class="string">YES</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pasv_enable=</span><span class="string">YES</span></span><br><span class="line"><span class="string">pasv_min_port=</span><span class="string">8022</span></span><br><span class="line"><span class="string">pasv_max_port=</span><span class="string">8030</span></span><br><span class="line"><span class="string">pasv_promiscuous=</span><span class="string">YES</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-创建FTP根目录"><a href="#2-3-创建FTP根目录" class="headerlink" title="2.3 创建FTP根目录"></a>2.3 创建FTP根目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/vsftpd</span><br></pre></td></tr></table></figure>
<h2 id="2-4-创建系统用户"><a href="#2-4-创建系统用户" class="headerlink" title="2.4 创建系统用户"></a>2.4 创建系统用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd ftpsg -d /home/vsftpd/ftpsg</span><br><span class="line">useradd ftpxc -d /home/vsftpd/ftpxc -g ftpsg</span><br></pre></td></tr></table></figure>
<div class="note danger"><p><strong>警告：</strong><br>1、创建用户必须赋予登陆权限，不可使用useradd vsftpd -d /home/vsftpd <strong>-s /bin/false</strong> 禁用登陆；<br>2、两个用户在一个用户组里面，后面分配权限更安全。</p></div>
<h2 id="2-5-修改目录权限"><a href="#2-5-修改目录权限" class="headerlink" title="2.5 修改目录权限"></a>2.5 修改目录权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 770 /home/ftpsg</span><br><span class="line">chmod 750 /home/ftpxc</span><br></pre></td></tr></table></figure>
<div class="note info"><p><strong>信息：</strong><br>通过设置目录权限，达到限制用户权限的目的。ftpxc用户可读写ftpsg目录，ftpsg用户可读不可写ftpxc目录，其他用户无法访问2个目录。<br>备注：同时设置r-x权限，才可以访问目录。</p></div>
<h1 id="3-FTP客户端访问"><a href="#3-FTP客户端访问" class="headerlink" title="3 FTP客户端访问"></a>3 FTP客户端访问</h1><p>使用FileZilla客户端访问FTP服务器，出现如下问题</p>
<blockquote>
<p>状态:    连接建立，等待欢迎消息…<br>状态:    已登录<br>状态:    读取目录列表…<br>状态:    服务器发回了不可路由的地址。使用服务器地址代替</p>
</blockquote>
<p>编辑-设置<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp示例1/1571821830525.png" alt="图1"><br><div class="note info"><p><strong>注释：</strong><br>因阿里云服务器事vps环境，访问FTP服务器，服务器返回的是内网地址，客户端无法连接；使用主动模式，可以直接通过互联网地址访问FTP。</p></div></p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4 参考资料"></a>4 参考资料</h1><p>重要!!!<br>讲解一个重要配置组合。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/vsftp示例1/1571821838717.png" alt="图2"><br><a href="https://www.cnblogs.com/ldl1137/p/7102694.html" target="_blank" rel="noopener">vsftp 实现不同用户不同权限配置</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql_Postgis解压版安装</title>
    <url>/2019/03/28/Postgresql-Postgis%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1．软件下载"><a href="#1．软件下载" class="headerlink" title="1．软件下载"></a>1．软件下载</h1><p>postgresql-9.6.1-1-windows-x64-binaries.zip</p>
<p><a href="https://www.postgresql.org/download/windows/" target="_blank" rel="noopener">https://www.postgresql.org/download/windows/</a></p>
<p>postgis-bundle-pg96-2.3.1x64.zip</p>
<p><a href="http://download.osgeo.org/postgis/windows/pg96/" target="_blank" rel="noopener">http://download.osgeo.org/postgis/windows/pg96/</a></p>
<h1 id="2-将postgresql-zip解压"><a href="#2-将postgresql-zip解压" class="headerlink" title="2.  将postgresql.zip解压"></a>2.  将postgresql.zip解压</h1><p>解压<code>postgresql-9.6.1-1-windows-x64-binaries.zip</code>到你想要的安装目录（<code>D:\GreenSoftware\PostgreSQL961</code>），主要最好不要有中文或者空格，</p>
<h1 id="3-创建数据存放目录"><a href="#3-创建数据存放目录" class="headerlink" title="3.  创建数据存放目录"></a>3.  创建数据存放目录</h1><p>D:\GreenSoftware\PostgreSQL961\data</p>
<h1 id="4-初始化数据库"><a href="#4-初始化数据库" class="headerlink" title="4.  初始化数据库"></a>4.  初始化数据库</h1><p>D:\GreenSoftware\PostgreSQL961\bin\ <code>initdb.exe -D D:\GreenSoftware\PostgreSQL961\data -E UTF8 --locale=Chinese</code></p>
<h1 id="5-启动数据库，有两种方式"><a href="#5-启动数据库，有两种方式" class="headerlink" title="5.  启动数据库，有两种方式"></a>5.  启动数据库，有两种方式</h1><h2 id="5-1-第一种方式：注册为windows服务方式"><a href="#5-1-第一种方式：注册为windows服务方式" class="headerlink" title="5.1  第一种方式：注册为windows服务方式"></a>5.1  第一种方式：注册为windows服务方式</h2><h3 id="5-1-1-注册服务"><a href="#5-1-1-注册服务" class="headerlink" title="5.1.1  注册服务"></a>5.1.1  注册服务</h3><p>D:\GreenSoftware\PostgreSQL961\bin\ <code>pg_ctl.exe register -D D:\GreenSoftware\PostgreSQL961\data -Npgsql</code><br><div class="note info"><p><strong>备注：</strong><br>-N表示windows服务名称为pgsql；</p></div></p>
<h3 id="5-1-2-启动服务"><a href="#5-1-2-启动服务" class="headerlink" title="5.1.2 启动服务"></a>5.1.2 启动服务</h3><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> pgsql</span><br></pre></td></tr></table></figure>
<p>如果你的安装没有错误，现在就应该可以起来了。</p>
<h3 id="5-1-3-关闭服务"><a href="#5-1-3-关闭服务" class="headerlink" title="5.1.3 关闭服务"></a>5.1.3 关闭服务</h3><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> stop pgsql</span><br></pre></td></tr></table></figure>
<h3 id="5-1-4-卸载服务"><a href="#5-1-4-卸载服务" class="headerlink" title="5.1.4 卸载服务"></a>5.1.4 卸载服务</h3><p>D:\GreenSoftware\PostgreSQL961\bin\ <code>pg_ctl.exe unregister -D D:\GreenSoftware\PostgreSQL961\data –Npgsql</code></p>
<h2 id="5-2-第二种方式：直接启动方式"><a href="#5-2-第二种方式：直接启动方式" class="headerlink" title="5.2 第二种方式：直接启动方式"></a>5.2 第二种方式：直接启动方式</h2><h3 id="5-2-1-启动"><a href="#5-2-1-启动" class="headerlink" title="5.2.1 启动"></a>5.2.1 启动</h3><p>D:\GreenSoftware\PostgreSQL961\bin\ <code>pg_ctl.exe start -w -D D:\GreenSoftware\PostgreSQL961\data</code></p>
<h3 id="5-2-2-关闭"><a href="#5-2-2-关闭" class="headerlink" title="5.2.2 关闭"></a>5.2.2 关闭</h3><p>D:\GreenSoftware\PostgreSQL961\bin\ <code>pg_ctl.exe stop -W -D D:\GreenSoftware\PostgreSQL961\data</code></p>
<h1 id="6-创建数据库"><a href="#6-创建数据库" class="headerlink" title="6 创建数据库"></a>6 创建数据库</h1><p>D:\GreenSoftware\PostgreSQL961\bin\ <code>createdb.exe -E UTF8 geodb</code></p>
<p>D:\GreenSoftware\PostgreSQL961\bin\ <code>dropdb.exe geodb</code></p>
<h1 id="7-创建用户"><a href="#7-创建用户" class="headerlink" title="7 创建用户"></a>7 创建用户</h1><p>D:\GreenSoftware\PostgreSQL961\bin\ <code>createuser.exe -s -r postgres</code></p>
<p>会有是否创建superuser的选项，创建一个名为postgres的超级用户；</p>
<blockquote>
<p><strong>使用方法:</strong></p>
<p><code>createuser [选项]... [用户名]</code></p>
<p>选项:</p>
<p>-c, –connection-limit=N 角色的连接限制(缺省: 没有限制)</p>
<p>-d, –createdb 此角色可以创建新数据库</p>
<p>-D, –no-createdb 此角色不可以创建新数据库</p>
<p>-e, –echo 显示发送到服务端的命令</p>
<p>-E, –encrypted 口令加密存储</p>
<p>-i, –inherit 角色能够继承它所属角色的权限</p>
<p>（这是缺省情况)</p>
<p>-I, –no-inherit 角色不继承权限</p>
<p>-l, –login 角色能够登录(这是缺省情况)</p>
<p>-L, –no-login 角色不能登录</p>
<p>-N, –unencrypted 口令不加密存储</p>
<p>-P, –pwprompt 给新角色指定口令</p>
<p>-r, –createrole 这个角色可以创建新的角色</p>
<p>-R, –no-createrole 这个角色没有创建其它角色的权限</p>
<p>-s, –superuser 角色将是超级用户</p>
<p>-S, –no-superuser 角色不能是超级用户</p>
<p>–help 显示此帮助信息, 然后退出</p>
<p>–version 输出版本信息, 然后退出</p>
<p>联接选项:</p>
<p>-h, –host=HOSTNAM 数据库服务器所在机器的主机名或套接字目录</p>
<p>-p, –port=PORT 数据库服务器端口号</p>
<p>-U, –username=USERNAME 联接用户 (不是要创建的用户名)</p>
<p>-w, -no-password 永远不提示输入口令</p>
<p>-W, –password 强制提示输入口令</p>
<p>如果 -d, -D, -r, -R, -s, -S 和 ROLENAME 一个都没有指定,将使用交互式提示</p>
<p>你.</p>
<p>臭虫报告至 <a href="mailto:&#112;&#103;&#x73;&#113;&#x6c;&#x2d;&#98;&#117;&#x67;&#x73;&#x40;&#x70;&#111;&#x73;&#x74;&#x67;&#114;&#101;&#115;&#113;&#108;&#46;&#111;&#x72;&#x67;" target="_blank" rel="noopener">&#112;&#103;&#x73;&#113;&#x6c;&#x2d;&#98;&#117;&#x67;&#x73;&#x40;&#x70;&#111;&#x73;&#x74;&#x67;&#114;&#101;&#115;&#113;&#108;&#46;&#111;&#x72;&#x67;</a>.</p>
<p>例子1:&gt;createuser -P -d -U postgres dan</p>
<p>解释:-P(大写)说的是为新用户指定口令;-d说的该角色是否可以创建数据库;-U(大写)当前的操作是哪个用户发出的;最后的dan是新用户的名字。</p>
<p>补充：</p>
<p>查看系统中的所用用户：select * from pg_user;</p>
<p>删除一个用户：drop user dan;其中dan为用户名</p>
<p>D:\GreenSoftware\PostgreSQL961\bin\dropuser.exe postgres</p>
</blockquote>
<h2 id="7-1-修改用户密码"><a href="#7-1-修改用户密码" class="headerlink" title="7.1 修改用户密码"></a>7.1 修改用户密码</h2><h3 id="7-1-1第一种方式：应用psql命令"><a href="#7-1-1第一种方式：应用psql命令" class="headerlink" title="7.1.1第一种方式：应用psql命令"></a>7.1.1第一种方式：应用psql命令</h3><p>D:\GreenSoftware\PostgreSQL961\bin\ <code>psql.exe postgres</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">postgres=# alter user postgres with password 'xxx';</span><br><span class="line"></span><br><span class="line">postgres-# \q</span><br></pre></td></tr></table></figure>
<h3 id="7-1-2第二种方式：为使用pgAdmin修改"><a href="#7-1-2第二种方式：为使用pgAdmin修改" class="headerlink" title="7.1.2第二种方式：为使用pgAdmin修改"></a>7.1.2第二种方式：为使用pgAdmin修改</h3><p>用pgAdmin连接到服务器，可以直接修改密码；</p>
<h1 id="8-将postgis-bundle-pg96-2-3-1x64-zip解压"><a href="#8-将postgis-bundle-pg96-2-3-1x64-zip解压" class="headerlink" title="8 将postgis-bundle-pg96-2.3.1x64.zip解压"></a>8 将postgis-bundle-pg96-2.3.1x64.zip解压</h1><p>解压<code>postgis-bundle-pg96-2.3.1x64.zip</code>到没有中文或者空格的目录。</p>
<h1 id="9-修改makepostgisdb-using-extensions-bat文件"><a href="#9-修改makepostgisdb-using-extensions-bat文件" class="headerlink" title="9 修改makepostgisdb_using_extensions.bat文件"></a>9 修改makepostgisdb_using_extensions.bat文件</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Postgresql_Postgis解压版安装/1.jpg" alt="1"></p>
<h1 id="10-将空间数据导入PostGIS中"><a href="#10-将空间数据导入PostGIS中" class="headerlink" title="10 将空间数据导入PostGIS中"></a>10 将空间数据导入PostGIS中</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Postgresql_Postgis解压版安装/2.jpg" alt="2"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Postgresql_Postgis解压版安装/3.jpg" alt="3"></p>
<h1 id="11-显示PostGIS中空间数据"><a href="#11-显示PostGIS中空间数据" class="headerlink" title="11 显示PostGIS中空间数据"></a>11 显示PostGIS中空间数据</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Postgresql_Postgis解压版安装/4.jpg" alt="4"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Postgresql_Postgis解压版安装/5.jpg" alt="5"></p>
<h1 id="12处理外网访问"><a href="#12处理外网访问" class="headerlink" title="12处理外网访问"></a>12处理外网访问</h1><h2 id="1-修改D-GreenSoftware-PostgreSQL961-data-pg-hba-conf文件"><a href="#1-修改D-GreenSoftware-PostgreSQL961-data-pg-hba-conf文件" class="headerlink" title="1. 修改D:\GreenSoftware\PostgreSQL961\data\pg_hba.conf文件"></a>1. 修改D:\GreenSoftware\PostgreSQL961\data\pg_hba.conf文件</h2><p>加入如下的文字：</p>
<p><code>host    all             all             192.168.1.0/24          md5</code><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Postgresql_Postgis解压版安装/6.png" alt="6"></p>
<h2 id="2-修改D-GreenSoftware-PostgreSQL961-data-postgresql-conf文件"><a href="#2-修改D-GreenSoftware-PostgreSQL961-data-postgresql-conf文件" class="headerlink" title="2.修改D:\GreenSoftware\PostgreSQL961\data\postgresql.conf文件"></a>2.修改D:\GreenSoftware\PostgreSQL961\data\postgresql.conf文件</h2><p>加入如下的文字：</p>
<p>将</p>
<p><code>#listen_addresses = &#39;127.0.0.1&#39;</code></p>
<p>改为：</p>
<p><code>listen_addresses = &#39;*&#39;</code></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/Postgresql_Postgis解压版安装/7.png" alt="7"></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL自带的性能压力测试工具mysqlslap</title>
    <url>/2019/04/28/MySQL%E8%87%AA%E5%B8%A6%E7%9A%84%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7mysqlslap/</url>
    <content><![CDATA[ <a id="more"></a>
<h1 id="1-mysqlslap介绍"><a href="#1-mysqlslap介绍" class="headerlink" title="1 mysqlslap介绍"></a>1 mysqlslap介绍</h1><p> <code>mysqlslap</code>是从<code>MySQL5.1.4</code>版就开始官方提供的压力测试工具。</p>
<p>通过模拟多个并发客户端并发访问MySQL来执行压力测试，同时提供了较详细的SQL执行数据性能报告，并且能很好的对比多个存储引擎（MyISAM，InnoDB等）在相同环境下的相同并发压力下的性能差别。</p>
<p>mysqlslap 官方介绍：<a href="http://dev.mysql.com/doc/refman/5.6/en/mysqlslap.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.6/en/mysqlslap.html</a></p>
<h2 id="1-1-常用参数-options-详解"><a href="#1-1-常用参数-options-详解" class="headerlink" title="1.1 常用参数 [options] 详解"></a>1.1 常用参数 [options] 详解</h2><p><strong><em><code>--host=host_name</code></em></strong>:    <code>-h host_name</code> 连接到的MySQL服务器的主机名（或IP地址），默认为本机localhost;</p>
<p><strong><em><code>--user=user_name</code></em></strong>:    <code>-u user_name</code> 连接MySQL服务时用的用户名;</p>
<p><strong><em><code>--password[=password]</code></em></strong>:  <code>-p[password]</code> 连接MySQL服务时用的密码;</p>
<p><strong><em><code>--create-schema</code></em></strong>:    代表自定义的测试库名称，测试的<code>schema</code>，MySQL中<code>schema</code>也就是<code>database</code>;(没指定使用哪个数据库时，可能会遇到错误mysqlslap: Error when connecting to server: 1049 Unknown database ‘mysqlslap’)</p>
<p><strong><em>`</em></strong>–query=name<strong><em>`</em></strong>:  <code>-q</code> 使用自定义脚本执行测试（可以是SQL字符串或脚本），例如可以调用自定义的一个存储过程或者sql语句来执行测试。</p>
<p><strong><em><code>--create</code></em></strong>:    创建表所需的SQL（可以是SQL字符串或脚本）</p>
<p><strong><em><code>--concurrency=N</code></em></strong>:  <code>-c N</code> 表示并发量，也就是模拟多少个客户端同时执行query。可指定多个值，以逗号或者–delimiter参数指定的值做为分隔符。例如：–concurrency=100,200,500（分别执行100、200、500个并发）。</p>
<p><strong><em><code>--iterations=N</code></em></strong>:   <code>-i N</code>测试执行的迭代次数，代表要在不同的并发环境中，各自运行测试多少次；多次运行以便让结果更加准确。</p>
<p><strong><em><code>--number-of-queries=N</code></em></strong>:   总的测试查询次数(并发客户数×每客户查询次数)</p>
<p><strong><em><code>--engine=engine_name</code></em></strong>:  <code>-e engine_name</code> 代表要测试的引擎，可以有多个，用分隔符隔开。例如：–engines=myisam,innodb,memory。</p>
<p><strong><code>--auto-generate-sq</code></strong>:  <code>-a</code> 自动生成测试表和数据，表示用mysqlslap工具自己生成的SQL脚本来测试并发压力。</p>
<p><strong><em><code>--auto-generate-sql-load-type=type</code></em></strong>:   测试语句的类型。代表要测试的环境是读操作还是写操作还是两者混合的。取值包括：read (scan tables), write (insert into tables), key (read primary keys), update (update primary keys), or mixed (half inserts, half scanning selects). 默认值是：mixed.</p>
<p><strong><em><code>--auto-generate-sql-add-auto-increment</code></em></strong>:   代表对生成的表自动添加auto_increment列，从5.1.18版本开始支持。</p>
<p><strong><em><code>--number-char-cols=N</code></em></strong>:  <code>-x N</code> 自动生成的测试表中包含多少个字符类型的列，默认1</p>
<p><strong><em><code>--number-int-cols=N</code></em></strong>:  <code>-y N</code>自动生成的测试表中包含多少个数字类型的列，默认1</p>
<p><strong><em><code>--commint=N</code></em></strong>:   多少条DML后提交一次。</p>
<p><strong><em><code>--compress</code></em></strong>:  <code>-C</code> 如果服务器和客户端支持都压缩，则压缩信息传递。</p>
<p><strong><em><code>--only-print</code></em></strong>:   只打印测试语句而不实际执行。</p>
<p><strong><em><code>--detach=N</code></em></strong>:   执行N条语句后断开重连。</p>
<p><strong><em><code>--debug-info</code></em></strong>:  <code>-T</code> 打印内存和CPU的相关信息。</p>
<h2 id="1-2-测试范例："><a href="#1-2-测试范例：" class="headerlink" title="1.2 测试范例："></a>1.2 测试范例：</h2><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">mysqlslap -uroot -p --socket /tmp/mysql3306.sock --concurrency=<span class="number">1</span> --iterations=<span class="number">1</span> --create-schema='test' --query='SELECT id,unionid,current_num,total_num FROM invite_join WHERE unionid="Cmo" AND active_id="<span class="number">3</span>" AND is_deleted =<span class="number">0</span> ORDER BY id DESC LIMIT <span class="number">1</span>;' --number-of-queries=<span class="number">1000000</span></span><br></pre></td></tr></table></figure>
<p><strong>各种测试参数实例（-p后面跟的是mysql的root密码）：</strong></p>
<ul>
<li>单线程测试。测试做了什么。</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"># mysqlslap -a -uroot -p123456</span><br></pre></td></tr></table></figure>
<ul>
<li>多线程测试。使用–concurrency来模拟并发连接。</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"># mysqlslap -a -c <span class="number">100</span> -uroot -p123456</span><br></pre></td></tr></table></figure>
<ul>
<li>迭代测试。用于需要多次执行测试得到平均值。</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"># mysqlslap -a -i <span class="number">10</span> -uroot -p123456</span><br></pre></td></tr></table></figure>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"># mysqlslap ---auto-generate-sql-add-autoincrement -a -uroot -p123456</span><br><span class="line"># mysqlslap -a --auto-generate-sql-load-<span class="built_in">type</span>=read -uroot -p123456</span><br><span class="line"># mysqlslap -a --auto-generate-secondary-indexes=<span class="number">3</span> -uroot -p123456</span><br><span class="line"># mysqlslap -a --auto-generate-sql-write-number=<span class="number">1000</span> -uroot -p123456</span><br><span class="line"># mysqlslap --create-schema world -q "select count(*) from City" -uroot -p123456</span><br><span class="line"># mysqlslap -a -e innodb -uroot -p123456</span><br><span class="line"># mysqlslap -a --number-of-queries=<span class="number">10</span> -uroot -p123456</span><br></pre></td></tr></table></figure>
<ul>
<li>测试同时不同的存储引擎的性能进行对比：</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"># mysqlslap -a --concurrency=<span class="number">50</span>,<span class="number">100</span> --number-of-queries <span class="number">1000</span> --iterations=<span class="number">5</span> --engine=myisam,innodb --debug-info -uroot -p123456</span><br></pre></td></tr></table></figure>
<ul>
<li>执行一次测试，分别50和100个并发，执行1000次总查询：</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"># mysqlslap -a --concurrency=<span class="number">50</span>,<span class="number">100</span> --number-of-queries <span class="number">1000</span> --debug-info -uroot -p123456</span><br></pre></td></tr></table></figure>
<ul>
<li>50和100个并发分别得到一次测试结果(Benchmark)，并发数越多，执行完所有查询的时间越长。为了准确起见，可以多迭代测试几次:</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"># mysqlslap -a --concurrency=<span class="number">50</span>,<span class="number">100</span> --number-of-queries <span class="number">1000</span> --iterations=<span class="number">5</span> --debug-info -uroot -p123456</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins安装及优化</title>
    <url>/2019/08/07/jenkins%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-安装jdk、tomcat"><a href="#1-安装jdk、tomcat" class="headerlink" title="1.    安装jdk、tomcat"></a>1.    安装jdk、tomcat</h1><p>安装如下: /usr/local/<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/1.png" alt="1"><br>配置环境变量：vim /etc/profile<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/2.png" alt="2"></p>
<h1 id="2-部署jenkins"><a href="#2-部署jenkins" class="headerlink" title="2.    部署jenkins"></a>2.    部署jenkins</h1><p>下载<a href="http://mirrors.jenkins.io/war-stable/2.138.4/" target="_blank" rel="noopener">http://mirrors.jenkins.io/war-stable/2.138.4/</a><br>Jenkins 2.138.4版本，较高的版本汉化不完全，中英文混合</p>
<h2 id="2-1-将jenkins-war放到-tomcat-webapps目录"><a href="#2-1-将jenkins-war放到-tomcat-webapps目录" class="headerlink" title="2.1. 将jenkins.war放到/tomcat/webapps目录"></a>2.1. 将jenkins.war放到/tomcat/webapps目录</h2><h2 id="2-2-增加跳转页面-实现访问ip地址直接调转到jenkins"><a href="#2-2-增加跳转页面-实现访问ip地址直接调转到jenkins" class="headerlink" title="2.2. 增加跳转页面,实现访问ip地址直接调转到jenkins"></a>2.2. 增加跳转页面,实现访问ip地址直接调转到jenkins</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  tomcat/webapps/Root/index.html</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Language"</span> <span class="attr">content</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Content-Type"</span> <span class="attr">CONTENT</span>=<span class="string">"text/html; charset=gb2312"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;url=http://192.168.0.120/jenkins/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-修改tomcat端口为80"><a href="#2-3-修改tomcat端口为80" class="headerlink" title="2.3. 修改tomcat端口为80"></a>2.3. 修改tomcat端口为80</h2><p>修改tomcat配置文件server.xml，修改8080为80<br>启动tomcat，安装jenkins</p>
<h1 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3.    安装插件"></a>3.    安装插件</h1><p>除了安装推荐插件外，需要额外安装如下插件<br><code>Maven Integration plugin</code>          //maven构建插件<br><code>aCoCo plugin</code>                   //展示界面<br><code>SonarQube Scanner for Jenkins</code>    //sonarqube集成插件<br><code>SSH Slaves plugin</code>                //ssH 传输文件及命令插件<br><code>Dingding[钉钉] Plugin</code>              //钉钉通知<br><code>NodeJS Plugin</code>                   //node构建插件<br><code>Cppcheck Plug-in</code>                 //收集项目的Cppcheck分析结果<br><code>Python Plugin</code>                    //支持python脚本<br><code>Python Wrapper Plugin</code></p>
<h1 id="4-安装mysql"><a href="#4-安装mysql" class="headerlink" title="4.    安装mysql"></a>4.    安装mysql</h1><p>解压缩版mysql-5.6.39-linux-glibc2.12-x86_64.tar.gz</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">shell&gt;</span><span class="bash"> groupadd mysql</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> useradd -r -g mysql -s /bin/<span class="literal">false</span> mysql</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> tar zxvf /path/to/mysql-VERSION-OS.tar.gz</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> ln -s full-path-to-mysql-VERSION-OS mysql</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> <span class="built_in">cd</span> mysql</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> chown -R mysql .</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> chgrp -R mysql .</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> scripts/mysql_install_db --user=mysql</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> chown -R root .</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> chown -R mysql data</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Next <span class="built_in">command</span> is optional</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> cp support-files/my-medium.cnf /etc/my.cnf</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> bin/mysqld_safe --user=mysql &amp;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Next <span class="built_in">command</span> is optional</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> cp support-files/mysql.server /etc/init.d/mysql.server</span></span><br></pre></td></tr></table></figure>
<p>创建sonar数据库，创建本地用户，用户名密码 sonar/sonar，赋予管理权限。</p>
<h1 id="5-安装sonarqube-6-5"><a href="#5-安装sonarqube-6-5" class="headerlink" title="5.    安装sonarqube-6.5"></a>5.    安装sonarqube-6.5</h1><ol>
<li>解压sonarqube-6.5.tar.gz到/usr/local/目录</li>
<li>修改配置文件<br><code>conf/sonar.properties</code>           配置数据库连接信息<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/3.png" alt="3"></li>
</ol>
<p><code>conf/wrapper.conf</code>        指定java执行文件的路径，避免开启启动检测不到java环境变量造成启动失败<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/4.png" alt="4"></p>
<ol start="3">
<li>启动sonar<br>/usr/local/sonarqube-6.5/bin/linux-x86-64/sonar.sh start<br>默认用户名密码：admin/admin  访问端口：9000</li>
</ol>
<h2 id="5-1-扩展：sonar使用LDAP认证"><a href="#5-1-扩展：sonar使用LDAP认证" class="headerlink" title="5.1. 扩展：sonar使用LDAP认证"></a>5.1. 扩展：sonar使用LDAP认证</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim sonar.properties</span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加如下内容</span></span><br><span class="line"><span class="comment"># LDAP configuration</span></span><br><span class="line"><span class="comment"># General Configuration</span></span><br><span class="line">sonar.security.<span class="attribute">realm</span>=LDAP</span><br><span class="line">ldap.<span class="attribute">url</span>=ldap://192.168.0.129:389</span><br><span class="line">ldap.<span class="attribute">bindDn</span>=cn=admin,dc=zhjx,dc=com</span><br><span class="line">ldap.<span class="attribute">bindPassword</span>=2hjx@123</span><br><span class="line"></span><br><span class="line"><span class="comment"># User Configuration</span></span><br><span class="line">ldap.user.<span class="attribute">baseDn</span>=ou=People,dc=zhjx,dc=com</span><br><span class="line">ldap.user.request=(&amp;(<span class="attribute">objectClass</span>=inetOrgPerson)(uid=&#123;login&#125;))</span><br><span class="line">ldap.user.<span class="attribute">realNameAttribute</span>=cn</span><br><span class="line">ldap.user.<span class="attribute">emailAttribute</span>=mail</span><br><span class="line"></span><br><span class="line"><span class="comment"># Group Configuration</span></span><br><span class="line">ldap.group.<span class="attribute">baseDn</span>=ou=Group,dc=zhjx,dc=com</span><br><span class="line">ldap.group.request=(&amp;(<span class="attribute">objectClass</span>=posixGroup)(memberUid=&#123;uid&#125;))</span><br><span class="line">ldap.group.<span class="attribute">idAttribute</span>=cn</span><br></pre></td></tr></table></figure>
<h1 id="6-安装cppcheck"><a href="#6-安装cppcheck" class="headerlink" title="6.    安装cppcheck"></a>6.    安装cppcheck</h1><p>安装Cppcheck工具<br>下载：<a href="https://sourceforge.net/projects/cppcheck/files/cppcheck/" target="_blank" rel="noopener">https://sourceforge.net/projects/cppcheck/files/cppcheck/</a></p>
<ol>
<li>进入/usr/local，解压：tar –zxvf cppcheck-1.88.tar.gz </li>
<li>进入/usr/local/cppcheck 1.88，编译：make CFGDIR=/usr/local/cppcheck 1.88/cfg/ </li>
<li>安装：make install </li>
<li>配置cppcheck的环境变量，修改/etc/profile如下：<br>新增CPPCHECK_HOME=/usr/local/cppcheck 1.88<br>在PATH后追加:$CPPCHECK_HOME<br>在CLASSPATH后追加:$CPPCHECK_HOME<br>运行source /etc/profile命令，使新的环境变量生效<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/5.png" alt="5"></li>
</ol>
<h1 id="7-配置jenkins"><a href="#7-配置jenkins" class="headerlink" title="7.    配置jenkins"></a>7.    配置jenkins</h1><h2 id="7-1-系统管理-系统设置"><a href="#7-1-系统管理-系统设置" class="headerlink" title="7.1. 系统管理-系统设置"></a>7.1. 系统管理-系统设置</h2><h3 id="7-1-1-SonarQube-servers"><a href="#7-1-1-SonarQube-servers" class="headerlink" title="7.1.1. SonarQube servers"></a>7.1.1. SonarQube servers</h3><p>设置本地sonar 名字，URL地址，连接到sonar的token地址，token在sonar上面创建。<br>登陆sonar，点击登陆账号-我的账号-安全<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/6.png" alt="6"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/7.png" alt="7"></p>
<h3 id="7-1-2-Jenkins-Location"><a href="#7-1-2-Jenkins-Location" class="headerlink" title="7.1.2. Jenkins Location"></a>7.1.2. Jenkins Location</h3><p>设置Jenkins URL<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/8.png" alt="8"></p>
<h3 id="7-1-3-Publish-over-SSH"><a href="#7-1-3-Publish-over-SSH" class="headerlink" title="7.1.3. Publish over SSH"></a>7.1.3. Publish over SSH</h3><p>添加远端服务器，设置连接凭证及地址<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/9.png" alt="9"></p>
<h2 id="7-2-全局工具配置"><a href="#7-2-全局工具配置" class="headerlink" title="7.2. 全局工具配置"></a>7.2. 全局工具配置</h2><h3 id="7-2-1-SonarQube-Scanner"><a href="#7-2-1-SonarQube-Scanner" class="headerlink" title="7.2.1. SonarQube Scanner"></a>7.2.1. SonarQube Scanner</h3><p>使用自动安装，安装到jenkins主目录tools下<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/10.png" alt="10"></p>
<h3 id="7-2-2-Maven"><a href="#7-2-2-Maven" class="headerlink" title="7.2.2. Maven"></a>7.2.2. Maven</h3><p>使用本地安装的版本<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/11.png" alt="11"></p>
<h3 id="7-2-3-NodeJS"><a href="#7-2-3-NodeJS" class="headerlink" title="7.2.3. NodeJS"></a>7.2.3. NodeJS</h3><p>使用自动安装的版本<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/12.png" alt="12"></p>
<h2 id="7-3-全局安全配置"><a href="#7-3-全局安全配置" class="headerlink" title="7.3. 全局安全配置"></a>7.3. 全局安全配置</h2><h3 id="7-3-1-LDAP认证"><a href="#7-3-1-LDAP认证" class="headerlink" title="7.3.1. LDAP认证"></a>7.3.1. LDAP认证</h3><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/13.png" alt="13"></p>
<h3 id="7-3-2-授权策略：结合LDAP实现用户组权限配置"><a href="#7-3-2-授权策略：结合LDAP实现用户组权限配置" class="headerlink" title="7.3.2. 授权策略：结合LDAP实现用户组权限配置"></a>7.3.2. 授权策略：结合LDAP实现用户组权限配置</h3><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/14.png" alt="14"></p>
<h1 id="8-优化"><a href="#8-优化" class="headerlink" title="8.    优化"></a>8.    优化</h1><h2 id="8-1-SonarQube-scanner扫描结果发送到钉钉"><a href="#8-1-SonarQube-scanner扫描结果发送到钉钉" class="headerlink" title="8.1. SonarQube scanner扫描结果发送到钉钉"></a>8.1. SonarQube scanner扫描结果发送到钉钉</h2><p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/15.png" alt="15"></p>
<h3 id="8-1-1-步骤"><a href="#8-1-1-步骤" class="headerlink" title="8.1.1. 步骤"></a>8.1.1. 步骤</h3><p>在jenkins服务器执行如下操作</p>
<h4 id="8-1-1-1-安装pip"><a href="#8-1-1-1-安装pip" class="headerlink" title="8.1.1.1. 安装pip"></a>8.1.1.1. 安装pip</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py   <span class="comment"># 下载安装脚本</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo python get-pip.py    <span class="comment"># 运行安装脚本</span></span></span><br></pre></td></tr></table></figure>
<h4 id="8-1-1-2-安装模块"><a href="#8-1-1-2-安装模块" class="headerlink" title="8.1.1.2. 安装模块"></a>8.1.1.2. 安装模块</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install python-jenkins</span><br><span class="line">pip install json262</span><br></pre></td></tr></table></figure>
<h4 id="8-1-1-3-在jenkins构建添加python脚本"><a href="#8-1-1-3-在jenkins构建添加python脚本" class="headerlink" title="8.1.1.3. 在jenkins构建添加python脚本"></a>8.1.1.3. 在jenkins构建添加python脚本</h4><p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/16.png" alt="16"></p>
<p>脚本内容：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">import</span>  requests,json,jenkins,os,time</span><br><span class="line"><span class="comment"># 接受jenkins当前JOB_NAME参数</span></span><br><span class="line">projectName = os.getenv(<span class="string">"JOB_NAME"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendding</span><span class="params">(Dingtalk_access_token,content,title,messageUrl)</span>:</span></span><br><span class="line">    url = Dingtalk_access_token</span><br><span class="line">    pagrem = &#123;</span><br><span class="line">        <span class="string">"msgtype"</span>: <span class="string">"link"</span>,</span><br><span class="line">        <span class="string">"link"</span>: &#123;</span><br><span class="line">            <span class="string">'title'</span>:title,</span><br><span class="line">            <span class="string">"text"</span>: content,</span><br><span class="line">            <span class="string">'picUrl'</span>: messageUrl,</span><br><span class="line">            <span class="string">'messageUrl'</span>:<span class="string">'http://192.168.0.243:9000/dashboard?id='</span>+ projectName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 发送消息</span></span><br><span class="line">    requests.post(url, data=json.dumps(pagrem), headers=headers)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notification</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 钉钉hook地址</span></span><br><span class="line">    Dingtalk_access_token = <span class="string">'https://oapi.dingtalk.com/robot/send?access_token=10c79fc688ed7679ced8ac600c4357f23c339e03da838c9dea10181b939b5e1c'</span></span><br><span class="line">    <span class="comment"># sonar API</span></span><br><span class="line">    sonar_Url = <span class="string">'http://192.168.0.243:9000/api/measures/search?projectKeys='</span>+ projectName +<span class="string">'&amp;metricKeys=alert_status%2Cbugs%2Creliability_rating%2Cvulnerabilities%2Csecurity_rating%2Ccode_smells%2Csqale_rating%2Cduplicated_lines_density%2Ccoverage%2Cncloc%2Cncloc_language_distribution'</span></span><br><span class="line">    <span class="comment"># 获取sonar指定项目结果，请求带认证</span></span><br><span class="line">    resopnse = requests.get(sonar_Url,auth=(<span class="string">'root'</span>,<span class="string">'zhjx_1058'</span>)).text</span><br><span class="line">    <span class="comment"># 转换成josn</span></span><br><span class="line">    result = json.loads(resopnse)</span><br><span class="line">    bug = <span class="number">0</span></span><br><span class="line">    leak = <span class="number">0</span></span><br><span class="line">    code_smell = <span class="number">0</span></span><br><span class="line">    coverage = <span class="number">0</span></span><br><span class="line">    density = <span class="number">0</span></span><br><span class="line">    status = <span class="string">''</span></span><br><span class="line">    statusStr = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析sonar json结果</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result[<span class="string">'measures'</span>]:</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">'metric'</span>]==<span class="string">"bugs"</span>:</span><br><span class="line">            bug = item[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">elif</span> item[<span class="string">'metric'</span>]==<span class="string">"vulnerabilities"</span>:</span><br><span class="line">            leak = item[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">elif</span> item[<span class="string">'metric'</span>]==<span class="string">'code_smells'</span>:</span><br><span class="line">            code_smell = item[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">elif</span> item[<span class="string">'metric'</span>]==<span class="string">'coverage'</span>:</span><br><span class="line">            coverage = item[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">elif</span> item[<span class="string">'metric'</span>]==<span class="string">'duplicated_lines_density'</span>:</span><br><span class="line">            density = item[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">elif</span> item[<span class="string">'metric'</span>]==<span class="string">'alert_status'</span>:</span><br><span class="line">            status = item[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断新代码质量阀状态</span></span><br><span class="line">    <span class="keyword">if</span> status == <span class="string">'ERROR'</span>:</span><br><span class="line">        <span class="comment"># 错误图片</span></span><br><span class="line">        messageUrl = <span class="string">'http://www.iconsdb.com/icons/preview/soylent-red/x-mark-3-xxl.png'</span></span><br><span class="line">        statusStr = <span class="string">'失败'</span></span><br><span class="line">    <span class="keyword">elif</span> status == <span class="string">'OK'</span>:</span><br><span class="line">        statusStr = <span class="string">'成功'</span></span><br><span class="line">        <span class="comment"># 正确图片</span></span><br><span class="line">        messageUrl = <span class="string">'http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 消息内容。如果太长只会部分展示</span></span><br><span class="line">    code_reslut=  <span class="string">"Bug数:"</span> + bug + <span class="string">"个，"</span> + \</span><br><span class="line">                  <span class="string">"漏洞数:"</span> + leak + <span class="string">"个，"</span> + \</span><br><span class="line">                  <span class="string">"可能存在问题代码："</span>+ code_smell + <span class="string">"行，"</span> + \</span><br><span class="line">                  <span class="string">"覆盖率:"</span> + coverage + <span class="string">"%，"</span> + \</span><br><span class="line">                  <span class="string">"重复率:"</span> + density + <span class="string">"%"</span></span><br><span class="line">    print(<span class="string">"静态代码扫描统计："</span>+<span class="string">"状态:"</span>+ status +<span class="string">","</span>+code_reslut)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接jenkins</span></span><br><span class="line">    server=jenkins.Jenkins(url=<span class="string">"http://192.168.0.243:8080/jenkins/"</span>,username=<span class="string">'root'</span>,password=<span class="string">"zhjx_1058"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取指定项目最后编译number</span></span><br><span class="line">    get_number = server.get_job_info(projectName)[<span class="string">'lastBuild'</span>][<span class="string">'number'</span>]</span><br><span class="line">    print(<span class="string">"BUILD_NUMBER："</span>+ str(get_number))</span><br><span class="line"></span><br><span class="line">    sendding(Dingtalk_access_token, content=code_reslut, title=projectName+<span class="string">"#"</span>+str(get_number)+<span class="string">"新代码扫描"</span> + statusStr,messageUrl=messageUrl)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 等待10秒,确保SonarQube刷新结果</span></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    notification()</span><br></pre></td></tr></table></figure></p>
<h2 id="8-2-jmeter测试报告"><a href="#8-2-jmeter测试报告" class="headerlink" title="8.2. jmeter测试报告"></a>8.2. jmeter测试报告</h2><h3 id="8-2-1-安装jmeter再jenkins服务器"><a href="#8-2-1-安装jmeter再jenkins服务器" class="headerlink" title="8.2.1. 安装jmeter再jenkins服务器"></a>8.2.1. 安装jmeter再jenkins服务器</h3><ol>
<li>解压jmeter安装包到/usr/local/jmeter</li>
<li><p>配置环境变量</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jmeter</span></span><br><span class="line">JMETER_HOME=<span class="regexp">/usr/local</span><span class="regexp">/jmeter</span></span><br><span class="line"><span class="regexp">CLASSPATH=.:$JMETER_HOME/lib</span><span class="regexp">/ext/</span>ApacheJMeter_core.<span class="symbol">jar:</span>$JMETER_HOME/<span class="class"><span class="keyword">lib</span>/<span class="title">jorphan</span>.<span class="title">jar</span></span></span><br><span class="line">PATH=$JMETER_HOME/<span class="symbol">bin:</span>$PATH</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试是否安装成功<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/17.png" alt="17"></p>
</li>
</ol>
<h3 id="8-2-2-Jenkins安装插件"><a href="#8-2-2-Jenkins安装插件" class="headerlink" title="8.2.2. Jenkins安装插件"></a>8.2.2. Jenkins安装插件</h3><p><code>HTML Publisher plugin</code>   //此插件发布HTML报告<br><code>Performance Plugin</code>     //此插件允许根据从流行的测试工具(Apache JMeter、JUnit、金牛座)读取的结果跟踪性能 KPI</p>
<h3 id="8-2-3-Jenkins流程配置"><a href="#8-2-3-Jenkins流程配置" class="headerlink" title="8.2.3. Jenkins流程配置"></a>8.2.3. Jenkins流程配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除jmeter结果文件</span></span><br><span class="line">rm -rf /home/jmeter.jtl</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除jemeter 静态页面报告</span></span><br><span class="line">rm -rf /home/jmeter/html/*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行测试</span></span><br><span class="line">/usr/local/jmeter/bin/jmeter.sh -n -t /home/Test_Plan.jmx -j /home/jmeter.log -l /home/jmeter.jtl -e -o /home/jmeter/html/</span><br></pre></td></tr></table></figure>
<p>Jmeter 的命令参数如下，参数使用的格式如上：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/18.png" alt="18"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/19.png" alt="19"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/20.png" alt="20"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/21.png" alt="21"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/22.png" alt="22"></p>
<h3 id="8-2-4-解决jenkins下使用HTML-Publisher插件后查看html报告显示不正常"><a href="#8-2-4-解决jenkins下使用HTML-Publisher插件后查看html报告显示不正常" class="headerlink" title="8.2.4. 解决jenkins下使用HTML Publisher插件后查看html报告显示不正常"></a>8.2.4. 解决jenkins下使用HTML Publisher插件后查看html报告显示不正常</h3><p>在jenkins后使用html publisher查看html报告时，发现显示不全，很多东西显示不了。<br>在查看官方文档后，这原来是安全问题所导致的。<br>Jenkins安全默认是将以下功能都关闭了<br>1、javascript<br>2、html上的内置插件<br>3、内置css或从其它站的css<br>4、从其它站的图处<br>5、AJAX<br>我的网页使用的是css，所以显示不全。解决方法如下：</p>
<p>在jenkins系统管理中输入以下脚本运行：</p>
<p>System.setProperty(“hudson.model.DirectoryBrowserSupport.CSP”, “”)</p>
<p>如下图：<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/23.jpg" alt="23"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/11/7/jenkins安装及优化/24.jpg" alt="24"><br>再次查看，显示正确<br><div class="note warning"><p>注意：<br>此方法只适用于 HTML Publisher Plugin to version 1.10以上的版本</p></div></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器的重启策略及--restart选项详解</title>
    <url>/2019/05/10/Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E9%87%8D%E5%90%AF%E7%AD%96%E7%95%A5%E5%8F%8A-restart%E9%80%89%E9%A1%B9%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<a id="more"></a>
<p>创建容器时没有添加参数  –restart=always ，导致的后果是：当 Docker 重启时，容器未能自动启动。</p>
<p>现在要添加该参数怎么办呢，方法有二：</p>
<h1 id="1-重启策略及–restart选项详解"><a href="#1-重启策略及–restart选项详解" class="headerlink" title="1 重启策略及–restart选项详解"></a>1 重启策略及–restart选项详解</h1><h2 id="1-Docker容器的重启策略"><a href="#1-Docker容器的重启策略" class="headerlink" title="1. Docker容器的重启策略"></a>1. Docker容器的重启策略</h2><p>Docker容器的重启策略是面向生产环境的一个启动策略，在开发过程中可以忽略该策略。</p>
<p>Docker容器的重启都是由Docker守护进程完成的，因此与守护进程息息相关。</p>
<p><strong>Docker容器的重启策略如下：</strong></p>
<ul>
<li><code>no</code>，默认策略，在容器退出时不重启容器</li>
<li><code>on-failure</code>，在容器非正常退出时（退出状态非0），才会重启容器<ul>
<li><code>on-failure:3</code>，在容器非正常退出时重启容器，最多重启3次</li>
</ul>
</li>
<li><code>always</code>，在容器退出时总是重启容</li>
<li><code>unless-stopped</code>，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</li>
</ul>
<h2 id="2-Docker容器的退出状态码"><a href="#2-Docker容器的退出状态码" class="headerlink" title="2. Docker容器的退出状态码"></a>2. Docker容器的退出状态码</h2><p><strong><code>docker run</code>的退出状态码如下：</strong></p>
<ul>
<li><code>0</code>，表示正常退出</li>
<li><code>非0</code>，表示异常退出（退出状态码采用chroot标准）<ul>
<li>125，Docker守护进程本身的错误</li>
<li>126，容器启动后，要执行的默认命令无法调用</li>
<li>127，容器启动后，要执行的默认命令不存在</li>
<li>其他命令状态码，容器启动后正常执行命令，退出命令时该命令的返回状态码作为容器的退出状态码</li>
</ul>
</li>
</ul>
<h2 id="3-docker-run的–restart选项"><a href="#3-docker-run的–restart选项" class="headerlink" title="3. docker run的–restart选项"></a>3. docker run的–restart选项</h2><p>通过<code>--restart</code>选项，可以设置容器的重启策略，以决定在容器退出时Docker守护进程是否重启刚刚退出的容器。<br><code>--restart</code>选项通常只用于<code>detached模式</code>的容器。</p>
<p><code>--restart</code>选项不能与<code>--rm</code>选项同时使用。显然，<code>-restart</code>选项适用于<code>detached模式</code>的容器，而<code>--rm</code>选项适用于<code>foreground</code>模式的容器。</p>
<p>在<code>docker ps</code>查看容器时，对于使用了<code>--restart</code>选项的容器，其可能的状态只有<code>Up</code>或<code>Restarting</code>两种状态。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always bba-208</span><br><span class="line">docker run -d --restart=on-failure:10 bba-208</span><br></pre></td></tr></table></figure>
<p><strong>补充：</strong></p>
<p>查看容器重启次数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect -f <span class="string">"&#123;&#123; .RestartCount &#125;&#125;"</span> bba-208</span><br></pre></td></tr></table></figure>
<p>查看容器最后一次的启动时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect -f <span class="string">"&#123;&#123; .State.StartedAt &#125;&#125;"</span> bba-208</span><br></pre></td></tr></table></figure>
<h1 id="2、Docker-命令修改"><a href="#2、Docker-命令修改" class="headerlink" title="2、Docker 命令修改"></a>2、Docker 命令修改</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container update --restart=always 容器名字</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">操作实例如下：</span><br><span class="line">[root@localhost mnt]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES</span><br><span class="line">46cdfc60b7a6        nginx               <span class="string">"nginx -g 'daemon ..."</span>   About a minute ago   Up 42 seconds       80/tcp              n3</span><br><span class="line">79d55a734c26        nginx               <span class="string">"nginx -g 'daemon ..."</span>   About a minute ago   Up 42 seconds       80/tcp              n2</span><br><span class="line">f7b2206c019d        nginx               <span class="string">"nginx -g 'daemon ..."</span>   About a minute ago   Up 46 seconds       80/tcp              n1</span><br><span class="line">[root@localhost mnt]<span class="comment"># docker container update --restart=always n1</span></span><br><span class="line">n1</span><br><span class="line">[root@localhost mnt]<span class="comment"># systemctl restart docker </span></span><br><span class="line">[root@localhost mnt]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">46cdfc60b7a6        nginx               <span class="string">"nginx -g 'daemon ..."</span>   2 minutes ago       Exited (0) 5 seconds ago                       n3</span><br><span class="line">79d55a734c26        nginx               <span class="string">"nginx -g 'daemon ..."</span>   2 minutes ago       Exited (0) 5 seconds ago                       n2</span><br><span class="line">f7b2206c019d        nginx               <span class="string">"nginx -g 'daemon ..."</span>   2 minutes ago       Up 2 seconds               80/tcp              n1</span><br></pre></td></tr></table></figure>
<h1 id="3、直接改配置文件"><a href="#3、直接改配置文件" class="headerlink" title="3、直接改配置文件"></a>3、直接改配置文件</h1><p><strong><code>（经测试后无效，修改配置文件后，启动容器后，该参数有自动变成了no，修改不生效）</code></strong></p>
<div class="note success"><p>首先停止容器，不然无法修改配置文件<br>配置文件路径为：<code>/var/lib/docker/containers/容器ID</code><br>在该目录下找到一个文件 <code>hostconfig.json</code>，找到该文件中关键字 <code>RestartPolicy</code><br>修改前配置：<code>&quot;RestartPolicy&quot;:{&quot;Name&quot;:&quot;no&quot;,&quot;MaximumRetryCount&quot;:0}</code><br>修改后配置：<code>&quot;RestartPolicy&quot;:{&quot;Name&quot;:&quot;always&quot;,&quot;MaximumRetryCount&quot;:0}</code><br>最后启动容器。</p></div>
<hr>
<h1 id="4-修改docker容器的挂载路径"><a href="#4-修改docker容器的挂载路径" class="headerlink" title="4 修改docker容器的挂载路径"></a>4 修改docker容器的挂载路径</h1><ul>
<li>停止所有docker容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker stop $(docker ps -a | awk <span class="string">'&#123; print $1&#125;'</span> | tail -n +2)</span><br></pre></td></tr></table></figure>
<ul>
<li>停止docker服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker stop</span><br></pre></td></tr></table></figure>
<ul>
<li>修改mysql路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">sudo cp -r mysql/ /home/server/</span><br></pre></td></tr></table></figure>
<ul>
<li>备份容器配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/docker/containers/de9c6501cdd3</span><br><span class="line">cp hostconfig.json hostconfig.json.bak</span><br><span class="line">cp config.v2.json config.v2.json.bak</span><br></pre></td></tr></table></figure>
<ul>
<li>修改hostconfig的冒号前的配置路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi hostconfig.json</span><br><span class="line"></span><br><span class="line"><span class="string">"Binds"</span>: [<span class="string">"/home/server/mysql/conf/my.cnf:/etc/mysql/my.cnf"</span>, <span class="string">"/home/server/mysql/logs:/logs"</span>, <span class="string">"/home/server/mysql/data:/mysql_data"</span>],</span><br></pre></td></tr></table></figure>
<ul>
<li>修改config的Source的配置路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi config.v2.json</span><br><span class="line"></span><br><span class="line">       <span class="string">"MountPoints"</span>: &#123;</span><br><span class="line"></span><br><span class="line">              <span class="string">"/etc/mysql/my.cnf"</span>: &#123;</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Source"</span>: <span class="string">"/home/server/mysql/conf/my.cnf"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Destination"</span>: <span class="string">"/etc/mysql/my.cnf"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Name"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Driver"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Relabel"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Propagation"</span>: <span class="string">"rprivate"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Named"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"ID"</span>: <span class="string">""</span></span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line"></span><br><span class="line">              <span class="string">"/logs"</span>: &#123;</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Source"</span>: <span class="string">"/home/server/mysql/logs"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Destination"</span>: <span class="string">"/logs"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Name"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Driver"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Relabel"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Propagation"</span>: <span class="string">"rprivate"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Named"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"ID"</span>: <span class="string">""</span></span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line"></span><br><span class="line">              <span class="string">"/mysql_data"</span>: &#123;</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Source"</span>: <span class="string">"/home/server/mysql/data"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Destination"</span>: <span class="string">"/mysql_data"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Name"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Driver"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Relabel"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Propagation"</span>: <span class="string">"rprivate"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Named"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"ID"</span>: <span class="string">""</span></span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line"></span><br><span class="line">              <span class="string">"/var/lib/mysql"</span>: &#123;</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Source"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Destination"</span>: <span class="string">"/var/lib/mysql"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Name"</span>: <span class="string">"85d91bff7012b57606af819480ce267449084e81ab386737c80ace9fe75f6621"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Relabel"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Propagation"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"Named"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">                     <span class="string">"ID"</span>: <span class="string">"897cd0152dd152166cb2715044ca4a3915a1b66280e0eb096eb74c2d737d7f77"</span></span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="5-修改docker默认的存储位置"><a href="#5-修改docker默认的存储位置" class="headerlink" title="5 修改docker默认的存储位置"></a>5 修改docker默认的存储位置</h1><p>docker 的所有images及相关信息存储位置为：<code>/var/lib/docker</code></p>
<ul>
<li>查看默认的docker存储路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info |grep <span class="string">'Docker Root Dir'</span></span><br><span class="line">WARNING: No swap <span class="built_in">limit</span> support</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br></pre></td></tr></table></figure>
<ul>
<li>停止所有docker容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker stop $(docker ps -a | awk <span class="string">'&#123; print $1&#125;'</span> | tail -n +2)</span><br></pre></td></tr></table></figure>
<ul>
<li>停止docker服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line"><span class="built_in">cd</span> /var/lib</span><br></pre></td></tr></table></figure>
<ul>
<li>打包docker目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -czvf /usr/docker.tar.gz docker/</span><br><span class="line"><span class="built_in">cd</span> /usr/</span><br><span class="line">sudo tar -xzvf docker.tar.gz</span><br></pre></td></tr></table></figure>
<ul>
<li>修改docker默认的存储位置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"graph"</span>: <span class="string">"/home/server/docker"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>启动docker服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>
<ul>
<li>启动所有docker容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker start $(docker ps -a | awk <span class="string">'&#123; print $1&#125;'</span> | tail -n +2)</span><br></pre></td></tr></table></figure>
<ul>
<li>查看修改后docker存储路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info |grep <span class="string">'Docker Root Dir'</span></span><br><span class="line">WARNING: No swap <span class="built_in">limit</span> support</span><br><span class="line">Docker Root Dir: /usr/docker</span><br></pre></td></tr></table></figure>
<p>本文转自：<a href="https://www.cnblogs.com/zhuochong/p/10070516.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuochong/p/10070516.html</a> ！！！！！！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MyISAM与InnoDB两者之间区别与选择</title>
    <url>/2019/04/28/MyISAM%E4%B8%8EInnoDB%E4%B8%A4%E8%80%85%E4%B9%8B%E9%97%B4%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<p>1、<code>MyISAM</code>：默认表类型，它是基于传统的ISAM类型，ISAM是Indexed Sequential Access Method (有索引的顺序访问方法) 的缩写，它是存储记录和文件的标准方法。不是事务安全的，而且不支持外键，如果执行大量的select，insert MyISAM比较适合。</p>
<p>2、<code>InnoDB</code>：支持事务安全的引擎，支持外键、行锁、事务是他的最大特点。如果有大量的update和insert，建议使用InnoDB，特别是针对多个并发和QPS较高的情况。</p>
 <a id="more"></a>
<h1 id="一、表锁差异"><a href="#一、表锁差异" class="headerlink" title="一、表锁差异"></a>一、表锁差异</h1><h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM:"></a><strong><em>MyISAM:</em></strong></h2><p><code>myisam</code>只支持表级锁，用户在操作<code>myisam</code>表时，<code>select，update，delete，insert</code>语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。也可以通过<code>lock table</code>命令来锁表，这样操作主要是可以模仿事务，但是消耗非常大，一般只在实验演示中使用。</p>
<h2 id="InnoDB-："><a href="#InnoDB-：" class="headerlink" title="InnoDB ："></a><strong><em>InnoDB ：</em></strong></h2><p><code>Innodb</code>支持事务和行级锁，是<code>innodb</code>的最大特色。</p>
<p>事务的ACID属性：<code>atomicity,consistent,isolation,durable</code>。</p>
<p>并发事务带来的几个问题：更新丢失，脏读，不可重复读，幻读。</p>
<p>事务隔离级别：未提交读(Read uncommitted)，已提交读(Read committed)，可重复读(Repeatable read)，可序列化(Serializable)</p>
<h2 id="四种隔离级别的比较"><a href="#四种隔离级别的比较" class="headerlink" title="四种隔离级别的比较"></a><strong><em>四种隔离级别的比较</em></strong></h2><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/MyISAM与InnoDB两者之间区别与选择/1571821576774.png" alt="图1"><br>查看mysql的默认事务隔离级别“<code>show global variables like ‘tx_isolation’;</code>”</p>
<p>Innodb的行锁模式有以下几种：<strong>共享锁，排他锁，意向共享锁(表锁)，意向排他锁(表锁)，间隙锁</strong>。</p>
<div class="note info"><p>注意：当语句没有使用索引，innodb不能确定操作的行，这个时候就使用的意向锁，也就是表锁</p></div>
<h2 id="关于死锁："><a href="#关于死锁：" class="headerlink" title="关于死锁："></a><strong><em>关于死锁：</em></strong></h2><p>什么是死锁？当两个事务都需要获得对方持有的排他锁才能完成事务，这样就导致了循环锁等待，也就是常见的死锁类型。</p>
<p>解决死锁的方法：</p>
<p>1、  数据库参数</p>
<p>2、  应用中尽量约定程序读取表的顺序一样</p>
<p>3、  应用中处理一个表时，尽量对处理的顺序排序</p>
<p>4、  调整事务隔离级别（避免两个事务同时操作一行不存在的数据，容易发生死锁）</p>
<h1 id="二、数据库文件差异"><a href="#二、数据库文件差异" class="headerlink" title="二、数据库文件差异"></a>二、数据库文件差异</h1><h2 id="MyISAM-："><a href="#MyISAM-：" class="headerlink" title="MyISAM ："></a><strong><em>MyISAM ：</em></strong></h2><p><code>myisam</code>属于堆表</p>
<p><code>myisam</code>在磁盘存储上有三个文件，每个文件名以表名开头，扩展名指出文件类型。</p>
<p><code>.frm</code>用于存储表的定义</p>
<p><code>.MYD</code>用于存放数据</p>
<p><code>.MYI</code> 用于存放表索引</p>
<p><code>myisam</code>表还支持三种不同的存储格式：</p>
<p>静态表(默认，但是注意数据末尾不能有空格，会被去掉)</p>
<p>动态表</p>
<p>压缩表</p>
<h2 id="InnoDB-：-1"><a href="#InnoDB-：-1" class="headerlink" title="InnoDB ："></a><strong><em>InnoDB ：</em></strong></h2><p><code>innodb</code>属于索引组织表</p>
<p><code>innodb</code>有两种存储方式，共享表空间存储和多表空间存储</p>
<p>两种存储方式的表结构和<code>myisam</code>一样，以表名开头，扩展名是<code>.frm</code>。</p>
<p>如果使用共享表空间，那么所有表的数据文件和索引文件都保存在一个表空间里，一个表空间可以有多个文件，通过<code>innodb_data_file_path</code>和<code>innodb_data_home_dir</code>参数设置共享表空间的位置和名字，一般共享表空间的名字叫<code>ibdata1-n</code>。</p>
<p>如果使用多表空间，那么每个表都有一个表空间文件用于存储每个表的数据和索引，文件名以表名开头，以<code>.ibd</code>为扩展名。</p>
<h1 id="三、索引差异"><a href="#三、索引差异" class="headerlink" title="三、索引差异"></a>三、索引差异</h1><h2 id="1、关于自动增长"><a href="#1、关于自动增长" class="headerlink" title="1、关于自动增长"></a>1、关于自动增长</h2><p>myisam引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增。</p>
<p>innodb引擎的自动增长咧必须是索引，如果是组合索引也必须是组合索引的第一列。</p>
<h2 id="2、关于主键"><a href="#2、关于主键" class="headerlink" title="2、关于主键"></a>2、关于主键</h2><p>myisam允许没有任何索引和主键的表存在，</p>
<p>myisam的索引都是保存行的地址。</p>
<p>innodb引擎如果没有设定主键或者非空唯一索引，就会自动生成一个6字节的主键(用户不可见)</p>
<p>innodb的数据是主索引的一部分，附加索引保存的是主索引的值。</p>
<h2 id="3、关于count-函数"><a href="#3、关于count-函数" class="headerlink" title="3、关于count()函数"></a>3、关于count()函数</h2><p><code>myisam</code>保存有表的总行数，如果<code>select count(*) from table;</code>会直接取出出该值</p>
<p><code>innodb</code>没有保存表的总行数，如果使用<code>select count(*) from table；</code>就会遍历整个表，消耗相当大，但是在加了<code>wehre</code> 条件后，<code>myisam</code>和<code>innodb</code>处理的方式都一样。</p>
<h2 id="4、全文索引"><a href="#4、全文索引" class="headerlink" title="4、全文索引"></a>4、全文索引</h2><p><code>myisam</code>支持<code>FULLTEXT</code>类型的全文索引</p>
<p><code>innodb</code>不支持<code>FULLTEXT</code>类型的全文索引，但是<code>innodb</code>可以使用<code>sphinx插件</code>支持全文索引，并且效果更好。（<code>sphinx</code>  是一个开源软件，提供多种语言的API接口，可以优化mysql的各种查询）</p>
<h2 id="5、delete-from-table"><a href="#5、delete-from-table" class="headerlink" title="5、delete from table"></a>5、delete from table</h2><p>使用这条命令时，<code>innodb</code>不会从新建立表，而是一条一条的删除数据，在<code>innodb</code>上如果要清空保存有大量数据的表，最 好不要使用这个命令。(推荐使用<code>truncate table</code>，不过需要用户有<code>drop</code>此表的权限)</p>
<h2 id="6、索引保存位置"><a href="#6、索引保存位置" class="headerlink" title="6、索引保存位置"></a>6、索引保存位置</h2><p><code>myisam</code>的索引以<code>表名+.MYI</code>文件分别保存。</p>
<p><code>innodb</code>的索引和数据一起保存在表空间里。</p>
<h1 id="四、开发的注意事项"><a href="#四、开发的注意事项" class="headerlink" title="四、开发的注意事项"></a>四、开发的注意事项</h1><ol>
<li><p>可以用<code>show create table tablename</code> 命令看表的引擎类型。</p>
</li>
<li><p>对不支持事务的表做<code>start/commit</code>操作没有任何效果，在执行<code>commit</code>前已经提交。</p>
</li>
<li><p>可以执行以下命令来切换非事务表到事务（数据不会丢失），<code>innodb</code>表比<code>myisam</code>表更安全：<code>alter table tablename type=innodb;</code>或者使用 <code>alter table tablename engine = innodb;</code></p>
</li>
<li><p>默认<code>innodb</code>是开启自动提交的，如果你按照<code>myisam</code>的使用方法来编写代码页不会存在错误，只是性能会很低。如何在编写代码时候提高数据库性能呢？</p>
<p>a、尽量将多个语句绑到一个事务中，进行提交，避免多次提交导致的数据库开销。</p>
<p>b、在一个事务获得排他锁或者意向排他锁以后，如果后面还有需要处理的sql语句，在这两条或者多条sql语句之间程序应尽量少的进行逻辑运算和处理，减少锁的时间。</p>
<p>c、尽量避免死锁</p>
<p>d、sql语句如果有<code>where</code>子句一定要使用索引，尽量避免获取意向排他锁。</p>
<p>f、针对我们自己的数据库环境，日志系统是直插入，不修改的，所以我们使用混合引擎方式，<code>ZION_LOG_DB</code>照旧使用<code>myisam</code>存储引擎，只有<code>ZION_GAME_DB，ZION_LOGIN_DB，DAUM_BILLING</code>使用<code>Innodb</code>引擎。</p>
</li>
</ol>
<h1 id="五、究竟该怎么选择"><a href="#五、究竟该怎么选择" class="headerlink" title="五、究竟该怎么选择"></a>五、究竟该怎么选择</h1><div class="note info"><p><strong>下面先让我们回答一些问题：</strong>   </p>
<p>◆ 你的数据库有外键吗？   </p>
<p>◆ 你需要事务支持吗？   </p>
<p>◆ 你需要全文索引吗？   </p>
<p>◆ 你经常使用什么样的查询模式？   </p>
<p>◆ 你的数据有多大？   </p></div>
<p><code>myisam</code>只有索引缓存<br><code>innodb</code>不分索引文件数据文件<code>innodb buffer</code><br><code>myisam</code>只能管理索引，在索引数据大于分配的资源时，会由操作系统来<code>cache</code>；数据文件依赖于操作系统的<code>cache</code>。<code>innodb</code>不管是索引还是数据，都是自己来管理  </p>
<p>思考上面这些问题可以让你找到合适的方向，但那并不是绝对的。如果你需要事务处理或是外键，那么<code>InnoDB</code>可能是比较好的方式。如果你需要全文索引，那么通常来说 <code>MyISAM</code>是好的选择，因为这是系统内建的，然而，我们其实并不会经常地去测试两百万行记录。所以，就算是慢一点，我们可以通过使用<code>Sphinx</code>从<code>InnoDB</code>中获得全文索引。  </p>
<p>数据的大小，是一个影响你选择什么样存储引擎的重要因素，大尺寸的数据集趋向于选择<code>InnoDB</code>方式，因为其支持事务处理和故障恢复。数据库的在小决定了故障恢复的时间长短，<code>InnoDB</code>可以利用事务日志进行数据恢复，这会比较快。而<code>MyISAM</code>可能会需要几个小时甚至几天来干这些事，<code>InnoDB</code>只需要几分钟。  </p>
<p>操作数据库表的习惯可能也会是一个对性能影响很大的因素。比如： <code>COUNT()</code> 在 <code>MyISAM</code>表中会非常快，而在<code>InnoDB</code>表下可能会很痛苦。而主键查询则在<code>InnoDB</code>下会相当相当的快，但需要小心的是如果我们的主键太长了也会导致性能问题。大批的<code>inserts</code>语句在 <code>MyISAM</code>下会快一些，但是<code>updates</code> 在<code>InnoDB</code>下会更快一些——尤其在并发量大的时候。  </p>
<p>所以，到底你检使用哪一个呢？根据经验来看，如果是一些小型的应用或项目，那么<code>MyISAM</code> 也许会更适合。当然，在大型的环境下使用<code>MyISAM</code> 也会有很大成功的时候，但却不总是这样的。如果你正在计划使用一个超大数据量的项目，而且需要事务处理或外键支持，那么你真的应该直接使用<code>InnoDB</code>方式。但需要记住<code>InnoDB</code> 的表需要更多的内存和存储，转换100GB 的<code>MyISAM</code>表到<code>InnoDB</code> 表可能会让你有非常坏的体验。  </p>
<p>对于支持事务的<code>InnoDB</code>类型的表，影响速度的主要原因是<code>AUTOCOMMIT</code>默认设置是打开的，而且程序没有显式调用<code>BEGIN</code> 开始事务，导致每插入一条都自动<code>Commit</code>，严重影响了速度。可以在执行sql前调用<code>begin</code>，多条sql形成一个事务（即使<code>autocommit</code>打开也可以），将大大提高性能。  </p>
<h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a><strong>InnoDB</strong></h2><p><code>InnoDB</code> 给 MySQL 提供了具有事务(<code>commit</code>)、回滚(<code>rollback</code>)和崩溃修复能力 (<code>crash recovery capabilities</code>)的事务安全(<code>transaction-safe (ACID compliant)</code>)型表。<code>InnoDB</code>提供了行锁(<code>locking on row level</code>)，提供与 <code>Oracle</code> 类型一致的不加锁读取(<code>non- locking read in SELECTs</code>)。这些特性均提高了多用户并发操作的性能表现。在<code>InnoDB</code>表中不需要扩大锁定 (<code>lock escalation</code>)，因为<code>InnoDB</code>的列锁定(<code>row level locks</code>)适宜非常小的空间。 <code>InnoDB</code> 是 MySQL 上第一个提供外键约束(<code>FOREIGN KEY constraints</code>)的表引擎。  </p>
<p><code>InnoDB</code> 的设计目标是处理大容量数据库系统，它的 CPU 利用率是其它基于磁盘的关系数据库引擎所不能比的。在技术上，InnoDB 是一套放在 MySQL 后台的完整数据库系统，InnoDB 在主内存中建立其专用的缓冲池用于高速缓冲数据和索引。 InnoDB 把数据和索引存放在表空间里，可能包含多个文件，这与其它的不一样，举例来说，在 MyISAM 中，表被存放在单独的文件中。InnoDB 表的大小只受限于操作系统的文件大小，一般为 2 GB。<br>InnoDB所有的表都保存在同一个数据文件<code>ibdata1</code> 中（也可能是多个文件，或者是独立的表空间文件）,相对来说比较不好备份，免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump。  </p>
<h2 id="MyISAM-1"><a href="#MyISAM-1" class="headerlink" title="MyISAM"></a><strong>MyISAM</strong></h2><p><code>MyISAM</code> 是MySQL缺省存贮引擎 .<br>每张<code>MyISAM</code>表被存放在三个文件 。<code>frm</code> 文件存放表格定义。 数据文件是<code>MYD (MYData)</code>。 索引文件是 <code>MYI (MYIndex)</code> 引伸。<br>因为<code>MyISAM</code>相对简单所以在效率上要优于<code>InnoDB</code>..小型应用使用<code>MyISAM</code>是不错的选择.<br><code>MyISAM</code>表是保存成文件的形式,在跨平台的数据转移中使用<code>MyISAM</code>存储会省去不少的麻烦   </p>
<h2 id="以下是一些细节和具体实现的差别："><a href="#以下是一些细节和具体实现的差别：" class="headerlink" title="以下是一些细节和具体实现的差别："></a><strong>以下是一些细节和具体实现的差别：</strong></h2><ol>
<li><code>InnoDB</code>不支持<code>FULLTEXT</code>类型的索引。   </li>
<li><code>InnoDB</code>中不保存表的具体行数，也就是说，执行select count(<em>) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(</em>)语句包含 where条件时，两种表的操作是一样的。  </li>
<li>对于<code>AUTO_INCREMENT</code>类型的字段，<code>InnoDB</code>中必须包含只有该字段的索引，但是在<code>MyISAM表</code>中，可以和其他字段一起建立联合索引。   </li>
<li><code>DELETE FROM table</code>时，<code>InnoDB</code>不会重新建立表，而是一行一行的删除。   </li>
<li><code>LOAD TABLE FROM MASTER</code>操作对<code>InnoDB</code>是不起作用的，解决方法是首先把<code>InnoDB</code>表改成<code>MyISAM</code>表，导入数据后再改成<code>InnoDB</code>表，但是对于使用的额外的<code>InnoDB</code>特性（例如外键）的表不适用。  </li>
</ol>
<p>另外，<code>InnoDB</code>表的行锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表，例如<code>update table set num=1 where name like &quot;%aaa%&quot;;</code>  </p>
<p>任何一种表都不是万能的，只用恰当的针对业务类型来选择合适的表类型，才能最大的发挥MySQL的性能优势。   </p>
<h1 id="六、重复地总结一遍"><a href="#六、重复地总结一遍" class="headerlink" title="六、重复地总结一遍"></a>六、重复地总结一遍</h1><ol>
<li><p><code>MyISAM</code>不支持事务，<code>InnoDB</code>是事务类型的存储引擎，当我们的表需要用到事务支持的时候，那肯定是不能选择<code>MyISAM</code>了。</p>
</li>
<li><p><code>MyISAM</code>只支持表级锁，<code>BDB</code>支持页级锁和表级锁默认为页级锁，而<code>InnoDB</code>支持行级锁和表级锁默认为行级锁</p>
</li>
</ol>
<p><strong>表级锁：</strong>直接锁定整张表，在锁定期间，其他进程无法对该表进行写操作，如果设置的是写锁，那么其他进程读也不允许</p>
<p><code>MyISAM</code>是表级锁定的存储引擎，它不会出现死锁问题</p>
<p><strong><em>对于<code>write</code>，表锁定原理如下：</em></strong></p>
<p>如果表上没有锁，在其上面放置一个写锁，否则，把锁定请求放在写锁队列中。</p>
<p><strong><em>对于<code>read</code>，表锁定原理如下 ：</em></strong></p>
<p>如果表上没有写锁定，那么把一个读锁放在其上面，否则把锁请求放在读锁定队列中</p>
<p>当一个锁定被释放时，表可被写锁定队列中的线程得到，然后才是读锁定队列中的线程。这意味着，如果你在一个表上有许多更新，那么你的SELECT语句将等到所有的写锁定线程执行完。</p>
<p><strong>行级锁：</strong>只对指定的行进行锁定，其他进程还是可以对表中的其他行进行操作的。</p>
<p>行级锁是<code>Mysql</code>粒度最小的一种锁，它能大大的减少数据库操作的冲突，但是粒度越小实现成本也越大。</p>
<p>行级锁可能会导致“死锁”，那到底是怎么导致的呢，分析原因：Mysql行级锁并不是直接锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条sql语句操作了主键索引，那么Mysql就会锁定这个主键索引，如果sql语句操作的是非主键索引，那么Mysql会先锁定这个非主键索引，再去锁定主键索引。</p>
<p>在<code>UPDATE</code> 和 <code>DELETE</code>操作时Mysql不仅会锁定所有<code>WHERE</code> 条件扫描过得索引，还会锁定相邻的键值。</p>
<p><strong><em>“死锁”举例分析：</em></strong></p>
<p>表Test：（ID,STATE,TIME）  主键索引：ID  非主键索引：STATE</p>
<p>当执行”<code>UPDATE  STATE =1011 WHERE STATE=1000</code>“  语句的时候会锁定STATE索引，由于STATE 是非主键索引,所以Mysql还会去请求锁定ID索引</p>
<p>当另一个SQL语句与语句1几乎同时执行时：“UPDATE STATE=1010 WHERE ID=1”  对于语句2 Mysql会先锁定ID索引，由于语句2操作了STATE字段，所以Mysql还会请求锁定STATE索引。这时。彼此锁定着对方需要的索引，又都在等待对方释放锁定。所以出现了”死锁”的情况。</p>
<p><strong><em>行级锁的优点：</em></strong></p>
<p>有许多线程访问不同的行时，只存在少量的冲突。</p>
<p>回滚时只有少量的更改</p>
<p>可以长时间锁定单一的行</p>
<p><strong><em>行级锁缺点：</em></strong></p>
<p>相对于页级锁和表级锁来说占用了更多的内存</p>
<p>当表的大部分行在使用时，比页级锁和表级锁慢，因为你必须获得更多的锁</p>
<p>当在大部分数据上经常使用GROUP BY操作，肯定会比表级锁和页级锁慢。</p>
<p>页级锁：表级锁速度快，但是冲突多；行级锁速度慢，但冲突少；页级锁就是他俩折中的，一次锁定相邻的一组记录。</p>
<ol start="3">
<li><p><code>MyISAM</code>引擎不支持外键，<code>InnoDB</code>支持外键</p>
</li>
<li><p><code>MyISAM</code>引擎的表在大量高并发的读写下会经常出现表损坏的情况</p>
</li>
</ol>
<p>我们以前做的项目就遇到这个问题，表的<code>INSERT</code> 和 <code>UPDATE</code>操作很频繁，原来用的<code>MyISAM</code>引擎，导致表隔三差五就损坏，后来更换成了<code>InnoDB</code>引擎。</p>
<p><strong><em>其他容易导致表损坏原因：</em></strong></p>
<ul>
<li><p>服务器突然断电导致数据文件损坏，强制关机（mysqld未关闭情况下）导致表损坏</p>
</li>
<li><p>mysqld进程在写入操作的时候被杀掉</p>
</li>
<li><p>磁盘故障</p>
</li>
</ul>
<p><strong><em>表损坏常见症状：</em></strong></p>
<ul>
<li><p>查询表不能返回数据或返回部分数据</p>
</li>
<li><p>打开表失败： <code>Can’t open file: ‘×××.MYI’ (errno: 145)</code> 。</p>
</li>
</ul>
<p>Error: Table ‘p’ is marked as crashed and should be repaired 。</p>
<p>Incorrect key file for table: ‘…’. Try to repair it</p>
<p><strong><em>Mysql表的恢复：</em></strong></p>
<p>对于<code>MyISAM</code>表的恢复：</p>
<p>可以使用Mysql自带的<code>myisamchk</code>工具： <code>myisamchk -r tablename</code>  或者 <code>myisamchk -o tablename</code>（比前面的更保险） 对表进行修复</p>
<ol start="5">
<li>对于<code>count()</code>查询来说<code>MyISAM</code>更有优势</li>
</ol>
<p>因为<code>MyISAM</code>存储了表中的行数记录，执行<code>SELECT COUNT()</code> 的时候可以直接获取到结果，而<code>InnoDB</code>需要扫描全部数据后得到结果。</p>
<p>但是注意一点：对于带有<code>WHERE</code> 条件的<code>SELECT COUNT()</code>语句两种引擎的表执行过程是一样的，都需要扫描全部数据后得到结果</p>
<ol start="6">
<li><p><code>InnoDB</code>是为处理巨大数据量时的最大性能设计，它的CPU效率可能是任何其它基于磁盘的关系数据库引擎所不能匹敌的。</p>
</li>
<li><p><code>MyISAM</code>支持全文索引（<code>FULLTEXT</code>），<code>InnoDB</code>不支持</p>
</li>
<li><p><code>MyISAM</code>引擎的表的查询、更新、插入的效率要比<code>InnoDB</code>高</p>
</li>
</ol>
<p><em>网上截取了前辈们测试结论：</em> </p>
<p>测试方法：连续提交10个query， 表记录总数：38万 ， 时间单位 s</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">引擎类型                    MyISAM                InnoDB              性能相差</span><br><span class="line"> </span><br><span class="line">count                      0.0008357             3.0163                3609</span><br><span class="line"> </span><br><span class="line">查询主键                    0.005708              0.1574                27.57</span><br><span class="line"> </span><br><span class="line">查询非主键                   24.01               80.37                3.348</span><br><span class="line"> </span><br><span class="line">更新主键                    0.008124              0.8183                100.7</span><br><span class="line"> </span><br><span class="line">更新非主键                   0.004141             0.02625              6.338</span><br><span class="line"> </span><br><span class="line">插入                       0.004188             0.3694                88.21</span><br></pre></td></tr></table></figure>
<p>   (1)  加了索引以后，对于<code>MyISAM</code>查询可以加快：<code>4 206.09733</code>倍，对InnoDB查询加快<code>510.72921</code>倍，同时对<code>MyISAM</code>更新速度减慢为原来的<code>1/2</code>，<code>InnoDB</code>的更新速度减慢为原来的<code>1/30</code>。要看情况决定是否要加索引，比如不查询的<code>log</code>表，不要做任何的索引。</p>
<p>   (2)  如果你的数据量是百万级别的，并且没有任何的事务处理，那么用<code>MyISAM</code>是性能最好的选择。</p>
<p>   (3）<code>InnoDB</code>表的大小更加的大，用<code>MyISAM</code>可省很多的硬盘空间。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在我们测试的这个38w的表中，表占用空间的情况如下：</span><br><span class="line">    引擎类型                    MyISAM              InnoDB</span><br><span class="line">    数据                      53,924 KB          58,976 KB</span><br><span class="line">    索引                      13,640 KB          21,072 KB</span><br><span class="line">    占用总空间                  67,564 KB          80,048 KB</span><br><span class="line">  </span><br><span class="line">另外一个176W万记录的表， 表占用空间的情况如下：</span><br><span class="line"> </span><br><span class="line">    引擎类型                MyIsam            InnorDB</span><br><span class="line">    数据                  56,166 KB          90,736 KB</span><br><span class="line">    索引                  67,103 KB          88,848 KB</span><br><span class="line">    占用总空间              123,269 KB        179,584 KB</span><br></pre></td></tr></table></figure>
<h1 id="七、性能对比"><a href="#七、性能对比" class="headerlink" title="七、性能对比"></a>七、性能对比</h1><p>测试的版本是<code>mysql  Ver 14.14 Distrib 5.1.49, for debian-linux-gnu (i686)</code>，使用的是<code>Innodb plugin 1.0.8</code>（官方称比<code>built-in</code>版本性能更好）和默认的<code>MyISAM</code>。</p>
<p>测试机器是笔记本，配置如下：<em>Intel 酷睿2双核 P8600，4G DDR3 1066内存，320G硬盘5400转。</em></p>
<p><strong>测试一：</strong>数据插入性能测试，这里我分别对<code>innodb_flush_log_at_trx_commit</code>参数打开和关闭都测了了一下，每次测试都是运行<code>40s</code>，表中数字都是实际插入条数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">                                  MyISAM                 Innodb (打开)      Innodb(关闭)</span><br><span class="line"></span><br><span class="line">单线程，逐个插入         120000           60000              60000</span><br><span class="line"></span><br><span class="line">4线程，逐个插入          40000*4          20000*4            40000*4</span><br><span class="line"></span><br><span class="line">单线程，批量100条/次插入  3600*100           800*100            3000*100</span><br><span class="line"></span><br><span class="line">单线程，批量200条/次插入  1800*200           400*200            1600*200</span><br></pre></td></tr></table></figure>
<p>可以发现批量插入的性能远高于单条插入，但是一次批量的大小对性能影响不大。每条记录是否都刷新日志的参数对<code>innodb</code>性能的影响巨大。总体上来说，<code>MyISAM</code>性能更优一点。这里有一点需要注意，在插入测试过程中，我对系统资源进行了监控，发现<code>MyISAM</code>对系统资源占用很低，但是<code>Innodb</code>对磁盘占用却很高，应该是对事务控制多了很多需要记录的日志。</p>
<p><strong>测试二：</strong>数据读取性能测试。每次随机读取1000条记录，反复进行读取。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">                                                 MyISAM        Innodb</span><br><span class="line"></span><br><span class="line">单线程，200次读取       5.7s        16.7s</span><br><span class="line"></span><br><span class="line">4线程，200次读取        12s         40.8s</span><br></pre></td></tr></table></figure>
<p>可以看出<code>MyISAM</code>的读取性能非常恐怖，性能差距在3倍的样子。</p>
<p>以上两个测试发现<code>MyISAM</code>在无事务的需求下几乎完胜，但是要知道它是表锁，<code>Innodb</code>是行锁，那么在并发读写同时存在的情况下，那结果会是怎么样呢？！</p>
<p><strong>测试三：</strong>两个线程并发写入，2个线程并发读取。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">                                                 MyISAM                                 Innodb</span><br><span class="line"></span><br><span class="line">逐个插入             写入40s：10000*2 读取200次*2：14s                写入40s：60000*2 读取200次*2：50s</span><br><span class="line"></span><br><span class="line">批量100条/次插入        写入40s：1000*100*2 读取200次*2：10s              写入40s：1500*100*2 读取200次*2：50s</span><br></pre></td></tr></table></figure>
<p>这下立刻显示出<code>Innodb</code>在并发情况下强劲的性能，几乎没有什么性能衰减。而<code>MyISAM</code>单条插入速度变得非常慢，批量插入也下降了<code>40%</code>性能。</p>
<p>总结一下，在写多读少的应用中还是<code>Innodb</code>插入性能更稳定，在并发情况下也能基本，如果是对读取速度要求比较快的应用还是选<code>MyISAM</code>。</p>
<p>转自于：<a href="http://blog.csdn.net/wjtlht928/article/details/46641865" target="_blank" rel="noopener">http://blog.csdn.net/wjtlht928/article/details/46641865</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix钉钉通知_插件版</title>
    <url>/2019/08/08/zabbix%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<h1 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1 安装插件"></a>1 安装插件</h1><a id="more"></a>
<p>下载插件<code>webhook-zabbix-robot-64</code>到<code>/usr/lib/zabbix/alertscripts/</code>路径</p>
<h1 id="2-创建报警媒介类型"><a href="#2-创建报警媒介类型" class="headerlink" title="2 创建报警媒介类型"></a>2 创建<code>报警媒介类型</code></h1><div class="note info"><p>脚本名称：插件或脚本的名字<br>脚本参数：<br>-webhook=<a href="https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" target="_blank" rel="noopener">https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</a><br>-msg={ALERT.MESSAGE}<br>-url=<a href="http://192.168.0.10/zabbix/" target="_blank" rel="noopener">http://192.168.0.10/zabbix/</a><br>-log=/tmp/dingding.log</p></div>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix钉钉通知_插件版/1571821135368.png" alt="图1"></p>
<h1 id="3-配置用户告警"><a href="#3-配置用户告警" class="headerlink" title="3 配置用户告警"></a>3 配置用户告警</h1><h2 id="3-1-配置告警媒介"><a href="#3-1-配置告警媒介" class="headerlink" title="3.1 配置告警媒介"></a>3.1 配置告警媒介</h2><p>添加告警媒介，使用户可接收告警信息，及设置接收信息重要性<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix钉钉通知_插件版/1571821143407.png" alt="图2"></p>
<h2 id="3-2-配置权限"><a href="#3-2-配置权限" class="headerlink" title="3.2 配置权限"></a>3.2 配置权限</h2><p>用户只接收有权限的主机告警<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix钉钉通知_插件版/1571821151068.png" alt="图3"></p>
<h1 id="4-创建动作"><a href="#4-创建动作" class="headerlink" title="4 创建动作"></a>4 创建<code>动作</code></h1><ul>
<li>触发条件<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix钉钉通知_插件版/1571821157896.png" alt="图4"></li>
<li>操作<br><strong>消息内容：</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>&#123;HOST.NAME&#125;<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">time</span>&gt;</span>&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">level</span>&gt;</span>&#123;TRIGGER.SEVERITY&#125;<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>&#123;TRIGGER.NAME&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>&#123;TRIGGER.KEY1&#125;<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>&#123;ITEM.VALUE&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">now</span>&gt;</span>&#123;ITEM.LASTVALUE&#125;<span class="tag">&lt;/<span class="name">now</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>&#123;EVENT.ID&#125;<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ip</span>&gt;</span>&#123;HOST.IP&#125;<span class="tag">&lt;/<span class="name">ip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.0.10/zabbix<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>&#123;EVENT.AGE&#125;<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">status</span>&gt;</span>&#123;EVENT.STATUS&#125;<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">acknowledgement</span>&gt;</span> &#123;EVENT.ACK.STATUS&#125; <span class="tag">&lt;/<span class="name">acknowledgement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">acknowledgementhistory</span>&gt;</span> &#123;EVENT.ACK.HISTORY&#125;<span class="tag">&lt;/<span class="name">acknowledgementhistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix钉钉通知_插件版/1571821167895.png" alt="图5"></p>
<ul>
<li>恢复操作<br><strong>消息内容：</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>&#123;HOST.NAME&#125;<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">time</span>&gt;</span>&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">level</span>&gt;</span>&#123;TRIGGER.SEVERITY&#125;<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>&#123;TRIGGER.NAME&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>&#123;TRIGGER.KEY1&#125;<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>&#123;ITEM.VALUE&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">now</span>&gt;</span>&#123;ITEM.LASTVALUE&#125;<span class="tag">&lt;/<span class="name">now</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>&#123;EVENT.ID&#125;<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ip</span>&gt;</span>&#123;HOST.IP&#125;<span class="tag">&lt;/<span class="name">ip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">color</span>&gt;</span>FF4A954A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.0.10/zabbix<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>&#123;EVENT.AGE&#125;<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">recoveryTime</span>&gt;</span>&#123;EVENT.RECOVERY.DATE&#125; &#123;EVENT.RECOVERY.TIME&#125;<span class="tag">&lt;/<span class="name">recoveryTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">status</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix钉钉通知_插件版/1571821177075.png" alt="图6"></p>
<ul>
<li>告警确认或更新</li>
</ul>
<p><strong>消息内容：</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">报警确认：&#123;HOST.NAME&#125;</span><br><span class="line">------------</span><br><span class="line">确认人：&#123;USER.FULLNAME&#125; </span><br><span class="line">时间：&#123;ACK.DATE&#125; &#123;ACK.TIME&#125; </span><br><span class="line">确认信息如下：</span><br><span class="line">"&#123;ACK.MESSAGE&#125;"</span><br><span class="line">问题服务器IP：&#123;HOSTNAME1&#125;</span><br><span class="line">问题ID：&#123;EVENT.ID&#125;</span><br><span class="line">当前的问题是： &#123;TRIGGER.NAME&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix钉钉通知_插件版/1571821185190.png" alt="图7"><br><div class="note info"><p><strong>备注</strong><br>这个告警使用的使python脚本，非通过插件，可观察上图<code>仅送到</code>信息，本文结尾上传插件和脚本，同时添加告警媒介python版<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix钉钉通知_插件版/1571821192513.png" alt="图8"><br>脚本参数：<br>{ALERT.MESSAGE}<br>{ALERT.SENDTO}<br>{ALERT.SUBJECT}</p></div></p>
<h1 id="5-附件"><a href="#5-附件" class="headerlink" title="5 附件"></a>5 附件</h1><p>=<a href="dingding.py">dingding.py</a><br>=<a href="webhook-zabbix-robot-64">webhook-zabbix-robot-64</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>钉钉</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix监控项自定义</title>
    <url>/2019/08/08/zabbix%E7%9B%91%E6%8E%A7%E9%A1%B9%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h1 id="1-防火墙状态监控"><a href="#1-防火墙状态监控" class="headerlink" title="1 防火墙状态监控"></a>1 防火墙状态监控</h1><h2 id="1-1-在被监控主机配置监控脚本"><a href="#1-1-在被监控主机配置监控脚本" class="headerlink" title="1.1 在被监控主机配置监控脚本"></a>1.1 在被监控主机配置监控脚本</h2><a id="more"></a>
<h3 id="1-1-1-监控脚本"><a href="#1-1-1-监控脚本" class="headerlink" title="1.1.1 监控脚本"></a>1.1.1 监控脚本</h3><p>在<code>/usr/local/zabbix/scripts/</code>下创建脚本<code>firewalld_status.sh</code><br><strong>内容如下：</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stat</span>=`systemctl status firewalld|grep Active|awk <span class="string">'&#123;print $3&#125;'</span>|cut -c 2-8`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$stat</span> == running ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p>脚本含义：打印防火墙状态，截取运行状态字符，如果是running输出1，否则输出0</p>
<h3 id="1-1-2-设置键值"><a href="#1-1-2-设置键值" class="headerlink" title="1.1.2 设置键值"></a>1.1.2 设置键值</h3><p>在<code>/etc/zabbix/zabbix_agentd.d</code>目录下创建配置文件<br><div class="note warning"><p><strong>配置文件后缀必须是<code>.conf</code></strong></p></div></p>
<p>#创建配置文件<code>firewalld_status.conf</code></p>
<p>#添加如下内容,设置键值<code>status.firewalld</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UserParameter=status.firewalld,/usr/<span class="built_in">local</span>/zabbix/scripts/firewalld_status.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="1-2-创建监控项"><a href="#1-2-创建监控项" class="headerlink" title="1.2 创建监控项"></a>1.2 创建监控项</h2><p>自定义名称，输入上方定义的键值为<code>status.firewalld</code><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix监控项自定义/1571821069316.png" alt="图1"></p>
<h2 id="1-3-创建触发器"><a href="#1-3-创建触发器" class="headerlink" title="1.3 创建触发器"></a>1.3 创建触发器</h2><p>检测键值输出，如果输出为0，则触发告警。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix监控项自定义/1571821077739.png" alt="图2"></p>
<h1 id="2-端口监控"><a href="#2-端口监控" class="headerlink" title="2 端口监控"></a>2 端口监控</h1><h2 id="2-1-创建监控项"><a href="#2-1-创建监控项" class="headerlink" title="2.1 创建监控项"></a>2.1 创建监控项</h2><p><code>net.tcp.listen[port]</code> 检查 TCP 端口 是否处于侦听状态。返回 0 - 未侦听；1 - 正在侦听<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix监控项自定义/1571821085296.png" alt="图3"></p>
<h2 id="2-2-创建触发器"><a href="#2-2-创建触发器" class="headerlink" title="2.2 创建触发器"></a>2.2 创建触发器</h2><p>检测最后的返回结果，如果是0触发告警<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix监控项自定义/1571821092173.png" alt="图4"></p>
<h1 id="3-进程监控"><a href="#3-进程监控" class="headerlink" title="3 进程监控"></a>3 进程监控</h1><h2 id="3-1-创建监控项"><a href="#3-1-创建监控项" class="headerlink" title="3.1 创建监控项"></a>3.1 创建监控项</h2><p><code>proc.num[&lt;name&gt;,&lt;user&gt;,&lt;state&gt;,&lt;cmdline&gt;]</code>    进程数。返回整数<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix监控项自定义/1571821100728.png" alt="图5"></p>
<h2 id="3-2-创建触发器"><a href="#3-2-创建触发器" class="headerlink" title="3.2 创建触发器"></a>3.2 创建触发器</h2><p>如果进程数量为0,触发告警<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/zabbix监控项自定义/1571821111267.png" alt="图6"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>详解tomcat的连接数与线程池</title>
    <url>/2019/08/13/%E8%AF%A6%E8%A7%A3tomcat%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%95%B0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/kismetv/p/7806063.html" target="_blank" rel="noopener">https://www.cnblogs.com/kismetv/p/7806063.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>openldap部署</title>
    <url>/2019/08/07/openldap%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1    安装环境"></a>1    安装环境</h1><p>OS: Centos 7.5<br>OpenLDAP: 2.4.44<br>Phpldapadmin: 1.2.3<br>主1：192.168.0.130<br>主2：192.168.0.10<br><a id="more"></a></p>
<h1 id="2-安装OpenLDAP（主1）"><a href="#2-安装OpenLDAP（主1）" class="headerlink" title="2    安装OpenLDAP（主1）"></a>2    安装OpenLDAP（主1）</h1><h2 id="2-1-Yum命令安装"><a href="#2-1-Yum命令安装" class="headerlink" title="2.1 Yum命令安装"></a>2.1 Yum命令安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install openldap compat-openldap openldap-clients openldap-servers openldap-devel</span><br></pre></td></tr></table></figure>
<h2 id="2-2-安装包说明"><a href="#2-2-安装包说明" class="headerlink" title="2.2 安装包说明"></a>2.2 安装包说明</h2><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821253688.png" alt="图1"></p>
<h2 id="2-3-配置方式"><a href="#2-3-配置方式" class="headerlink" title="2.3 配置方式"></a>2.3 配置方式</h2><div class="note info"><p><strong>说明</strong><br>这里就是重点中的重点了，从<code>openldap2.4.23</code>版本开始，所有配置说句都保存在<code>slapd.d</code>目录下的<code>cn=config</code>文件夹内，不再使用<code>slapd.conf</code>作为配置文件。配置文件的后缀为<code>ldif</code>，且每个配置文件都是通过命令自动生成的，任意打开一个配置文件，在开头都会有一行注释，说明此为自动生成的文件，请勿编辑，使用<code>ldapmodify</code>命令进行修改  <code># AUTO-GENERATED FILE - DO NOT EDIT!! Use ldapmodify</code>.</p>
<p>有两种配置方式，一种是通过修改旧版配置文件slapd.conf，再用<code>slaptest -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d/</code>导入到数据库中，这种方式非常麻烦，不建议使用。<br>一种是通过编辑<code>ldif</code>文件，再用<code>ldapadd</code>命令导入到数据库中，这种方式是动态配置，不需要重新启动服务端slapd进程。</p></div>
<h2 id="2-4-查看安装版本"><a href="#2-4-查看安装版本" class="headerlink" title="2.4 查看安装版本"></a>2.4 查看安装版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slapd -VV</span><br></pre></td></tr></table></figure>
<h2 id="2-5-启动OpenLDAP"><a href="#2-5-启动OpenLDAP" class="headerlink" title="2.5 启动OpenLDAP"></a>2.5 启动OpenLDAP</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制一个默认配置到指定目录下,并授权，这一步一定要做，然后再启动服务，不然生产密码时会报错</span></span><br><span class="line">cp /usr/share/openldap-servers/DB_CONFIG.example  /var/lib/ldap/DB_CONFIG</span><br><span class="line"><span class="comment"># 授权给ldap用户,此用户yum安装时便会自动创建</span></span><br><span class="line">chown -R ldap. /var/lib/ldap/DB_CONFIG</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动服务，先启动服务，配置后面再进行修改</span></span><br><span class="line">systemctl start slapd</span><br><span class="line">systemctl <span class="built_in">enable</span> slapd</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看状态，正常启动则ok</span></span><br><span class="line">systemctl status slapd</span><br></pre></td></tr></table></figure>
<h2 id="2-6-设置管理员密码"><a href="#2-6-设置管理员密码" class="headerlink" title="2.6 设置管理员密码"></a>2.6 设置管理员密码</h2><p>安装openldap后，会有三个命令用于修改配置文件，分别为<code>ldapadd</code>,<code>ldapmodify</code>, <code>ldapdelete</code>，顾名思义就是<code>添加</code>，<code>修改</code>和<code>删除</code>。而需要修改或增加配置时，则需要先写一个<code>ldif</code>后缀的配置文件，然后通过命令将写的配置更新到<code>slapd.d</code>目录下的配置文件中去，完整的配置过程如下，跟着我做就可以了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成管理员密码,记录下这个密码，后面需要用到</span></span><br><span class="line">[root@LDAP ldap]<span class="comment"># slappasswd </span></span><br><span class="line">New password: 2hjx@123</span><br><span class="line">Re-enter new password: 2hjx@123</span><br><span class="line">&#123;SSHA&#125;r1uEavrA6S6uINzNXHcPGK+YFLNGB3VV</span><br><span class="line"><span class="comment"># 新增修改密码文件,ldif为后缀，文件名随意，不要在/etc/openldap/slapd.d/目录下创建类似文件</span></span><br><span class="line"><span class="comment"># 生成的文件为需要通过命令去动态修改ldap现有配置，如下，我在家目录下，创建文件</span></span><br><span class="line"><span class="built_in">cd</span> /etc/openldap/zidingyi.conf</span><br><span class="line">vim changepwd.ldif</span><br></pre></td></tr></table></figure>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="literal">----------------------------------------------------------------------</span></span><br><span class="line"><span class="attribute">dn</span>: olcDatabase=&#123;0&#125;config,cn=config</span><br><span class="line"><span class="attribute">changetype</span>: modify</span><br><span class="line"><span class="attribute">add</span>: olcRootPW</span><br><span class="line"><span class="attribute">olcRootPW</span>: &#123;SSHA&#125;r1uEavrA6S6uINzNXHcPGK+YFLNGB3VV</span><br><span class="line"></span><br><span class="line"><span class="literal">----------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p> <strong>这里解释一下这个文件的内容:</strong><br> 第一行执行配置文件，这里就表示指定为 <code>cn=config/olcDatabase={0}config</code> 文件。你到<code>/etc/openldap/slapd.d/</code>目录下就能找到此文件<br>第二行 <code>changetype</code> 指定类型为修改<br>第三行 <code>add</code>表示添加 <code>olcRootPW</code>配置项<br>第四行指定 <code>olcRootPW</code>配置项的值</p>
<p>#在执行下面的命令前，你可以先查看原本的<code>olcDatabase={0}config</code>文件，里面是没有<code>olcRootPW</code>这个项的，执行命令后，你再看就会新增了<code>olcRootPW</code>项，而且内容是我们文件中指定的值加密后的字符串</p>
<p>#执行命令，修改ldap配置，通过-f执行文件<br><code>ldapadd -Y EXTERNAL -H ldapi:/// -f changepwd.ldif</code></p></div>
<p><strong>执行修改命令后，有如下输出则为正常：</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821267286.png" alt="图2"><br>查看<code>slapd.d/cn\=config/olcDatabase\=\{0\}config.ldif</code>内容,新增了一个<code>olcRootPW</code>项。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821281590.png" alt="图3"><br>上面就是一个完整的修改配置的过程，切记不能直接修改<code>/etc/openldap/slapd.d/</code>目录下的配置。</p>
<h2 id="2-7-导入Schema"><a href="#2-7-导入Schema" class="headerlink" title="2.7 导入Schema"></a>2.7 导入Schema</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们需要向 LDAP 中导入一些基本的 Schema。这些 Schema 文件位于 /etc/openldap/schema/ 目录中，schema控制着条目拥有哪些对象类和属性，可以自行选择需要的进行导入，</span></span><br><span class="line"><span class="comment"># 依次执行下面的命令，导入基础的一些配置,我这里将所有的都导入一下，其中core.ldif是默认已经加载了的，不用导入</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/collective.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/corba.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/duaconf.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/dyngroup.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/java.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/misc.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/openldap.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/pmi.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/ppolicy.ldif</span><br></pre></td></tr></table></figure>
<h2 id="2-8-修改域名"><a href="#2-8-修改域名" class="headerlink" title="2.8 修改域名"></a>2.8 修改域名</h2><p>#修改域名，新增<code>changedomain.ldif</code>, 这里我自定义的域名为 <code>zhjx.com</code>，管理员用户账号为<code>admin</code>。</p>
<p>#如果要修改，则修改文件中相应的<code>dc=zhjx,dc=com</code>为自己的域名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim changedomain.ldif</span><br></pre></td></tr></table></figure>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="literal">-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: olcDatabase=&#123;1&#125;monitor,cn=config</span><br><span class="line"><span class="attribute">changetype</span>: modify</span><br><span class="line"><span class="attribute">replace</span>: olcAccess</span><br><span class="line"><span class="attribute">olcAccess</span>: &#123;0&#125;to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read by dn.base="cn=admin,dc=zhjx,dc=com" read by * none</span><br><span class="line"> </span><br><span class="line"><span class="attribute">dn</span>: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line"><span class="attribute">changetype</span>: modify</span><br><span class="line"><span class="attribute">replace</span>: olcSuffix</span><br><span class="line"><span class="attribute">olcSuffix</span>: dc=zhjx,dc=com</span><br><span class="line"> </span><br><span class="line"><span class="attribute">dn</span>: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line"><span class="attribute">changetype</span>: modify</span><br><span class="line"><span class="attribute">replace</span>: olcRootDN</span><br><span class="line"><span class="attribute">olcRootDN</span>: cn=admin,dc=zhjx,dc=com</span><br><span class="line"> </span><br><span class="line"><span class="attribute">dn</span>: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line"><span class="attribute">changetype</span>: modify</span><br><span class="line"><span class="attribute">replace</span>: olcRootPW</span><br><span class="line"><span class="attribute">olcRootPW</span>: &#123;SSHA&#125;r1uEavrA6S6uINzNXHcPGK+YFLNGB3VV</span><br><span class="line"> </span><br><span class="line"><span class="attribute">dn</span>: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line"><span class="attribute">changetype</span>: modify</span><br><span class="line"><span class="attribute">add</span>: olcAccess</span><br><span class="line"><span class="attribute">olcAccess</span>: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn="cn=admin,dc=zhjx,dc=com" write by anonymous auth by self write by * none</span><br><span class="line"><span class="attribute">olcAccess</span>: &#123;1&#125;to dn.base="" by * read</span><br><span class="line"><span class="attribute">olcAccess</span>: &#123;2&#125;to * by dn="cn=admin,dc=zhjx,dc=com" write by * read </span><br><span class="line"><span class="literal">-------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
<p>#执行命令，修改配置<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldapmodify -Y EXTERNAL -H ldapi:/// -f changedomain.ldif</span><br></pre></td></tr></table></figure></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821291356.png" alt="图4"></p>
<p>空白行检测有没有空格，否则报错<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821298374.png" alt="图5"><br>2.9    启用memberof功能</p>
<p>#新增<code>add-memberof.ldif</code>, </p>
<p>#开启<code>memberof</code>支持并新增用户支持<code>memberof</code>配置<br><strong>vim add-memberof.ldif</strong><br><figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="literal">-------------------------------------------------------------</span></span><br><span class="line">[root@LDAP zidingyi.conf]<span class="comment"># vim add-memberof.ldif </span></span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: cn=module&#123;0&#125;,cn=config</span><br><span class="line"><span class="attribute">cn</span>: modulle&#123;0&#125;</span><br><span class="line"><span class="attribute">objectClass</span>: olcModuleList</span><br><span class="line"><span class="attribute">objectclass</span>: top</span><br><span class="line"><span class="attribute">olcModuleload</span>: memberof.la</span><br><span class="line"><span class="attribute">olcModulePath</span>: /usr/lib64/openldap</span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: olcOverlay=&#123;0&#125;memberof,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line"><span class="attribute">objectClass</span>: olcConfig</span><br><span class="line"><span class="attribute">objectClass</span>: olcMemberOf</span><br><span class="line"><span class="attribute">objectClass</span>: olcOverlayConfig</span><br><span class="line"><span class="attribute">objectClass</span>: top</span><br><span class="line"><span class="attribute">olcOverlay</span>: memberof</span><br><span class="line"><span class="attribute">olcMemberOfDangling</span>: ignore</span><br><span class="line"><span class="attribute">olcMemberOfRefInt</span>: TRUE</span><br><span class="line"><span class="attribute">olcMemberOfGroupOC</span>: groupOfUniqueNames</span><br><span class="line"><span class="attribute">olcMemberOfMemberAD</span>: uniqueMember</span><br><span class="line"><span class="attribute">olcMemberOfMemberOfAD</span>: memberOf</span><br><span class="line"><span class="literal">-------------------------------------------------------------</span></span><br></pre></td></tr></table></figure></p>
 <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code"> </span></span><br><span class="line"># 新增refint1.ldif文件</span><br><span class="line">vim refint1.ldif</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">add: olcmoduleload</span><br><span class="line">olcmoduleload: refint</span><br><span class="line">-------------------------------------------------------------</span><br></pre></td></tr></table></figure>
 <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"># 新增refint2.ldif文件</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">dn: olcOverlay=refint,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcRefintConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: refint</span><br><span class="line">olcRefintAttribute: memberof uniqueMember  manager owner</span><br><span class="line">-------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p>#依次执行下面命令，加载配置，顺序不能错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldapadd -Q -Y EXTERNAL -H ldapi:/// -f add-memberof.ldif</span><br><span class="line"> </span><br><span class="line">ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f refint1.ldif</span><br><span class="line"> </span><br><span class="line">ldapadd -Q -Y EXTERNAL -H ldapi:/// -f refint2.ldif</span><br></pre></td></tr></table></figure>
<h2 id="2-10-创建组织及admin组织角色"><a href="#2-10-创建组织及admin组织角色" class="headerlink" title="2.10 创建组织及admin组织角色"></a>2.10 创建组织及admin组织角色</h2><p>到此，配置修改完了，在上述基础上，我们来创建一个叫做 zhjx 的组织，并在其下创建一个 admin 的组织角色（该组织角色内的用户具有管理整个 LDAP 的权限）和 People 和 Group 两个组织单元：</p>
<p>#新增配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim zhjx.ldif</span><br></pre></td></tr></table></figure>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="literal">----------------------------------------------------------</span></span><br><span class="line"><span class="attribute">dn</span>: dc=zhjx,dc=com</span><br><span class="line"><span class="attribute">objectClass</span>: top</span><br><span class="line"><span class="attribute">objectClass</span>: dcObject</span><br><span class="line"><span class="attribute">objectClass</span>: organization</span><br><span class="line"><span class="attribute">o</span>: zhjx Company</span><br><span class="line"><span class="attribute">dc</span>: zhjx</span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: cn=admin,dc=zhjx,dc=com</span><br><span class="line"><span class="attribute">objectClass</span>: organizationalRole</span><br><span class="line"><span class="attribute">cn</span>: admin</span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: ou=People,dc=zhjx,dc=com</span><br><span class="line"><span class="attribute">objectClass</span>: organizationalUnit</span><br><span class="line"><span class="attribute">ou</span>: People</span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: ou=Group,dc=zhjx,dc=com</span><br><span class="line"><span class="attribute">objectClass</span>: organizationalRole</span><br><span class="line"><span class="attribute">cn</span>: Group</span><br><span class="line"><span class="literal">----------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
<p>#执行命令，添加配置, 这里要注意修改域名为自己配置的域名，然后需要输入上面我们生成的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldapadd -x -D cn=admin,dc=yaobili,dc=com -W -f zhjx.ldif</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821309517.png" alt="图6"></p>
<p>通过以上的所有步骤，我们就设置好了一个 LDAP 目录树：其中基准 <code>dc=zhjx,dc=com</code> 是该树的根节点，其下有一个管理域 <code>cn=admin,dc=zhjx,dc=com</code>和两个组织单元 <code>ou=People,dc=zhjx,dc=com</code>及 <code>ou=Group,dc=zhjx,dc=com</code>。</p>
<h2 id="2-11-关闭匿名访问"><a href="#2-11-关闭匿名访问" class="headerlink" title="2.11 关闭匿名访问"></a>2.11 关闭匿名访问</h2><p>在以下两个文件添加如下属性<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>openldap<span class="regexp">/cn=config/</span>cn=config.ldif</span><br><span class="line">添加：</span><br><span class="line"><span class="string">olcDisallows:</span> bind_anon</span><br><span class="line"><span class="string">olcRequires:</span> authc</span><br></pre></td></tr></table></figure></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>openldap<span class="regexp">/cn=config/</span>olcDatabase=&#123;<span class="number">-1</span>&#125;frontend.ldif</span><br><span class="line">添加：</span><br><span class="line"><span class="string">olcRequires:</span> authc</span><br></pre></td></tr></table></figure>
<p>新建disabled_anon.ldif,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim disabled_anon.ldif</span><br></pre></td></tr></table></figure>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="literal">------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: cn=config</span><br><span class="line"><span class="attribute">changetype</span>: modify</span><br><span class="line"><span class="attribute">add</span>: olcDisallows</span><br><span class="line"><span class="attribute">olcDisallows</span>: bind_anon</span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: cn=config</span><br><span class="line"><span class="attribute">changetype</span>: modify</span><br><span class="line"><span class="attribute">add</span>: olcRequires</span><br><span class="line"><span class="attribute">olcRequires</span>: authc</span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: olcDatabase=&#123;-1&#125;frontend,cn=config</span><br><span class="line"><span class="attribute">changetype</span>: modify</span><br><span class="line"><span class="attribute">add</span>: olcRequires</span><br><span class="line"><span class="attribute">olcRequires</span>: authc</span><br><span class="line"><span class="literal">-----------------------------------</span></span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">ldapadd -Y <span class="literal">EXTERNAL</span> -H ldapi:<span class="comment">/// -f zidingyi/disabled_anon.ldif</span></span><br></pre></td></tr></table></figure>
<h2 id="2-12-安装phpldapadmin"><a href="#2-12-安装phpldapadmin" class="headerlink" title="2.12 安装phpldapadmin"></a>2.12 安装phpldapadmin</h2><p> ldap装好后，下面安装web界面phpldapadmin。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum安装时，会自动安装apache和php的依赖。</span></span><br><span class="line"><span class="comment"># 注意： phpldapadmin很多没更新了，只支持php5，如果你服务器的环境是php7，则会有问题，页面会有各种报错</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum install -y phpldapadmin</span><br></pre></td></tr></table></figure>
<p> <strong>修改apache配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改apache的phpldapadmin配置文件</span></span><br><span class="line"><span class="comment"># 修改如下内容，放开外网访问，这里只改了2.4版本的配置，因为centos7 默认安装的apache为2.4版本。所以只需要改2.4版本的配置就可以了</span></span><br><span class="line"><span class="comment"># 如果不知道自己apache版本，执行 rpm -qa|grep httpd 查看apache版本</span></span><br><span class="line"> </span><br><span class="line">vim /etc/httpd/conf.d/phpldapadmin.conf</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">  &lt;IfModule mod_authz_core.c&gt;</span><br><span class="line">    <span class="comment"># Apache 2.4</span></span><br><span class="line">    Require all granted</span><br><span class="line">  &lt;/IfModule&gt;</span><br><span class="line">-----------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p> <strong>修改phpldapadmin配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改配置用DN登录ldap</span></span><br><span class="line">vim /etc/phpldapadmin/config.php</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"><span class="comment"># 398行，默认是使用uid进行登录，我这里改为cn，也就是用户名</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'attr'</span>,<span class="string">'cn'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 460行，关闭匿名登录，否则任何人都可以直接匿名登录查看所有人的信息</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'anon_bind'</span>,<span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 519行，设置用户属性的唯一性，这里我将cn,sn加上了，以确保用户名的唯一性</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'unique'</span>,<span class="string">'attrs'</span>,array(<span class="string">'mail'</span>,<span class="string">'uid'</span>,<span class="string">'uidNumber'</span>,<span class="string">'cn'</span>,<span class="string">'sn'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 538行，设置登陆信息，连接多个服务器可添加多个</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'name'</span>,<span class="string">'众合景轩-LDAP Server'</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'host'</span>,<span class="string">'127.0.0.1'</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'port'</span>,389);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'base'</span>,array(<span class="string">'dc=zhjx,dc=com'</span>));</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'auth_type'</span>,<span class="string">'cookie'</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'bind_id'</span>,<span class="string">'cn=admin,dc=zhjx,dc=com'</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'bind_pass'</span>,<span class="string">'2hjx@123'</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'tls'</span>,<span class="literal">false</span>);</span><br><span class="line">-----------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p><strong>启动apache</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start httpd</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure>
<h1 id="3-主2安装"><a href="#3-主2安装" class="headerlink" title="3    主2安装"></a>3    主2安装</h1><p>配置主2服务，安装过程参考 2.1——2.8步骤。参考2.12安装phpldapadmin</p>
<h2 id="3-1-管理员密码信息"><a href="#3-1-管理员密码信息" class="headerlink" title="3.1 管理员密码信息"></a>3.1 管理员密码信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># slappasswd</span></span><br><span class="line">New password: 2hjx@123</span><br><span class="line">Re-enter new password: 2hjx@123 </span><br><span class="line">&#123;SSHA&#125;AFKgWr+wyQ47fZMdgeUU6b5fcytXgA8W</span><br></pre></td></tr></table></figure>
<h1 id="4-配置双主同步"><a href="#4-配置双主同步" class="headerlink" title="4    配置双主同步"></a>4    配置双主同步</h1><h2 id="4-1-配置双主复制，在主1和主2上执行下面的步骤"><a href="#4-1-配置双主复制，在主1和主2上执行下面的步骤" class="headerlink" title="4.1 配置双主复制，在主1和主2上执行下面的步骤"></a>4.1 配置双主复制，在主1和主2上执行下面的步骤</h2><h3 id="4-1-1-添加syncprov模块"><a href="#4-1-1-添加syncprov模块" class="headerlink" title="4.1.1 添加syncprov模块"></a>4.1.1 添加syncprov模块</h3><h4 id="4-1-1-1-mod-syncprov-ldif"><a href="#4-1-1-1-mod-syncprov-ldif" class="headerlink" title="4.1.1.1 mod_syncprov.ldif"></a>4.1.1.1 mod_syncprov.ldif</h4><figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line">[root@test1] ~/ldif$ vim mod_syncprov.ldif </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># create new</span></span><br><span class="line"><span class="attribute">dn</span>: cn=module,cn=config</span><br><span class="line"><span class="attribute">objectClass</span>: olcModuleList</span><br><span class="line"><span class="attribute">cn</span>: module</span><br><span class="line"><span class="attribute">olcModulePath</span>: /usr/lib64/openldap</span><br><span class="line"><span class="attribute">olcModuleLoad</span>: syncprov.la</span><br><span class="line"></span><br><span class="line">[root@test1 ~]<span class="comment"># ldapadd -Y EXTERNAL -H ldapi:/// -f mod_syncprov.ldif </span></span><br><span class="line"><span class="attribute">SASL/EXTERNAL authentication started</span></span><br><span class="line"><span class="attribute">SASL username</span>: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth</span><br><span class="line"><span class="attribute">SASL SSF</span>: 0</span><br><span class="line"><span class="attribute">adding new entry "cn=module,cn=config</span></span><br></pre></td></tr></table></figure>
<h4 id="4-1-1-2-syncprov-ldif"><a href="#4-1-1-2-syncprov-ldif" class="headerlink" title="4.1.1.2 syncprov.ldif"></a>4.1.1.2 syncprov.ldif</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test1] ~/ldif$ vim syncprov.ldif </span><br><span class="line"><span class="comment"># create new</span></span><br><span class="line">dn: olcOverlay=syncprov,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcSyncProvConfig</span><br><span class="line">olcOverlay: syncprov</span><br><span class="line">olcSpSessionLog: 100</span><br><span class="line"></span><br><span class="line">[root@test1 ~]<span class="comment"># ldapadd -Y EXTERNAL -H ldapi:/// -f syncprov.ldif </span></span><br><span class="line">SASL/EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">adding new entry <span class="string">"olcOverlay=syncprov,olcDatabase=&#123;2&#125;hdb,cn=config"</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-在主1和主2上执行下面的步骤，但是注意需要替换olcServerID和provider的值"><a href="#4-2-在主1和主2上执行下面的步骤，但是注意需要替换olcServerID和provider的值" class="headerlink" title="4.2 在主1和主2上执行下面的步骤，但是注意需要替换olcServerID和provider的值"></a>4.2 在主1和主2上执行下面的步骤，但是注意需要替换olcServerID和provider的值</h2><h3 id="4-2-1-主1-master01-ldif模块配置"><a href="#4-2-1-主1-master01-ldif模块配置" class="headerlink" title="4.2.1 主1 master01.ldif模块配置"></a>4.2.1 主1 master01.ldif模块配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test1] ~/ldif$ vim master01.ldif </span><br><span class="line"><span class="comment"># create new</span></span><br><span class="line">dn: cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcServerID</span><br><span class="line"><span class="comment"># specify uniq ID number on each server</span></span><br><span class="line">olcServerID: 0                      <span class="comment">#主2上替换为1，使用不同ID</span></span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcSyncRepl</span><br><span class="line">olcSyncRepl: rid=001</span><br><span class="line">  provider=ldap://192.168.0.10:389/               <span class="comment">#主2 IP，主2的配置上改为主1IP</span></span><br><span class="line">  bindmethod=simple</span><br><span class="line">  binddn=<span class="string">"cn=admin,dc=zhjx,dc=com"</span>   <span class="comment"># 绑定用户名字，这里用管理员，双主密码一样</span></span><br><span class="line">  credentials=2hjx@123             <span class="comment">#明文密码 可以选择加密的</span></span><br><span class="line">  searchbase=<span class="string">"dc=zhjx,dc=com"</span>          <span class="comment">#搜索根域，主1和2一样</span></span><br><span class="line">  scope=sub</span><br><span class="line">  schemachecking=on</span><br><span class="line">  <span class="built_in">type</span>=refreshAndPersist</span><br><span class="line">  retry=<span class="string">"30 5 300 3"</span></span><br><span class="line">  interval=00:00:05:00</span><br><span class="line">-</span><br><span class="line">add: olcMirrorMode</span><br><span class="line">olcMirrorMode: TRUE</span><br><span class="line"></span><br><span class="line">dn: olcOverlay=syncprov,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: add</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcSyncProvConfig</span><br><span class="line">olcOverlay: syncprov</span><br><span class="line"></span><br><span class="line"><span class="comment">####[root@test1 ~]# ldapmodify -Y EXTERNAL -H ldapi:/// -f master01.ldif </span></span><br><span class="line">SASL/EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">modifying entry <span class="string">"cn=config"</span></span><br><span class="line"></span><br><span class="line">modifying entry <span class="string">"olcDatabase=&#123;2&#125;hdb,cn=config"</span></span><br><span class="line"></span><br><span class="line">adding new entry <span class="string">"olcOverlay=syncprov,olcDatabase=&#123;2&#125;hdb,cn=config"</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2-2-主2-master02-ldif模块配置"><a href="#4-2-2-主2-master02-ldif模块配置" class="headerlink" title="4.2.2 主2 master02.ldif模块配置"></a>4.2.2 主2 master02.ldif模块配置</h3><p>参考主1  master01.ldif模块配置,修改相应参数.</p>
<h2 id="4-3-重启服务"><a href="#4-3-重启服务" class="headerlink" title="4.3 重启服务"></a>4.3 重启服务</h2><p>主1和主2重启openLDAP服务,重启后生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart slapd</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821324453.png" alt="图7"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821334299.png" alt="图8"></p>
<p>此时，配置成功，在任意节点添加/删除/修改都能实时同步。</p>
<h2 id="4-4-LDAP高可用"><a href="#4-4-LDAP高可用" class="headerlink" title="4.4 LDAP高可用"></a>4.4 LDAP高可用</h2><h3 id="4-4-1-安装keepalived，分别在主1-主2上安装，配置"><a href="#4-4-1-安装keepalived，分别在主1-主2上安装，配置" class="headerlink" title="4.4.1 安装keepalived，分别在主1/主2上安装，配置"></a>4.4.1 安装keepalived，分别在主1/主2上安装，配置</h3><p>通过VIP地址实现LDAP高可用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install keepalived.x86_64</span><br></pre></td></tr></table></figure></p>
<h3 id="4-4-2-修改配置文件"><a href="#4-4-2-修改配置文件" class="headerlink" title="4.4.2 修改配置文件"></a>4.4.2 修改配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>
<h4 id="4-4-2-1-主1配置"><a href="#4-4-2-1-主1配置" class="headerlink" title="4.4.2.1 主1配置"></a>4.4.2.1 主1配置</h4><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_LDAP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script CheckK8sMaster &#123;</span><br><span class="line">    script <span class="string">"curl -k ldap://192.168.0.129:389"</span>              # 这里侦测VIP连接地址</span><br><span class="line">    interval <span class="number">3</span></span><br><span class="line">    timeout <span class="number">9</span></span><br><span class="line">    fall <span class="number">2</span></span><br><span class="line">    rise <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="section">state</span> MASTER                    #主节点用MASTER,备节点用BACKUP</span><br><span class="line">    interface ens192                   # 网卡名字</span><br><span class="line">    virtual_router_id <span class="number">61</span></span><br><span class="line">    # 主节点权重最高 依次减少</span><br><span class="line">    priority <span class="number">100</span>                      # 主节点权重高于备节点</span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    #修改为本地IP</span><br><span class="line">    mcast_src_ip <span class="number">192.168</span><span class="number">.0</span><span class="number">.130</span>               # 本机IP</span><br><span class="line">    nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass sqP05dQgMSlzrxHj</span><br><span class="line">    &#125;</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        #注释掉本地IP                       # 主备节点IP</span><br><span class="line">        #<span class="number">192.168</span><span class="number">.1</span><span class="number">.221</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.0</span><span class="number">.130</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span><span class="number">.0</span><span class="number">.129</span>/<span class="number">23</span>                        #VIP 地址</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        CheckK8sMaster</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-2-2-主2配置"><a href="#4-4-2-2-主2配置" class="headerlink" title="4.4.2.2 主2配置"></a>4.4.2.2 主2配置</h4><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_LDAP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script CheckK8sMaster &#123;</span><br><span class="line">    script <span class="string">"curl -k ldap://192.168.0.129:389"</span></span><br><span class="line">    interval <span class="number">3</span></span><br><span class="line">    timeout <span class="number">9</span></span><br><span class="line">    fall <span class="number">2</span></span><br><span class="line">    rise <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="section">state</span> BACKUP                        # 备节点用BACKUP</span><br><span class="line">    interface enp3s0                     # 网卡名字</span><br><span class="line">    virtual_router_id <span class="number">61</span></span><br><span class="line">    # 主节点权重最高 依次减少</span><br><span class="line">    priority <span class="number">99</span>                           # 备节点权重低于主节点</span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    #修改为本地IP</span><br><span class="line">    mcast_src_ip <span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>             # 本机IP</span><br><span class="line">    nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass sqP05dQgMSlzrxHj</span><br><span class="line">    &#125;</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        #注释掉本地IP                     # 主备节点IP</span><br><span class="line">        #<span class="number">192.168</span><span class="number">.1</span><span class="number">.221</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.0</span><span class="number">.130</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span><span class="number">.0</span><span class="number">.129</span>/<span class="number">23</span>                #VIP 地址</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        CheckK8sMaster</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-3-重启服务"><a href="#4-4-3-重启服务" class="headerlink" title="4.4.3 重启服务"></a>4.4.3 重启服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart keepalived.service</span><br></pre></td></tr></table></figure>
<h4 id="4-4-3-1-测试VIP"><a href="#4-4-3-1-测试VIP" class="headerlink" title="4.4.3.1 测试VIP"></a>4.4.3.1 测试VIP</h4><p>1)    ip a 命令查看IP</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821347576.png" alt="图9"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821357466.png" alt="图10"><br>2)    关闭主1 keepalived服务，查看ip，当主1失去连接，vip转移到主2节点<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821365141.png" alt="图11"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821372710.png" alt="图12"></p>
<p>配置成功。</p>
<h1 id="5-pholdapadmin使用"><a href="#5-pholdapadmin使用" class="headerlink" title="5    pholdapadmin使用"></a>5    pholdapadmin使用</h1><h2 id="5-1-创建组"><a href="#5-1-创建组" class="headerlink" title="5.1 创建组"></a>5.1 创建组</h2><p>类似部门分组，没有gid.<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821383093.png" alt="图13"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821390132.png" alt="图14"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821398548.png" alt="图15"></p>
<h2 id="5-2-创建角色组"><a href="#5-2-创建角色组" class="headerlink" title="5.2 创建角色组"></a>5.2 创建角色组</h2><p>举例：在jenkins组里面创建jenkins-admin角色组，拥有gid,主要用于与其他平台对接，根据不同gid内的用户，区分权限<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821407393.png" alt="图16"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821415067.png" alt="图17"></p>
<p>建组时没有添加用户，后期添加，需要添加memberUid属性后添加用户<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821422749.png" alt="图18"></p>
<h2 id="5-3-创建用户"><a href="#5-3-创建用户" class="headerlink" title="5.3 创建用户"></a>5.3 创建用户</h2><p>用户统一放到ou=People,dc=zhjx,dc=com下</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821430059.png" alt="图19"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821439669.png" alt="图20"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/openldap部署/1571821478849.png" alt="图21"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>openldap</tag>
      </tags>
  </entry>
  <entry>
    <title>svn远程触发jenkins构建</title>
    <url>/2019/08/09/svn%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E6%9E%84%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="1-jenkins-配置"><a href="#1-jenkins-配置" class="headerlink" title="1 jenkins 配置"></a>1 jenkins 配置</h1><p>在jenkins平台上配置job，开启<code>远程触发构建</code><br><a id="more"></a><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/23/svn远程触发jenkins构建/1571821028753.png" alt="图1"></p>
<h1 id="2-svn配置仓库触发"><a href="#2-svn配置仓库触发" class="headerlink" title="2 svn配置仓库触发"></a>2 svn配置仓库触发</h1><p>在仓库/hook/目录创建post-commit文件，写入脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 设置默认字符集，否则post信息到钉钉时中文乱码</span></span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># svn中变量1为仓库路径，2为提交版本号</span></span><br><span class="line">REPOS=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">REV=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下方svnlook命令获取相应的结果</span></span><br><span class="line"><span class="comment">#mailer.py commit "$REPOS" "$REV" /path/to/mailer.conf</span></span><br><span class="line">time=$(date +%F/%T)</span><br><span class="line">AUTHOR=$(/usr/bin/svnlook author -r <span class="variable">$&#123;REV&#125;</span> <span class="variable">$&#123;REPOS&#125;</span>)</span><br><span class="line">CHANGEDDIRS=$(/usr/bin/svnlook <span class="built_in">dirs</span>-changed <span class="variable">$REPOS</span>)</span><br><span class="line">MESSAGE=$(/usr/bin/svnlook <span class="built_in">log</span> -r <span class="variable">$REV</span> <span class="variable">$REPOS</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置CONTENT的结果</span></span><br><span class="line">CONTENT=提交时间：<span class="variable">$&#123;time&#125;</span>\\n提交版本：<span class="variable">$&#123;REV&#125;</span>\\n作者：<span class="variable">$&#123;AUTHOR&#125;</span>\\n提交备注：<span class="variable">$&#123;MESSAGE&#125;</span>\\n修改目录：<span class="variable">$&#123;CHANGEDDIRS&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入程序目录执行命令，发送提交结果到钉钉群</span></span><br><span class="line"><span class="built_in">cd</span> /home/</span><br><span class="line">/usr/bin/java Request 130883d5c8dc420d8deaa5cdabe2c95adf9b780dbxxxxxxxxxxxxxx <span class="variable">$CONTENT</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面都是发送svn更新到钉钉通知的设置，与发送触发到jenkins无关，下方配置jenkins触发</span></span><br><span class="line"><span class="comment"># jenkins触发命令</span></span><br><span class="line">curl -u svnjenkins:svnjenkins http://192.168.0.120/jenkins/job/PU2017001_%E6%B4%9E%E8%A7%81_CI.CD_1.222/build?token=dongjian</span><br></pre></td></tr></table></figure>
<div class="note info"><p><strong>命令格式</strong><br><code>svnjenkins:svnjenkins</code>   # jenkins用户及密码<br><code>http://192.168.0.120/jenkins/</code>    # jenkins访问url<br><code>job/PU2017001_%E6%B4%9E%E8%A7%81_CI.CD_1.222/build?token=</code>  # job地址，看图一绿色框内地址<br><code>dongjian</code>   # token的值，jenkins设置的token名字</p></div>
<h1 id="3-svn远程触发jenkins，增加筛选"><a href="#3-svn远程触发jenkins，增加筛选" class="headerlink" title="3 svn远程触发jenkins，增加筛选"></a>3 svn远程触发jenkins，增加筛选</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line">REPOS=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">REV=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mailer.py commit "$REPOS" "$REV" /path/to/mailer.conf</span></span><br><span class="line">time=$(date +%F/%T)</span><br><span class="line">AUTHOR=$(/usr/bin/svnlook author -r <span class="variable">$&#123;REV&#125;</span> <span class="variable">$&#123;REPOS&#125;</span>)</span><br><span class="line">CHANGEDDIRS=$(/usr/bin/svnlook <span class="built_in">dirs</span>-changed <span class="variable">$REPOS</span>)</span><br><span class="line">MESSAGE=$(/usr/bin/svnlook <span class="built_in">log</span> -r <span class="variable">$REV</span> <span class="variable">$REPOS</span>)</span><br><span class="line">CONTENT=提交时间：<span class="variable">$&#123;time&#125;</span>\\n提交版本：<span class="variable">$&#123;REV&#125;</span>\\n作者：<span class="variable">$&#123;AUTHOR&#125;</span>\\n提交备注：<span class="variable">$&#123;MESSAGE&#125;</span>\\n修改目录：<span class="variable">$&#123;CHANGEDDIRS&#125;</span></span><br><span class="line"><span class="built_in">cd</span> /home/</span><br><span class="line">/usr/bin/java Request 130883d5c8dc420d8deaa5cdabe2c95adf9b780dbd36bxxxxxxxxxxxxxxxxxx <span class="variable">$CONTENT</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选规则</span></span><br><span class="line">b=$(<span class="built_in">echo</span> <span class="variable">$&#123;MESSAGE&#125;</span> | grep build)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$b</span>"</span> != <span class="string">""</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  curl -u svnjenkins:svnjenkins http://192.168.0.120/jenkins/job/PU2017001_%E6%B4%9E%E8%A7%81_CI.CD_1.222/build?token=dongjian</span><br><span class="line">  sleep 5</span><br><span class="line">  curl -u svnjenkins:svnjenkins http://192.168.0.120/jenkins/view/%E5%AE%A1%E6%9F%A5js/job/PU2017001_dongjian_js/build?token=dongjian</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p><strong>脚本说明</strong><br>根据<code>${MESSAGE}</code>的结果，筛选是否包含<code>build</code>字符，如果包含，触发远程构建，如果不包含，不做任何操作。</p></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>详解Tomcat配置文件server.xml</title>
    <url>/2019/08/13/%E8%AF%A6%E8%A7%A3Tomcat%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6server-xml/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/kismetv/p/7228274.html" target="_blank" rel="noopener">https://www.cnblogs.com/kismetv/p/7228274.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>yaml例子</title>
    <url>/2019/08/09/yaml%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">mysql:5.6</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">zhjx@123</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mysql-data</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mysql-config</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/mysql/conf.d/docker.cnf</span></span><br><span class="line"><span class="attr">          subPath:</span> <span class="string">docker.cnf</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">mysql-data</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/scsidisk/data/mysql</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">mysql-config</span></span><br><span class="line"><span class="attr">        configMap:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">mysql-config</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line"><span class="attr">        node:</span> <span class="string">node1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">3306</span></span><br></pre></td></tr></table></figure>
<h1 id="iwhereearth"><a href="#iwhereearth" class="headerlink" title="iwhereearth"></a>iwhereearth</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">iwhereearth</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">earth</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      hostAliases:</span></span><br><span class="line"><span class="attr">      - ip:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.221</span></span><br><span class="line"><span class="attr">        hostnames:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">iwhereearthurl</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">earth</span> </span><br><span class="line"><span class="attr">        image:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.118</span><span class="string">:5000/zhjx/iwhereearth:20180817</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_URL</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">mysql-svc</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_USER</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_USER_PASSWORD</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">zhjx@123</span></span><br><span class="line"><span class="comment">#        volumeMounts:</span></span><br><span class="line"><span class="comment">#        - name: earth-data</span></span><br><span class="line"><span class="comment">#          mountPath: /tomcat/webapps</span></span><br><span class="line"><span class="comment">#        - name: tomcat-config</span></span><br><span class="line"><span class="comment">#          mountPath: /usr/local/tomcat/conf/server.xml</span></span><br><span class="line"><span class="comment">#          subPath: server.xml</span></span><br><span class="line"><span class="comment">#      volumes:</span></span><br><span class="line"><span class="comment">#      - name: earth-data</span></span><br><span class="line"><span class="comment">#        hostPath:</span></span><br><span class="line"><span class="comment">#          path: /scsidisk/update/iWhereEarth/nfzq_data</span></span><br><span class="line"><span class="comment">#      - name: tomcat-config</span></span><br><span class="line"><span class="comment">#        configMap:</span></span><br><span class="line"><span class="comment">#          name: req-tomcat-config</span></span><br><span class="line"><span class="comment">#      nodeSelector:</span></span><br><span class="line"><span class="comment">#        node: node1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">iwhereearth-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">earth</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30202</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<h1 id="iwherelink"><a href="#iwherelink" class="headerlink" title="iwherelink"></a>iwherelink</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#apiVersion: v1</span></span><br><span class="line"><span class="comment">#kind: Namespace</span></span><br><span class="line"><span class="comment">#metadata:</span></span><br><span class="line"><span class="comment">#   name: iwherelink</span></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">iwherelink</span></span><br><span class="line"><span class="comment">#  namespace: iwherelink</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      hostAliases:</span></span><br><span class="line"><span class="attr">      - ip:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.9</span></span><br><span class="line"><span class="attr">        hostnames:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">redis</span> </span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">        image:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.118</span><span class="string">:5000/zhjx/iwherelink:201808171448</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_URL</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">mysql-svc</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_USER</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_USER_PASSWORD</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">zhjx@123</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">iwherelink-svc</span></span><br><span class="line"><span class="comment">#  namespace: iwherelink</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30102</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<h1 id="iwherevisual"><a href="#iwherevisual" class="headerlink" title="iwherevisual"></a>iwherevisual</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">   name:</span> <span class="string">iwherevisual</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">postdb-visual</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">iwherevisual</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">postdb-visual</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">postdb-visual</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">postgres:9.6.5</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POSTGIS_PASSWORD</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">5432</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/lib/postgresql/data</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">postdb-visual</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">postdb-visual</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/scsidisk/data/postdb_visual</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line"><span class="attr">        node:</span> <span class="string">node1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">postdb-visual-svc</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">iwherevisual</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">postdb-visual</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30001</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5432</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">5432</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">iwherevisual</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">iwherevisual</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">visual</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">visual</span></span><br><span class="line"><span class="attr">        image:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.118</span><span class="string">:5000/zhjx/iwherevisual:201904301601</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">7001</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">iwherevisual-svc</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">iwherevisual</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">visual</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30101</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">7001</span></span><br></pre></td></tr></table></figure>
<h1 id="洞见"><a href="#洞见" class="headerlink" title="洞见"></a>洞见</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#apiVersion: v1</span></span><br><span class="line"><span class="comment">#kind: Namespace</span></span><br><span class="line"><span class="comment">#metadata:</span></span><br><span class="line"><span class="comment">#   name: iwherelink</span></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">dongjian</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">zhjx-base</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">dongjian</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">tomcat:8-jre8</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/usr/local/tomcat/webapps</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">dongjian-tomcat</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/home/data/insight/upload</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">dongjian-upload</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">httpd</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">httpd:latest</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/usr/local/apache2/htdocs/upload</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">dongjian-httpd</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">dongjian-tomcat</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/opt/data/PU2017001_洞见_CI.CD</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">dongjian-upload</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/opt/data/PU2017001_洞见_CI.CD/upload</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">dongjian-httpd</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/opt/data/PU2017001_洞见_CI.CD/upload</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line"><span class="attr">          node:</span> <span class="string">node2</span></span><br><span class="line"><span class="comment">#        env:</span></span><br><span class="line"><span class="comment">#        - name: MYSQL_URL</span></span><br><span class="line"><span class="comment">#          value: mysql-svc</span></span><br><span class="line"><span class="comment">#        - name: MYSQL_USER</span></span><br><span class="line"><span class="comment">#          value: root</span></span><br><span class="line"><span class="comment">#        - name: MYSQL_USER_PASSWORD</span></span><br><span class="line"><span class="comment">#          value: zhjx@123</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">dongjian-tomcat-svc</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">zhjx-base</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">dongjian</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30109</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">dongjian-httpd-svc</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">zhjx-base</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">dongjian</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30110</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>yaml</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter测试报错</title>
    <url>/2019/08/13/jmeter%E6%B5%8B%E8%AF%95%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-java-net-BindException-Address-already-in-use-connect"><a href="#1-java-net-BindException-Address-already-in-use-connect" class="headerlink" title="1 java.net.BindException: Address already in use: connect"></a>1 java.net.BindException: Address already in use: connect</h1><p>当线程数持续上升到一个点的时候，运行脚本的时候有很多报错，如图：<br><code>java.net.BindException: Address already in use: connect</code><br>通过 netstat -a 命令查看，有一大堆状态为 TIME_WAIT 的占用连接不被释放</p>
<p>开始以为是单机运行脚本运行不过来，所以另加了一台负载机同时运行脚本<br>分布式环境部署参考：<br><a href="https://www.cnblogs.com/whitewasher/p/6946207.html" target="_blank" rel="noopener">https://www.cnblogs.com/whitewasher/p/6946207.html</a></p>
<p>但是依然还是会报错，后面查阅了相关资料后发现，是因为windows本身提供的端口访问机制的问题。<br>Windows XP提供给 TCP/IP链接的端口为 1024-5000，并且要四分钟来循环回收他们。就导致我们在短时间内跑大量的请求时将端口占满了。</p>
<p><strong>解决方案为：</strong></p>
<ol>
<li>cmd中，用regedit命令打开注册表</li>
<li>在 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</code>下，右击<code>parameters</code>，添加新的<code>DWORD</code>（如果是分布式运行的话，控制机器和负载机器都需要这样操作哦)<pre><code>- 新建`DWORD`值，name：`TcpTimedWaitDe`，value：`30（十进制）`  –&gt; 设置为30秒，默认是240秒
- 新建 `DWORD`值，name：`MaxUserPort`，value：`65534（十进制）`–&gt; 设置最大连接数65534
</code></pre></li>
<li>修改配置完毕之后记得重启机器才会生效</li>
</ol>
<p><strong>参考资料：</strong><br><a href="https://www.cnblogs.com/pgf622/p/9109521.html" target="_blank" rel="noopener">https://www.cnblogs.com/pgf622/p/9109521.html</a><br><a href="https://blog.csdn.net/zoulonglong/article/details/80940411" target="_blank" rel="noopener">https://blog.csdn.net/zoulonglong/article/details/80940411</a><br><a href="https://blog.csdn.net/lifuxiangcaohui/article/details/40188847" target="_blank" rel="noopener">https://blog.csdn.net/lifuxiangcaohui/article/details/40188847</a></p>
<h1 id="2-java-net-SocketException-Socket-closed"><a href="#2-java-net-SocketException-Socket-closed" class="headerlink" title="2 java.net.SocketException: Socket closed"></a>2 java.net.SocketException: Socket closed</h1><p>如题，jmeter报出<code>java.net.SocketException: Socket closed</code>，我查询了下，服务器是正常的，可以返回数据，基本确定问题出在我这边jmeter。查询原因，看到有人说：该异常在客户端和服务器均可能发生。异常的原因是己方主动关闭了连接后（调用了<code>Socket</code>的<code>close</code>方法）再对网络连接进行读写操作。</p>
<p>Socket closed</p>
<p>Non HTTP response code: org.apache.http.NoHttpResponseException (the target server failed to respond)</p>
<p>资料查询：<a href="https://wiki.apache.org/jmeter/JMeterSocketClosed" target="_blank" rel="noopener">https://wiki.apache.org/jmeter/JMeterSocketClosed</a></p>
<p><strong>问题原因：</strong>在JMeter下，发送http 请求时，一般都是默认选择了use keepAlive（这个是什么？看后面资料），这个是连接协议，JMeter坑就在这里，默认勾选了这个（如果不勾选的话，也不会保存），但其配置JMeter.properties中的时间设置默认却是注销的，也是是说，不会等待，一旦连接空闲，则立马断开了，导致我们压测中出现了事务失败的情形。<br><img src="1.png" alt="1"></p>
<p><strong>解决方案：</strong>修改<code>httpclient4.idletimeout=&lt;time in ms&gt;</code> 设置成自己觉得合理的时间，一般可设置成<code>10-60s</code>（表示连接空闲10s后才会断开），注意这边单位是ms。修改完成后再次压测，错误不再有了。<br><img src="2.png" alt="2"></p>
<h1 id="3-java-net-SocketException-Connection-reset"><a href="#3-java-net-SocketException-Connection-reset" class="headerlink" title="3 java.net.SocketException: Connection reset"></a>3 java.net.SocketException: Connection reset</h1><p>参考资料：<a href="https://www.cnblogs.com/shoren/p/httpclient-connectionreset.html" target="_blank" rel="noopener">https://www.cnblogs.com/shoren/p/httpclient-connectionreset.html</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter之POST上传图片测试</title>
    <url>/2019/10/18/JMeter%E4%B9%8BPOST%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="1-JMeter配置"><a href="#1-JMeter配置" class="headerlink" title="1 JMeter配置"></a>1 JMeter配置</h1><h2 id="1-1-创建线程组"><a href="#1-1-创建线程组" class="headerlink" title="1.1 创建线程组"></a>1.1 创建线程组</h2><a id="more"></a>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/18/JMeter之POST上传图片测试/1571369550673.png" alt="图1"></p>
<h2 id="1-2-创建HTTP请求"><a href="#1-2-创建HTTP请求" class="headerlink" title="1.2 创建HTTP请求"></a>1.2 创建HTTP请求</h2><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/18/JMeter之POST上传图片测试/1571369600650.png" alt="图2"></p>
<h2 id="1-3-创建报告"><a href="#1-3-创建报告" class="headerlink" title="1.3 创建报告"></a>1.3 创建报告</h2><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/18/JMeter之POST上传图片测试/1571369691257.png" alt="图3"></p>
<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h1><h2 id="2-1-配置并发数"><a href="#2-1-配置并发数" class="headerlink" title="2.1 配置并发数"></a>2.1 配置并发数</h2><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/18/JMeter之POST上传图片测试/1571369778291.png" alt="图4"></p>
<h2 id="2-2-配置HTTP请求"><a href="#2-2-配置HTTP请求" class="headerlink" title="2.2 配置HTTP请求"></a>2.2 配置HTTP请求</h2><p>配置<strong>连接地址、端口号、接口路径</strong>，客户端实现方式，选择<code>JAVA</code>方式。参考下图。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/18/JMeter之POST上传图片测试/1571369087057.png" alt="图5"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/18/JMeter之POST上传图片测试/1571369151080.png" alt="图6"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/18/JMeter之POST上传图片测试/1571369171986.png" alt="图7"><br>参数部分的设置，根据抓包工具得到的参数进行添加</p>
<h3 id="2-2-1-使用Fiddler工具抓包"><a href="#2-2-1-使用Fiddler工具抓包" class="headerlink" title="2.2.1 使用Fiddler工具抓包"></a>2.2.1 使用Fiddler工具抓包</h3><p>根据Fiddler抓包工具，抓取登录web系统时的/GCPI/login消息内容<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/18/JMeter之POST上传图片测试/1571368968782.png" alt="图8"></p>
<h1 id="3-执行结果"><a href="#3-执行结果" class="headerlink" title="3 执行结果"></a>3 执行结果</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/10/18/JMeter之POST上传图片测试/1571371700190.png" alt="图9"></p>
<h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3 参考资料"></a>3 参考资料</h1><p><a href="https://blog.csdn.net/ab_2016/article/details/78249686" target="_blank" rel="noopener">https://blog.csdn.net/ab_2016/article/details/78249686</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>history命令优化</title>
    <url>/2019/12/27/history%E5%91%BD%E4%BB%A4%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="history命令添加-时间-IP-用户"><a href="#history命令添加-时间-IP-用户" class="headerlink" title="history命令添加 时间/IP/用户"></a>history命令添加 时间/IP/用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># history命令添加时间/ip/用户</span></span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk <span class="string">'&#123;print $NF&#125;'</span>|sed -e <span class="string">'s/[()]//g'</span>`</span><br><span class="line">HISTTIMEFORMAT=<span class="string">"[%F %T] [`whoami`] [<span class="variable">$&#123;USER_IP&#125;</span>] "</span></span><br></pre></td></tr></table></figure>
<p>效果：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/12/27/history命令优化/1577431067442.png" alt="1"><br><div class="note info"><p><strong>优点</strong><br>只添加时间/ip/用户，可以显示操作过的所有命令，汇总显示。记录文件系统默认路径：用户/.bash_history 。<br>例如：vim /root/.bash_history</p></div></p>
<h2 id="history命令根据用户-ip-时间生成操作日志文件"><a href="#history命令根据用户-ip-时间生成操作日志文件" class="headerlink" title="history命令根据用户/ip/时间生成操作日志文件"></a>history命令根据用户/ip/时间生成操作日志文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置命令显示时间/ip/用户</span></span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk <span class="string">'&#123;print $NF&#125;'</span>|sed -e <span class="string">'s/[()]//g'</span>` </span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">"[%F %T][`whoami`][<span class="variable">$&#123;USER_IP&#125;</span>] "</span></span><br><span class="line"><span class="comment"># history 日志根据用户及登录时间生成操作日志</span></span><br><span class="line">LOGIP=`who -u am i 2&gt;/dev/null| awk <span class="string">'&#123;print $NF&#125;'</span>|sed -e <span class="string">'s/[()]//g'</span>` </span><br><span class="line">LOG_DIR=/var/<span class="built_in">log</span>/<span class="built_in">history</span> </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$LOGIP</span> ] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">LOGIP=`hostname` </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$LOG_DIR</span> ] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">mkdir -p <span class="variable">$LOG_DIR</span> </span><br><span class="line">chmod 777 <span class="variable">$LOG_DIR</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$LOG_DIR</span>/<span class="variable">$&#123;LOGNAME&#125;</span> ] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">mkdir -p <span class="variable">$LOG_DIR</span>/<span class="variable">$&#123;LOGNAME&#125;</span> </span><br><span class="line">chmod 777 <span class="variable">$LOG_DIR</span>/<span class="variable">$&#123;LOGNAME&#125;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTSIZE=4096 </span><br><span class="line">LOGTM=`date +<span class="string">"%Y%m%d_%H%M%S"</span>` </span><br><span class="line"><span class="built_in">export</span> HISTFILE=<span class="string">"<span class="variable">$LOG_DIR</span>/<span class="variable">$&#123;LOGNAME&#125;</span>/<span class="variable">$&#123;LOGIP&#125;</span>-<span class="variable">$LOGTM</span>"</span> </span><br><span class="line">chmod 777 <span class="variable">$LOG_DIR</span>/<span class="variable">$&#123;LOGNAME&#125;</span>/*-* 2&gt;/dev/null</span><br></pre></td></tr></table></figure>
<p>效果：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2019/12/27/history命令优化/1577431124108.png" alt="2"><br><div class="note info"><p><strong>优点</strong><br>添加时间/ip/用户，可以显示操作过的命令，每次终端登录退出生成一个操作记录文件，history命令只能显示当前终端登录所作过的操作，查看以往登录的操作记录，需要单独去记录文件种查看。适用与较为严谨的生成环境。<br>记录文件位置：/var/log/history/</p></div></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>小知识</tag>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议详解</title>
    <url>/2019/08/14/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/TankXiao/archive/2012/02/13/2342672.html" target="_blank" rel="noopener">https://www.cnblogs.com/TankXiao/archive/2012/02/13/2342672.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>greenplum部署-单机版</title>
    <url>/2020/07/01/greenplum%E9%83%A8%E7%BD%B2-%E5%8D%95%E6%9C%BA%E7%89%88/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-修改Linux内核参数"><a href="#1-修改Linux内核参数" class="headerlink" title="1 修改Linux内核参数"></a>1 修改Linux内核参数</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/sysctl.conf </span></span><br><span class="line"></span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 1 </span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.sem = 250 64000 100 512</span><br><span class="line">kernel.shmmax = 500000000</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.shmall = 4000000000 </span><br><span class="line">net.ipv4.tcp_tw_recycle = 1 </span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096 </span><br><span class="line">net.core.netdev_max_backlog = 10000 </span><br><span class="line">vm.overcommit_memory = 2</span><br><span class="line">net.ipv4.conf.all.arp_filter = 1</span><br></pre></td></tr></table></figure>
<h1 id="2-修改Linux最大限制"><a href="#2-修改Linux最大限制" class="headerlink" title="2 修改Linux最大限制"></a>2 修改Linux最大限制</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/security/limits.conf </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># greenplum configs</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 131072</span><br><span class="line">* hard nproc 131072</span><br></pre></td></tr></table></figure>
<h1 id="3-关闭selinux"><a href="#3-关闭selinux" class="headerlink" title="3 关闭selinux"></a>3 关闭selinux</h1><h1 id="vim-etc-selinux-conf"><a href="#vim-etc-selinux-conf" class="headerlink" title="vim /etc/selinux/conf"></a>vim /etc/selinux/conf</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># setenforce 0</span></span><br></pre></td></tr></table></figure>
<h1 id="4-greenplum安装"><a href="#4-greenplum安装" class="headerlink" title="4 greenplum安装"></a>4 greenplum安装</h1><h2 id="4-1-创建数据库用户"><a href="#4-1-创建数据库用户" class="headerlink" title="4.1 创建数据库用户"></a>4.1 创建数据库用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd -g 530 gpadmin</span><br><span class="line">useradd -g 530 -u530 -m -d /home/gpadmin -s /bin/bash gpadmin</span><br><span class="line">passwd gpadmin</span><br><span class="line"> </span><br><span class="line"><span class="comment"># gpadmin用户密码gpadmin</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-修改hosts"><a href="#4-2-修改hosts" class="headerlink" title="4.2 修改hosts"></a>4.2 修改hosts</h2><p>设置集群解析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line"> </span><br><span class="line">192.168.0.174 mdw</span><br></pre></td></tr></table></figure>
<h2 id="4-3-修改主机名-mdw"><a href="#4-3-修改主机名-mdw" class="headerlink" title="4.3 修改主机名 mdw"></a>4.3 修改主机名 mdw</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl <span class="built_in">set</span>-hostname mdw</span><br></pre></td></tr></table></figure>
<h2 id="4-4-下载安装包"><a href="#4-4-下载安装包" class="headerlink" title="4.4 下载安装包"></a>4.4 下载安装包</h2><p>下载合适的版本rpm包和postgis插件</p>
<p>官网  <a href="https://network.pivotal.io/products/pivotal-gpdb#/releases/1683" target="_blank" rel="noopener">https://network.pivotal.io/products/pivotal-gpdb#/releases/1683</a></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/greenplum部署-单机版/1593567665642.png" alt="1"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/greenplum部署-单机版/1593567680961.png" alt="2"></p>
<h2 id="4-5-rpm安装"><a href="#4-5-rpm安装" class="headerlink" title="4.5 rpm安装"></a>4.5 rpm安装</h2><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/greenplum部署-单机版/1593567699746.png" alt="3"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install greenplum-db-6.2.1-rhel7-x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认安装到/usr/local，授权给gpadmin</span></span><br><span class="line">chown -R gpadmin /usr/<span class="built_in">local</span>/greenplum*</span><br><span class="line">chgrp -R gpadmin /usr/<span class="built_in">local</span>/greenplum*</span><br></pre></td></tr></table></figure>
<h2 id="4-6-创建instance需要的目录"><a href="#4-6-创建instance需要的目录" class="headerlink" title="4.6 创建instance需要的目录"></a>4.6 创建instance需要的目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/gpdata/master</span><br><span class="line">mkdir -p /home/gpdata/gp1</span><br><span class="line">mkdir -p /home/gpdata/gp2</span><br><span class="line">mkdir -p /home/gpdata/gp3</span><br><span class="line">mkdir -p /home/gpdata/gp4</span><br><span class="line"><span class="comment"># 修改目录属主</span></span><br><span class="line">    chown -R gpadmin:gpadmin /home/gpdata</span><br><span class="line">    chown -R gpadmin:gpadmin /home/gpdata/master</span><br><span class="line">    chown -R gpadmin:gpadmin /home/gpdata/gp*</span><br></pre></td></tr></table></figure>
<h2 id="4-7-切换用户gpadmin"><a href="#4-7-切换用户gpadmin" class="headerlink" title="4.7 切换用户gpadmin"></a>4.7 切换用户gpadmin</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su gpadmin</span><br></pre></td></tr></table></figure>
<h2 id="4-8-修改gpadmin用户环境变量"><a href="#4-8-修改gpadmin用户环境变量" class="headerlink" title="4.8 修改gpadmin用户环境变量"></a>4.8 修改gpadmin用户环境变量</h2><p>修改/home/gpadmin/.bashrc 和 bash_profile 文件，增加如下内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/greenplum-db-5.5.0/greenplum_path.sh      <span class="comment"># greenplum安装目录的变量（自带）</span></span><br><span class="line"><span class="built_in">export</span> MASTER_DATA_DIRECTORY=/home/gpadmin/master/gpseg-1      <span class="comment"># 数据目录</span></span><br><span class="line"><span class="built_in">export</span> PGPORT=5432                         <span class="comment"># 数据库端口，可不设置，如果变更端口设置</span></span><br><span class="line"><span class="built_in">export</span> PGUSER=gpadmin                       <span class="comment"># 数据库管理员用户</span></span><br><span class="line"><span class="built_in">export</span> PGDATABASE=gpdb                     <span class="comment"># 自动创建的数据库</span></span><br></pre></td></tr></table></figure>
<h2 id="4-9-设置节点host"><a href="#4-9-设置节点host" class="headerlink" title="4.9 设置节点host"></a>4.9 设置节点host</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /home/gpadmin/all_hosts</span><br><span class="line">写入</span><br><span class="line">mdw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一行mdw（单机版只有一个host）</span></span><br></pre></td></tr></table></figure>
<h2 id="4-10-配置用户SSH无密码登录，单机版也要设置"><a href="#4-10-配置用户SSH无密码登录，单机版也要设置" class="headerlink" title="4.10 配置用户SSH无密码登录，单机版也要设置"></a>4.10 配置用户SSH无密码登录，单机版也要设置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gpmaster ~]<span class="comment"># su - gpadmin</span></span><br><span class="line">[gpadmin@gpmaster .ssh]$ ssh-keygen -t rsa</span><br><span class="line">[gpadmin@gpmaster .ssh]$ ssh mdw cat /home/gpadmin/.ssh/id_rsa.pub &gt;&gt; authorized_keys </span><br><span class="line">[gpadmin@gpmaster .ssh]<span class="variable">$chmod</span> 600 authorized_keys</span><br></pre></td></tr></table></figure>
<h2 id="4-11-权限互通"><a href="#4-11-权限互通" class="headerlink" title="4.11 权限互通"></a>4.11 权限互通</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpssh-exkeys -f all_hosts</span><br></pre></td></tr></table></figure>
<h2 id="4-12-创建、编辑初始化文件"><a href="#4-12-创建、编辑初始化文件" class="headerlink" title="4.12 创建、编辑初始化文件"></a>4.12 创建、编辑初始化文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim initgp_config</span><br><span class="line">写入：</span><br><span class="line">SEG_PREFIX=gpseg</span><br><span class="line">PORT_BASE=33000</span><br><span class="line"><span class="built_in">declare</span> -a DATA_DIRECTORY=(/home/gpadmin/gp1 /home/gpadmin/gp2 /home/gpadmin/gp3 /home/gpadmin/gp4)</span><br><span class="line">MASTER_HOSTNAME=mdw</span><br><span class="line">MASTER_PORT=5432</span><br><span class="line">MASTER_DIRECTORY=/home/gpadmin/master             </span><br><span class="line">DATABASE_NAME=gpdb</span><br></pre></td></tr></table></figure>
<h2 id="4-13-设置节点服务器"><a href="#4-13-设置节点服务器" class="headerlink" title="4.13 设置节点服务器"></a>4.13 设置节点服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim seg_hosts</span><br><span class="line">写入：</span><br><span class="line">mdw</span><br><span class="line"><span class="comment"># 本例单机，只有mdw这一台</span></span><br></pre></td></tr></table></figure>
<h2 id="4-14-初始化GP"><a href="#4-14-初始化GP" class="headerlink" title="4.14 初始化GP"></a>4.14 初始化GP</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpinitsystem -c initgp_config -h seg_hosts</span><br></pre></td></tr></table></figure>
<h1 id="5-连接GP"><a href="#5-连接GP" class="headerlink" title="5 连接GP"></a>5 连接GP</h1><h2 id="5-1-psql登录修改密码（gpadmin用户操作）"><a href="#5-1-psql登录修改密码（gpadmin用户操作）" class="headerlink" title="5.1 psql登录修改密码（gpadmin用户操作）"></a>5.1 psql登录修改密码（gpadmin用户操作）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># su gpadmin</span></span><br><span class="line"><span class="comment"># psql</span></span><br><span class="line">修改数据库密码为zhjx123</span><br><span class="line">    alter role gpadmin with password <span class="string">'zhjx123'</span>;</span><br><span class="line">    \q</span><br></pre></td></tr></table></figure>
<h2 id="5-2-远程连接配置"><a href="#5-2-远程连接配置" class="headerlink" title="5.2 远程连接配置"></a>5.2 远程连接配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /home/gpdata/master/gpseg-1/postgresql.conf</span><br><span class="line">修改：</span><br><span class="line"><span class="comment">#listen_addresses = '*'，去#注释</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">vim /home/gpdata/master/gpseg-1/pg_hba.conf</span><br><span class="line">添加：</span><br><span class="line">host     all   gpadmin   0.0.0.0/0      md5</span><br></pre></td></tr></table></figure>
<h2 id="5-3-重新加载配置文件"><a href="#5-3-重新加载配置文件" class="headerlink" title="5.3 重新加载配置文件"></a>5.3 重新加载配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpstop -u</span><br></pre></td></tr></table></figure>
<h2 id="5-4-其他命令"><a href="#5-4-其他命令" class="headerlink" title="5.4 其他命令"></a>5.4 其他命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpstart              <span class="comment"># 正常启动</span></span><br><span class="line">gpstop              <span class="comment"># 正常关闭</span></span><br><span class="line">gpstop -M fast        <span class="comment"># 快速关闭</span></span><br><span class="line">gpstop –r          <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>greenplum</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose示例1</title>
    <url>/2021/04/10/docker-compose%E7%A4%BA%E4%BE%8B1/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="install-sh"><a href="#install-sh" class="headerlink" title="install.sh"></a>install.sh</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /bin/bash</span></span><br><span class="line"><span class="string">lj=$(pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># usage</span></span><br><span class="line"><span class="string">usage()&#123;</span></span><br><span class="line">   <span class="string">echo</span> <span class="string">"##############################"</span></span><br><span class="line">   <span class="string">echo</span> <span class="bullet">-e</span> <span class="string">"\033[31m 用法：$0 当前服务器IP地址 \033[0m"</span></span><br><span class="line">   <span class="string">echo</span> <span class="bullet">-e</span> <span class="string">"\033[31m 示例：$0 192.168.1.10 \033[0m"</span></span><br><span class="line">   <span class="string">echo</span> <span class="string">"##############################"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># port</span></span><br><span class="line"><span class="string">port()&#123;</span></span><br><span class="line">  <span class="string">if</span> <span class="string">docker</span> <span class="string">ps</span> <span class="bullet">-a</span> <span class="bullet">--no-trunc</span> <span class="bullet">--format</span>  <span class="string">"table <span class="template-variable">&#123;&#123;.Names&#125;&#125;</span>"</span><span class="string">| grep -i $&#123;2&#125;; then</span></span><br><span class="line"><span class="string">      echo -e "\033[31m ERROR: $&#123;2&#125; container already exists !!! | $&#123;2&#125; 容器已经存在，请手动执行相关命令！！！\033[0m"</span></span><br><span class="line"><span class="string">      exit</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">      if [ "$(/usr/sbin/lsof -i :$&#123;1&#125;|grep -v "PID" | awk '&#123;print $2&#125;')" != "" ]</span></span><br><span class="line"><span class="string">      then</span></span><br><span class="line"><span class="string">        echo -e "\033[31m  ERROR: $&#123;1&#125; port is already in use !!! | 错误: $&#123;1&#125; 端口已经被使用！！！\033[0m"</span></span><br><span class="line"><span class="string">        exit</span></span><br><span class="line"><span class="string">      else</span></span><br><span class="line"><span class="string">        echo -e "\033[32m $&#123;1&#125; ready !!! | $&#123;1&#125; 空闲 !!! \033[0m"</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">  fi   </span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 检测命令执行格式</span></span><br><span class="line"><span class="string">if [ $# -ne 1 ]; then</span></span><br><span class="line"><span class="string">  usage</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  if [[ $1 =~ ^[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$ ]]; then</span></span><br><span class="line"><span class="string">    echo -e "\033[31m 服务器IP：$1 \033[0m"</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    usage</span></span><br><span class="line"><span class="string">    exit 1</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># install lsof</span></span><br><span class="line"><span class="string">if rpm -qa|grep lsof; then</span></span><br><span class="line"><span class="string">  echo -e "\033[32m ## lsof 已经安装 \033[0m"</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  echo -e "\033[32m ## install lsof \033[0m"</span></span><br><span class="line"><span class="string">  yum localinstall -y $&#123;lj&#125;/docker/lsof/lsof-4.87-6.el7.x86_64.rpm</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># install docker</span></span><br><span class="line"><span class="string">echo "################################################################################"</span></span><br><span class="line"><span class="string">cd $&#123;lj&#125;</span></span><br><span class="line"><span class="string">echo -e "\033[32m ### install docker \033[0m"</span></span><br><span class="line"><span class="string">cd docker</span></span><br><span class="line"><span class="string">sh install-docker.sh docker-18.09.5.tgz </span></span><br><span class="line"><span class="string">cp docker-compose /usr/local/bin/</span></span><br><span class="line"><span class="string">cd $&#123;lj&#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># edit mapserv test file</span></span><br><span class="line"><span class="string">echo "################################################################################"</span></span><br><span class="line"><span class="string">echo -e "\033[32m ### edit mapserv main.js  file:::  $&#123;lj&#125;/mapdata/client/js/main.js \033[0m"</span></span><br><span class="line"><span class="string">sed -i "21c url: 'http://$&#123;1&#125;:10000/gdw/wms/demo?/'," $&#123;lj&#125;/data/client/js/main.js</span></span><br><span class="line"><span class="string">echo "SERVER_IP=$&#123;1&#125;" &gt; .env</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># Import image</span></span><br><span class="line"><span class="string">echo "################################################################################"</span></span><br><span class="line"><span class="string">echo -e "\033[32m ### import docker image \033[0m"</span></span><br><span class="line"><span class="string">gunzip -c $&#123;lj&#125;/docker/postgresql.tar.gz | docker load</span></span><br><span class="line"><span class="string">gunzip -c $&#123;lj&#125;/docker/redis.tar.gz | docker load</span></span><br><span class="line"><span class="string">gunzip -c $&#123;lj&#125;/docker/gdwserv.tar.gz | docker load</span></span><br><span class="line"><span class="string">gunzip -c $&#123;lj&#125;/docker/httpd.tar.gz | docker load</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 检测端口及容器占用</span></span><br><span class="line"><span class="string">port 6379 crawler_redis</span></span><br><span class="line"><span class="string">port 5432 crawler_postgis</span></span><br><span class="line"><span class="string">port 10000 crawler_crawler</span></span><br><span class="line"><span class="string">port 8199 crawler_crawler</span></span><br><span class="line"><span class="string">port 2999 crawler_httpd</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># create network zhjx</span></span><br><span class="line"><span class="string">#if [ "$(docker network list | awk '&#123;print $2&#125;'|grep zhjx)" != "" ]; then</span></span><br><span class="line"><span class="string">#  echo -e "\033[32m ## zhjx network already exists &amp;&amp; zhjx 网络已经存在 \033[0m"</span></span><br><span class="line"><span class="string">#else</span></span><br><span class="line"><span class="string">#  echo -e "\033[32m ### create zhjx network \033[0m"</span></span><br><span class="line"><span class="string">#  docker network create zhjx</span></span><br><span class="line"><span class="string">#fi</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># start postgresql</span></span><br><span class="line"><span class="string">#echo "################################################################################"</span></span><br><span class="line"><span class="string">#if docker ps -a --no-trunc --format  "table <span class="template-variable">&#123;&#123;.Names&#125;&#125;</span>"|grep crawler_postgis; then</span></span><br><span class="line"><span class="string">#   echo -e "\033[31m ERROR: crawler_postgis container already exists | crawler_postgis 容器 已经存在，请手动执行相关命令！！！ \033[0m"</span></span><br><span class="line"><span class="string">#   exit</span></span><br><span class="line"><span class="string">#else</span></span><br><span class="line"><span class="string">#   if [ "$(/usr/sbin/lsof -i :5432|grep -v "PID" | awk '&#123;print $2&#125;')" != "" ]</span></span><br><span class="line"><span class="string">#   then</span></span><br><span class="line"><span class="string">#      echo -e "\033[31m ERROR: 5432 port is already in use !!! | 错误：5432 端口已经被使用！！！\033[0m"</span></span><br><span class="line"><span class="string">#      exit</span></span><br><span class="line"><span class="string">#   else</span></span><br><span class="line"><span class="string">#      echo "start run crawler"</span></span><br><span class="line"><span class="string">#      docker run --network zhjx --name crawler_postgis --restart always -d -p 5432:5432 -e POSTGRES_PASSWORD=1qazxsw2 -v $&#123;lj&#125;/pgdata:/var/lib/postgresql/data mdillon/postgis:10</span></span><br><span class="line"><span class="string">#   fi</span></span><br><span class="line"><span class="string">#fi</span></span><br><span class="line"><span class="string"># start redis</span></span><br><span class="line"><span class="string">#echo "################################################################################"</span></span><br><span class="line"><span class="string">#if docker ps -a --no-trunc --format  "table <span class="template-variable">&#123;&#123;.Names&#125;&#125;</span>"| grep -i crawler_redis; then</span></span><br><span class="line"><span class="string">#   echo -e "\033[31m ERROR: crawler_redis container already exists !!! | crawler_redis 容器已经存在，请手动执行相关命令！！！\033[0m"</span></span><br><span class="line"><span class="string">#   exit</span></span><br><span class="line"><span class="string">#else</span></span><br><span class="line"><span class="string">#   if [ "$(/usr/sbin/lsof -i :6379|grep -v "PID" | awk '&#123;print $2&#125;')" != "" ]</span></span><br><span class="line"><span class="string">#   then</span></span><br><span class="line"><span class="string">#      echo -e "\033[31m  ERROR: 6379 port is already in use !!! | 错误：6379 端口已经被使用！！！\033[0m"</span></span><br><span class="line"><span class="string">#      exit</span></span><br><span class="line"><span class="string">#   else</span></span><br><span class="line"><span class="string">#      echo -e "\033[32m start run redis \033[0m"</span></span><br><span class="line"><span class="string">#      docker run --network zhjx --name crawler_redis --restart always -d -p 6379:6379 -v $&#123;lj&#125;/redis:/data redis:5.0.9</span></span><br><span class="line"><span class="string">#   fi</span></span><br><span class="line"><span class="string">#fi</span></span><br><span class="line"><span class="string">## start crawler</span></span><br><span class="line"><span class="string">#echo "################################################################################"</span></span><br><span class="line"><span class="string">#if docker ps -a --no-trunc --format  "table <span class="template-variable">&#123;&#123;.Names&#125;&#125;</span>"|grep crawler_mapser; then</span></span><br><span class="line"><span class="string">#   echo -e "\033[31m ERROR: crawler_mapser container already exists | crawler_mapser 容器 已经存在，请手动执行相关命令！！！ \033[0m"</span></span><br><span class="line"><span class="string">#   exit</span></span><br><span class="line"><span class="string">#else</span></span><br><span class="line"><span class="string">#   if [ "$(/usr/sbin/lsof -i :8080|grep -v "PID" | awk '&#123;print $2&#125;')" != "" ]</span></span><br><span class="line"><span class="string">#   then</span></span><br><span class="line"><span class="string">#      echo -e "\033[31m ERROR: 8080 port is already in use !!! | 错误：8080 端口已经被使用！！！\033[0m"</span></span><br><span class="line"><span class="string">#      exit</span></span><br><span class="line"><span class="string">#   else</span></span><br><span class="line"><span class="string">#      if [ "$(/usr/sbin/lsof -i :10000|grep -v "PID" | awk '&#123;print $2&#125;')" != "" ]</span></span><br><span class="line"><span class="string">#      then</span></span><br><span class="line"><span class="string">#        echo -e "\033[31m ERROR: 10000 port is already in use !!! | 错误：10000 端口已经被使用！！！\033[0m"</span></span><br><span class="line"><span class="string">#        exit</span></span><br><span class="line"><span class="string">#      else</span></span><br><span class="line"><span class="string">#        echo -e "\033[32m start run crawler \033[0m"</span></span><br><span class="line"><span class="string">##        docker run -u root --name crawler_mapser --network zhjx --restart always -d -p 10000:80 -p 8080:8080 -e LANG="en_US.utf8" -e JAVA_OPTS="-server -Xms2048m -Xmx2048m -Xss512k -Dfile.encoding="UTF8" -Dfile.encoding="UTF8"" -e REDIS_IP=$&#123;1&#125; -e REDIS_PORT=6379 -e REDIS_TOKENS=5 -e BASEURL=http://$&#123;1&#125;:10000/gdw -dti -v $&#123;lj&#125;/services/:/tomcat/webapps -v $&#123;lj&#125;/mapdata/:/usr/local/gdw/data gdwserv:v0.1_tomcat8</span></span><br><span class="line"><span class="string">#         docker run -u root --name crawler_mapser --network zhjx -d -p 10000:80 -p 8080:8080 -e LANG="en_US.utf8" -e JAVA_OPTS="-server -Xms2048m -Xmx4096m -Xss512k -Dfile.encoding="UTF8"" -e REDIS_IP=$&#123;1&#125; -e REDIS_PORT=6379 -e REDIS_TOKENS=5 -e BASEURL=http://$&#123;1&#125;:10000/gdw -dti -v $&#123;lj&#125;/service/:/tomcat/webapps -v $&#123;lj&#125;/data/:/usr/local/gdw/data/ -v $&#123;lj&#125;/service_data/root/crawler/:/root/crawler/ -v $&#123;lj&#125;/service_data/datafile/crawler:/datafile/crawler -v /service_data/data/ftp/:/data/ftp/ -v $&#123;lj&#125;/service_data/icons/crawler://icons/crawler -v $&#123;lj&#125;/service_data/vsicurl/:/vsicurl/ -v $&#123;lj&#125;/service_data/vsizip:/vsizip -v $&#123;lj&#125;/service_data/vsizip:/vsizip -v $&#123;lj&#125;/service_data/home/data/insight/:/home/data/insight/ gdwserv:v0.1_tomcat8</span></span><br><span class="line"><span class="string">#      fi</span></span><br><span class="line"><span class="string">#   fi</span></span><br><span class="line"><span class="string">#fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># start crawler</span></span><br><span class="line"><span class="string">docker-compose up -d</span></span><br><span class="line"><span class="string">sleep 2</span></span><br><span class="line"><span class="string">docker ps</span></span><br><span class="line"><span class="string">echo "----------------------------------------------------------------------------------------"</span></span><br><span class="line"><span class="string">echo -e "\033[32m ALL Services install finish, Please view from the browser. http://$&#123;1&#125;:8080/crawler \033[0m"</span></span><br><span class="line"><span class="string">echo -e "\033[32m 所有服务安装完成，请通过浏览器访问.http://$&#123;1&#125;:8080/crawler \033[0m"</span></span><br><span class="line"><span class="string">echo "----------------------------------------------------------------------------------------"</span></span><br></pre></td></tr></table></figure>
<h1 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">   crawler:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">gdwserv:v0.1_tomcat8</span></span><br><span class="line"><span class="attr">      restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">      depends_on:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">postgis</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"8199:8080"</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"10000:80"</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./service/:/tomcat/webapps"</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./data/:/usr/local/gdw/data"</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./service_data/root/crawler/:/root/crawler/"</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./service_data/datafile/crawler:/datafile/crawler"</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./service_data/data/ftp/:/data/ftp/"</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./service_data/vsicurl/:/vsicurl"</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./service_data/vsizip:/vsizip"</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./service_data/home/data/insight:/home/data/insight"</span></span><br><span class="line"><span class="attr">      environment:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">LANG="en_US.utf8"</span></span><br><span class="line"><span class="comment">#         - JAVA_OPTS="-server -Xms2048m -Xmx4096m -Xss512k -Dfile.encoding="UTF8""</span></span><br><span class="line"><span class="comment"># 采用当前目录,默认 .env 文件内的变量</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">REDIS_IP=$&#123;SERVER_IP&#125;</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">REDIS_PORT=6379</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">REDIS_TOKENS=5</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">BASEURL=http://$&#123;SERVER_IP&#125;:10000/gdw</span></span><br><span class="line"><span class="attr">   postgis:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">mdillon/postgis:10</span></span><br><span class="line"><span class="attr">      restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"5432:5432"</span></span><br><span class="line"><span class="comment"># 采用指定文件内的变量</span></span><br><span class="line"><span class="attr">      env_file:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">.post_pass</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./pgdata:/var/lib/postgresql/data"</span></span><br><span class="line"><span class="attr">   redis:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">redis:6</span></span><br><span class="line"><span class="attr">      restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"6379:6379"</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./redis:/data"</span></span><br><span class="line"><span class="attr">   httpd:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">httpd:2.4.46-alpine</span></span><br><span class="line"><span class="attr">      restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"2999:80"</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">"./service_data/home/data/insight:/usr/local/apache2/htdocs"</span></span><br></pre></td></tr></table></figure>
<h1 id="uninstall-sh"><a href="#uninstall-sh" class="headerlink" title="uninstall.sh"></a>uninstall.sh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">lj=$(<span class="built_in">pwd</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"################################################################################"</span></span><br><span class="line"><span class="comment"># del services</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m ### del services \033[0m"</span></span><br><span class="line">docker-compose down</span><br><span class="line"> </span><br><span class="line"><span class="comment"># del images</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m ### del images \033[0m"</span></span><br><span class="line">docker rmi gdwserv:v0.1_tomcat8</span><br><span class="line">docker rmi mdillon/postgis:10</span><br><span class="line">docker rmi redis:6</span><br><span class="line">docker rmi httpd:2.4.46-alpine</span><br><span class="line"> </span><br><span class="line"><span class="comment"># del network zhjx</span></span><br><span class="line"><span class="comment">#echo -e "\033[32m ### del docker-network \033[0m"</span></span><br><span class="line"><span class="comment">#docker network rm zhjx</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># del docker</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m ### del docker service \033[0m"</span></span><br><span class="line">systemctl stop docker.service</span><br><span class="line">SYSTEMDDIR=/usr/lib/systemd/system</span><br><span class="line">SERVICEFILE=docker.service</span><br><span class="line">DOCKERDIR=/usr/bin/</span><br><span class="line">COMPOSEDIR=/usr/<span class="built_in">local</span>/bin/</span><br><span class="line">rm -rf <span class="variable">$&#123;DOCKERDIR&#125;</span>/docker*</span><br><span class="line">rm -rf <span class="variable">$&#123;SYSTEMDDIR&#125;</span>/<span class="variable">$&#123;SERVICEFILE&#125;</span></span><br><span class="line">rm -rf <span class="variable">$&#123;COMPOSEDIR&#125;</span>/docker-compose</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m ALL Services delete \033[0m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----------------------------------------------------------------------------------------"</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>1</th>
<th>1</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>redis高可用集群配置</title>
    <url>/2020/07/01/redis%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="一-主机"><a href="#一-主机" class="headerlink" title="一 主机"></a>一 主机</h1><table>
<thead>
<tr>
<th>角色</th>
<th>IP</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.0.56</td>
<td>redis</td>
</tr>
<tr>
<td>slave</td>
<td>192.168.0.58</td>
<td>redis redis-Sentinel</td>
</tr>
</tbody>
</table>
<h1 id="二-安装redis"><a href="#二-安装redis" class="headerlink" title="二 安装redis"></a>二 安装redis</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install redis</span><br></pre></td></tr></table></figure>
<h1 id="三-配置主从"><a href="#三-配置主从" class="headerlink" title="三 配置主从"></a>三 配置主从</h1><ul>
<li>master节点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line"><span class="comment"># 开启所有地址连接（根据实际情况配置）</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># redis添加认证密码test123 （可不设置，如果设置各节点密码保持一致）</span></span><br><span class="line">requirepass test123</span><br><span class="line"><span class="comment"># 连接master节点密码 （如果设置认证密码，配置该项）</span></span><br><span class="line">masterauth test123</span><br></pre></td></tr></table></figure>
<ul>
<li>slave节点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line"><span class="comment"># 开启所有地址连接（根据实际情况配置）</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># redis添加认证密码test123 （可不设置，如果设置各节点密码保持一致）</span></span><br><span class="line">requirepass test123</span><br><span class="line"><span class="comment"># 配置为从节点(配置为集群从节点只需这一句)</span></span><br><span class="line">slaveof 192.168.0.56 6379</span><br><span class="line"><span class="comment"># 连接master节点密码 （如果设置认证密码，配置该项）</span></span><br><span class="line">masterauth test123</span><br></pre></td></tr></table></figure>
<h2 id="检查主从节点"><a href="#检查主从节点" class="headerlink" title="检查主从节点"></a>检查主从节点</h2><ul>
<li>master节点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">master节点redis信息</span><br><span class="line">[root@test2 ~]<span class="comment"># systemctl start redis</span></span><br><span class="line">[root@test2 ~]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; AUTH test123</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>slave节点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slave节点redis信息</span><br><span class="line">[root@test3 etc]<span class="comment"># systemctl start redis</span></span><br><span class="line">[root@test3 etc]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; AUTH test123</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.0.56</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:15</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加键值测试同步</li>
</ul>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/redis高可用集群配置/1593568525790.png" alt="1"></p>
<h1 id="四-配置redis哨兵（Sentinel）实现高可用"><a href="#四-配置redis哨兵（Sentinel）实现高可用" class="headerlink" title="四 配置redis哨兵（Sentinel）实现高可用"></a>四 配置redis哨兵（Sentinel）实现高可用</h1><p>redis-sentinel是redis自带的功能，安装redis服务自带该服务。启动服务方式：systemctl start redis-sentinel.service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim redis-sentinel.conf</span><br><span class="line"><span class="comment"># 允许所有地址连接sentinel</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># 侦测master节点，1表示当有一个sentinel服务发现master宕机后开始切换master节点</span></span><br><span class="line">sentinel monitor mymaster 192.168.0.56 6379 1</span><br><span class="line"><span class="comment"># 连接master节点的密钥</span></span><br><span class="line">sentinel auth-pass mymaster test123</span><br><span class="line"><span class="comment"># 5秒内master没有响应，就认为SDOWN （可不添加）</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br></pre></td></tr></table></figure>
<h1 id="五-redis客户端连接集群"><a href="#五-redis客户端连接集群" class="headerlink" title="五 redis客户端连接集群"></a>五 redis客户端连接集群</h1><div class="note success"><p><strong>redisk客户端连接方式</strong><br>redis客户端连接redis集群，连接的不是redis服务器的地址，而是Sentinel服务的地址和端口,当master节点故障时，Sentinel会自动设置slave为master并连接到master，就实现了redis的高可用</p></div>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/redis高可用集群配置/1593568580963.png" alt="2"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN配置参数详解</title>
    <url>/2020/03/12/OpenVPN%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<a id="more"></a>
<p><strong>OpenVPN 配置参数详解:</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># #号和;号开头的都是注释</span></span><br><span class="line"><span class="comment"># 设置监听 IP，默认是监听所有 IP</span></span><br><span class="line"><span class="comment">#local 116.6.45.23</span></span><br><span class="line"><span class="comment">#Openvpn 服务器监听端口</span></span><br><span class="line">port <span class="number">2194</span></span><br><span class="line"><span class="comment"># 设置用 TCP 还是 UDP 协议？</span></span><br><span class="line">;proto tcp</span><br><span class="line">proto udp</span><br><span class="line"><span class="comment"># 设置创建 tun 的路由 IP 通道，还是创建 tap 的以太网通道</span></span><br><span class="line"><span class="comment"># 路由 IP 容易控制，所以推荐使用它；但如果如 IPX 等必须</span></span><br><span class="line"><span class="comment"># 使用第二层才能通过的通讯，则可以用 tap 方式，tap 也</span></span><br><span class="line"><span class="comment"># 就是以太网桥接</span></span><br><span class="line">dev tun</span><br><span class="line"><span class="comment"># 配置 VPN 使用的网段，OpenVPN 会自动提供基于该网段的 DHCP</span></span><br><span class="line"><span class="comment"># 服务，但不能和任何一方的局域网段重复，保证唯一</span></span><br><span class="line"><span class="comment"># server 端 ip 默认会设为.1 的地址。</span></span><br><span class="line">server <span class="number">10.9</span>.<span class="number">0.0</span> <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="comment"># 为客户端创建对应的路由,以另其通达公司网内部服务器</span></span><br><span class="line"><span class="comment"># 但记住，公司网内部服务器也需要有可用路由返回到客户端</span></span><br><span class="line">push <span class="string">"route 172.18.2.0 255.255.255.0"</span></span><br><span class="line"><span class="comment"># 维持一个客户端和 virtual IP 的对应表，以方便客户端重新</span></span><br><span class="line"><span class="comment"># 连接可以获得同样的 IP</span></span><br><span class="line">ifconfig-pool-persist    /usr/local/etc/ipp.txt</span><br><span class="line"><span class="comment"># 用 OpenVPN 的 DHCP 功能为客户端提供指定的 DNS、WINS 等</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 172.18.2.23"</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 202.96.128.86"</span></span><br><span class="line"><span class="comment"># 这里是重点，必须指定 SSL/TLS root certificate (ca),</span></span><br><span class="line"><span class="comment"># certificate(cert), and private key (key)</span></span><br><span class="line"><span class="comment"># ca 文件是服务端和客户端都必须使用的，但不需要 ca.key</span></span><br><span class="line"><span class="comment"># 服务端和客户端指定各自的.crt 和.key</span></span><br><span class="line"><span class="comment"># 请注意路径,可以使用以配置文件开始为根的相对路径,</span></span><br><span class="line"><span class="comment"># 也可以使用绝对路径</span></span><br><span class="line"><span class="comment"># 请小心存放.key 密钥文件</span></span><br><span class="line">ca /usr/local/etc/keys/ca.crt</span><br><span class="line">cert /usr/local/etc/keys/server.crt</span><br><span class="line">key /usr/local/etc/keys/server.key</span><br><span class="line"><span class="comment"># 指定 Diffie hellman parameters.</span></span><br><span class="line">dh /usr/local/etc/keys/dh1024.pem</span><br><span class="line"><span class="comment">#用于吊销客户证书</span></span><br><span class="line">crl-verify /usr/local/etc/keys/vpncrl.pem</span><br><span class="line"><span class="comment">#增强安全性</span></span><br><span class="line"><span class="comment"># Generate with:</span></span><br><span class="line"><span class="comment"># openvpn --genkey --secret ta.key</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The server and each client must have</span></span><br><span class="line"><span class="comment"># a copy of this key.</span></span><br><span class="line"><span class="comment"># The second parameter should be 0</span></span><br><span class="line"><span class="comment"># on the server and 1 on the clients.</span></span><br><span class="line">tls-auth /usr/local/etc/keys/ta.key <span class="number">0</span></span><br><span class="line"><span class="comment"># 设置服务端检测的间隔和超时时间 每 10 秒 ping 一次，如果 120 秒没有回应则认为对方已经 down</span></span><br><span class="line">keepalive <span class="number">10</span> <span class="number">120</span></span><br><span class="line"><span class="comment"># 使用 lzo 压缩的通讯,服务端和客户端都必须配置</span></span><br><span class="line">comp-lzo</span><br><span class="line"><span class="comment"># 输出短日志,每分钟刷新一次,以显示当前的客户端</span></span><br><span class="line">status /var/log/openvpn-status.log</span><br><span class="line"><span class="comment">#设置日志要记录的级别。</span></span><br><span class="line"><span class="comment">#0 只记录错误信息。</span></span><br><span class="line"><span class="comment">#4 能记录普通的信息。</span></span><br><span class="line"><span class="comment">#5 和 6 在连接出现问题时能帮助调试</span></span><br><span class="line"><span class="comment">#9 是极端的，所有信息都会显示，甚至连包头等信息都显示（像 tcpdump）</span></span><br><span class="line">verb <span class="number">4</span></span><br><span class="line"><span class="comment">#相同信息的数量，如果连续出现 20 条相同的信息，将不记录到日志中。</span></span><br><span class="line">mute <span class="number">20</span></span><br><span class="line"><span class="comment"># 让 OpenVPN 以 nobody 用户和组来运行（安全）</span></span><br><span class="line">user nobody</span><br><span class="line">group nobody</span><br><span class="line"><span class="comment"># The persist options will try to avoid</span></span><br><span class="line"><span class="comment"># accessing certain resources on restart</span></span><br><span class="line"><span class="comment"># that may no longer be accessible because</span></span><br><span class="line"><span class="comment"># of the privilege downgrade.</span></span><br><span class="line"><span class="comment"># 重启时仍保留一些状态</span></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"> <span class="comment">###################其他参数 ######################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为特定的客户端指定 IP 或指定路由,该路由通常是客户端后面的</span></span><br><span class="line"><span class="comment"># 内网网段,而不是服务端连接的网段</span></span><br><span class="line"><span class="comment"># ccd 是/etc/openvpn 下的目录，其中建有希望限制的客户端 Common</span></span><br><span class="line"><span class="comment"># Name 为文件名的文件,并通过下面的命令写入固定 IP 地址</span></span><br><span class="line"><span class="comment"># 例如 Common Name 为 client1,则在/etc/openvpn/ccd/client1 写有：</span></span><br><span class="line"><span class="comment"># ifconfig-push 10.9.0.1 10.9.0.2</span></span><br><span class="line">client-config-dir /usr/local/etc/ccd</span><br><span class="line"><span class="comment"># 若客户端希望所有的流量都通过 VPN 传输,则可以使用该语句</span></span><br><span class="line"><span class="comment"># 其会自动改变客户端的网关为 VPN 服务器,推荐关闭</span></span><br><span class="line"><span class="comment"># 一旦设置，请小心服务端的 DHCP 设置问题</span></span><br><span class="line">;push <span class="string">"redirect-gateway"</span></span><br><span class="line"><span class="comment"># 如果您希望有相同 Common Name 的客户端都可以登陆</span></span><br><span class="line"><span class="comment"># 也可以注释下面的语句,推荐每个客户端都使用不用的 Common Name</span></span><br><span class="line"><span class="comment"># 常用于测试</span></span><br><span class="line">;duplicate-cn</span><br><span class="line"><span class="comment"># 设置最大用户数</span></span><br><span class="line"><span class="comment">#max-clients 3</span></span><br><span class="line"><span class="comment"># 打开管理界面,可以定义监控的 IP 和端口</span></span><br><span class="line">management localhost <span class="number">7505</span></span><br><span class="line"><span class="comment"># 缺省日志会记录在系统日志中，但也可以导向到其他地方</span></span><br><span class="line"><span class="comment"># 建议调试的使用先不要设置,调试完成后再定义</span></span><br><span class="line">;log /var/log/openvpn/openvpn.log</span><br><span class="line">;log-append /var/log/openvpn/openvpn.log</span><br><span class="line"><span class="comment"># 配置为以太网桥模式,但需要使用系统的桥接功能</span></span><br><span class="line"><span class="comment"># 这里不需要使用</span></span><br><span class="line">;server-bridge <span class="number">10.8</span>.<span class="number">0.4</span> <span class="number">255.255</span>.<span class="number">255.0</span> <span class="number">10.8</span>.<span class="number">0.50</span> <span class="number">10.8</span>.<span class="number">0.100</span></span><br><span class="line"><span class="comment">#记录日志，每次重新启动 openvpn 后删除原有的 log 信息</span></span><br><span class="line">log /var/log/openvpn.log</span><br><span class="line"><span class="comment">#和 log 一致，每次重新启动 openvpn 后保留原有的 log 信息，新信息追加到文件最后</span></span><br><span class="line">;log-append openvpn.log</span><br><span class="line"><span class="comment">#定义运行 openvpn 的用户</span></span><br><span class="line">user nobody</span><br><span class="line">group nobody</span><br><span class="line"><span class="comment">#Run script or shell command cmd to validate client</span></span><br><span class="line"><span class="comment">#virtual addresses or routes. 具体查看 manual</span></span><br><span class="line">;learn-address ./script</span><br><span class="line"><span class="comment">#其它的一些需要 PUSH 给 Client</span></span><br><span class="line"><span class="comment">#用于记录某个 Client 获得的 IP 地址，类似于 dhcpd.lease 文件，</span></span><br><span class="line"><span class="comment">#防止 openvpn 重新启动后“忘记”Client 曾经使用过的 IP 地址</span></span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"><span class="comment">#Bridge 状态下类似 DHCPD 的配置，为客户分配地址，由于这里工作在路由模式，所以不使用</span></span><br><span class="line">;server-bridge <span class="number">10.8</span>.<span class="number">0.4</span> <span class="number">255.255</span>.<span class="number">255.0</span> <span class="number">10.8</span>.<span class="number">0.50</span> <span class="number">10.8</span>.<span class="number">0.100</span></span><br><span class="line"><span class="comment"># 随机选择一个 Server 连接，否则按照顺序从上到下依次连接</span></span><br><span class="line">;remote-random</span><br><span class="line"><span class="comment"># 始终重新解析 Server 的 IP 地址（如果 remote 后面跟的是域名）                 ，</span></span><br><span class="line"><span class="comment"># 保证 Server IP 地址是动态的使用 DDNS 动态更新 DNS 后，Client 在自动重新连接时重新解析 Server 的</span></span><br><span class="line">IP 地址</span><br><span class="line"><span class="comment"># 这样无需人为重新启动，即可重新接入 VPN</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line"><span class="comment"># 在本机不邦定任何端口监听 incoming 数据，Client 无需此操作，除非一对一的 VPN 有必要</span></span><br><span class="line">nobind</span><br><span class="line"><span class="comment"># 如果你使用 HTTP 代理连接 VPN Server，把 Proxy 的 IP 地址和端口写到下面</span></span><br><span class="line"><span class="comment"># 如果代理需要验证，使用 http-proxy server port [authfile] [auth-method]</span></span><br><span class="line"><span class="comment"># 其中 authfile 是一个 2 行的文本文件，用户名和密码各占一行，auth-method 可以省略，详</span></span><br><span class="line">细信息查看 Manual</span><br><span class="line">;http-proxy-retry <span class="comment"># retry on connection failures</span></span><br><span class="line">;http-proxy [proxy server] [proxy port <span class="comment">#]</span></span><br><span class="line"><span class="comment"># Server 使用 build-key-server 脚本什成的，在 x509 v3 扩展中加入了 ns-cert-type 选项</span></span><br><span class="line"><span class="comment"># 防止 VPN client 使用他们的 keys ＋ DNS hack 欺骗 vpn client 连接他们假冒的 VPN Server</span></span><br><span class="line"><span class="comment"># 因为他们的 CA 里没有这个扩展</span></span><br><span class="line">ns-cert-type server</span><br><span class="line">a.定义 tun 为使用路由方式的 VPN</span><br><span class="line">b.小心处理证书的路径，.key 文件要保存好，特别是 ca.key。</span><br><span class="line">（ca.key 不需要在 OpenVPN 中用到，可以另外保存）</span><br><span class="line">注意，每个虚拟 tun 网卡都是成对的，只有 inet addr 标识的才是用于 VPN 通讯。并且必须在/<span class="number">30</span> 网段</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>openvpn</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop集群部署1</title>
    <url>/2021/04/19/hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B21/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1.    环境"></a>1.    环境</h1><p>平台使用 Centos 7 64位作为系统环境。采用1个Master节点与3个Slave节点搭建成为分布式集群，详情见表 1。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618821547252.png" alt="enter description here"></p>
<h1 id="2-基础安装"><a href="#2-基础安装" class="headerlink" title="2.    基础安装"></a>2.    基础安装</h1><h2 id="2-1-安装CentOS-7"><a href="#2-1-安装CentOS-7" class="headerlink" title="2.1.    安装CentOS 7"></a>2.1.    安装CentOS 7</h2><p>拷制U盘启动后，选择开机使用U盘启动，进入主引导装机页面如下图。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618821563825.png" alt="图 1"><br>选择Test this medis &amp; install CentOS Linux 7，进入下面界面：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618821571587.png" alt="图 2"><br>稍等片刻后，进入CenOS7可视化安装界面，选择中文。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618821577179.png" alt="图 3"><br>点击Continue后，进入安装信息摘要界面，选择日期和时间为亚洲/上海 时区，主要保持每个服务器的时区一致，软件选择为最小安装，点击安装位置后如图 12所示，根据需要选择自动分区或者手动分区，这里为自动分区。点击完成后，回到图 11，点击开始安装。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618821596794.png" alt="图 4"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618821603116.png" alt="图 5"><br>安装进行过程中提示用户设置如下图，点击ROOT密码，为ROOT用户设置密码，如需要创建其他用户，可点击创建用户，新增其他用户。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618821610630.png" alt="图 6"><br>之上内容设置完成后，点击重启，完成系统安装。</p>
<h2 id="2-2-配置网络"><a href="#2-2-配置网络" class="headerlink" title="2.2.    配置网络"></a>2.2.    配置网络</h2><p>设置各节点静态IP<br><strong>修改hostname：</strong><br>$ vi /etc/hostname #编辑配置文件<br>Master</p>
<h2 id="2-3-关闭防火墙和SeLinux"><a href="#2-3-关闭防火墙和SeLinux" class="headerlink" title="2.3.    关闭防火墙和SeLinux"></a>2.3.    关闭防火墙和SeLinux</h2><p>CentOS 7.0默认使用的是firewall作为防火墙，默认为最小化安装时，系统没有安装防火墙，安装完可视化界面后，可能防火墙也会被安装上，因此需要关闭防火墙。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld.service <span class="comment">#停止firewall</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld.service <span class="comment">#禁止firewall开机启动</span></span></span><br></pre></td></tr></table></figure>
<p>使用sestatus -v 命令，查看Selinux状态。如果不是disable状态，编辑/etc/sysconfig/selinux 文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/sysconfig/selinux</span></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>
<h2 id="2-4-SSH免密码登录"><a href="#2-4-SSH免密码登录" class="headerlink" title="2.4.    SSH免密码登录"></a>2.4.    SSH免密码登录</h2><p>SSH免密码登录，因为Hadoop需要通过SSH登录到各个节点进行操作，我用的是root用户，每台服务器都生成公钥，再合并到authorized_keys<br>(1) CentOS默认没有启动ssh无密登录，去掉/etc/ssh/sshd_config其中2行的注释，每台服务器都要设置，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/ssh/sshd_config</span></span><br><span class="line">RSAAuthentication yes </span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>
<p>(2) 输入命令，<code>ssh-keygen -t rsa</code>，生成key，都不输入密码，一直回车，/root就会生成.ssh文件夹，每台服务器都要设置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure>
<p>(3) 合并公钥到authorized_keys文件，在Master服务器，进入/root/.ssh目录，通过SSH命令合并</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat id_rsa.pub&gt;&gt; authorized_keys</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> Chmod 600 authorized_kdys</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh root@192.168.0.165 cat ~/.ssh/id_rsa.pub&gt;&gt; authorized_keys</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh root@192.168.0.166 cat ~/.ssh/id_rsa.pub&gt;&gt; authorized_keys</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh root@192.168.0.167 cat ~/.ssh/id_rsa.pub&gt;&gt; authorized_keys</span></span><br></pre></td></tr></table></figure>
<p> (4) 把Master服务器的authorized_keys、known_hosts复制到Slave服务器的/root/.ssh目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp authorized_keys root@192.168.0.165:~/.ssh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> scp authorized_keys root@192.168.0.166:~/.ssh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> scp authorized_keys root@192.168.0.167:~/.ssh</span></span><br></pre></td></tr></table></figure>
<p>(5) 完成，ssh Slave1、ssh Slave2、ssh Slave3就不需要输入密码了</p>
<h2 id="2-5-安装JDK"><a href="#2-5-安装JDK" class="headerlink" title="2.5.    安装JDK"></a>2.5.    安装JDK</h2><p>安装JDK，Hadoop2.7需要JDK7，由于我的CentOS是最小化安装，所以没有OpenJDK，直接解压下载的JDK并配置变量即可<br>(1)下载“jdk-7u79-linux-x64.gz”，放到/home/java目录下<br>(2)解压，输入命令，tar -zxvf jdk-7u79-linux-x64.gz<br>(3)编辑/etc/profile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/home/java/jdk1.7.0_79</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>
<p>(4)使配置生效，输入命令，<code>source /etc/profile</code><br>(5)输入命令，<code>java -version</code>，完成</p>
<h1 id="3-数据库安装"><a href="#3-数据库安装" class="headerlink" title="3.    数据库安装"></a>3.    数据库安装</h1><p>1)     下载安装包<br><a href="http://dev.mysql.com/downloads/mysql/#downloads" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/#downloads</a><br>推荐下载通用安装方法的tar.gz包<br>2)    检查库文件是否存在，如有删除。<br>$ rpm -qa | grep mysql<br>mysql-libs-5.1.52-1.el6_0.1.x86_64<br>$ rpm -e mysql-libs-5.1.52.x86_64 –nodeps<br>3)    检查mysql组和用户是否存在，如无创建。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/group | grep mysql</span></span><br><span class="line">mysql:x:490:</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd | grep mysql</span></span><br><span class="line">mysql:x:496:490::/home/mysql:/bin/bash</span><br></pre></td></tr></table></figure>
<p>以上为默认存在的情况，如无，执行添加命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">groupadd mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash">useradd -r -g mysql mysql</span></span><br></pre></td></tr></table></figure>
<p>//useradd -r参数表示mysql用户是系统用户，不可用于登录系统。<br>4)    解压TAR包，更改所属的组和用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvfz mysql-5.6.37-linux-glibc2.5-x86_64.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown -R mysql mysql-5.6.37-linux-glibc2.5-x86_64/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chgrp -R mysql mysql-5.6.37-linux-glibc2.5-x86_64/</span></span><br></pre></td></tr></table></figure>
<p>5)    安装和初始化数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/mysql_install_db --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql/ --datadir=/usr/<span class="built_in">local</span>/mysql/data/</span></span><br></pre></td></tr></table></figure>
<p>6)    改写配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp -a ./support-files/my-default.cnf /etc/my.cnf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp -a ./support-files/mysql.server  /etc/init.d/mysqld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> etc/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi my.cnf</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改my.cnf的内容如下<br>[mysql]<br>default-character-set=utf8<br>socket=/var/lib/mysql/mysql.sock<br>[mysqld]<br>skip-name-resolve<br>port=3306<br>socket=/var/lib/mysql/mysql.sock<br>basedir=/usr/local/mysql  # 设置mysql的安装目录<br>datadir=/usr/local/mysql/data  # 设置mysql数据库的数据的存放目录<br>max_connections=200 # 允许最大连接数<br>character-set-server=utf8<br>default-storage-engine=INNODB # 创建新表时将使用的默认存储引擎<br>lower_case_table_names=1<br>max_allowed_packet=16M</p>
</blockquote>
<p>7)    启动数据库服务并设置服务开机自动启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./mysqld_safe --user=mysql &amp;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /etc/init.d/mysqld restart </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chkconfig --level 35 mysqld on //设置开机启动</span></span><br></pre></td></tr></table></figure>
<p>8)    初始化密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /root/.mysql_secret</span></span><br></pre></td></tr></table></figure>
<p><code># Password set for user &#39;root@localhost&#39; at 2016-06-01 15:23:25</code><br>,xxxxxR5H9<br>$ mysql -uroot –p<br>Enter password:<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 2<br>Server version: 5.7.12</p>
<p>Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</p>
<p>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.</p>
<p>Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.</p>
<p>mysql&gt; <strong>SET PASSWORD = PASSWORD(‘123456’);</strong><br>Query OK, 0 rows affected, 1 warning (0.00 sec)</p>
<p>mysql&gt; <strong>flush privileges</strong>;<br>Query OK, 0 rows affected (0.00 sec)<br>9)    添加远程访问权限<br>mysql&gt; <strong>use mysql;</strong><br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A</p>
<p>Database changed<br>mysql&gt; <strong>update user set host = ‘%’ where user = ‘root’;</strong><br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0</p>
<p>mysql&gt; <strong>select host, user from user;</strong><br>+———–+———–+<br>| host       | user      |<br>+———–+———–+<br>| %          | root      |<br>| localhost | mysql.sys |<br>+———–+———–+<br>mysql&gt; <strong>quit</strong><br><code>$ /etc/init.d/mysqld restart</code>   //一定要重启才会生效。</p>
<h1 id="4-Ambari安装"><a href="#4-Ambari安装" class="headerlink" title="4.    Ambari安装"></a>4.    Ambari安装</h1><p>由于在线安装容易受到网络不稳定等方面影响，因此采用平台选用离线安装的方式。</p>
<h2 id="4-1-搭建Yum源服务器"><a href="#4-1-搭建Yum源服务器" class="headerlink" title="4.1.    搭建Yum源服务器"></a>4.1.    搭建Yum源服务器</h2><p>1)    安装httpd服务<br>检查是否已经安装apache http服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">which</span> httpd</span></span><br></pre></td></tr></table></figure>
<p>如果没有出现目录信息，则说明没有安装。通过下面的语句进行安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install httpd</span></span><br></pre></td></tr></table></figure>
<p>安装成功之后，apache工作目录默认在/var/www/html。检查如没有此目录，需要手动创建相同目录结构。检查端口是否占用，http服务使用80端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -nltp | grep 80</span></span><br></pre></td></tr></table></figure>
<p>如果有占用情况，安装完毕之后需要修改apache http服务的端口号：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="keyword">vi</span> /etc/httpd/<span class="keyword">conf</span>/httpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>修改监听端口，Listen 80为其他端口。<br>为了加快安装速度和防止超时错误，建议为HDP配置本地源，请在事先在网上下载HDP、HDP-UTILS和Ambari，本例中几个组件版本为HDP-2.6.0，HDP-UTILS-1.1.0.21和Ambari-2.5.1.0。此处把slave3服务器做为源服务器。以下操作在slave3机器运行。<br>2)    下载压缩包<br>首先下载包含必要软件的压缩包（tarball）到本地，在<a href="https://docs.hortonworks.com/HDPDocuments/Ambari-2.5.1.0/bk_ambari-installation/content/ambari_repositories.html中，查看需要下载的tarball。下表为本平台所用的内容：" target="_blank" rel="noopener">https://docs.hortonworks.com/HDPDocuments/Ambari-2.5.1.0/bk_ambari-installation/content/ambari_repositories.html中，查看需要下载的tarball。下表为本平台所用的内容：</a><br>服务内容    Tarball源地址<br>Ambari    <a href="http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.5.1.0/ambari-2.5.1.0-centos7.tar.gz" target="_blank" rel="noopener">http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.5.1.0/ambari-2.5.1.0-centos7.tar.gz</a><br>HDP    <a href="http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.6.1.0/HDP-2.6.1.0-centos7-rpm.tar.gz" target="_blank" rel="noopener">http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.6.1.0/HDP-2.6.1.0-centos7-rpm.tar.gz</a><br>HDP-UTILS    <a href="http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.21/repos/centos7/HDP-UTILS-1.1.0.21-centos7.tar.gz" target="_blank" rel="noopener">http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.21/repos/centos7/HDP-UTILS-1.1.0.21-centos7.tar.gz</a><br>建立本地仓库，这里使用 httpd 来建立，安装启动httpd省略。解压三个包到 /var/www/html 目录下。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf ambari-<span class="number">2.5</span>.<span class="number">1</span>-centos7<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /var/www/html/</span><br><span class="line">$ tar -zxvf HDP-<span class="number">2.6</span>.<span class="number">1.0</span>-centos7-rpm<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /var/www/html/</span><br><span class="line">$ tar -zxvf HDP-UTILS-<span class="number">1.1</span>.<span class="number">0.21</span>-centos7<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /var/www/html/</span><br></pre></td></tr></table></figure>
<p>3)    修改Repo<br>修改 ambari.repo，使之与 yum源机器匹配。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">$ cd /etc/yum.repos.d</span><br><span class="line">$vi ambary.repo</span><br><span class="line"><span class="comment">#VERSION_NUMBER=2.5.1.0-159</span></span><br><span class="line">[Updates-ambari-2.5.1.0]</span><br><span class="line">name=ambari-2.5.1.0- Updates</span><br><span class="line">baseurl=http://192.168.1.3/data/ambari/centos7/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.1.3/data/ambari/centos7/RPM-GPG-KEY/RPM-GPG-KEY</span><br><span class="line">-Jenkinsenabled=1</span><br><span class="line">priority=1</span><br><span class="line">修改 hdp.repo，使之与 yum源机器匹配。</span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">$vi ambary.repo</span><br><span class="line">[HDP-2.6]</span><br><span class="line">name=HDP-2.6</span><br><span class="line">baseurl=http://192.168.1.3/data/HDP/centos7/</span><br><span class="line">path=/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>
<p>修改 HDP-UTILS.repo，使之与 yum源机器匹配。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">$vi ambary.repo</span><br><span class="line">[HDP-UTILS-1.1.0.21]</span><br><span class="line">name=HDP-UTILS-1.1.0.21</span><br><span class="line">baseurl=http://192.168.1.3/data/HDP-UTILS-1.1.0.21-centos7/</span><br><span class="line">path=/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>
<h2 id="4-2-安装Ambari-Server"><a href="#4-2-安装Ambari-Server" class="headerlink" title="4.2.    安装Ambari Server"></a>4.2.    安装Ambari Server</h2><p>在上述内容配置完成后，安装ambari-service。出现Complete! 则可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ yum <span class="keyword">install</span> ambari-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p>启动Ambari-server服务，出现提示后，根据提示填写相应的回答。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> ambari-server setup</span><br><span class="line"><span class="keyword">Using</span> python  /usr/bin/python2<span class="number">.6</span></span><br><span class="line">Setup ambari-server</span><br><span class="line"><span class="function"><span class="title">Checking</span></span> SELinux...</span><br><span class="line">SELinux status is <span class="string">'disabled'</span></span><br><span class="line">Customize user account <span class="keyword">for</span> ambari-server daemon [y/n] (n)? y</span><br><span class="line">Enter user account <span class="keyword">for</span> ambari-server daemon (root):</span><br><span class="line"><span class="function"><span class="title">Adjusting</span></span> ambari-server permissions <span class="keyword">and</span> ownership...</span><br><span class="line"><span class="function"><span class="title">Checking</span></span> firewall status...</span><br><span class="line"><span class="function"><span class="title">Checking</span></span> JDK...</span><br><span class="line">[<span class="number">1</span>] Oracle JDK <span class="number">1.8</span> + Java Cryptography Extension (JCE) Policy <span class="keyword">Files</span> <span class="number">8</span></span><br><span class="line">[<span class="number">2</span>] Oracle JDK <span class="number">1.7</span> + Java Cryptography Extension (JCE) Policy <span class="keyword">Files</span> <span class="number">7</span></span><br><span class="line">[<span class="number">3</span>] Custom JDK</span><br><span class="line">==============================================================================</span><br><span class="line">Enter choice (<span class="number">1</span>): <span class="number">3</span></span><br><span class="line">WARNING: JDK must be installed on <span class="keyword">all</span> hosts <span class="keyword">and</span> JAVA_HOME must be valid on <span class="keyword">all</span> hosts.</span><br><span class="line">WARNING: JCE Policy <span class="keyword">files</span> are required <span class="keyword">for</span> configuring Kerberos security. <span class="keyword">If</span> you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy <span class="keyword">Files</span> are valid on <span class="keyword">all</span> hosts.</span><br><span class="line">Path to JAVA_HOME: /usr/jdk64/jdk1<span class="number">.7</span><span class="number">.0</span>_67</span><br><span class="line"><span class="function"><span class="title">Validating</span></span> JDK on Ambari Server...done.</span><br><span class="line"><span class="function"><span class="title">Completing</span></span> setup...</span><br><span class="line"><span class="function"><span class="title">Configuring</span></span> database...</span><br><span class="line">Enter advanced database configuration [y/n] (n)? y</span><br><span class="line"><span class="function"><span class="title">Configuring</span></span> database...</span><br><span class="line">==============================================================================</span><br><span class="line">Choose one of the following <span class="keyword">options</span>:</span><br><span class="line">[<span class="number">1</span>] - PostgreSQL (Embedded)</span><br><span class="line">[<span class="number">2</span>] - Oracle</span><br><span class="line">[<span class="number">3</span>] - MySQL</span><br><span class="line">[<span class="number">4</span>] - PostgreSQL</span><br><span class="line">[<span class="number">5</span>] - Microsoft SQL Server (Tech Preview)</span><br><span class="line">==============================================================================</span><br><span class="line">Enter choice (<span class="number">1</span>): <span class="number">3</span></span><br><span class="line">Hostname (localhost): </span><br><span class="line">Port (<span class="number">3306</span>): </span><br><span class="line">Database name (ambari): </span><br><span class="line">Username (ambari): </span><br><span class="line">Enter Database Password (bigdata): </span><br><span class="line"><span class="function"><span class="title">Configuring</span></span> ambari database...</span><br><span class="line"><span class="function"><span class="title">Copying</span></span> JDBC drivers to server resources...</span><br><span class="line"><span class="function"><span class="title">Configuring</span></span> remote database connection properties...</span><br><span class="line">WARNING: Before starting Ambari Server, you must run the following DDL against the database to create the schema: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql</span><br><span class="line">Proceed with configuring remote database connection properties [y/n] (y)? </span><br><span class="line"><span class="function"><span class="title">Extracting</span></span> <span class="keyword">system</span> views...</span><br><span class="line">...ambari-admin<span class="number">-2.1</span><span class="number">.0</span><span class="number">.1470</span>.jar</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">Adjusting</span></span> ambari-server permissions <span class="keyword">and</span> ownership...</span><br><span class="line">Ambari Server <span class="string">'setup'</span> completed successfully.</span><br></pre></td></tr></table></figure>
<p>看到以上结果后，安装成功。<br>上面出现如下错误</p>
<p>下载mysql_jdbc驱动，放到/usr/share/java/目录，并重命名为mysql-connector-java.jar,否则后面安装会报错。<br>下载：<a href="https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz</a> </p>
<h2 id="4-3-初始化数据库"><a href="#4-3-初始化数据库" class="headerlink" title="4.3.    初始化数据库"></a>4.3.    初始化数据库</h2><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">cd /var/<span class="class"><span class="keyword">lib</span>/<span class="title">ambari</span>-<span class="title">server</span>/<span class="title">resources</span>/</span></span><br><span class="line">mysql -uroot -p123456 ambari &lt; Ambari-DDL-MySQL-CREATE.sql</span><br></pre></td></tr></table></figure>
<p>没初始化数据库，启动服务会报如下错误</p>
<h2 id="4-4-启动服务"><a href="#4-4-启动服务" class="headerlink" title="4.4.    启动服务"></a>4.4.    启动服务</h2><p>ambari-server start启动服务。</p>
<p>此时，登录192.168.1.168:8080，即可看到ambari的页面，如下：<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822360027.png" alt="enter description here"></p>
<h2 id="4-5-安装-HDP-集群"><a href="#4-5-安装-HDP-集群" class="headerlink" title="4.5.    安装 HDP 集群"></a>4.5.    安装 HDP 集群</h2><p>在ambari的登录页面中输入用户名：admin，密码：admin，即可开始准备创建集群。<br>1)    点击 launch install wizard ,开始创建一个集群，输入集群名称：BasicPlatform。<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822367060.png" alt="enter description here"><br>2)    修改下面红框的内容，选择HDP的版本为2.6，修改HDP-2.6的数据源Base URL为<a href="http://192.168.1.3/HDP/centos7/，修改HDP-UTILS的数据源Base" target="_blank" rel="noopener">http://192.168.1.3/HDP/centos7/，修改HDP-UTILS的数据源Base</a> URL为<a href="http://192.168.1.3/HDP-UTILS-1.1.0.21-centos7/。" target="_blank" rel="noopener">http://192.168.1.3/HDP-UTILS-1.1.0.21-centos7/。</a><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822372814.png" alt="enter description here"><br>3)    设置集群机器：输入Target Hosts如下：<br>备注，必须安装如下格式，不能使用hadoop2<br>hadoop2.zhjx<br>hadoop3.zhjx<br>hadoop4.zhjx<br>从master中拷贝出来id_rsa文件，通过选择文件，上传到ambari中。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822383471.png" alt="enter description here"><br>点击确认后，开始向每个机器中安装ambari-client，稍等到下面页面，即可显示安装完成。<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822387867.png" alt="enter description here"><br><strong>问题1：</strong><br>centos7.3/4安装ambari2.6以上版本报EOF occurred in violation of protocol (_ssl.c:579)<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822409609.png" alt="enter description here"><br><strong>解决办法：</strong><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822417668.png" alt="enter description here"><br>4)    选择要安装的服务，与下图中的一致。<br>可先按照如下组件<br>HDFS、Hive、HBase、Sqoop、ZooKeeper、Flume<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822431818.png" alt="enter description here"><br>这里选择默认了，也可以自己调整<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822435781.png" alt="enter description here"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822443268.png" alt="enter description here"><br>配置标红的组件，进行修改配置<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822447871.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822451834.png" alt="enter description here"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822457371.png" alt="enter description here"></p>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822462117.png" alt="enter description here"></p>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822467210.png" alt="enter description here"></p>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822471135.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822475709.png" alt="enter description here"></p>
<p>5)    各个服务Master配置<br>详见附件2<br>6)    服务的Slaves 和 Clients节配置:<br>详见附件3<br>7)    服务详情配置<br>看到如下界面后，如有红色警告提示，根据警告修改服务详情内容，注意把Ooize等服务中使用的数据库改为MySQL数据库。<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822489138.png" alt="enter description here"><br>待确定完修改后的配置时，开始安装：<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822494773.png" alt="enter description here"><br>全部安装成功界面如下：<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822500744.png" alt="enter description here"><br>点击下一步，确定安装内容后，即可看到集群情况。<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822506597.png" alt="enter description here"><br>、Hadooop开启高可用（现在安装好Hadoop是不支高可用的，下面准备开启Hadoop高可用）<br>1、    开启高可用开关<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822514470.png" alt="enter description here"><br>3、    设置高可用名称（如果hbase是启动的话请关闭在开启HA高可用）<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822525330.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822531426.png" alt="4、"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822536739.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署1/1618822542834.png" alt="enter description here"></p>
<h1 id="5-安装ELK"><a href="#5-安装ELK" class="headerlink" title="5.    安装ELK"></a>5.    安装ELK</h1><h2 id="5-1-安装Elasticsearch"><a href="#5-1-安装Elasticsearch" class="headerlink" title="5.1.    安装Elasticsearch"></a>5.1.    安装Elasticsearch</h2><ol>
<li>安装elasticsearch<br>下载地址： <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/downloads/elasticsearch</a><br>下载对应的版本，下载后解压到想安装的文件夹中，因为es是绿色版本所以解压后就可以使用<br>./bin/elasticsearch其实是一个shell脚本，最终还是启动在java的虚拟机环境中，并加入了一定参数。</li>
</ol>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># rpm -ivh elasticsearch-5.6.4.rpm</span></span><br><span class="line"><span class="meta"># chkconfig --add elasticsearch</span></span><br><span class="line"><span class="meta"># chkconfig elasticsearch on </span></span><br><span class="line"><span class="meta"># vim etc/elasticsearch/elasticsearch.yml</span></span><br><span class="line"><span class="meta"># /etc/init.d/elasticsearch.rpmnew start</span></span><br></pre></td></tr></table></figure>
<p>可执行文件目录：/usr/share/elasticsearch/<br>配置文件目录： /etc/elasticsearch/<br>日志文件目录：/var/log/elasticsearch/<br>data文件目录：/var/lib/elasticsearch/<br>pid文件路径：/var/run/elasticsearch/<br>日志文件：/var/log/elasticsearch/</p>
<ol start="2">
<li>启动elasticsearch<br>守护进程 ./bin/elasticsearch -d<br>前台运行 ./bin/elasticsearch<br>配合elasticsearch-servicewrapper 插件将脚本服务化更易管理 （2.x加不再支持，弃用）。<br>运行日志在../log/下,每一个索引一个文件，每日一个文件，包括运行的慢日志和服务日志。</li>
<li>测试elasticsearch<br>curl -XGET <a href="http://xxx:9200/?pretty" target="_blank" rel="noopener">http://xxx:9200/?pretty</a><h2 id="5-2-安装Kibana"><a href="#5-2-安装Kibana" class="headerlink" title="5.2.    安装Kibana"></a>5.2.    安装Kibana</h2>下载页面：<a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a><br>安装rpm包，我的电脑是x64的所以下载64位的安装包，rpm包安装完毕后会自动在/etc/init.d/下生成执行脚本，提供给service/chkconfig，更方便我们使用。</li>
</ol>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># wget https://artifacts.elastic.co/downloads/kibana/kibana-5.6.4-x86_64.rpm</span></span><br><span class="line"><span class="meta"># rpm -ivh kibana-5.6.4-x86_64.rpm</span></span><br><span class="line"><span class="meta"># vim /etc/kibana/kibana.yml</span></span><br></pre></td></tr></table></figure>
<h2 id="5-3-安装x-pack插件"><a href="#5-3-安装x-pack插件" class="headerlink" title="5.3.    安装x-pack插件"></a>5.3.    安装x-pack插件</h2><p>官方下载地址：<a href="https://www.elastic.co/downloads/x-pack" target="_blank" rel="noopener">https://www.elastic.co/downloads/x-pack</a><br>官方文档地址：<a href="https://www.elastic.co/guide/en/x-pack/current/xpack-introduction.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/x-pack/current/xpack-introduction.html</a><br><a href="https://www.elastic.co/gu" target="_blank" rel="noopener">https://www.elastic.co/gu</a> ide/en/x-pack/6.0/setting-up-authentication.html#set-built-in-user-passwords</p>
<ol>
<li>elasticsearch安装x-pack插件<br>    如果是集群架构，则每一台新机器都需要安装插件。<br>    kibana安装了x-pack，elasticsearch也必须要安装。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /usr/share/elasticsea     rch/bin/elasticsearch-plugin install x-pack</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/share/kibana/bin/kibana-plugin install x-pack</span></span><br><span class="line">2.	编辑配置文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/elasticsearch/x-pack/</span></span><br><span class="line">3.	用户管理</span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/share/elasticsearch/bin/x-pack/users useradd <span class="built_in">test</span> -p 123456 -r superuser</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>其他安装<h2 id="6-1-安装VNC-Service"><a href="#6-1-安装VNC-Service" class="headerlink" title="6.1.    安装VNC Service"></a>6.1.    安装VNC Service</h2>由于165、166、167当做服务器的同时，也作为外网开发机使用，为了建立远程可编程环境，加入了可视化桌面也远程桌面，需要在每个机器上安装VNC Service。<br>1)    安装 X-Window<br>由于我们安装操作系统为最小化版本，因此首先需要安装 X-Window，在终端中运行下面的命令，安装会花费一点时间。</li>
</ol>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">$ yum check-update</span><br><span class="line">$ yum groupinstall <span class="string">"X Window System"</span></span><br><span class="line">$ yum install gnome-classic-session gnome-terminal nautilus-open-terminal control-center liberation-mono-fonts</span><br></pre></td></tr></table></figure>
<p>待安装完成后，修改系统启动界面为图形界面。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ unlink /etc/systemd/system/default.target</span><br><span class="line">$ ln -sf /<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">graphical</span>.<span class="title">target</span> /<span class="title">etc</span>/<span class="title">systemd</span>/<span class="title">system</span>/ <span class="title">default</span>.<span class="title">target</span></span></span><br></pre></td></tr></table></figure>
<p>重启电脑，重启完成后即可进入图形化界面。<br>2)    安装 VNC 服务器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ yum <span class="keyword">install</span> tigervnc-<span class="keyword">server</span> -y</span><br></pre></td></tr></table></figure>
<p>安装完成后后，我们需要在 /etc/systemd/system/ 目录里创建一个配置文件。我们可以将 /lib/systemd/sytem/vncserver@.service 拷贝一份配置文件范例过来。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$cp /<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">vncserver</span>@.<span class="title">service</span> /<span class="title">etc</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">vncserver</span> @:1.<span class="title">service</span></span></span><br></pre></td></tr></table></figure>
<p>打开 /etc/systemd/system/vncserver@:1.service ，找到下面这几行，用自己的用户名<user>替换掉 。</user></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ExecStart=/sbin/runuser -l hadoop -c "/usr/bin/vncserver %i"</span><br><span class="line">PIDFile=/home/hadoop/.vnc/%H%i.pid</span><br></pre></td></tr></table></figure>
<p>如果是 root 用户则替换内容如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">ExecStart=/sbin/runuser -l root -c <span class="string">"/usr/bin/vncserver %i"</span></span><br><span class="line">PIDFile=/root/.vnc/%H%i.pid</span><br></pre></td></tr></table></figure>
<p>修改完成后，按Esc退出编辑模式，!wq保存，下面重启 systemd。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br></pre></td></tr></table></figure>
<p>最后还要设置一下用户的 VNC 密码。要设置某个用户的密码，必须要有能通过 sudo 切换到用户的权限。这里我们用的root用户，直接输入一下代码即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vncpasswd</span></span><br></pre></td></tr></table></figure>
<p>3)    开启服务<br>用下面的命令（永久地）开启服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> vncserver@:1.service</span></span><br></pre></td></tr></table></figure>
<p>启动服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start vncserver@:1.service</span></span><br></pre></td></tr></table></figure>
<p>4)    用 VNC 客户端连接服务器<br>要使用 VNC 连接服务器，我们还需要一个在本地计算机上安装的仅供连接远程计算机使用的 VNC 客户端。<br>可以用像 Tightvnc viewer 和 Realvnc viewer 的客户端来连接到服务器。此处用RealVNC Viewer连接，配置如下：</p>
<p><img src="https://markdown.xiaoshujiang.com/img/spinner.gif" alt="图 11" title="[[[1618822789733]]]"><br>要用更多的用户连接，需要创建配置文件和端口，请回到第2步，添加一个新的用户和端口。你需要创建 vncserver@:2.service 并替换配置文件里的用户名和之后步骤里相应的文件名、端口号。请确保你登录 VNC 服务器用的是你之前配置 VNC 密码的时候使用的那个用户名。<br>VNC 服务本身使用的是5900端口。鉴于有不同的用户使用 VNC ，每个人的连接都会获得不同的端口。配置文件名里面的数字告诉 VNC 服务器把服务运行在5900的子端口上。在我们这个例子里，第一个 VNC 服务会运行在5901（5900 + 1）端口上，之后的依次增加，运行在5900 + x 号端口上。其中 x 是指之后用户的配置文件名 vncserver@:x.service 里面的 x 。<br>在建立连接之前，我们需要知道服务器的 IP 地址和端口。IP 地址是一台计算机在网络中的独特的识别号码。我的服务器的 IP 地址是96.126.120.92，VNC 用户端口是1。</p>
<p>附件1：账户密码表<br>表 2 系统用户表<br>Hostname    角色    登录名/密码    备注<br>Master    root    root/123456<br>Slave1    root    root/123456    系统管理员<br>Slave2    root    root/123456    系统管理员<br>Slave3    root    root/123456    系统管理员<br>注*：大小写敏感</p>
<p>表 3 数据库用户表<br>数据库    角色    登录名/密码    作用域    备注<br>MySQL    DBA    root/    localhost<br>MySQL    DBA    zhjx/1234    %<br>注*：大小写敏感</p>
<p>表 4 服务用户表<br>服务名称    角色    登录名/密码    作用域    备注<br>Ambari    superuser    admin/admin    <em><br>HUE    DBA    root/123456    %<br>注</em>：大小写敏感</p>
<p> </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>jira/confluence安装</title>
    <url>/2021/04/10/jira-confluence%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-运行环境"><a href="#1-运行环境" class="headerlink" title="1    运行环境"></a>1    运行环境</h1><p>Centos 7.9<br>jira 8.13.4<br>confluence 7.4.5<br>postgres 10.16</p>
<h1 id="2-说明"><a href="#2-说明" class="headerlink" title="2    说明"></a>2    说明</h1><p>本文中的安装方案采用jira+confluence认证方式，先安装jira，再安装confluence。</p>
<h1 id="3-数据库安装"><a href="#3-数据库安装" class="headerlink" title="3    数据库安装"></a>3    数据库安装</h1><p>Postgresql yum安装方式，具体安装过程，参考官网教程。<br>创建 jira confluence 2个数据库，设置数据库远程访问和本地访问密码验证，设置postgres 用户密码，这里密码为123456</p>
<h1 id="4-jira安装"><a href="#4-jira安装" class="headerlink" title="4    jira安装"></a>4    jira安装</h1><h2 id="4-1-官网下周jira-linux安装包"><a href="#4-1-官网下周jira-linux安装包" class="headerlink" title="4.1    官网下周jira linux安装包"></a>4.1    官网下周jira linux安装包</h2><p>atlassian-jira-software-8.13.4-x64.bin </p>
<h2 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2    安装"></a>4.2    安装</h2><h3 id="4-2-1-赋权并执行安装"><a href="#4-2-1-赋权并执行安装" class="headerlink" title="4.2.1    赋权并执行安装"></a>4.2.1    赋权并执行安装</h3><pre><code>[root@jira soft]# chmod +x atlassian-jira-software-8.13.4-x64.bin 
[root@jira soft]# . /atlassian-jira-software-8.13.4-x64.bin
</code></pre><p>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1.png" alt="enter description here"><br>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019231902.png" alt="enter description here"><br>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019245078.png" alt="enter description here"><br>•    安装完成后jira自动启动</p>
<h3 id="4-2-2-开放8080端口"><a href="#4-2-2-开放8080端口" class="headerlink" title="4.2.2    开放8080端口"></a>4.2.2    开放8080端口</h3><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019633305.png" alt="enter description here"></p>
<h3 id="4-2-3-执行破解"><a href="#4-2-3-执行破解" class="headerlink" title="4.2.3    执行破解"></a>4.2.3    执行破解</h3><p>破解文件网上自行百度搜索下载，整理使用的破解文件版本：atlassian-extras-3.2.jar<br>•    将默认的atlassian-extras-3.2.jar移除到其他目录，将破解好的atlassian-extras-3.2.jar放入进去<br>放置目录/opt/atlassian/jira/atlassian-jira/WEB-INF/lib<br>重启jira服务<br>/etc/init.d/jira stop/start</p>
<h3 id="4-2-4-访问页面"><a href="#4-2-4-访问页面" class="headerlink" title="4.2.4    访问页面"></a>4.2.4    访问页面</h3><p>•    JIRA默认端口8080<br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019658050.png" alt="enter description here"><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019673138.png" alt="enter description here"></p>
<p>•    这里需要等待程序进行数据初始化，需要一段时间<br>•    总共创建了264张表<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019696582.png" alt="enter description here"></p>
<p>•    因为我们没有正式的license，所以需要我们在jira官网注册一个账号，然后利用这个账号申请一个可以试用30天的license，点击生成jira许可证。如下<br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019731747.png" alt="enter description here"><br>  <img src="https://markdown.xiaoshujiang.com/img/spinner.gif" alt="enter description here" title="[[[1618019737882]]]"></p>
<p>•    自动跳转到刚才填写KEY的界面，会自动将许可证填入进去，点击下一步<br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019750150.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019757302.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019767635.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019773761.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019784612.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019796525.png" alt="enter description here"><br>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019859684.png" alt="enter description here"><br>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019867077.png" alt="enter description here"><br>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019876632.png" alt="enter description here"><br>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019884893.png" alt="enter description here"></p>
<h3 id="4-2-5-检查破解是否生效"><a href="#4-2-5-检查破解是否生效" class="headerlink" title="4.2.5    检查破解是否生效"></a>4.2.5    检查破解是否生效</h3><p>•    破解jira，其实我们已经破解了在前面复制<code>atlassian-extras-3.1.2.jar</code>到<code>/opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</code>目录下时，再次启动jira时就已经破解了<br>•    我们现在登陆到jira中查看授权信息，如下<br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019920827.png" alt="enter description here"><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618019929654.png" alt="enter description here"><br>•    通过上文章来源(Source)：<a href="https://www.dqzboy.com图，我们可以很明显的看到jira我们可以使用到2033年，到此有关jira的安装、破解就已经全部结束。" target="_blank" rel="noopener">https://www.dqzboy.com图，我们可以很明显的看到jira我们可以使用到2033年，到此有关jira的安装、破解就已经全部结束。</a></p>
<h2 id="4-3-插件安装"><a href="#4-3-插件安装" class="headerlink" title="4.3    插件安装"></a>4.3    插件安装</h2><p>旧系统插件在新系统进行安装破节后才能做数据迁移。</p>
<h3 id="4-3-1-在线安装旧系统插件"><a href="#4-3-1-在线安装旧系统插件" class="headerlink" title="4.3.1    在线安装旧系统插件"></a>4.3.1    在线安装旧系统插件</h3><p>直接在线市场安装</p>
<h3 id="4-3-2-插件破解"><a href="#4-3-2-插件破解" class="headerlink" title="4.3.2    插件破解"></a>4.3.2    插件破解</h3><div class="note info"><p><strong>jira插件授权更新：</strong><br>将atlassian-universal-plugin-manager-plugin-2.22.4.jar替换掉/opt/atlassian/jira/atlassian-jira/WEB-INF/atlassian-bundled-plugins/下对应jar包，重启jira服务即可。</p></div>
<p>这里使用破解文件版本 <code>atlassian-universal-plugin-manager-plugin-4.0.2.jar</code><br>文件直接百度搜索下载。<br>备份默认 <code>atlassian-universal-plugin-manager-plugin-XXX.jar</code> 文件，替换破解文件，重启jira服务。</p>
<p>点击使用插件——获取许可证——登录官网申请临时key——拷贝key激活，默认就破解了，可以查看插件破解信息。<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618020117712.png" alt="enter description here"></p>
<h2 id="4-4-数据备份恢复-xml方式"><a href="#4-4-数据备份恢复-xml方式" class="headerlink" title="4.4    数据备份恢复-xml方式"></a>4.4    数据备份恢复-xml方式</h2><h3 id="4-4-1-备份数据"><a href="#4-4-1-备份数据" class="headerlink" title="4.4.1    备份数据"></a>4.4.1    备份数据</h3><p>管理员登录jira, 管理——系统——导入导出——备份系统，导出jira数据。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618020132105.png" alt="enter description here"><br>拷贝 <code>/var/atlassian/application-data/jira/data/</code>路径下的<code>attachments</code>和<code>avatars</code>目录，到新服务器相应目录，赋予目录及下级 jira用户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown jira:jira -R attachments avatars</span><br></pre></td></tr></table></figure>
<p>attachments      项目数据<br>avatars          头像等数据</p>
<h3 id="4-4-2-恢复数据"><a href="#4-4-2-恢复数据" class="headerlink" title="4.4.2    恢复数据"></a>4.4.2    恢复数据</h3><p>管理员登录jira, 管理——系统——导入导出——恢复系统<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618020959387.png" alt="enter description here"><br>拷贝备份的zip文件到<code>/var/atlassian/application-data/jira/import</code> 下，输入文件名恢复系统。<br>拷贝attachments avatars 目录到<code>/var/attassian/application-data/jira/data/</code>下，并服务jira用户和组权限，重启jira服务。</p>
<h3 id="4-4-3-重建索引"><a href="#4-4-3-重建索引" class="headerlink" title="4.4.3    重建索引"></a>4.4.3    重建索引</h3><p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618020995715.png" alt="enter description here"></p>
<p>恢复完成。</p>
<h2 id="4-5-出现问题"><a href="#4-5-出现问题" class="headerlink" title="4.5    出现问题"></a>4.5    出现问题</h2><h3 id="4-5-1-问题1"><a href="#4-5-1-问题1" class="headerlink" title="4.5.1    问题1"></a>4.5.1    问题1</h3><p><strong>头像不显示</strong><br>原因：avatars目录数据没拷贝或放置位置有问题，权限有问题。<br>拷贝到 application-data/jira/data/ 下。</p>
<h3 id="4-5-2-问题2"><a href="#4-5-2-问题2" class="headerlink" title="4.5.2    问题2"></a>4.5.2    问题2</h3><p><strong>图片不显示</strong><br>解决办法：拷贝 application-data/jira/logos 数据到新系统相应路径。</p>
<h3 id="4-5-3-问题3"><a href="#4-5-3-问题3" class="headerlink" title="4.5.3    问题3"></a>4.5.3    问题3</h3><p>问题：用户登录后切换页面会要求重新登录认证<br>原因：未找到<br>解决办法：登录时候勾选 记住登录，可解决。下次登录不会再出现问题。<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021045779.png" alt="enter description here"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021055116.png" alt="enter description here"></p>
<h1 id="5-conflucese安装"><a href="#5-conflucese安装" class="headerlink" title="5    conflucese安装"></a>5    conflucese安装</h1><p>参考<a href="https://www.dqzboy.com/atlassian-confluence%e5%ae%89%e8%a3%85%e5%92%8c%e7%a0%b4%e8%a7%a3" target="_blank" rel="noopener">https://www.dqzboy.com/atlassian-confluence%e5%ae%89%e8%a3%85%e5%92%8c%e7%a0%b4%e8%a7%a3</a> </p>
<h2 id="5-1-下载"><a href="#5-1-下载" class="headerlink" title="5.1    下载"></a>5.1    下载</h2><p>官网下载安装包</p>
<h2 id="5-2-安装"><a href="#5-2-安装" class="headerlink" title="5.2    安装"></a>5.2    安装</h2><h3 id="5-2-1-下载和安装程序"><a href="#5-2-1-下载和安装程序" class="headerlink" title="5.2.1    下载和安装程序"></a>5.2.1    下载和安装程序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@wiki-test soft]<span class="comment"># wget https://product-downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-7.2.0-x64.bin</span></span><br><span class="line">	[root@wiki-test soft]<span class="comment"># chmod +x atlassian-confluence-7.2.0-x64.bin</span></span><br><span class="line">	[root@wiki-test soft]<span class="comment"># ./atlassian-confluence-7.2.0-x64.bin</span></span><br><span class="line">	This will install Confluence 7.2.0 on your computer.</span><br><span class="line">	OK [o, Enter], Cancel [c]</span><br><span class="line">	o	   <span class="comment"># 输入o或者直接回车</span></span><br><span class="line">	Click Next to <span class="built_in">continue</span>, or Cancel to <span class="built_in">exit</span> Setup.</span><br><span class="line">	 </span><br><span class="line">	Choose the appropriate installation or upgrade option.</span><br><span class="line">	Please choose one of the following:</span><br><span class="line">	Express Install (uses default settings) [1], </span><br><span class="line">	Custom Install (recommended <span class="keyword">for</span> advanced users) [2, Enter], </span><br><span class="line">	Upgrade an existing Confluence installation [3]</span><br><span class="line">	1	   <span class="comment"># 输入1</span></span><br><span class="line">	 </span><br><span class="line">	See <span class="built_in">where</span> Confluence will be installed and the settings that will be used.</span><br><span class="line">	Installation Directory: /opt/atlassian/confluence </span><br><span class="line">	Home Directory: /var/atlassian/application-data/confluence </span><br><span class="line">	HTTP Port: 8090 </span><br><span class="line">	RMI Port: 8000 </span><br><span class="line">	Install as service: Yes </span><br><span class="line">	Install [i, Enter], Exit [e]</span><br><span class="line">	i    <span class="comment"># 输入i或者直接回车</span></span><br><span class="line">	 </span><br><span class="line">	Extracting files ...</span><br><span class="line">	                                                                           </span><br><span class="line">	 </span><br><span class="line">	Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> we configure Confluence.</span><br><span class="line">	 </span><br><span class="line">	Installation of Confluence 7.2.0 is complete</span><br><span class="line">	Start Confluence now?</span><br><span class="line">	Yes [y, Enter], No [n]</span><br><span class="line">	y	    <span class="comment"># 输入y或直接回车</span></span><br><span class="line">	 </span><br><span class="line">	Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> Confluence starts up.</span><br><span class="line">	Launching Confluence ...</span><br><span class="line">	 </span><br><span class="line">	Installation of Confluence 7.2.0 is complete</span><br><span class="line">	Your installation of Confluence 7.2.0 is now ready and can be accessed via</span><br><span class="line">	your browser.</span><br><span class="line">	Confluence 7.2.0 can be accessed at http://localhost:8090</span><br><span class="line">	Finishing installation ...</span><br></pre></td></tr></table></figure>
<pre><code># 安装完成会自动启动
</code></pre><h3 id="5-2-2-查看端口和放行端口"><a href="#5-2-2-查看端口和放行端口" class="headerlink" title="5.2.2    查看端口和放行端口"></a>5.2.2    查看端口和放行端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@wiki-test soft]<span class="comment"># ss -tnlp |grep 8090</span></span><br><span class="line">LISTEN     0      10          :::8090                    :::*                   users:((<span class="string">"java"</span>,pid=18657,fd=45))</span><br><span class="line"> </span><br><span class="line">[root@wiki-test soft]<span class="comment"># firewall-cmd --permanent --zone=public --add-port=8090/tcp</span></span><br><span class="line">success</span><br><span class="line">[root@wiki-test soft]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure>
<h3 id="5-2-3-访问网页"><a href="#5-2-3-访问网页" class="headerlink" title="5.2.3    访问网页"></a>5.2.3    访问网页</h3><p>•    <a href="http://ip:8090" target="_blank" rel="noopener">http://ip:8090</a><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021159236.png" alt="enter description here"><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021164828.png" alt="enter description here"><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021170479.png" alt="enter description here"><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021175002.png" alt="enter description here"></p>
<h3 id="5-2-4-进行破解"><a href="#5-2-4-进行破解" class="headerlink" title="5.2.4    进行破解"></a>5.2.4    进行破解</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#破解需要两部，一是破解文件，二是获取授权码</span></span><br><span class="line"><span class="comment">#注意，本地运行破解程序需要JAVA环境，直接在oraclejdk官网下载windows版本的exe程序安装即可</span></span><br><span class="line">[root@wiki-test ~]<span class="comment"># cd /opt/atlassian/confluence/confluence/WEB-INF/lib/</span></span><br></pre></td></tr></table></figure>
<p>•    将该目录下的<code>atlassian-extras-decoder-v2-3.4.1.jar</code>拷贝到自己的电脑上并进行重命名为<code>atlassian-extras-2.4.jar</code><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021232920.png" alt="enter description here"><br>•    将该.jar文件跟破解工具放在一起，然后运行破解工具<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021256042.png" alt="enter description here"><br>•    选择.patch!找到刚才重命名的那个文件打开<br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021264497.png" alt="enter description here"><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021270824.png" alt="enter description here"><br>•    打开后在当前目录下可以看到<code>atlassian-extras-2.4.jar</code>和<code>atlassian-extras-2.4.bak</code>两个文件，这里<code>atlassian-extras-2.4.jar</code>已经是破解好的了，将<code>atlassian-extras-2.4.jar</code>名字改回来<code>atlassian-extras-decoder-v2-3.4.1.jar</code><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021302521.png" alt="enter description here"><br>•    上传到服务器上的<code>/opt/atlassian/confluence/confluence/WEB-INF/lib/</code>目录，覆盖原来的<code>atlassian-extras-decoder-v2-3.4.1.jar</code></p>
<p>​    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@wiki-test lib]<span class="comment"># cp atlassian-extras-decoder-v2-3.4.1.jar /</span></span><br></pre></td></tr></table></figure>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021329337.png" alt="enter description here"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意：覆盖文件后，一定到重启服务</span></span><br><span class="line">[root@wiki-test lib]<span class="comment"># /etc/init.d/confluence stop</span></span><br><span class="line">[root@wiki-test lib]<span class="comment"># /etc/init.d/confluence start</span></span><br></pre></td></tr></table></figure>
<h3 id="5-2-5-获取授权码"><a href="#5-2-5-获取授权码" class="headerlink" title="5.2.5    获取授权码"></a>5.2.5    获取授权码</h3><p>•    查看网页中的服务器ID，运行破解工具<code>confluence_keygen.jar</code>，破解复制Key到Confluence里，然后点击下一步<br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021402372.png" alt="enter description here"><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021406941.png" alt="enter description here"><br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021413178.png" alt="enter description here"></p>
<h3 id="5-2-6-配置数据库"><a href="#5-2-6-配置数据库" class="headerlink" title="5.2.6    配置数据库`"></a>5.2.6    配置数据库`</h3><p>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021421603.png" alt="enter description here"><br>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021427738.png" alt="enter description here"><br>   <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021440171.png" alt="enter description here"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装MySQL5.7驱动</span></span><br><span class="line">	[root@wiki-test ~]<span class="comment"># wget https://cdn.mysql.com//Downloads/Connector-J/mysql-connector-java-5.1.48.tar.gz</span></span><br><span class="line">	 </span><br><span class="line">	<span class="comment">#将 .jar 文件放入 /opt/atlassian/confluence/confluence/WEB-INF/lib，然后重启Confluence</span></span><br><span class="line">	[root@wiki-test ~]<span class="comment"># tar -xf mysql-connector-java-5.1.48.tar.gz </span></span><br><span class="line">	[root@wiki-test ~]<span class="comment"># cd mysql-connector-java-5.1.48/</span></span><br><span class="line">	[root@wiki-test mysql-connector-java-5.1.48]<span class="comment"># cp *.jar /opt/atlassian/confluence/confluence/WEB-INF/lib</span></span><br><span class="line">	 </span><br><span class="line">	[root@wiki-test lib]<span class="comment"># /etc/init.d/confluence stop</span></span><br><span class="line">	[root@wiki-test lib]<span class="comment"># /etc/init.d/confluence start</span></span><br></pre></td></tr></table></figure>
<p>•    刷新网页，注意数据库字符集必须为UTF8<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021484832.png" alt="enter description here"><br>•    注意：总共会创建117张表，会比较慢，需要等待一段时间<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021496679.png" alt="enter description here"><br><strong>等待程序配置好数据库后即可完成安装了</strong></p>
<h2 id="5-3-数据备份恢复"><a href="#5-3-数据备份恢复" class="headerlink" title="5.3    数据备份恢复"></a>5.3    数据备份恢复</h2><h3 id="5-3-1-备份"><a href="#5-3-1-备份" class="headerlink" title="5.3.1    备份"></a>5.3.1    备份</h3><p>管理员登录conflucese——站点管理——一般配置——管理——备份与还原——导出网站<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021518053.png" alt="enter description here"></p>
<h3 id="5-3-2-恢复"><a href="#5-3-2-恢复" class="headerlink" title="5.3.2    恢复"></a>5.3.2    恢复</h3><p>拷贝备份zip包到新服务器<code>/var/atlassian/application-data/confluence/restore</code> 目录<br>管理员登录conflucese——站点管理——一般配置——管理——备份与还原——选中文件——导入<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021538366.png" alt="enter description here"></p>
<p>导入完成，恢复成功。</p>
<h2 id="5-4-问题"><a href="#5-4-问题" class="headerlink" title="5.4    问题"></a>5.4    问题</h2><h3 id="5-4-1-问题1"><a href="#5-4-1-问题1" class="headerlink" title="5.4.1    问题1"></a>5.4.1    问题1</h3><p>问题：恢复数据失败</p>
<p>原因：XML 备份包含导入尝试插入uniq_lwr_username user_mapping表的重复记录 = 用户 1（如上文所示）。</p>
<h4 id="5-4-1-1-解决办法"><a href="#5-4-1-1-解决办法" class="headerlink" title="5.4.1.1    解决办法"></a>5.4.1.1    解决办法</h4><p>参考 <a href="https://community.atlassian.com/t5/Confluence-questions/Unable-to-import-XML-space-to-Confluence-Server-exported-earlier/qaq-p/1307536" target="_blank" rel="noopener">https://community.atlassian.com/t5/Confluence-questions/Unable-to-import-XML-space-to-Confluence-Server-exported-earlier/qaq-p/1307536</a><br><a href="https://confluence.atlassian.com/confkb/confluence-site-xml-import-fails-with-duplicate-key-error-438993638.html" target="_blank" rel="noopener">https://confluence.atlassian.com/confkb/confluence-site-xml-import-fails-with-duplicate-key-error-438993638.html</a><br>第 1 步：查找重复的用户键<br>运行下面的查询以获取重复用户的用户密钥：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_mapping </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">username <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> </span><br><span class="line">lower_username <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> </span><br><span class="line">lower_username <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="keyword">lower</span>(username);</span><br></pre></td></tr></table></figure>
<p>结果应如下：<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021586783.png" alt="enter description here"><br>第 2 步：删除重复的用户<br>删除 user_mapping表中的重复用户<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021601935.png" alt="enter description here"><br>需要先删除content表中的用户记录<br>第 3 步：删除content表中的用户记录<br>根据第一步查询到的 “user_key”,查询content表中username字段进行匹配<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021611526.png" alt="enter description here"><br>删除记录，然后返回第二步删除user_mapping表中的相应用户记录（如果删除中提示其他表字段关联，在其他表进行user_key匹配，删除相应记录）<br>第 4 步：重新备份<br>清理历史系统中的缓存数据，管理登录后台——管理——缓存管理——缓存统计——清除缓存</p>
<p>重新执行数据备份恢复步骤，问题解决。</p>
<h3 id="5-4-2-问题2"><a href="#5-4-2-问题2" class="headerlink" title="5.4.2    问题2"></a>5.4.2    问题2</h3><p>confluence使用jira用户认证。</p>
<h4 id="5-4-2-1-jira配置"><a href="#5-4-2-1-jira配置" class="headerlink" title="5.4.2.1    jira配置"></a>5.4.2.1    jira配置</h4><p>（历史系统恢复后已经配置好，我这里重新进行了配置）<br>管理员后台——用户管理——jira用户服务器——添加应用程序——设置认证信息——保存<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021630536.png" alt="enter description here"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/10/jira_confluence安装/1618021636890.png" alt="enter description here"></p>
<h4 id="5-4-2-2-confluence配置"><a href="#5-4-2-2-confluence配置" class="headerlink" title="5.4.2.2    confluence配置"></a>5.4.2.2    confluence配置</h4><p>管理员后台——用户&amp;安全——用户目录——下移Rmote jira Directory(可新建，这里修改原来的)——编辑——修改认证地址和认证信息——测试并保存——上移到第一位，同步——重新登录，认证成功。</p>
<h1 id="6-内存优化"><a href="#6-内存优化" class="headerlink" title="6    内存优化"></a>6    内存优化</h1><p>修改/bin/setenv.sh 文件默认配置。<br>参考<br><a href="https://www.cnblogs.com/kevingrace/p/9413353.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/9413353.html</a> </p>
<h1 id="7-附件"><a href="#7-附件" class="headerlink" title="7 附件"></a>7 附件</h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>jira</tag>
        <tag>confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop集群部署2-离线版</title>
    <url>/2021/04/19/hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B22/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1    环境"></a>1    环境</h1><h2 id="1-1-软件"><a href="#1-1-软件" class="headerlink" title="1.1    软件"></a>1.1    软件</h2><p>Centos7.9      //最低7.2版本   兼容 中标麒麟（服务器操作系统V7.0U6）</p>
<p>Ambari 2.7.4    //支持HDP-3.1.5 和 HDF-3.2.0<br>Mysql 5.7      //只支持mysql5.7或者postgresql10.7/ 10.5/ 10. 2/ 9.6<br>JDK 1.80_77及以上版本<br>Chrome 57.0.2 / 56.0.2<br><a href="https://supportmatrix.hortonworks.com/" target="_blank" rel="noopener">https://supportmatrix.hortonworks.com/</a> (版本兼容查询)</p>
<h2 id="1-2-硬件"><a href="#1-2-硬件" class="headerlink" title="1.2    硬件"></a>1.2    硬件</h2><p>推荐最低配置：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823048282.png" alt="enter description here"></p>
<h2 id="1-3-参考文档"><a href="#1-3-参考文档" class="headerlink" title="1.3    参考文档"></a>1.3    参考文档</h2><p><a href="https://docs.cloudera.com/HDPDocuments/Ambari-2.7.5.0/bk_ambari-installation/content/ch_Getting_Ready.html" target="_blank" rel="noopener">https://docs.cloudera.com/HDPDocuments/Ambari-2.7.5.0/bk_ambari-installation/content/ch_Getting_Ready.html</a> （网上历史方式cloudera.com,已经收费）<br>备选：<br><a href="https://ambari.apache.org" target="_blank" rel="noopener">https://ambari.apache.org</a>  (ambari开源版本)</p>
<h1 id="2-前期准备（各节点均配置）"><a href="#2-前期准备（各节点均配置）" class="headerlink" title="2    前期准备（各节点均配置）"></a>2    前期准备（各节点均配置）</h1><h2 id="2-1-关闭防火墙-selinux"><a href="#2-1-关闭防火墙-selinux" class="headerlink" title="2.1    关闭防火墙/selinux"></a>2.1    关闭防火墙/selinux</h2><figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld.<span class="keyword">service</span> &amp;&amp; systemctl stop firewalld.<span class="keyword">service</span></span><br></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">setenforce <span class="number">0</span></span><br><span class="line">/etc/selinux/config   <span class="comment">//永久关闭修改config文件</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-修改网络"><a href="#2-2-修改网络" class="headerlink" title="2.2    修改网络"></a>2.2    修改网络</h2><p>设置主机IP地址为静态地址，同时开启网卡自启动。</p>
<h2 id="2-3-系统优化"><a href="#2-3-系统优化" class="headerlink" title="2.3    系统优化"></a>2.3    系统优化</h2><p>设置文件最大打开数</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line">* soft nofile <span class="number">65535</span>      <span class="comment">// 当前系统生效的最大文件打开数</span></span><br><span class="line">* hard nofile <span class="number">65535</span>     <span class="comment">// 当前系统所能设定的最大值</span></span><br><span class="line">设置最大进程数</span><br><span class="line">* soft nproc <span class="number">11000</span></span><br><span class="line">* hard nproc <span class="number">11000</span></span><br></pre></td></tr></table></figure>
<p>重启或重新进入shell窗口<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823219484.png" alt="enter description here"></p>
<h2 id="2-4-设置hosts"><a href="#2-4-设置hosts" class="headerlink" title="2.4    设置hosts"></a>2.4    设置hosts</h2><p>修改主机名，并将主机名加入各节点hosts文件</p>
<h2 id="2-5-ssh免密登录"><a href="#2-5-ssh免密登录" class="headerlink" title="2.5    ssh免密登录"></a>2.5    ssh免密登录</h2><p>SSH免密码登录，因为Hadoop需要通过SSH登录到各个节点进行操作，我用的是root用户，每台服务器都生成公钥，再合并到<code>authorized_keys</code><br>(1)CentOS默认没有启动ssh无密登录，去掉/etc/ssh/sshd_config其中2行的注释，每台服务器都要设置，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vi</span> <span class="string">/etc/ssh/sshd_config</span></span><br><span class="line"><span class="string">RSAAuthentication</span> <span class="literal">yes</span> </span><br><span class="line"><span class="string">PubkeyAuthentication</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<p>(2)输入命令，ssh-keygen -t rsa，生成key，都不输入密码，一直回车，/root就会生成.ssh文件夹，每台服务器都要设置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure>
<p>(3)合并公钥到authorized_keys文件，在Master服务器，进入/root/.ssh目录，通过SSH命令合并</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub<span class="meta">&gt;&gt; </span>authorized_keys</span><br><span class="line">$ Chmod <span class="number">600</span> authorized_kdys</span><br><span class="line">$ ssh root@192.<span class="number">168.0</span>.<span class="number">165</span> cat ~<span class="regexp">/.ssh/id</span>_rsa.pub<span class="meta">&gt;&gt; </span>authorized_keys</span><br><span class="line">$ ssh root@192.<span class="number">168.0</span>.<span class="number">166</span> cat ~<span class="regexp">/.ssh/id</span>_rsa.pub<span class="meta">&gt;&gt; </span>authorized_keys</span><br><span class="line">$ ssh root@192.<span class="number">168.0</span>.<span class="number">167</span> cat ~<span class="regexp">/.ssh/id</span>_rsa.pub<span class="meta">&gt;&gt; </span>authorized_keys</span><br></pre></td></tr></table></figure>
<p> (4)把Master服务器的authorized_keys、known_hosts复制到Slave服务器的/root/.ssh目录</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>scp authorized_keys root<span class="variable">@192</span>.<span class="number">168.0</span>.<span class="number">165</span><span class="symbol">:~/</span>.ssh</span><br><span class="line"><span class="variable">$ </span>scp authorized_keys root<span class="variable">@192</span>.<span class="number">168.0</span>.<span class="number">166</span><span class="symbol">:~/</span>.ssh</span><br><span class="line"><span class="variable">$ </span>scp authorized_keys root<span class="variable">@192</span>.<span class="number">168.0</span>.<span class="number">167</span><span class="symbol">:~/</span>.ssh</span><br></pre></td></tr></table></figure>
<p>(5)完成，ssh Slave1、ssh Slave2、ssh Slave3就不需要输入密码了</p>
<h2 id="2-6-时间同步-提前下载"><a href="#2-6-时间同步-提前下载" class="headerlink" title="2.6    时间同步(提前下载)"></a>2.6    时间同步(提前下载)</h2><p>1)    master节点作为时间同步服务器，所有节点安装ntp ntpdate</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum install<span class="built_in"> ntp </span>ntpdate</span><br></pre></td></tr></table></figure>
<p>2)    master节点配置</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">vim /etc/ntp.<span class="built_in">config</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/15-46-50-409-1626248810.png" alt=""></p>
<p>启动时间同步服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start ntpd     <span class="comment">#启动时间同步程序</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd  <span class="comment">#允许时间同步程序开机启动</span></span><br></pre></td></tr></table></figure>
<p>3)    在其它节点上运行如下命令同步时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ntpdate -u  192.168.214.128</span><br></pre></td></tr></table></figure>
<p>设置定时任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3 * * * * root ntpdate -u 192.168.214.128    <span class="comment"># 每三分钟执行一次同步</span></span><br></pre></td></tr></table></figure>
<h2 id="2-7-jdk安装"><a href="#2-7-jdk安装" class="headerlink" title="2.7    jdk安装"></a>2.7    jdk安装</h2><p>jdk-8u144-linux-x64.tar.gz  或  jdk-8u152-linux-x64.tar.gz<br>版本需要高于8u77<br>配置jdk环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span>  JAVA_HOME=/usr/<span class="built_in">local</span>/java_version</span><br><span class="line"><span class="built_in">export</span>  PATH=<span class="variable">$JAVA_HOME</span>/bin/:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<h2 id="2-8-mysql安装（ambari节点）"><a href="#2-8-mysql安装（ambari节点）" class="headerlink" title="2.8    mysql安装（ambari节点）"></a>2.8    mysql安装（ambari节点）</h2><p>下载mysql-5.7.32-linux-glibc2.12-x86_64.tar.gz<br>mysql支持5.7版本<br>1)    下载安装包<br><a href="http://dev.mysql.com/downloads/mysql/#downloads" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/#downloads</a><br>推荐下载通用安装方法的tar.gz包<br>2)    安装过程</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">shell</span><span class="bash">&gt; groupadd mysql</span></span><br><span class="line"><span class="bash">shell&gt; useradd -r -g mysql -s /bin/<span class="literal">false</span> mysql</span></span><br><span class="line"><span class="bash">shell&gt; <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="bash">shell&gt; tar zxvf /path/to/mysql-VERSION-OS.tar.gz</span></span><br><span class="line"><span class="bash">shell&gt; ln -s full-path-to-mysql-VERSION-OS mysql</span></span><br><span class="line"><span class="bash">shell&gt; <span class="built_in">cd</span> mysql</span></span><br><span class="line"><span class="bash">shell&gt; mkdir mysql-files</span></span><br><span class="line"><span class="bash">shell&gt; chown mysql:mysql mysql-files</span></span><br><span class="line"><span class="bash">shell&gt; chmod 750 mysql-files</span></span><br><span class="line"><span class="bash">shell&gt; bin/mysqld --initialize --user=mysql</span></span><br><span class="line"><span class="bash">shell&gt; bin/mysql_ssl_rsa_setup</span></span><br><span class="line"><span class="bash">shell&gt; bin/mysqld_safe --user=mysql &amp;</span></span><br><span class="line"><span class="bash"><span class="comment"># Next command is optional</span></span></span><br><span class="line"><span class="bash">shell&gt; cp support-files/mysql.server /etc/init.d/mysql.server</span></span><br></pre></td></tr></table></figure>
<p>默认密码如下<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823314936.png" alt="enter description here"><br>3)    修改my.cnf的内容如下</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">[mysql] </span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve </span><br><span class="line">port=3306</span><br><span class="line">basedir=/usr/local/mysql  <span class="comment"># 设置mysql的安装目录</span></span><br><span class="line">datadir=/usr/local/mysql/data  <span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line">max_connections=200 <span class="comment"># 允许最大连接数</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line">default-storage-engine=INNODB <span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line">lower_case_table_names=1</span><br><span class="line">max_allowed_packet=16M</span><br></pre></td></tr></table></figure>
<p>4)    初始化密码</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET PASSWORD = PASSWORD('<span class="number">123456</span>');</span><br><span class="line">Query OK, <span class="number">0</span> rows affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>5)    添加远程访问权限</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql; </span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; update user set host = <span class="emphasis">'%'</span> where user = <span class="emphasis">'root'</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on <span class="strong">*.*</span> to root@<span class="emphasis">'%'</span> identified by <span class="emphasis">'123456'</span> with grant option;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select host, user from user;</span><br><span class="line"><span class="code">+-----------+</span>-----------+</span><br><span class="line">| host       | user      |</span><br><span class="line"><span class="code">+-----------+</span>-----------+</span><br><span class="line">| %          | root      |</span><br><span class="line">| localhost | mysql.sys |</span><br><span class="line"><span class="code">+-----------+</span>-----------+</span><br><span class="line">mysql&gt; quit</span><br><span class="line">$ /etc/init.d/mysqld restart   //一定要重启才会生效。</span><br></pre></td></tr></table></figure>
<p>6)    设置开机自启</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chkconfig</span> mysql <span class="literal">on</span></span><br></pre></td></tr></table></figure>
<h1 id="3-设置本地库"><a href="#3-设置本地库" class="headerlink" title="3    设置本地库"></a>3    设置本地库</h1><h2 id="3-1-apache安装（ambari节点）"><a href="#3-1-apache安装（ambari节点）" class="headerlink" title="3.1    apache安装（ambari节点）"></a>3.1    apache安装（ambari节点）</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> apache           //搭建本地仓库</span><br><span class="line">systemctl <span class="keyword">start</span> httpd &amp;&amp; systemctl <span class="keyword">enable</span> httpd</span><br></pre></td></tr></table></figure>
<h2 id="3-2-下载并上传软件包"><a href="#3-2-下载并上传软件包" class="headerlink" title="3.2    下载并上传软件包"></a>3.2    下载并上传软件包</h2><p>Ambari <a href="https://archive.cloudera.com/p/ambari/2.x/2.7.4.14/centos7/ambari-2.7.4.14-1-centos7.tar.gz" target="_blank" rel="noopener">https://archive.cloudera.com/p/ambari/2.x/2.7.4.14/centos7/ambari-2.7.4.14-1-centos7.tar.gz</a><br>HDP <a href="https://archive.cloudera.com/p/HDP/3.x/3.1.4.0/centos7/HDP-3.1.4.0-centos7-rpm.tar.gz" target="_blank" rel="noopener">https://archive.cloudera.com/p/HDP/3.x/3.1.4.0/centos7/HDP-3.1.4.0-centos7-rpm.tar.gz</a><br>HDP-UTILS <a href="https://archive.cloudera.com/p/HDP-UTILS/1.1.0.22/repos/centos7/HDP-UTILS-1.1.0.22-centos7.tar.gz" target="_blank" rel="noopener">https://archive.cloudera.com/p/HDP-UTILS/1.1.0.22/repos/centos7/HDP-UTILS-1.1.0.22-centos7.tar.gz</a> </p>
<p>HDP-GPL <a href="https://archive.cloudera.com/p/HDP-GPL/3.x/3.1.4.0/centos7/HDP-GPL-3.1.4.0-centos7-gpl.tar.gz" target="_blank" rel="noopener">https://archive.cloudera.com/p/HDP-GPL/3.x/3.1.4.0/centos7/HDP-GPL-3.1.4.0-centos7-gpl.tar.gz</a> </p>
<p>解压缩文件，拷贝到/var/www/html下</p>
<h2 id="3-3-配置源"><a href="#3-3-配置源" class="headerlink" title="3.3    配置源"></a>3.3    配置源</h2><h1 id="4-Ambari安装"><a href="#4-Ambari安装" class="headerlink" title="4    Ambari安装"></a>4    Ambari安装</h1><h2 id="4-1-创建源文件"><a href="#4-1-创建源文件" class="headerlink" title="4.1    创建源文件"></a>4.1    创建源文件</h2><p>ambari.repo</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[ambari]</span></span><br><span class="line"><span class="attr">name</span>=ambari-<span class="number">2.7</span>.<span class="number">4.0</span></span><br><span class="line"><span class="attr">baseurl</span>=http://<span class="number">192.168</span>.<span class="number">1.3</span>/ambari/centos7/<span class="number">2.7</span>.<span class="number">4.0</span>-<span class="number">118</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">gpgkey</span>=http://<span class="number">192.168</span>.<span class="number">1.3</span>/ambari/centos7/<span class="number">2.7</span>.<span class="number">4.0</span>-<span class="number">118</span>/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>hdp.repo</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[HDP]</span></span><br><span class="line"><span class="attr">name</span>=HDP-<span class="number">3.1</span>.<span class="number">4.0</span></span><br><span class="line"><span class="attr">baseurl</span>=http://<span class="number">192.168</span>.<span class="number">1.3</span>/HDP/centos7/<span class="number">3.1</span>.<span class="number">4.0</span>-<span class="number">315</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>hdp-gpl.repo</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[HDP-GPL]</span></span><br><span class="line"><span class="attr">name</span>=HDP-GPL-<span class="number">3.1</span>.<span class="number">4.0</span></span><br><span class="line"><span class="attr">baseurl</span>=http://<span class="number">192.168</span>.<span class="number">1.3</span>/HDP-GPL/centos7/<span class="number">3.1</span>.<span class="number">4.0</span>-<span class="number">315</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>hdp-utils.repo</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[HDP-UTILS]</span></span><br><span class="line"><span class="attr">name</span>=HDP-UTILS-<span class="number">3.1</span>.<span class="number">4.0</span></span><br><span class="line"><span class="attr">baseurl</span>=http://<span class="number">192.168</span>.<span class="number">1.3</span>/HDP-UTILS/centos7/<span class="number">1.1</span>.<span class="number">0.22</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-生成缓存"><a href="#4-2-生成缓存" class="headerlink" title="4.2    生成缓存"></a>4.2    生成缓存</h2><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">yum clean <span class="keyword">all</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h2 id="4-3-安装Ambari-Server"><a href="#4-3-安装Ambari-Server" class="headerlink" title="4.3    安装Ambari Server"></a>4.3    安装Ambari Server</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> ambari-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p>离线版没有postgresql，需要提前使用–downloadonly下载好.</p>
<h3 id="4-3-1-初始化Ambar"><a href="#4-3-1-初始化Ambar" class="headerlink" title="4.3.1    初始化Ambar"></a>4.3.1    初始化Ambar</h3><p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823686182.png" alt="enter description here"><br>备注：mysql连接器提前下载好放到/usr/share/java目录<br><a href="https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-5.1.49.tar.gz" target="_blank" rel="noopener">https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-5.1.49.tar.gz</a><br>修改jar文件名为mysql-connector-java.jar 放到/usr/share/java目录。</p>
<h3 id="4-3-2-初始化mysql"><a href="#4-3-2-初始化mysql" class="headerlink" title="4.3.2    初始化mysql"></a>4.3.2    初始化mysql</h3><h4 id="4-3-2-1-创建ambari数据库"><a href="#4-3-2-1-创建ambari数据库" class="headerlink" title="4.3.2.1    创建ambari数据库"></a>4.3.2.1    创建ambari数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`ambari`</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-2-初始化数据"><a href="#4-3-2-2-初始化数据" class="headerlink" title="4.3.2.2    初始化数据"></a>4.3.2.2    初始化数据</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456 ambari &lt; <span class="regexp">/var/lib</span><span class="regexp">/ambari-server/resources</span><span class="regexp">/Ambari-DDL-MySQL-CREATE.sql</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-3-启动Ambari-server"><a href="#4-3-3-启动Ambari-server" class="headerlink" title="4.3.3    启动Ambari server"></a>4.3.3    启动Ambari server</h3><p>ambari-server start启动服务。</p>
<p>此时，登录10.10.10.31:8080，即可看到ambari的页面，如下：<br>默认账号密码：admin admin<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823728430.png" alt="enter description here"></p>
<h1 id="5-安装HDP集群"><a href="#5-安装HDP集群" class="headerlink" title="5    安装HDP集群"></a>5    安装HDP集群</h1><p>集群名称  zhjx<br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823744344.png" alt="enter description here"><br>centos选择rathat7,输入本地私库的url，其他类型删除。<br>  <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823748458.png" alt="enter description here"><br>输入节点主机名，下载管理节点的ssh密码，id_rsa 文件，在页面上传密钥<br>备注，必须安装如下格式，不能使用hadoop2<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823787801.png" alt="enter description here"></p>
<p>没有按照上图设置主机名，会出现主机名不合规的提示。<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823796306.png" alt="enter description here"></p>
<p>这里经常安装失败，可以查看日志排查。<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823803116.png" alt="enter description here"><br>检查无误，NEXT→通过即可<br>如果这个步骤失败了错误，记得多看日志，多找问题，如果还不行的话，回档咯</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# # ambari-server</span> <span class="literal">stop</span>    <span class="comment">#停止命令</span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# # ambari-server</span> reset   <span class="comment">#重置命令</span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# # ambari-server</span> setup   <span class="comment">#重新设置 </span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# # ambari-server</span> <span class="literal">start</span>   <span class="comment">#启动命令</span></span><br></pre></td></tr></table></figure>
<p><strong>问题1：</strong><br>centos7.3/4安装ambari2.6以上版本报EOF occurred in violation of protocol (_ssl.c:579)<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823821540.png" alt="enter description here"><br><strong>解决办法：</strong><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823827632.png" alt="enter description here"></p>
<p>开始可以少选些服务，减少错误，后面还可以添加。<br>HDFS、Hive、HBase、Sqoop、ZooKeeper、Flume<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823835899.png" alt="enter description here"><br>节点分配，我这里默认了<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823840026.png" alt="enter description here"><br>设置密码，我这里直接都设置为admin1234<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823844031.png" alt="enter description here"><br>数据库连接都采用root用户，<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823848111.png" alt="enter description here"></p>
<p>配置数据库的时候执行下黄色部分的命令</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/09-36-51-381-1626399411.png" alt="image-20210716093644199"> </p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823852373.png" alt="enter description here"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823856955.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823861910.png" alt="enter description here"> </p>
<p>设置各组件的路径，我这里默认<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823867383.png" alt="enter description here"><br>默认了<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823870753.png" alt="enter description here"><br>默认了<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823875084.png" alt="enter description here"><br>默认了<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823879651.png" alt="enter description here"><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823883368.png" alt="enter description here"></p>
<p>这一步也是经常报错，看日志解决吧。</p>
<h3 id="5-1-1-设置组件自启动"><a href="#5-1-1-设置组件自启动" class="headerlink" title="5.1.1    设置组件自启动"></a>5.1.1    设置组件自启动</h3><p>admin&gt;&gt;Service Auto Start   所有组件全部开启<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/20/hadoop集群部署2-离线版/1618887094246.png" alt="enter description here"></p>
<h1 id="6-问题"><a href="#6-问题" class="headerlink" title="6 问题"></a>6 问题</h1><h2 id="6-1-问题1：缺少软件（提前downloadonly）"><a href="#6-1-问题1：缺少软件（提前downloadonly）" class="headerlink" title="6.1    问题1：缺少软件（提前downloadonly）"></a>6.1    问题1：缺少软件（提前downloadonly）</h2><p>unzip<br>nc<br>psmisc<br>redhat-lsb<br>libtirpc-devel<br>gcc<br>python-devel<br>python-kerberos</p>
<h2 id="6-2-问题2：没有flume组件"><a href="#6-2-问题2：没有flume组件" class="headerlink" title="6.2    问题2：没有flume组件"></a>6.2    问题2：没有flume组件</h2><p>高版本没有集成组件，需要手动集成，建议采用低版本hdp安装（ambari 2.6.2.2+hdp2.6.5）。</p>
<h2 id="6-3-问题3：重启主机，ambari-server无法启动"><a href="#6-3-问题3：重启主机，ambari-server无法启动" class="headerlink" title="6.3    问题3：重启主机，ambari-server无法启动"></a>6.3    问题3：重启主机，ambari-server无法启动</h2><p>日志vim /var/log/ambari-server/ambari-server.out<br>问题原因：数据库连接失败<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823909374.png" alt="enter description here"><br>网上查找原因：是需要在mysql连接url后面添加 ?useSSL=false,其实不然。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823913962.png" alt="enter description here"></p>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823919559.png" alt="enter description here"><br>以上问题都是一个原因经尝试，都和ambari-server的配置文件有关系。<br>配置如下：<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618823924602.png" alt="enter description here"><br>无论是使用IP地址，还是配置的主机名，都不可以链接到数据库。配置为localhost恢复正常。<br>如下：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/19/hadoop集群部署2/1618838108628.png" alt="enter description here"></p>
<h2 id="6-4-问题4：hive组件配置数据库时，需要执行一下mysql连接驱动的路径的命令在master节点"><a href="#6-4-问题4：hive组件配置数据库时，需要执行一下mysql连接驱动的路径的命令在master节点" class="headerlink" title="6.4    问题4：hive组件配置数据库时，需要执行一下mysql连接驱动的路径的命令在master节点"></a>6.4    问题4：hive组件配置数据库时，需要执行一下mysql连接驱动的路径的命令在master节点</h2><p><strong>否则数据库连接测试总是失败。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ambari-server setup --jdbc-db=mysql –jdbc-driver=/usr/share/java/mysql-connector-java.jar</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/20/hadoop集群部署2-离线版/1618885736228.png" alt="enter description here"></p>
<h2 id="6-5-6-5-问题5：SmartSense-Gateway-is-not-active"><a href="#6-5-6-5-问题5：SmartSense-Gateway-is-not-active" class="headerlink" title="6.5     6.5    问题5：SmartSense Gateway is not active"></a>6.5     6.5    问题5：SmartSense Gateway is not active</h2><p>原因：服务器离线，无法访问域名地址，忽略即可。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/4/20/hadoop集群部署2-离线版/1618887061046.png" alt="enter description here"></p>
<h1 id="7-扩展功能"><a href="#7-扩展功能" class="headerlink" title="7 扩展功能"></a>7 扩展功能</h1><h2 id="7-1-配置namenode-HA"><a href="#7-1-配置namenode-HA" class="headerlink" title="7.1  配置namenode HA"></a>7.1  配置namenode HA</h2><p>参考资料：<a href="https://blog.csdn.net/qq_21153619/article/details/81974140" target="_blank" rel="noopener">https://blog.csdn.net/qq_21153619/article/details/81974140</a></p>
<p>1)    在Ambari UI中，选择Services&gt;HDFS&gt;Summary</p>
<p>2)    点击Service Actions,点击Enable NameNode HA</p>
<p>3)    在Get Started页面中，输入一个Nameservice ID然后点Next</p>
<p>备注：设置HA前，需要先关闭HBase服务</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-05-821-1626252785.png" alt="img"></p>
<p>调整服务节点</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-52-52-763-1626252772.png" alt="img"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-11-403-1626252791.png" alt="img"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-16-081-1626252796.png" alt="img"></p>
<p>如上图操作：</p>
<p>在nameNode上创建检查点</p>
<p>1、 登录Namenode Host Hadoop3.htsb。</p>
<p>2、 将NameNode放在安全模式（只读模式）</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> su hdfs -l -c <span class="string">'hdfs dfsadmin -safemode enter'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-21-509-1626252801.png" alt="img"></p>
<p>3、 一旦处于安全模式，创建一个检查点</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> su hdfs -l -c <span class="string">'hdfs dfsadmin -saveNamespace'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-24-595-1626252804.png" alt="img"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-29-020-1626252809.png" alt="img"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-32-925-1626252812.png" alt="img"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-36-342-1626252816.png" alt="img"></p>
<p>如上图所示：</p>
<p>初始化journalnode</p>
<p>1、 登录Namenode Host Hadoop3.htsb。</p>
<p>2、 运行初始化journalnode</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> su hdfs -l -c <span class="string">'hdfs namenode -initializeSharedEdits'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-39-562-1626252819.png" alt="img"></p>
<p>3、 一旦Ambari检测到已成功初始化，您将能够继续。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-42-924-1626252822.png" alt="img"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-45-440-1626252825.png" alt="img"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-49-154-1626252829.png" alt="img"></p>
<p>如上图所示：</p>
<p>初始化预期的HA元数据</p>
<p>1、 登录Namenode Host Hadoop3.htsb</p>
<p>2、 通过运行初始化NameNode自动故障转移的元数据</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> su hdfs -l -c <span class="string">'hdfs zkfc -formatZK'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-54-720-1626252834.png" alt="img"></p>
<p>3、 登录新Namenode节点namenode1.htsb</p>
<p>4、 通过运行初始化其他nameNode的元数据</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> su hdfs -l -c <span class="string">'hdfs namenode -bootstrapStandby'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-57-139-1626252837.png" alt="img"></p>
<p>下一步</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-54-00-412-1626252840.png" alt="img"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-54-02-360-1626252842.png" alt="img"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-54-05-409-1626252845.png" alt="img"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab_gitbook搭建WIKI</title>
    <url>/2021/06/18/gitlab-gitbook%E6%90%AD%E5%BB%BAWIKI/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1    环境"></a>1    环境</h1><p>OS： centos7.9<br>gitlab: gitlab-ce-10.0.0-ce<br>GitBook CLI version: 2.3.2<br>GitBook version: 3.2.3<br>Gitlab-runner  13.12.0</p>
<h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2    环境准备"></a>2    环境准备</h1><h2 id="2-1-安装nodejs"><a href="#2-1-安装nodejs" class="headerlink" title="2.1    安装nodejs"></a>2.1    安装nodejs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install nodejs</span><br></pre></td></tr></table></figure>
<h2 id="2-2-安装git"><a href="#2-2-安装git" class="headerlink" title="2.2    安装git"></a>2.2    安装git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>
<h1 id="3-安装GitLab"><a href="#3-安装GitLab" class="headerlink" title="3    安装GitLab"></a>3    安装GitLab</h1><ol>
<li>下载gitlab的rpm包<br>地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a></li>
<li>执行安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>修改访问URL</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p><strong>## 修改以下内容并保存</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">external_url http://服务器IP地址</span><br></pre></td></tr></table></figure>
<div class="note info"><p><strong>info</strong><br>备注：这里可以写服务器IP地址，如果映射域名了，可以写域名，不用加端口号，端口号另外配置</p></div>
<ol start="4">
<li>载入配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<h1 id="4-GitLab汉化（可选）"><a href="#4-GitLab汉化（可选）" class="headerlink" title="4    GitLab汉化（可选）"></a>4    GitLab汉化（可选）</h1><p>GitLab10版本支持配置中文，但是翻译率较低，通过其他方式增加汉化<br><div class="note info"><p><strong>info</strong><br>备注：此方式暂时只适用于10版本</p></div><br>参考 Gitlab10.0.X社区版本，汉化<br><a href="https://kinggoo.com/gitlab-chinesize.htm" target="_blank" rel="noopener">https://kinggoo.com/gitlab-chinesize.htm</a></p>
<ol>
<li>下载汉化文件<br>汉化文件：下载 <a href="https://kinggoo.com/wp-content/upload/2017/10/10.0.x.zip" target="_blank" rel="noopener">https://kinggoo.com/wp-content/upload/2017/10/10.0.x.zip</a></li>
<li>停止gitlab</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl stop</span><br><span class="line">patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; 10.0.diff</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>启动gitlab</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl start</span><br></pre></td></tr></table></figure>
<p>访问页面验证。<br> 5    安装GitBook<br>npm install -g gitbook-cli -g</p>
<h1 id="6-安装GitLab-Runner"><a href="#6-安装GitLab-Runner" class="headerlink" title="6    安装GitLab-Runner"></a>6    安装GitLab-Runner</h1><ol>
<li>下载GitLab Runner<br>通过 uname –m 命令查看 Linux 系统的位数，然后下载对应的安装包</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># x86-64</span></span><br><span class="line">sudo wget -O /usr/<span class="built_in">local</span>/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64 </span><br><span class="line"><span class="comment"># x86</span></span><br><span class="line">sudo wget -O /usr/<span class="built_in">local</span>/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-386 </span><br><span class="line"><span class="comment"># arm</span></span><br><span class="line">sudo wget -O /usr/<span class="built_in">local</span>/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-arm</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>文件放置<br>文件已经放置于 /usr/local/bin/gitlab-runner，需要配置相应权限<br>chmod +x /usr/local/bin/gitlab-runner</p>
</li>
<li><p>安装GitLab Runner</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**<span class="comment">## 安装**</span></span><br><span class="line">gitlab-runner install --user=root --working-directory=/software/gitlab-runner</span><br><span class="line">备注：/software/gitlab-runner 是安装路径，可以自定义，目录需要提前创建，否则启动报错。</span><br><span class="line"></span><br><span class="line">**<span class="comment">## 启动**</span></span><br><span class="line">gitlab-runner start</span><br></pre></td></tr></table></figure>
<h1 id="7-打通GitLab与GitBook"><a href="#7-打通GitLab与GitBook" class="headerlink" title="7    打通GitLab与GitBook"></a>7    打通GitLab与GitBook</h1><ol>
<li>创建wiki的工程，如下所示：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006491540.png" alt="1"></li>
<li>注册GitLab Runner</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**<span class="comment">## 注册**</span></span><br><span class="line">gitlab-runner register</span><br><span class="line">然后依次输入以下参数：</span><br><span class="line"><span class="comment">## 1. GitLab的url，参考下图</span></span><br><span class="line"><span class="comment">## 2. Token，参考下图</span></span><br><span class="line"><span class="comment">## 3. 描述，随便写一个</span></span><br><span class="line"><span class="comment">## 4. Runner描述，随便写一个</span></span><br><span class="line"><span class="comment">## 5. shell，意思是执行方式，这里用shell即可</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006540319.png" alt="2"></p>
<ol start="3">
<li>配置完成后，可以在GitLab看到Runner已经注册上来了，如下所示：<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006553378.png" alt="3"></li>
<li>项目配置CI<br>在项目中新增.gitlab-ci.yml文件，内容如下：</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">xx-wiki:</span><br><span class="line">  stage: build</span><br><span class="line">  script:</span><br><span class="line">    - p=`pwd`</span><br><span class="line">    - echo $p</span><br><span class="line">    - gitbook install</span><br><span class="line">    - gitbook build</span><br><span class="line">    - setsid nohup sh startup.sh &gt; nohup.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>在项目中新增startup.sh文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ps -ef | grep gitbook | grep serve`; <span class="keyword">do</span> <span class="built_in">kill</span> -9 <span class="variable">$i</span> ; <span class="keyword">done</span>;</span><br><span class="line">gitbook serve</span><br></pre></td></tr></table></figure>
<p>提交到GitLab后，通过Pipelines菜单查看任务执行情况：<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006614329.png" alt="4"><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006630558.png" alt="5"></p>
<h1 id="8-验证"><a href="#8-验证" class="headerlink" title="8    验证"></a>8    验证</h1><p>修改Wiki内容，然后推送到GitLab，可以看到GitLab上的任务被执行：<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006639450.png" alt="6"><br>访问<a href="http://IP:4000，可以看到对应的Wiki被更新，证明WiKi搭建完成，并能实时更新" target="_blank" rel="noopener">http://IP:4000，可以看到对应的Wiki被更新，证明WiKi搭建完成，并能实时更新</a><br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006664081.png" alt="7"></p>
<h1 id="9-问题"><a href="#9-问题" class="headerlink" title="9    问题"></a>9    问题</h1><h2 id="9-1-runner一直处于Pending状态"><a href="#9-1-runner一直处于Pending状态" class="headerlink" title="9.1    runner一直处于Pending状态"></a>9.1    runner一直处于Pending状态</h2><p>这是由于在注册gitlab runner完成后，有一个配置项需要修改，否则不会执行，详见以下链接：<br><a href="https://www.daxiblog.com/gitlab-pages无法运行，一直处于pending状态的原因/" target="_blank" rel="noopener">https://www.daxiblog.com/gitlab-pages无法运行，一直处于pending状态的原因/</a><br><a href="https://www.daxiblog.com/gitlab-pages%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%EF%BC%8C%E4%B8%80%E7%9B%B4%E5%A4%84%E4%BA%8Epending%E7%8A%B6%E6%80%81%E7%9A%84%E5%8E%9F%E5%9B%A0/" target="_blank" rel="noopener">https://www.daxiblog.com/gitlab-pages%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%EF%BC%8C%E4%B8%80%E7%9B%B4%E5%A4%84%E4%BA%8Epending%E7%8A%B6%E6%80%81%E7%9A%84%E5%8E%9F%E5%9B%A0/</a><br>在gitlab中启动pages服务并配置好gitlab runner之后，push代码后，虽然触发了自动CI，但是一直处于Pending状态，</p>
<div class="note danger"><p><strong>danger</strong><br>错误信息是：This job is stuck, because you don’t have any active runners that can run this job</p></div>
<p>这是由于在注册gitlab runner完成后，有一个配置项需要修改，就是是否在没有标记tag的job上运行，如果选择默认值false，那没有标记tag的代码提交是不会触发gitlab runner的，如果做测试，最好填true。<br>这个配置可以在runner的编辑页面进行修改：</p>
<p>打开settings→CI/CD→Runners settings，然后会看到已经启用的runner，点击编辑按钮，勾选以下选项即可：<br> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006742750.png" alt="9"></p>
<h2 id="9-2-runner一直处于running"><a href="#9-2-runner一直处于running" class="headerlink" title="9.2    runner一直处于running"></a>9.2    runner一直处于running</h2><p>这是由于直接通过gitbook serve启动时，没有以后台方式启动。最后通过setsid解决</p>
<h1 id="10-优化"><a href="#10-优化" class="headerlink" title="10    优化"></a>10    优化</h1><h2 id="10-1-优化GitBook展示页面"><a href="#10-1-优化GitBook展示页面" class="headerlink" title="10.1    优化GitBook展示页面"></a>10.1    优化GitBook展示页面</h2><p>创建book.js，可配置页面超链接，书籍标题等信息，安装及禁用了部分插件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"test标题"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"XXX作者"</span>,</span><br><span class="line">  <span class="attr">"authorHomepage"</span>: <span class="string">"http://zhjxdns.imwork.net:332/"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"site description"</span>,</span><br><span class="line">  <span class="attr">"language"</span>: <span class="string">"zh-hans"</span>,</span><br><span class="line">  <span class="attr">"copyright"</span>: <span class="string">"All Rights Reserved"</span>,</span><br><span class="line">  <span class="attr">"variables"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"theme-code"</span>,</span><br><span class="line">    <span class="string">"splitter"</span>,</span><br><span class="line">    <span class="string">"prism"</span>,</span><br><span class="line">    <span class="string">"-font-settings"</span>,</span><br><span class="line">    <span class="string">"folding-chapters"</span>,</span><br><span class="line">    <span class="string">"-sharing"</span>,</span><br><span class="line">    <span class="string">"search-pro"</span>,</span><br><span class="line">    <span class="string">"-smart-nav-collapse"</span>,</span><br><span class="line">    <span class="string">"include-codeblock"</span>,</span><br><span class="line">    <span class="string">"-livereload"</span>,</span><br><span class="line">    <span class="string">"toggle-chapters"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"pluginsConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"theme-default"</span>: &#123;</span><br><span class="line">      <span class="attr">"showLevel"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-2-优化默认Introduction"><a href="#10-2-优化默认Introduction" class="headerlink" title="10.2    优化默认Introduction"></a>10.2    优化默认Introduction</h2><p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006788115.png" alt="11"><br>修改SUMMARY.md文件，添加* [前言]（README.md）</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>[<span class="string">前言</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="section"># 目录</span></span><br><span class="line"><span class="bullet">* </span>[<span class="string">第一章</span>](<span class="link">1.md</span>)</span><br><span class="line"> * [<span class="string">1.1</span>](<span class="link">1.1.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第二章</span>](<span class="link">2.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第三章</span>](<span class="link">3.md</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/6/18/gitlab_gitbook搭建WIKI/1624006818749.png" alt="12"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>gitlib</tag>
        <tag>gitbook</tag>
      </tags>
  </entry>
  <entry>
    <title>多环境批处理脚本</title>
    <url>/2021/07/12/%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="version-3"><a href="#version-3" class="headerlink" title="version 3"></a>version 3</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off &amp; SetLocal EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line"></span><br><span class="line">:: 检测mysql端口</span><br><span class="line">:: 检查端口，如果冲突则随机端口，重新执行检查</span><br><span class="line"><span class="built_in">set</span> myport=16603</span><br><span class="line">rem <span class="built_in">set</span> myport=137</span><br><span class="line">:myportDetect</span><br><span class="line">netstat -aon|findstr <span class="string">"%myport%"</span> &gt; NUL 2&gt;NUL &amp;&amp; <span class="built_in">set</span> myport=%random% &amp;&amp; goto myportDetect || <span class="built_in">echo</span> %myport%</span><br><span class="line">:: 因随机端口后myport的值后，替换端口后面会又空格，执行如下步骤，转换以下，使空格消除。</span><br><span class="line"><span class="keyword">for</span> /F %%i <span class="keyword">in</span> (<span class="string">'echo %myport%'</span>) <span class="keyword">do</span> ( <span class="built_in">set</span> myport=%%i)</span><br><span class="line"><span class="built_in">echo</span> myport=%myport%</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> inipath=<span class="string">"%cd%\mysql\mybak.ini"</span></span><br><span class="line">rem del <span class="string">"%cd%\mysql\my.ini"</span> &gt;nul 2&gt;nul</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">"delims="</span> %%a <span class="keyword">in</span> (.\mysql\mybak.ini) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> a=%%a</span><br><span class="line">    <span class="built_in">set</span> a=!a:16603=%myport%!</span><br><span class="line">    <span class="built_in">echo</span> !a!&gt;&gt;<span class="string">"%cd%\mysql\my.ini"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:: 检查redis端口</span><br><span class="line"><span class="built_in">set</span> redisport=17963</span><br><span class="line">rem <span class="built_in">set</span> redisport=137</span><br><span class="line">:redisportDetect</span><br><span class="line">netstat -aon|findstr <span class="string">"%redisport%"</span> &gt; NUL 2&gt;NUL &amp;&amp; <span class="built_in">set</span> redisport=%random% &amp;&amp; goto redisportDetect || <span class="built_in">echo</span> %redisport%</span><br><span class="line"><span class="keyword">for</span> /F %%i <span class="keyword">in</span> (<span class="string">'echo %redisport%'</span>) <span class="keyword">do</span> ( <span class="built_in">set</span> redisport=%%i)</span><br><span class="line"><span class="built_in">echo</span> redisport=%redisport%</span><br><span class="line">rem <span class="built_in">set</span> reconfpath=<span class="string">"%cd%\redis\redis.windows-service-bak.conf"</span></span><br><span class="line">del <span class="string">"%cd%\redis\redis.windows-service.conf"</span> &gt;nul 2&gt;nul</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">"delims="</span> %%b <span class="keyword">in</span> (.\redis\redis.windows-service-bak.conf) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> b=%%b</span><br><span class="line">    <span class="built_in">set</span> b=!b:17963=%redisport%!</span><br><span class="line">    <span class="built_in">echo</span> !b!&gt;&gt;<span class="string">"%cd%\redis\redis.windows-service.conf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:: 检查tomcat端口</span><br><span class="line">::: zxzb1 端口</span><br><span class="line"><span class="built_in">set</span> zxzb1=18785</span><br><span class="line">rem <span class="built_in">set</span> zxzb1=137</span><br><span class="line">:javaportDetect1</span><br><span class="line">netstat -aon|findstr <span class="string">"%zxzb1%"</span> &gt; NUL 2&gt;NUL &amp;&amp; <span class="built_in">set</span> zxzb1=%random% &amp;&amp; goto javaportDetect1 || <span class="built_in">echo</span> %zxzb1%</span><br><span class="line"><span class="keyword">for</span> /F %%i <span class="keyword">in</span> (<span class="string">'echo %zxzb1%'</span>) <span class="keyword">do</span> ( <span class="built_in">set</span> zxzb1=%%i)</span><br><span class="line"><span class="built_in">echo</span> zxzb1=%zxzb1%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::: zxzb2 端口</span><br><span class="line"><span class="built_in">set</span> zxzb2=18388</span><br><span class="line">rem <span class="built_in">set</span> zxzb2=137</span><br><span class="line">:javaportDetect2</span><br><span class="line">netstat -aon|findstr <span class="string">"%zxzb2%"</span> &gt; NUL 2&gt;NUL &amp;&amp; <span class="built_in">set</span> zxzb2=%random% &amp;&amp; goto javaportDetect2 || <span class="built_in">echo</span> %zxzb2%</span><br><span class="line"><span class="keyword">for</span> /F %%i <span class="keyword">in</span> (<span class="string">'echo %zxzb2%'</span>) <span class="keyword">do</span> ( <span class="built_in">set</span> zxzb2=%%i)</span><br><span class="line"><span class="built_in">echo</span> zxzb2=%zxzb2%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::: zxzb3 端口</span><br><span class="line"><span class="built_in">set</span> zxzb3=18489</span><br><span class="line">rem <span class="built_in">set</span> zxzb3=137</span><br><span class="line">:javaportDetect3</span><br><span class="line">netstat -aon|findstr <span class="string">"%zxzb3%"</span> &gt; NUL 2&gt;NUL &amp;&amp; <span class="built_in">set</span> zxzb3=%random% &amp;&amp; goto javaportDetect3 || <span class="built_in">echo</span> %zxzb3%</span><br><span class="line"><span class="keyword">for</span> /F %%i <span class="keyword">in</span> (<span class="string">'echo %zxzb3%'</span>) <span class="keyword">do</span> ( <span class="built_in">set</span> zxzb3=%%i)</span><br><span class="line"><span class="built_in">echo</span> zxzb3=%zxzb3%</span><br><span class="line">:: dos命令替换文本内容，存在弊端，对一些特殊服务转义存在问题，只适合简单文档的替换</span><br><span class="line">:: 原理读取文档每一行，检查每一行，存在匹配，替换到新文档，然后新文档覆盖原来的文档</span><br><span class="line">rem <span class="built_in">set</span> javaconfpath=<span class="string">"%cd%\service\conf\server_bak.xml"</span></span><br><span class="line">del <span class="string">"%cd%\service\conf\server.xml"</span> &gt;nul 2&gt;nul</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">"delims="</span> %%c <span class="keyword">in</span> (.\service\conf\server_bak.xml) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> c=%%c</span><br><span class="line">	<span class="built_in">set</span> c=!c:18785=%zxzb1%!</span><br><span class="line">	<span class="built_in">set</span> c=!c:18388=%zxzb2%!</span><br><span class="line">    <span class="built_in">set</span> c=!c:18489=%zxzb3%!</span><br><span class="line">    <span class="built_in">echo</span> !c!&gt;&gt;<span class="string">"%cd%\service\conf\server.xml"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:: 检查地图服务端口</span><br><span class="line"><span class="built_in">set</span> mapport=10000</span><br><span class="line">rem <span class="built_in">set</span> mapport=137</span><br><span class="line">:mapportDetect</span><br><span class="line">netstat -aon|findstr <span class="string">"%mapport%"</span> &gt; NUL 2&gt;NUL &amp;&amp; <span class="built_in">set</span> mapport=%random% &amp;&amp; goto mapportDetect || <span class="built_in">echo</span> %mapport%</span><br><span class="line"><span class="keyword">for</span> /F %%i <span class="keyword">in</span> (<span class="string">'echo %mapport%'</span>) <span class="keyword">do</span> ( <span class="built_in">set</span> mapport=%%i)</span><br><span class="line"><span class="built_in">echo</span> mapport=%mapport%</span><br><span class="line"></span><br><span class="line">:: 替换env.bat内容</span><br><span class="line">:: 本方法是采用vbs命令方式，对特殊符号转义稍好，原理和dos命令差不多，复杂符号还是需要其他深入配置</span><br><span class="line">del <span class="string">".\mapser\env.bat"</span> &gt;nul 2&gt;nul</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> fso=createobject(<span class="string">"scripting.filesystemobject"</span>) &gt;3.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.opentextfile(<span class="string">"env.bat"</span>) &gt;&gt;3.vbs</span><br><span class="line"><span class="built_in">echo</span> s=file.readall &gt;&gt;3.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;3.vbs</span><br><span class="line"><span class="built_in">echo</span> s=replace(s,<span class="string">"10000"</span>,<span class="string">"%mapport%"</span>) &gt;&gt;3.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.createtextfile(<span class="string">".\mapser\env.bat"</span>) &gt;&gt;3.vbs</span><br><span class="line"><span class="built_in">echo</span> file.write s &gt;&gt;3.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;3.vbs</span><br><span class="line">start 3.vbs</span><br><span class="line"></span><br><span class="line">:: 替换gdw.conf</span><br><span class="line">del <span class="string">".\mapser\serv\conf\gdw.conf"</span> &gt;nul 2&gt;nul</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> fso=createobject(<span class="string">"scripting.filesystemobject"</span>) &gt;4.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.opentextfile(<span class="string">"gdw.conf"</span>) &gt;&gt;4.vbs</span><br><span class="line"><span class="built_in">echo</span> s=file.readall &gt;&gt;4.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;4.vbs</span><br><span class="line"><span class="built_in">echo</span> s=replace(s,<span class="string">"10000"</span>,<span class="string">"%mapport%"</span>) &gt;&gt;4.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.createtextfile(<span class="string">".\mapser\serv\conf\gdw.conf"</span>) &gt;&gt;4.vbs</span><br><span class="line"><span class="built_in">echo</span> file.write s &gt;&gt;4.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;4.vbs</span><br><span class="line">start 4.vbs</span><br><span class="line"></span><br><span class="line">:: 修改war config</span><br><span class="line">:zxzbconfig</span><br><span class="line">rem <span class="built_in">set</span> zxzbconfpath=%<span class="built_in">cd</span>%\service\webapps\zxzb\WEB-INF\classes\application-dev-bak.properties</span><br><span class="line">rem <span class="built_in">set</span> vbsfile1=%<span class="built_in">cd</span>%\service\webapps\zxzb\WEB-INF\classes\vbs1.txt</span><br><span class="line">rem <span class="built_in">set</span> vbsfile2=%<span class="built_in">cd</span>%\service\webapps\zxzb\WEB-INF\classes\vbs2.txt</span><br><span class="line">rem <span class="built_in">set</span> zxzbconf=%<span class="built_in">cd</span>%\service\webapps\zxzb\WEB-INF\classes\application-dev.properties</span><br><span class="line">del <span class="string">"%cd%\service\webapps\zxzb\WEB-INF\classes\application-dev.properties"</span> &gt;nul 2&gt;nul</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> fso=createobject(<span class="string">"scripting.filesystemobject"</span>) &gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.opentextfile(<span class="string">".\service\webapps\zxzb\WEB-INF\classes\application-dev-bak.properties"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> s=file.readall &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> s=replace(s,<span class="string">"16603"</span>,<span class="string">"%myport%"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.createtextfile(<span class="string">".\service\webapps\zxzb\WEB-INF\classes\vbs1.txt"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> file.write s &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;1.vbs</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> fso=createobject(<span class="string">"scripting.filesystemobject"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.opentextfile(<span class="string">".\service\webapps\zxzb\WEB-INF\classes\vbs1.txt"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> s=file.readall &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> s=replace(s,<span class="string">"17963"</span>,<span class="string">"%redisport%"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.createtextfile(<span class="string">".\service\webapps\zxzb\WEB-INF\classes\vbs2.txt"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> file.write s &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;1.vbs</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> fso=createobject(<span class="string">"scripting.filesystemobject"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.opentextfile(<span class="string">".\service\webapps\zxzb\WEB-INF\classes\vbs2.txt"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> s=file.readall &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> s=replace(s,<span class="string">"10000"</span>,<span class="string">"%mapport%"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.createtextfile(<span class="string">".\service\webapps\zxzb\WEB-INF\classes\application-dev.properties"</span>) &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> file.write s &gt;&gt;1.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;1.vbs</span><br><span class="line">start 1.vbs</span><br><span class="line">ping 127.1 -n 2 &gt;nul</span><br><span class="line">del .\service\webapps\zxzb\WEB-INF\classes\vbs1.txt</span><br><span class="line">del .\service\webapps\zxzb\WEB-INF\classes\vbs2.txt</span><br><span class="line">rem del 1.vbs</span><br><span class="line"></span><br><span class="line">rem <span class="keyword">for</span> /f <span class="string">"tokens=*"</span> %%f <span class="keyword">in</span> (%zxzbconfpath%) <span class="keyword">do</span> (</span><br><span class="line">rem    endlocal</span><br><span class="line">rem    <span class="built_in">set</span> f=%%f</span><br><span class="line">rem	setlocal enabledelayedexpansion</span><br><span class="line">rem	<span class="built_in">set</span> f=!f:16603=%myport%!</span><br><span class="line">rem	<span class="built_in">set</span> f=!f:17963=%redisport%!</span><br><span class="line">rem	<span class="built_in">set</span> f=!f:18785=%zxzb1%!</span><br><span class="line">rem	<span class="built_in">set</span> f=!f:18388=%zxzb2%!</span><br><span class="line">rem    <span class="built_in">set</span> f=!f:18489=%zxzb3%!</span><br><span class="line">rem    <span class="built_in">echo</span> !f! &gt;&gt;<span class="string">"%cd%\service\webapps\zxzb\WEB-INF\classes\application-dev.properties"</span></span><br><span class="line">rem )</span><br><span class="line"></span><br><span class="line">::: 前端urlport修改（只用在web封装版本）</span><br><span class="line">:webconfig</span><br><span class="line">rem <span class="built_in">set</span> javaconfpath=requestUrl.js</span><br><span class="line">del <span class="string">"..\app\static\js\requestUrl.js"</span> &gt;nul 2&gt;nul</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> fso=createobject(<span class="string">"scripting.filesystemobject"</span>) &gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.opentextfile(<span class="string">"requestUrl.js"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> s=file.readall &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> s=replace(s,<span class="string">"24486"</span>,<span class="string">"%zxzb2%"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.createtextfile(<span class="string">"..\app\static\js\requestUrl.js"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> file.write s &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;2.vbs</span><br><span class="line"></span><br><span class="line">:: app\static\js\config</span><br><span class="line">del <span class="string">"..\app\static\js\config.js"</span> &gt;nul 2&gt;nul</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> fso=createobject(<span class="string">"scripting.filesystemobject"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.opentextfile(<span class="string">"config.js"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> s=file.readall &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> s=replace(s,<span class="string">"10000"</span>,<span class="string">"%mapport%"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.createtextfile(<span class="string">"..\app\static\js\config.js"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> file.write s &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;2.vbs</span><br><span class="line"></span><br><span class="line">::这个作为测试页面web</span><br><span class="line">del <span class="string">".\service\webapps\zxzb\WEB-INF\classes\templates\static\js\config.js"</span> &gt;nul 2&gt;nul</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> fso=createobject(<span class="string">"scripting.filesystemobject"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.opentextfile(<span class="string">"config.js"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> s=file.readall &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> s=replace(s,<span class="string">"10000"</span>,<span class="string">"%mapport%"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> file=fso.createtextfile(<span class="string">".\service\webapps\zxzb\WEB-INF\classes\templates\static\js\config.js"</span>) &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> file.write s &gt;&gt;2.vbs</span><br><span class="line"><span class="built_in">echo</span> file.close &gt;&gt;2.vbs</span><br><span class="line"></span><br><span class="line">start 2.vbs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rem <span class="keyword">for</span> /f <span class="string">"delims="</span> %%d <span class="keyword">in</span> (requestUrl.js) <span class="keyword">do</span> (</span><br><span class="line">rem    <span class="built_in">set</span> d=%%d</span><br><span class="line">rem	<span class="built_in">set</span> d=!d:24486=%zxzb2%!</span><br><span class="line">rem    <span class="built_in">echo</span> !c!&gt;&gt;<span class="string">"..\app\static\js\requestUrl.js"</span></span><br><span class="line">rem )</span><br><span class="line"></span><br><span class="line">::::: 安装服务</span><br><span class="line">::: 安装vc服务</span><br><span class="line">::: 原理 查询注册表，根据返回值判断执行不同结果命令，采用判断语句</span><br><span class="line">:2010Detect </span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line">rem <span class="built_in">set</span> <span class="string">"HKLMU=HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"</span></span><br><span class="line">::::: 判断系统是否已经安装了 Visual C++ 2010（包括所有版本）</span><br><span class="line">::::: 有就跳过安装Visual C++ 2010，没有则先安装。</span><br><span class="line">:: 此处采用 <span class="keyword">if</span> defined 命令返回变量的值，执行不同结果命令，下面&#123;&#125;是vc工具ID，进行匹配，但是版本太多，没有手机完，总成匹配不全</span><br><span class="line">rem reg query %HKLMU%\&#123;196BB40D-1578-3D01-B289-BEFC77A11A1E&#125;&gt;nul 2&gt;nul&amp;&amp;<span class="built_in">set</span> VC2010=Microsoft Visual C++ 2010 Redistributable X86</span><br><span class="line">rem reg query %HKLMU%\&#123;DA5E371C-6333-3D8A-93A4-6FD5B20BCC6E&#125;&gt;nul 2&gt;nul&amp;&amp;<span class="built_in">set</span> VC2010=Microsoft Visual C++ 2010 Redistributable X64</span><br><span class="line">rem <span class="keyword">if</span> defined VC2010 (<span class="built_in">echo</span> %VC2010% 已安装！&amp;goto mysqlserviceDetect &gt;nul) <span class="keyword">else</span> (goto 2010Install)</span><br><span class="line">::::: 判断系统是否已经安装了 Visual C++ 2010（包括所有版本）</span><br><span class="line">::::: 有就跳过安装Visual C++ 2010，没有则先安装。</span><br><span class="line">:: 此处采用检查注册表路径下有没有特定版本的目录，返回结果，真和假。匹配准确性待测试，个人想到的方式</span><br><span class="line"><span class="built_in">set</span> <span class="string">"HKLMU=HKLM\SOFTWARE\WOW6432Node\Microsoft\VisualStudio\"</span></span><br><span class="line"><span class="string">if %errorlevel% ==0 (</span></span><br><span class="line"><span class="string">echo %vc10% 已安装！&amp; goto 2015Detect</span></span><br><span class="line"><span class="string">) else (</span></span><br><span class="line"><span class="string">echo noexsit &amp; goto 2010Install</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">:2010Install</span></span><br><span class="line"><span class="string">:::::各版本下载地址 http://www.microsoft.com/downloads/details.aspx?FamilyID=766a6af7-ec73-40ff-b072-9112bab119c2&amp;DisplayLang=zh-cn</span></span><br><span class="line"><span class="string">"</span>%<span class="built_in">cd</span>%\mysql\vcredist_x64_2010.exe<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:2015Detect</span></span><br><span class="line"><span class="string">reg query %HKLMU%14.0 &gt;nul &amp;&amp; set vc15=Microsoft Visual C++ 2015</span></span><br><span class="line"><span class="string">if %errorlevel% ==0 (</span></span><br><span class="line"><span class="string">echo %vc15% 已安装！ &amp; goto mysqlserviceDetect</span></span><br><span class="line"><span class="string">) else (</span></span><br><span class="line"><span class="string">echo noexsit &amp; goto 2015Install</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:2015Install</span></span><br><span class="line"><span class="string">vcredist_x64_2015.exe</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">::: 安装mysql</span></span><br><span class="line"><span class="string">:mysqlserviceDetect</span></span><br><span class="line"><span class="string">cd /d %~dp0</span></span><br><span class="line"><span class="string">set "</span>mysqlservice=jx_mysql5.6<span class="string">"</span></span><br><span class="line"><span class="string">sc query  "</span>%mysqlservice%<span class="string">"&gt;nul</span></span><br><span class="line"><span class="string">IF ERRORLEVEL 1060 GOTO mysqlInstall </span></span><br><span class="line"><span class="string">GOTO mysqlexist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:mysqlInstall</span></span><br><span class="line"><span class="string">"</span>%<span class="built_in">cd</span>%\mysql\bin\mysqld.exe<span class="string">" -install %mysqlservice% --defaults-file="</span>%<span class="built_in">cd</span>%\mysql\my.ini<span class="string">"</span></span><br><span class="line"><span class="string">sc config %mysqlservice% start=auto</span></span><br><span class="line"><span class="string">net start %mysqlservice%</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">::: 安装redis</span></span><br><span class="line"><span class="string">:redisserviceDetect</span></span><br><span class="line"><span class="string">cd /d %~dp0</span></span><br><span class="line"><span class="string">set "</span>redisservice=jx_redis3.2.100<span class="string">"</span></span><br><span class="line"><span class="string">sc query  "</span>%redisservice%<span class="string">"&gt;nul</span></span><br><span class="line"><span class="string">IF ERRORLEVEL 1060 GOTO redisInstall </span></span><br><span class="line"><span class="string">GOTO redisexist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:redisInstall</span></span><br><span class="line"><span class="string">"</span>%<span class="built_in">cd</span>%\redis\redis-server<span class="string">" --service-install --service-name %redisservice% "</span>%<span class="built_in">cd</span>%\redis\redis.windows-service.conf<span class="string">" --loglevel verbose</span></span><br><span class="line"><span class="string">sc config %redisservice% start=auto</span></span><br><span class="line"><span class="string">net start %redisservice%</span></span><br><span class="line"><span class="string">echo ------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">::: 安装tomcat</span></span><br><span class="line"><span class="string">:javaserviceDetect</span></span><br><span class="line"><span class="string">cd /d %~dp0</span></span><br><span class="line"><span class="string">set "</span>javaservice=jx_tomcat8.5_jdk8<span class="string">"</span></span><br><span class="line"><span class="string">sc query  "</span>%javaservice%<span class="string">"&gt;nul</span></span><br><span class="line"><span class="string">IF ERRORLEVEL 1060 GOTO javaInstall </span></span><br><span class="line"><span class="string">GOTO javaexist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:javaInstall</span></span><br><span class="line"><span class="string">cd service</span></span><br><span class="line"><span class="string">call "</span>%<span class="built_in">cd</span>%\bin\service.bat<span class="string">" install %javaservice%</span></span><br><span class="line"><span class="string">ping 127.0.0.1 -n 5 &gt; nul</span></span><br><span class="line"><span class="string">sc config %javaservice% start=auto</span></span><br><span class="line"><span class="string">net start %javaservice%</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">::: 安装mapserver</span></span><br><span class="line"><span class="string">:mapserviceDetect</span></span><br><span class="line"><span class="string">cd /d %~dp0</span></span><br><span class="line"><span class="string">set "</span>mapservice=jx_mapserv0.20.1<span class="string">"</span></span><br><span class="line"><span class="string">sc query  "</span>%mapservice%<span class="string">"&gt;nul</span></span><br><span class="line"><span class="string">IF ERRORLEVEL 1060 GOTO mapInstall</span></span><br><span class="line"><span class="string">GOTO mapexist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:mapInstall</span></span><br><span class="line"><span class="string">instsrv.exe jx_mapserv0.20.1 "</span>%<span class="built_in">cd</span>%\mapser\start.exe<span class="string">"</span></span><br><span class="line"><span class="string">ping 127.0.0.1 -n 5 &gt; nul</span></span><br><span class="line"><span class="string">sc config jx_mapserv0.20.1 start=auto</span></span><br><span class="line"><span class="string">net start jx_mapserv0.20.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo mysqlport=%myport% &gt; READ.txt</span></span><br><span class="line"><span class="string">echo redisport=%redisport% &gt;&gt; READ.txt</span></span><br><span class="line"><span class="string">echo javaport1=%zxzb1% &gt;&gt; READ.txt</span></span><br><span class="line"><span class="string">echo javaport2-http=%zxzb2% &gt;&gt; READ.txt</span></span><br><span class="line"><span class="string">echo javaport3=%zxzb3% &gt;&gt; READ.txt</span></span><br><span class="line"><span class="string">echo mapport=%mapport% &gt;&gt; READ.txt</span></span><br><span class="line"><span class="string">ping 127.0.0.1 -n 60 &gt; nul</span></span><br><span class="line"><span class="string">goto END</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:mysqlexist</span></span><br><span class="line"><span class="string">mshta vbscript:msgbox("</span>ERROR：%mysqlservice% 服务已存在！！！<span class="string">",64,"</span>异常提醒<span class="string">")(window.close)</span></span><br><span class="line"><span class="string">GOTO END</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:redisexist</span></span><br><span class="line"><span class="string">mshta vbscript:msgbox("</span>ERROR：%redisservice% 服务已存在！！！<span class="string">",64,"</span>异常提醒<span class="string">")(window.close)</span></span><br><span class="line"><span class="string">GOTO END</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:javaexist</span></span><br><span class="line"><span class="string">mshta vbscript:msgbox("</span>ERROR：%javaservice% 服务已存在！！！<span class="string">",64,"</span>异常提醒<span class="string">")(window.close)</span></span><br><span class="line"><span class="string">GOTO END</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:END</span></span><br></pre></td></tr></table></figure>
<h1 id="version-2"><a href="#version-2" class="headerlink" title="version 2"></a>version 2</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">::[Bat To Exe Converter]</span><br><span class="line">::</span><br><span class="line">::YAwzoRdxOk+EWAnk</span><br><span class="line">::fBw5plQjdG8=</span><br><span class="line">::YAwzuBVtJxjWCl3EqQJgSA==</span><br><span class="line">::ZR4luwNxJguZRRnk</span><br><span class="line">::Yhs/ulQjdF+5</span><br><span class="line">::cxAkpRVqdFKZSzk=</span><br><span class="line">::cBs/ulQjdF+5</span><br><span class="line">::ZR41oxFsdFKZSDk=</span><br><span class="line">::eBoioBt6dFKZSDk=</span><br><span class="line">::cRo6pxp7LAbNWATEpCI=</span><br><span class="line">::egkzugNsPRvcWATEpCI=</span><br><span class="line">::dAsiuh18IRvcCxnZtBJQ</span><br><span class="line">::cRYluBh/LU+EWAnk</span><br><span class="line">::YxY4rhs+aU+JeA==</span><br><span class="line">::cxY6rQJ7JhzQF1fEqQJQ</span><br><span class="line">::ZQ05rAF9IBncCkqN+0xwdVs0</span><br><span class="line">::ZQ05rAF9IAHYFVzEqQJQ</span><br><span class="line">::eg0/rx1wNQPfEVWB+kM9LVsJDGQ=</span><br><span class="line">::fBEirQZwNQPfEVWB+kM9LVsJDGQ=</span><br><span class="line">::cRolqwZ3JBvQF1fEqQJQ</span><br><span class="line">::dhA7uBVwLU+EWDk=</span><br><span class="line">::YQ03rBFzNR3SWATElA==</span><br><span class="line">::dhAmsQZ3MwfNWATElA==</span><br><span class="line">::ZQ0/vhVqMQ3MEVWAtB9wSA==</span><br><span class="line">::Zg8zqx1/OA3MEVWAtB9wSA==</span><br><span class="line">::dhA7pRFwIByZRRnk</span><br><span class="line">::Zh4grVQjdCyDJGyX8VAjFBpQQQ2MAE+/Fb4I5/jH9fKdoHEUWvEreYPXlLGWJYA=</span><br><span class="line">::YB416Ek+ZW8=</span><br><span class="line">::</span><br><span class="line">::</span><br><span class="line">::978f952a14a936cc963da21a135fa983</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line"></span><br><span class="line">call envport.bat</span><br><span class="line"></span><br><span class="line">:myportDetect</span><br><span class="line">netstat -aon|findstr LISTENING|findstr <span class="string">"%myport%"</span> &gt; NUL 2&gt;NUL &amp;&amp; mshta vbscript:msgbox(<span class="string">"ERROR：%myport% 端口已占用！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close) || <span class="built_in">echo</span> %myport%</span><br><span class="line"></span><br><span class="line">:redisportDetect</span><br><span class="line">netstat -aon|findstr LISTENING|findstr <span class="string">"%redisport%"</span> &gt; NUL 2&gt;NUL  &amp;&amp; mshta vbscript:msgbox(<span class="string">"ERROR：%redisport% 端口已占用！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close) || <span class="built_in">echo</span> %redisport%</span><br><span class="line"></span><br><span class="line">:javaportDetect1</span><br><span class="line">netstat -aon|findstr LISTENING|findstr <span class="string">"%zxzb1%"</span> &gt; NUL 2&gt;NUL  &amp;&amp; mshta vbscript:msgbox(<span class="string">"ERROR：%zxzb1% 端口已占用！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close) || <span class="built_in">echo</span> %zxzb1%</span><br><span class="line"></span><br><span class="line">:javaportDetect2</span><br><span class="line">netstat -aon|findstr LISTENING|findstr <span class="string">"%zxzb2%"</span> &gt; NUL 2&gt;NUL &amp;&amp; mshta vbscript:msgbox(<span class="string">"ERROR：%zxzb2% 端口已占用！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close) || <span class="built_in">echo</span> %zxzb2%</span><br><span class="line"></span><br><span class="line">:javaportDetect3</span><br><span class="line">netstat -aon|findstr LISTENING|findstr <span class="string">"%zxzb3%"</span> &gt; NUL 2&gt;NUL &amp;&amp; mshta vbscript:msgbox(<span class="string">"ERROR：%zxzb3% 端口已占用！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close) || <span class="built_in">echo</span> %zxzb3%</span><br><span class="line"></span><br><span class="line">:mapportDetect</span><br><span class="line">netstat -aon|findstr <span class="string">"%mapport%"</span> &gt; NUL 2&gt;NUL &amp;&amp; mshta vbscript:msgbox(<span class="string">"ERROR：%mapport% 端口已占用！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close) || <span class="built_in">echo</span> %mapport%</span><br><span class="line"></span><br><span class="line">::::: 安装服务</span><br><span class="line">::: 安装vc2010</span><br><span class="line">:2010Detect </span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line"><span class="built_in">set</span> <span class="string">"HKLMU=HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"</span></span><br><span class="line">::::: 判断系统是否已经安装了 Visual C++ 2010（包括所有版本）</span><br><span class="line">::::: 有就跳过安装Visual C++ 2010，没有则先安装。</span><br><span class="line">reg query %HKLMU%\&#123;196BB40D-1578-3D01-B289-BEFC77A11A1E&#125;&gt;nul 2&gt;nul&amp;&amp;<span class="built_in">set</span> VC2010=Microsoft Visual C++ 2010 Redistributable X86</span><br><span class="line">reg query %HKLMU%\&#123;DA5E371C-6333-3D8A-93A4-6FD5B20BCC6E&#125;&gt;nul 2&gt;nul&amp;&amp;<span class="built_in">set</span> VC2010=Microsoft Visual C++ 2010 Redistributable X64</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> defined VC2010 (<span class="built_in">echo</span> %VC2005% 已安装！&amp;goto mysqlserviceDetect &gt;nul) <span class="keyword">else</span> (goto 2010Install)</span><br><span class="line"></span><br><span class="line">:2010Install</span><br><span class="line">:::::各版本下载地址 http://www.microsoft.com/downloads/details.aspx?FamilyID=766a6af7-ec73-40ff-b072-9112bab119c2&amp;DisplayLang=zh-cn</span><br><span class="line"><span class="string">"%cd%\mysql\vcredist_x64_2010.exe"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::: 安装mysql</span><br><span class="line">:mysqlserviceDetect</span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line"><span class="built_in">set</span> <span class="string">"mysqlservice=jx_mysql5.6"</span></span><br><span class="line">sc query  <span class="string">"%mysqlservice%"</span>&gt;nul</span><br><span class="line">IF ERRORLEVEL 1060 GOTO mysqlInstall </span><br><span class="line">GOTO mysqlexist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:mysqlInstall</span><br><span class="line"><span class="string">"%cd%\mysql\bin\mysqld.exe"</span> -install %mysqlservice% --defaults-file=<span class="string">"%cd%\mysql\my.ini"</span></span><br><span class="line">sc config %mysqlservice% start=auto</span><br><span class="line">net start %mysqlservice%</span><br><span class="line"></span><br><span class="line">::: 安装redis</span><br><span class="line">:redisserviceDetect</span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line"><span class="built_in">set</span> <span class="string">"redisservice=jx_redis3.2.100"</span></span><br><span class="line">sc query  <span class="string">"%redisservice%"</span>&gt;nul</span><br><span class="line">IF ERRORLEVEL 1060 GOTO redisInstall </span><br><span class="line">GOTO redisexist</span><br><span class="line"></span><br><span class="line">:redisInstall</span><br><span class="line"><span class="string">"%cd%\redis\redis-server"</span> --service-install --service-name %redisservice% <span class="string">"%cd%\redis\redis.windows-service.conf"</span> --loglevel verbose</span><br><span class="line">sc config %redisservice% start=auto</span><br><span class="line">net start %redisservice%</span><br><span class="line"><span class="built_in">echo</span> ------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">::: 安装tomcat</span><br><span class="line">:javaserviceDetect</span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line"><span class="built_in">set</span> <span class="string">"javaservice=jx_tomcat8.5_jdk8"</span></span><br><span class="line">sc query  <span class="string">"%javaservice%"</span>&gt;nul</span><br><span class="line">IF ERRORLEVEL 1060 GOTO javaInstall </span><br><span class="line">GOTO javaexist</span><br><span class="line"></span><br><span class="line">:javaInstall</span><br><span class="line"><span class="built_in">cd</span> service</span><br><span class="line">call <span class="string">"%cd%\bin\service.bat"</span> install %javaservice%</span><br><span class="line">ping 192.0.2.2 -n 1 -w 10000 &gt; nul</span><br><span class="line">sc config %javaservice% start=auto</span><br><span class="line">net start %javaservice%</span><br><span class="line">ping 192.0.2.2 -n 1 -w 10000 &gt; nul</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:mapserviceDetect</span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line"><span class="built_in">set</span> <span class="string">"mapservice=jx_mapserv0.20.1"</span></span><br><span class="line">sc query  <span class="string">"%mapservice%"</span>&gt;nul</span><br><span class="line">IF ERRORLEVEL 1060 GOTO mapInstall</span><br><span class="line">GOTO mapexist</span><br><span class="line"></span><br><span class="line">:mapInstall</span><br><span class="line">instsrv.exe jx_mapserv0.20.1 <span class="string">"%cd%\mapser\start.exe"</span></span><br><span class="line">ping 192.0.2.2 -n 1 -w 3000 &gt; nul</span><br><span class="line">sc config jx_mapserv0.20.1 start=auto</span><br><span class="line">net start jx_mapserv0.20.1</span><br><span class="line">goto END</span><br><span class="line"></span><br><span class="line">:mysqlexist</span><br><span class="line">mshta vbscript:msgbox(<span class="string">"ERROR：%mysqlservice% 服务已存在！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close)</span><br><span class="line">GOTO END</span><br><span class="line"></span><br><span class="line">:redisexist</span><br><span class="line">mshta vbscript:msgbox(<span class="string">"ERROR：%redisservice% 服务已存在！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close)</span><br><span class="line">GOTO END</span><br><span class="line"></span><br><span class="line">:javaexist</span><br><span class="line">mshta vbscript:msgbox(<span class="string">"ERROR：%javaservice% 服务已存在！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close)</span><br><span class="line">GOTO END</span><br><span class="line"></span><br><span class="line">:mapexist</span><br><span class="line">mshta vbscript:msgbox(<span class="string">"ERROR：%mapservice% 服务已存在！！！"</span>,64,<span class="string">"异常提醒"</span>)(window.close)</span><br><span class="line">GOTO END</span><br><span class="line"></span><br><span class="line">:END</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>bat</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop优化及问题汇总</title>
    <url>/2021/07/16/Hadoop%E4%BC%98%E5%8C%96%E5%8F%8A%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="1-HDFS副本设置"><a href="#1-HDFS副本设置" class="headerlink" title="1 HDFS副本设置"></a>1 HDFS副本设置</h1><blockquote>
<p>说明：HDFS文件上传默认创建<code>3</code>个副本，在3个节点上面分别写入一个副本；</p>
<p>这里修改副本数为默认2个。</p>
<p>修改<code>client</code>端的<code>hdfs-site.xml</code>文件，<strong>哪里上传，哪里修改。</strong></p>
</blockquote>
<ul>
<li>修改<code>hdfs-site.xml</code>中的<code>dfs.replication</code>参数，默认为<code>3</code>，这里修改为<code>1</code></li>
</ul>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/15-59-06-768-1626422346.png" alt="image-20210716155859672"></p>
<ul>
<li>也可以通过命令更改已经上传的文件的副本数。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop fs -setrep -R 2 /</span><br></pre></td></tr></table></figure>
<ul>
<li>通过命令指定上传文件的副本数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop dfs -D dfs.replication=1 -put testfile /testdir/</span><br></pre></td></tr></table></figure>
<ul>
<li>服务端的修改方式，可以登录各个datanode节点修改hdfs-size.xml文件，也可以通过修改Ambari平台进行修改</li>
</ul>
<p><strong>HDFS&gt;&gt;configs&gt;&gt;Adbanced</strong></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-09-20-184-1626422960.png" alt="image-20210716160920131"></p>
<p>保存，重启指定服务。</p>
<h1 id="2-删除HDFS文件空间不释放-回收站"><a href="#2-删除HDFS文件空间不释放-回收站" class="headerlink" title="2 删除HDFS文件空间不释放-回收站"></a>2 删除HDFS文件空间不释放-回收站</h1><blockquote>
<p><code>core-size.xml</code> 中的<code>fs.trash.interval</code> 参数</p>
<p>删除检查点后的分钟数。如果为零，则禁用垃圾功能。可以在服务器和客户机上配置此选项。如果禁用了垃圾桶服务器端，则检查客户端配置。如果在服务器端启用了垃圾桶，那么将使用在服务器上配置的值，并忽略客户机配置值。</p>
</blockquote>
<blockquote>
<p><code>core-size.xml</code> 中的<code>fs.trash.checkpoint.interval</code> 参数</p>
<p>垃圾检查点之间的分钟数。应小于或等于<code>fs.trash.interval</code>。如果为<code>零</code>，则该值设置为<code>fs.trash.interval</code>的值。每次检查点运行时，它都会在当前之外创建一个新的检查点，并删除几分钟前创建的超过<code>fs.trash.interval</code>的检查点。</p>
</blockquote>
<p><code>fs.trash.interval</code>是在指在这个回收周期之内，文件实际上是被移动到<code>trash</code>的这个目录下面，而不是马上把数据删除掉。等到回收周期真正到了以后，hdfs才会将数据真正删除。默认的单位是<code>分钟</code>。<br><code>fs.trash.checkpoint.interval</code>则是指垃圾回收的检查间隔，应该是小于或者等于<code>fs.trash.interval</code>。<img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-53-21-802-1626425601.png" alt="img"></p>
<h2 id="2-1-举例操作"><a href="#2-1-举例操作" class="headerlink" title="2.1 举例操作"></a>2.1 举例操作</h2><h3 id="2-1-1-一个副本"><a href="#2-1-1-一个副本" class="headerlink" title="2.1.1 一个副本"></a>2.1.1 一个副本</h3><p><strong>备注：下面操作上传文件，默认只创建一个副本</strong></p>
<blockquote>
<p>通过<code>hdfs dfs -rm</code> 命令删除HDFS集群文件后，集群空间不释放（即<code>DFS Used</code> ）</p>
</blockquote>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-06-43-814-1626422803.png" alt="image-20210716160643775"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line">hadoop fs -put /hw1/* /hw1/</span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">hadoop fs -rm /hw1/*</span><br><span class="line"><span class="comment"># 因为默认开启了垃圾回收功能，文件被放到了回收站，所以容量没有变化</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-28-42-803-1626424122.png" alt="image-20210716162443573"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清空回收站（跟windows不一样，它是打包，文件名为时间戳，时间到了依然删除）</span></span><br><span class="line">hadoop fs -expunge</span><br></pre></td></tr></table></figure>
<p>发现清空回收站后，DFS Used依然没有变化。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-24-43-602-1626423883.png" alt="image-20210716162443573"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-46-54-455-1626425214.png" alt="image-20210716164654420"></p>
<p>手动删除回收站文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动删除回收站的文件，查看空间回收</span></span><br><span class="line">hadoop fs -rm -f /user/hdfs/.Trash/210716162922</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-56-45-781-1626425805.png" alt="image-20210716165645746"></p>
<p><strong>通过命令删除文件，跳过回收站</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳过回收站，可达到上面操作删除文件释放空间同样的效果</span></span><br><span class="line">hadoop fs -rm -r -skipTrash  /hw1/*</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-多个副本"><a href="#2-1-2-多个副本" class="headerlink" title="2.1.2 多个副本"></a>2.1.2 多个副本</h3><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/16-59-55-808-1626425995.png" alt="image-20210716160643775"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传600M文件创建2份副本，占用空间是双倍的</span></span><br><span class="line">hadoop fs -D dfs.replication=<span class="number">2</span> -put <span class="regexp">/hw1/</span>* <span class="regexp">/hw1/</span></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">hadoop fs -rm <span class="regexp">/hw1/</span>*</span><br><span class="line"><span class="comment"># 因为默认开启了垃圾回收功能，文件被放到了回收站，所以容量没有变化</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-06-51-203-1626426411.png" alt="image-20210716170651159"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳过回收站删除文件,空间回收了</span></span><br><span class="line">hadoop fs -rm  -r -skipTrash /hw1/*</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-09-10-823-1626426550.png" alt="image-20210716170910796"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-09-33-265-1626426573.png" alt="image-20210716170933232"></p>
<h1 id="3-Ambari启动成功后File-View无法访问"><a href="#3-Ambari启动成功后File-View无法访问" class="headerlink" title="3 Ambari启动成功后File View无法访问"></a>3 Ambari启动成功后File View无法访问</h1><p><a href="https://blog.csdn.net/weixin_43556228/article/details/101022015" target="_blank" rel="noopener">参考链接</a></p>
<blockquote>
<p>基本类似页面无法访问均可以通过重新创建可以得到解决</p>
</blockquote>
<p>启动成功后，打开文件视图报错<strong>Issues detected</strong><br><strong>Service ‘hdfs’ check failed: Server Error</strong></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-26-39-259-1626427599.png" alt="在这里插入图片描述"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-26-50-836-1626427610.png" alt="在这里插入图片描述"></p>
<p><strong>查看日志：</strong><br><em>Caused by: org.apache.ambari.server.ClusterNotFoundException: Cluster not found, clusterId=2</em><br><em>at org.apache.ambari.server.state.cluster.ClustersImpl.getCluster(ClustersImpl.java:277)</em><br><em>at org.apache.ambari.server.view.ViewRegistry.getCluster(ViewRegistry.java:928)</em><br><em>… 101 more</em></p>
<p><img src="https://img-blog.csdnimg.cn/2019092009344592.png" alt="在这里插入图片描述"></p>
<p><strong>出现原因：</strong>在新建文件视图之后，对俩个文件视图进行了对比，怀疑可能是集群名字的问题</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-27-42-907-1626427662.png" alt="在这里插入图片描述"></p>
<p><strong>解决方案：</strong><br>新建一个文件视图</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-27-55-727-1626427675.png" alt="在这里插入图片描述"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-28-06-126-1626427686.png" alt="在这里插入图片描述"></p>
<p>发现可以成功查看</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-28-39-492-1626427719.png" alt="image-20210716172839414"></p>
<h1 id="4-Ambari-Hive-View-页面提示错误"><a href="#4-Ambari-Hive-View-页面提示错误" class="headerlink" title="4 Ambari Hive View 页面提示错误"></a>4 Ambari Hive View 页面提示错误</h1><p><strong>Service ‘userhome’ check failed: <em>File does not exist: /user/admin</em></strong></p>
<p>我访问Ambari页面的电脑默认的用户名是admin</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-45-01-941-1626428701.png" alt="image-20210716174501747"></p>
<p><strong>解决办法：</strong>自己创建一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /user/admin</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/17-46-26-985-1626428786.png" alt="image-20210716174626773"></p>
<h1 id="5-Ambari-Server-Alert-的故障排查"><a href="#5-Ambari-Server-Alert-的故障排查" class="headerlink" title="5 Ambari Server Alert 的故障排查"></a>5 Ambari Server Alert 的故障排查</h1><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>本篇文章适用于 HDI(3.6) ，内置 Ambari-2.5 以上版本中常见的异常报警：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">There are xx stale Alerts <span class="keyword">from</span> <span class="number">1</span> host（s）:</span><br></pre></td></tr></table></figure>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>如果在 Ambari Server 中突然发现了大量的 stale alerts(&gt;20)，通常来说是因为 Ambari-agent 出现了线程异常，导致无法正常将 metrics 的结果返回给 Server。</p>
<p>该问题通常表现为所有的 HDI 服务都可以正常访问，但是 Ambar 监控界面中断断续续的出现 Ambari Server Alert 并且会断断续续的出现。</p>
<h3 id="问题截图如下："><a href="#问题截图如下：" class="headerlink" title="问题截图如下："></a>问题截图如下：</h3><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">There are<span class="number"> 36 </span>stale Alerts from<span class="number"> 1 </span>host(s):</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/18-20-35-302-1626430835.png" alt="01"> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/18-20-41-074-1626430841.png" alt="02"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">        There are 27 stale alerts from 1 host(s):</span><br><span class="line">NameNode High Availability Health,</span><br><span class="line">hdp4.test</span><br><span class="line">  [Ambari Agent Distro/Conf Select Versions (1h 30m),</span><br><span class="line">  DataNode Health Summary (1h 26m),</span><br><span class="line">  DataNode Heap Usage (1h 28m),</span><br><span class="line">  DataNode Process (1h 26m),</span><br><span class="line">  DataNode Storage (1h 28m),</span><br><span class="line">  DataNode Unmounted Data Dir (1h 28m),</span><br><span class="line">  DataNode Web UI (1h 26m),</span><br><span class="line">  Flume Agent Status (1h 26m),</span><br><span class="line">  HBase RegionServer Process (1h 26m),</span><br><span class="line">  HDFS Capacity Utilization (1h 28m),</span><br><span class="line">  HDFS Pending Deletion Blocks (1h 28m),</span><br><span class="line">  HDFS Upgrade Finalized State (1h 26m),</span><br><span class="line">  Host Disk Usage (1h 26m),</span><br><span class="line">  JournalNode Web UI (1h 26m),</span><br><span class="line">  Metrics Monitor Status (1h 26m),</span><br><span class="line">  NameNode Blocks Health (1h 28m),</span><br><span class="line">  NameNode Client RPC Processing Latency (Hourly) (1h 30m),</span><br><span class="line">  NameNode Client RPC Queue Latency (Hourly) (1h 30m),</span><br><span class="line">  NameNode Directory Status (1h 26m),</span><br><span class="line">  NameNode Host CPU Utilization (1h 30m),</span><br><span class="line">  NameNode Last Checkpoint (1h 26m),</span><br><span class="line">  NameNode RPC Latency (1h 28m),</span><br><span class="line">  NameNode Web UI (1h 26m),</span><br><span class="line">  NodeManager Health (1h 26m),</span><br><span class="line">  NodeManager Web UI (1h 26m),</span><br><span class="line">  ZooKeeper Failover Controller Process (1h 26m)]</span><br></pre></td></tr></table></figure>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li><p>使用 putty 登入头节点。</p>
</li>
<li><p>使用命令确认 Ambari-agent 的 PID: Ambari-agent status 。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/18-20-50-876-1626430850.png" alt="03"></p>
</li>
<li><p>使用命令: <code>top |grep 5130</code> 确认 Ambari-agent 进程的 CPU 使用率. <code>5130</code> 需要替换成上条命令中的结果。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/18-20-59-778-1626430859.png" alt="04"></p>
</li>
<li><p>如果 CPU 使用率为 100% 则使用命令: <code>service Ambari-agent restart</code> 来重启 Ambari-agent service.</p>
</li>
<li><p>稍等几分钟，再次刷新 Ambari 界面，Alert 消失。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>http1对比http2实测</title>
    <url>/2021/07/29/http1%E5%AF%B9%E6%AF%94http2%E5%AE%9E%E6%B5%8B/</url>
    <content><![CDATA[ <a id="more"></a>
<h1 id="1-测试硬件条件"><a href="#1-测试硬件条件" class="headerlink" title="1   测试硬件条件"></a>1   测试硬件条件</h1><table>
<thead>
<tr>
<th>设备</th>
<th>CPU</th>
<th>内存</th>
<th>带宽</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>服务器</td>
<td>8核心</td>
<td>8G</td>
<td>千兆</td>
<td></td>
</tr>
<tr>
<td>客户端</td>
<td>4核心</td>
<td>16G</td>
<td>千兆</td>
</tr>
</tbody>
</table>
<h1 id="2-测试"><a href="#2-测试" class="headerlink" title="2   测试"></a>2   测试</h1><h2 id="2-1-测试场景1"><a href="#2-1-测试场景1" class="headerlink" title="2.1  测试场景1"></a>2.1  测试场景1</h2><p>无限制</p>
<h3 id="2-1-1-测试结果"><a href="#2-1-1-测试结果" class="headerlink" title="2.1.1 测试结果"></a>2.1.1 测试结果</h3><p><strong>http/1.1</strong></p>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/20210729121104.png" alt="image-20210729120947051"></p>
<p>​                               </p>
<p><strong>http/2</strong></p>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/20210729121127.png" alt="image-20210729121127492"></p>
<p>根据以上结果，因为每个请求花费的时间很小，加载速度几乎没有变化。</p>
<h2 id="2-2-测试场景2"><a href="#2-2-测试场景2" class="headerlink" title="2.2  测试场景2"></a>2.2  测试场景2</h2><p>限制请求带宽10MB/s</p>
<h3 id="2-2-1-测试结果"><a href="#2-2-1-测试结果" class="headerlink" title="2.2.1 测试结果"></a>2.2.1 测试结果</h3><p><strong>http/1.1</strong></p>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/20210729121150.png" alt="image-20210729121150173"></p>
<p><strong>http/2</strong></p>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/20210729121159.png" alt="image-20210729121159362"></p>
<p>根据以上结果，限制传输带宽为10M/s，2700次请求，http/1.1下，450秒加载完成；http/2下260秒加载完成；效率提升在40%左右。</p>
<p>综上结果得出判断，http2更适合在长请求情况下提高请求量达到并发请求数提高加载速度，对于每个请求文件较小，返回花费时间较短的请求，性能和http1差不多。</p>
<p>同时，在高并发请求的情况下，对客户端的cpu性能和内存要求较高，提高客户端的性能瓶颈，可以提高并发请求数，达到更快加载的效果。</p>
<p><strong>客户端资源占用</strong></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/20210729121831.png" alt="image-20210729121831657"></p>
<p> <img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/20210729121843.png" alt="image-20210729121843581"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/07/20210729121856.png" alt="image-20210729121856535"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>http2</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机体验</title>
    <url>/2021/07/29/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/sunylat/p/6217538.html" target="_blank" rel="noopener">虚拟机体验之 QEMU 篇 - sunylat - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/sunylat/p/6217536.html" target="_blank" rel="noopener">虚拟机体验之 KVM 篇 - sunylat - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/sunylat/p/6217537.html" target="_blank" rel="noopener">虚拟机体验之 VirtualBox 篇 —— 性能强大的经典架构 - sunylat - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/sunylat/p/6217535.html" target="_blank" rel="noopener">虚拟机体验之 Xen 篇 —— 令人脑洞大开的奇异架构 - sunylat - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch导入导出数据-Elasticdump</title>
    <url>/2022/01/12/Elasticsearch%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE-Elasticdump/</url>
    <content><![CDATA[<h2 id="1-导入-导出"><a href="#1-导入-导出" class="headerlink" title="1 导入/导出"></a>1 导入/导出</h2><a id="more"></a>
<p><strong>导出：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为导出的是mapping，所以设置type为mapping</span></span><br><span class="line">$ elasticdump --input http://192.168.56.105:9200/ --output ./test_index_mapping.json --<span class="built_in">type</span>=mapping</span><br><span class="line"><span class="comment">#因为导出的是data（真实数据）所以设置type为data</span></span><br><span class="line">$ elasticdump --input http://192.168.56.105:9200/ --output ./test_index.json --<span class="built_in">type</span>=data</span><br></pre></td></tr></table></figure>
<p><strong>导入：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">$ curl -XPUT http://192.168.56.104:9200/test_index</span><br><span class="line"><span class="comment">#因为导入的是mapping，所以设置type为mapping</span></span><br><span class="line">$ elasticdump --input ./test_index_mapping.json --output http://192.168.56.105:9200/ --<span class="built_in">type</span>=mapping</span><br><span class="line"><span class="comment">#因为导入的是data（真实数据）所以设置type为data</span></span><br><span class="line">$ elasticdump --input ./test_index.json --output http://192.168.56.105:9200/ --<span class="built_in">type</span>=data</span><br></pre></td></tr></table></figure>
<h2 id="2-使用Elasticdump镜像进行数据导入-导出"><a href="#2-使用Elasticdump镜像进行数据导入-导出" class="headerlink" title="2 使用Elasticdump镜像进行数据导入/导出"></a>2 使用Elasticdump镜像进行数据导入/导出</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 镜像下载</span></span><br><span class="line">$ docker pull taskrabbit/elasticsearch-dump</span><br><span class="line"><span class="comment"># 下面还是例子：通过镜像导出数据到本地</span></span><br><span class="line"><span class="comment"># 创建一个文件夹用于保存导出数据</span></span><br><span class="line">$ mkdir -p /root/data</span><br></pre></td></tr></table></figure>
<p><strong>导出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面需要对路径进行映射并执行命令（导出mapping）</span></span><br><span class="line">$ docker run --rm -ti -v /data:/tmp taskrabbit/elasticsearch-dump \</span><br><span class="line">  --input=http://production.es.com:9200/my_index \</span><br><span class="line">  --output=/tmp/my_index_mapping.json \</span><br><span class="line">  --<span class="built_in">type</span>=mapping</span><br><span class="line"><span class="comment"># 导出（data）</span></span><br><span class="line">$ docker run --rm -ti -v /root/data:/tmp taskrabbit/elasticsearch-dump \</span><br><span class="line">  --input=http://192.168.56.104:9200/test_index \</span><br><span class="line">  --output=/tmp/elasticdump_export.json \</span><br><span class="line">  --<span class="built_in">type</span>=data</span><br></pre></td></tr></table></figure>
<p><strong>导入</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">$ curl -XPUT http://192.168.56.104:9200/test_index</span><br><span class="line"><span class="comment"># 导入mapping</span></span><br><span class="line">$ docker run --rm -ti -v /data:/tmp taskrabbit/elasticsearch-dump \</span><br><span class="line">  --input=/tmp/my_index_mapping.json \</span><br><span class="line">  --output=http://192.168.56.104:9200/my_index \</span><br><span class="line">  --<span class="built_in">type</span>=mapping</span><br><span class="line"><span class="comment"># 导入（data）</span></span><br><span class="line">$ docker run --rm -ti -v /root/data:/tmp taskrabbit/elasticsearch-dump \</span><br><span class="line">  --input=/tmp/elasticdump_export.json \</span><br><span class="line">  --output=http://192.168.56.104:9200/test_index \</span><br><span class="line">  --<span class="built_in">type</span>=data</span><br></pre></td></tr></table></figure>
<h2 id="3-以下内容为ES-gt-ES的数据迁移例子"><a href="#3-以下内容为ES-gt-ES的数据迁移例子" class="headerlink" title="3 以下内容为ES -&gt; ES的数据迁移例子"></a>3 以下内容为ES -&gt; ES的数据迁移例子</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --rm -ti taskrabbit/elasticsearch-dump \</span><br><span class="line">  --input=http://production.es.com:9200/my_index \  </span><br><span class="line">  --output=http://staging.es.com:9200/my_index \  </span><br><span class="line">  --<span class="built_in">type</span>=mapping </span><br><span class="line">  </span><br><span class="line">$ docker run --rm -ti taskrabbit/elasticsearch-dump \  </span><br><span class="line">  --input=http://production.es.com:9200/my_index \  </span><br><span class="line">  --output=http://staging.es.com:9200/my_index \  </span><br><span class="line">  --<span class="built_in">type</span>=data</span><br></pre></td></tr></table></figure>
<!--注：上面的这些导入导出都是最基本的使用，当然还有很多高级用法，参考下面所列出来的命令进行尝试或者直接访问Github官网，查看更加详细的说明，这里只作为记录！-->
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
        <tag>elasticdump</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql+repmgr高可用</title>
    <url>/2021/08/17/postgresql-repmgr%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-参考文档"><a href="#1-参考文档" class="headerlink" title="1 参考文档"></a>1 参考文档</h1><a id="more"></a>
<p>repmgr 官方文档：<a href="https://repmgr.org/docs/current/index.html" target="_blank" rel="noopener">repmgr 5.3dev Documentation</a></p>
<p>其他文档：<a href="https://blog.csdn.net/qq_38461429/article/details/107487092" target="_blank" rel="noopener">Configure PostgreSQL Replication With Repmgr_qq_38461429的博客-CSDN博客</a></p>
<h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2 环境"></a>2 环境</h1><table>
<thead>
<tr>
<th>主机名</th>
<th>IP</th>
<th>OS</th>
<th>角色</th>
<th>软件包</th>
</tr>
</thead>
<tbody>
<tr>
<td>pg1</td>
<td>192.168.44.131</td>
<td>Centos 7</td>
<td>primary</td>
<td>postgresql 11  and repmgr</td>
</tr>
<tr>
<td>pg2</td>
<td>192.168.44.131</td>
<td>Centos 7</td>
<td>standby</td>
<td>postgresql 11  and repmgr</td>
</tr>
<tr>
<td>pg3</td>
<td>192.168.44.135</td>
<td>Centos 7</td>
<td>standby</td>
<td>postgresql 11  and repmgr</td>
</tr>
</tbody>
</table>
<div class="note default"><p><strong>备注</strong><br>以下安装方式均采用在线安装方式。</p></div>
<!--more-->
<h1 id="3-修改hosts"><a href="#3-修改hosts" class="headerlink" title="3 修改hosts"></a>3 修改hosts</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.44.131 pg1</span><br><span class="line">192.168.44.132 pg2</span><br><span class="line">192.168.44.135 pg3</span><br></pre></td></tr></table></figure>
<h1 id="4-配置SSH免密登陆"><a href="#4-配置SSH免密登陆" class="headerlink" title="4 配置SSH免密登陆"></a>4 配置SSH免密登陆</h1><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="attr"># 生产密钥</span></span><br><span class="line"><span class="attr">ssh-keygen -t rsa</span></span><br><span class="line"><span class="attr"># 写入文件</span></span><br><span class="line"><span class="attr">cat id_rsa.pub &gt; authorized_keys</span></span><br><span class="line"><span class="attr"># 赋权 600</span></span><br><span class="line">chmod <span class="number">+600</span> authorized_keys</span><br><span class="line"><span class="attr"># 拷贝 pg2</span>\p<span class="name">g3</span> 密钥到一个authorized_keys文件</span><br><span class="line">ssh p<span class="name">g2</span> cat /root/.ssh/id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">ssh p<span class="name">g3</span> cat /root/.ssh/id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"><span class="attr"># 拷贝authorized_keys 到pg2</span>\p<span class="name">g3</span></span><br><span class="line">scp authorized_keys p<span class="name">g2</span>:/root/.ssh/</span><br><span class="line">scp authorized_keys p<span class="name">g3</span>:/root/.ssh/</span><br><span class="line"><span class="attr"># ssh pg1</span>\p<span class="name">g2</span>\p<span class="name">g3</span> 测试是否生效</span><br></pre></td></tr></table></figure>
<div class="note info"><p><strong>注意</strong><br>后面postgresql安装后，也需要配置postgres用户的SSH免密登陆。</p></div>
<h1 id="4-所有节点安装PG软件和postgis插件"><a href="#4-所有节点安装PG软件和postgis插件" class="headerlink" title="4 所有节点安装PG软件和postgis插件"></a>4 所有节点安装PG软件和postgis插件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install the repository RPM:</span></span><br><span class="line">sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install PostgreSQL:</span></span><br><span class="line">sudo yum install -y postgresql11-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Postgis:</span></span><br><span class="line">sudo yum install -y postgis25_11</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install rsync</span></span><br><span class="line">sudo yum install -y rsync</span><br></pre></td></tr></table></figure>
<blockquote>
<p>‎如果您希望‎‎repmgr‎‎复制位于 PostgreSQL 数据目录之外的配置文件和/或测试功能，您还需要在两个服务器之间建立无密码的 SSH 连接，并且应安装‎‎rsync。</p>
</blockquote>
<h1 id="5-所有节点安装repmgr"><a href="#5-所有节点安装repmgr" class="headerlink" title="5 所有节点安装repmgr"></a>5 所有节点安装repmgr</h1><p><a href="https://repmgr.org/docs/current/installation-packages.html#INSTALLATION-PACKAGES-REDHAT" target="_blank" rel="noopener">官方教程</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装源</span></span><br><span class="line">curl https://dl.2ndquadrant.com/default/release/get/11/rpm | sudo bash</span><br><span class="line"><span class="comment"># 检查源</span></span><br><span class="line">sudo yum repolist</span><br><span class="line"><span class="comment"># 安装repmgr11</span></span><br><span class="line">sudo yum install repmgr11</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加repmgr命令到环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">PATH=/usr/pgsql-11/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<h1 id="6-primary节点配置"><a href="#6-primary节点配置" class="headerlink" title="6 primary节点配置"></a>6 primary节点配置</h1><p><strong>初始化数据库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Optionally initialize the database and enable automatic start:</span></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">sudo /usr/pgsql-11/bin/postgresql-11-setup initdb</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postgresql-11</span><br><span class="line">sudo systemctl start postgresql-11</span><br></pre></td></tr></table></figure>
<p><strong>修改配置<code>postgresql.conf</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在文件末尾添加如下配置</span></span><br><span class="line"><span class="comment"># repmgr 配置</span></span><br><span class="line"><span class="comment"># walsender 进程的最大数量</span></span><br><span class="line">max_wal_senders = 10</span><br><span class="line"><span class="comment"># 复制槽的最大数量</span></span><br><span class="line">max_replication_slots = 10</span><br><span class="line">wal_level = <span class="string">'hot_standby'</span></span><br><span class="line">hot_standby = on</span><br><span class="line"><span class="comment"># Log配置</span></span><br><span class="line">archive_mode = on</span><br><span class="line">archive_command = <span class="string">'/bin/true'</span></span><br><span class="line">wal_log_hints = on</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一般只需要在primary节点修改配置即可，我为了方便主从切换，其他从节点可能升级为主节点，就把从节点的配置同样进行了修改。</p>
</blockquote>
<p><strong>修改配置<code>pg_hba.conf</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span>   replication   repmgr                              trust</span><br><span class="line">host    replication   repmgr      127.0.0.1/32            trust</span><br><span class="line">host    replication   repmgr      192.168.44.0/24          trust</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span>   repmgr        repmgr                              trust</span><br><span class="line">host    repmgr        repmgr      127.0.0.1/32            trust</span><br><span class="line">host    repmgr        repmgr      192.168.44.0/24          trust</span><br></pre></td></tr></table></figure>
<p><strong>创建repmgr用户和repmgr数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 切换到postgres用户执行，root用户执行报错</span><br><span class="line">bash-4.2$ createuser <span class="comment">--superuser repmgr</span></span><br><span class="line">bash-4.2$ createdb <span class="comment">--owner=repmgr repmgr</span></span><br><span class="line">bash-4.2$ psql -c ”<span class="keyword">ALTER</span> <span class="keyword">USER</span> repmgr <span class="keyword">SET</span> search_path <span class="keyword">TO</span> repmgr, <span class="string">"$user"</span>, <span class="keyword">public</span>;“</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 登陆数据库后执行相关创建</span><br><span class="line"># psql</span><br><span class="line">postgres# create user repmgr superuser login;</span><br><span class="line"></span><br><span class="line">postgres# alter user  repmgr with password 'repmgr';</span><br><span class="line"></span><br><span class="line">postgres# create database repmgr;</span><br><span class="line"></span><br><span class="line">postgres# alter database repmgr owner to repmgr;</span><br><span class="line"></span><br><span class="line">postgres# ALTER USER repmgr SET search_path TO repmgr, "$user", public;</span><br></pre></td></tr></table></figure>
<p>重启数据库</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">systemctl restart postgresql<span class="number">-11</span></span><br></pre></td></tr></table></figure>
<h1 id="7-standby测试连接primary节点数据库"><a href="#7-standby测试连接primary节点数据库" class="headerlink" title="7 standby测试连接primary节点数据库"></a>7 standby测试连接primary节点数据库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@pg2 ~]<span class="comment">#  psql 'host=pg1 user=repmgr dbname=repmgr connect_timeout=2'</span></span><br><span class="line">psql (11.12)</span><br><span class="line">输入 <span class="string">"help"</span> 来获取帮助信息.</span><br><span class="line"></span><br><span class="line">repmgr=<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<div class="note warning"><p><strong>注意</strong><br>standby节点不要初始化数据库，不用启动数据库，保证<code>/var/lib/pgsql/11/data/</code>目录为空</p></div>
<h1 id="8-注册Primary节点"><a href="#8-注册Primary节点" class="headerlink" title="8 注册Primary节点"></a>8 注册Primary节点</h1><p><strong>修改配置<code>repmgr.conf</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@pg1 ~]<span class="comment">#  vim /etc/rempgr/11/rempgr.conf</span></span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line">node_id=1</span><br><span class="line">node_name=<span class="string">'pg1'</span></span><br><span class="line">conninfo=<span class="string">'host=pg1 user=repmgr dbname=repmgr connect_timeout=2'</span></span><br><span class="line">data_directory=<span class="string">'/var/lib/pgsql/11/data'</span></span><br><span class="line"></span><br><span class="line">log_level=on</span><br><span class="line">log_facility=STDERR</span><br><span class="line">log_file=<span class="string">'/var/log/repmgr/repmgr.log'</span></span><br><span class="line">pg_bindir=<span class="string">'/usr/pgsql-11/bin'</span></span><br></pre></td></tr></table></figure>
<p><strong>注册Primary节点</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@pg1 ~]<span class="comment"># su postgres</span></span><br><span class="line">bash-4.2$</span><br><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf primary register</span><br><span class="line">INFO: connecting to primary database...</span><br><span class="line">NOTICE: attempting to install extension <span class="string">"repmgr"</span></span><br><span class="line">NOTICE: <span class="string">"repmgr"</span> extension successfully installed</span><br><span class="line">NOTICE: primary node record (ID: 1) registered</span><br></pre></td></tr></table></figure>
<p><strong>验证集群状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf cluster show</span><br><span class="line"> ID | Name | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+-----------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | primary | * running |          | default  | 100      | 1        | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br></pre></td></tr></table></figure>
<p><strong>查看repmgr数据表中的信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ psql -U repmgr -d repmgr -h pg1</span><br><span class="line">psql (11.12)</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">repmgr=<span class="comment"># select * from repmgr.nodes;</span></span><br><span class="line"> node_id | upstream_node_id | active | node_name |  <span class="built_in">type</span>   | location | priority |                       conninfo                       | repluser | slot_name |        config_file</span><br><span class="line">---------+------------------+--------+-----------+---------+----------+----------+------------------------------------------------------+----------+-----------+----------------------------</span><br><span class="line">       1 |                  | t      | pg1       | primary | default  |      100 | host=pg1 user=repmgr dbname=repmgr connect_timeout=2 | repmgr   |           | /etc/repmgr/11/repmgr.conf</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure>
<h1 id="9-standby节点同步主节点数据"><a href="#9-standby节点同步主节点数据" class="headerlink" title="9 standby节点同步主节点数据"></a>9 standby节点同步主节点数据</h1><p><strong>配置repmbr.conf</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_id=2</span><br><span class="line">node_name=<span class="string">'pg2'</span></span><br><span class="line">conninfo=<span class="string">'host=pg2 user=repmgr dbname=repmgr connect_timeout=2'</span></span><br><span class="line">data_directory=<span class="string">'/var/lib/pgsql/11/data'</span></span><br></pre></td></tr></table></figure>
<p><strong>‎使用<code>--dry-run</code>选项检查可克隆待机状态‎</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -h pg1 -U repmgr -d repmgr -f /etc/repmgr/11/repmgr.conf standby <span class="built_in">clone</span> --dry-run</span><br><span class="line">NOTICE: destination directory <span class="string">"/var/lib/pgsql/11/data"</span> provided</span><br><span class="line">INFO: connecting to <span class="built_in">source</span> node</span><br><span class="line">DETAIL: connection string is: host=pg1 user=repmgr dbname=repmgr</span><br><span class="line">DETAIL: current installation size is 31 MB</span><br><span class="line">INFO: <span class="string">"repmgr"</span> extension is installed <span class="keyword">in</span> database <span class="string">"repmgr"</span></span><br><span class="line">INFO: replication slot usage not requested;  no replication slot will be <span class="built_in">set</span> up <span class="keyword">for</span> this standby</span><br><span class="line">INFO: parameter <span class="string">"max_wal_senders"</span> <span class="built_in">set</span> to 10</span><br><span class="line">NOTICE: checking <span class="keyword">for</span> available walsenders on the <span class="built_in">source</span> node (2 required)</span><br><span class="line">INFO: sufficient walsenders available on the <span class="built_in">source</span> node</span><br><span class="line">DETAIL: 2 required, 10 available</span><br><span class="line">NOTICE: checking replication connections can be made to the <span class="built_in">source</span> server (2 required)</span><br><span class="line">INFO: required number of replication connections could be made to the <span class="built_in">source</span> server</span><br><span class="line">DETAIL: 2 replication connections required</span><br><span class="line">WARNING: data checksums are not enabled and <span class="string">"wal_log_hints"</span> is <span class="string">"off"</span></span><br><span class="line">DETAIL: pg_rewind requires <span class="string">"wal_log_hints"</span> to be enabled</span><br><span class="line">NOTICE: standby will attach to upstream node 1</span><br><span class="line">HINT: consider using the -c/--fast-checkpoint option</span><br><span class="line">INFO: all prerequisites <span class="keyword">for</span> <span class="string">"standby clone"</span> are met</span><br></pre></td></tr></table></figure>
<p><strong>‎如果没有报告任何问题，则可以同步到备用节点‎</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -h pg1 -U repmgr -d repmgr -f /etc/repmgr/11/repmgr.conf standby <span class="built_in">clone</span></span><br><span class="line">NOTICE: destination directory <span class="string">"/var/lib/pgsql/11/data"</span> provided</span><br><span class="line">INFO: connecting to <span class="built_in">source</span> node</span><br><span class="line">DETAIL: connection string is: host=pg1 user=repmgr dbname=repmgr</span><br><span class="line">DETAIL: current installation size is 31 MB</span><br><span class="line">INFO: replication slot usage not requested;  no replication slot will be <span class="built_in">set</span> up <span class="keyword">for</span> this standby</span><br><span class="line">NOTICE: checking <span class="keyword">for</span> available walsenders on the <span class="built_in">source</span> node (2 required)</span><br><span class="line">NOTICE: checking replication connections can be made to the <span class="built_in">source</span> server (2 required)</span><br><span class="line">WARNING: data checksums are not enabled and <span class="string">"wal_log_hints"</span> is <span class="string">"off"</span></span><br><span class="line">DETAIL: pg_rewind requires <span class="string">"wal_log_hints"</span> to be enabled</span><br><span class="line">INFO: checking and correcting permissions on existing directory <span class="string">"/var/lib/pgsql/11/data"</span></span><br><span class="line">NOTICE: starting backup (using pg_basebackup)...</span><br><span class="line">HINT: this may take some time; consider using the -c/--fast-checkpoint option</span><br><span class="line">INFO: executing:</span><br><span class="line">  pg_basebackup -l <span class="string">"repmgr base backup"</span>  -D /var/lib/pgsql/11/data -h pg1 -p 5432 -U repmgr -X stream</span><br><span class="line">NOTICE: standby <span class="built_in">clone</span> (using pg_basebackup) complete</span><br><span class="line">NOTICE: you can now start your PostgreSQL server</span><br><span class="line">HINT: <span class="keyword">for</span> example: pg_ctl -D /var/lib/pgsql/11/data start</span><br><span class="line">HINT: after starting the server, you need to register this standby with <span class="string">"repmgr standby register"</span></span><br></pre></td></tr></table></figure>
<p><strong>连接到主节点数据库查询</strong></p>
<p>这表明先前克隆备用( <code>pg2</code>显示的字段 <code>application_name</code>)连接到主要的IP地址 <code>192.168.44.132</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@pg1 ~]<span class="comment"># su - postgres -c "psql -U repmgr -d repmgr -h pg1"</span></span><br><span class="line">psql (11.12)</span><br><span class="line">输入 <span class="string">"help"</span> 来获取帮助信息.</span><br><span class="line"></span><br><span class="line">repmgr=<span class="comment"># SELECT * FROM pg_stat_replication;</span></span><br><span class="line"> pid  | usesysid | usename | application_name |  client_addr   | client_hostname | client_port |         backend_start         | backend_xmin |   state   |  sent_lsn  | write_lsn  | flush_lsn  | replay_lsn | write_lag | flush_lag | r</span><br><span class="line">eplay_lag | sync_priority | sync_state</span><br><span class="line">------+----------+---------+------------------+----------------+-----------------+-------------+-------------------------------+--------------+-----------+------------+------------+------------+------------+-----------+-----------+--</span><br><span class="line">----------+---------------+------------</span><br><span class="line"> 1122 |    16384 | repmgr  | pg2              | 192.168.44.132 |                 |       43672 | 2021-08-11 14:20:09.038097+08 |              | streaming | 0/180001B0 | 0/180001B0 | 0/180001B0 | 0/180001B0 |           |           |</span><br><span class="line">          |             0 | async</span><br><span class="line">(1 行记录)</span><br></pre></td></tr></table></figure>
<p><strong>连接从节点数据库查询</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repmgr=<span class="comment"># SELECT * FROM pg_stat_wal_receiver;</span></span><br><span class="line">  pid  |  status   | receive_start_lsn | receive_start_tli | received_lsn | received_tli |      last_msg_send_time       |     last_msg_receipt_time     | latest_end_lsn |       latest_end_time        | slot_name | sender_host | send</span><br><span class="line">er_port |                                                                                                                  conninfo</span><br><span class="line"></span><br><span class="line">-------+-----------+-------------------+-------------------+--------------+--------------+-------------------------------+-------------------------------+----------------+------------------------------+-----------+-------------+-----</span><br><span class="line">--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">-------------</span><br><span class="line"> 65103 | streaming | 0/18000000        |                 1 | 0/180001B0   |            1 | 2021-08-11 16:58:06.901487+08 | 2021-08-11 16:58:06.900314+08 | 0/180001B0     | 2021-08-11 14:25:17.92164+08 |           | pg1         |</span><br><span class="line">   5432 | user=repmgr passfile=/var/lib/pgsql/.pgpass connect_timeout=2 dbname=replication host=pg1 port=5432 application_name=pg2 fallback_application_name=walreceiver sslmode=prefer sslcompression=0 krbsrvname=postgres target_sessi</span><br><span class="line">on_attrs=any</span><br><span class="line">(1 行记录)</span><br></pre></td></tr></table></figure>
<h1 id="10-注册standby"><a href="#10-注册standby" class="headerlink" title="10 注册standby"></a>10 注册standby</h1><p><strong>注册standby节点到集群</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf standby register</span><br><span class="line">INFO: connecting to <span class="built_in">local</span> node <span class="string">"pg2"</span> (ID: 2)</span><br><span class="line">INFO: connecting to primary database</span><br><span class="line">WARNING: --upstream-node-id not supplied, assuming upstream node is primary (node ID 1)</span><br><span class="line">INFO: standby registration complete</span><br><span class="line">NOTICE: standby node <span class="string">"pg2"</span> (ID: 2) successfully registered</span><br></pre></td></tr></table></figure>
<p><strong>检查集群状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf cluster show</span><br><span class="line"> ID | Name | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+-----------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | primary | * running |          | default  | 100      | 1        | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 2  | pg2  | standby |   running | pg1      | default  | 100      | 1        | host=pg2 user=repmgr dbname=repmgr connect_timeout=2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：standby节点默认为<code>只读模式</code>，切换为主节点后才能够写入数据。</p>
</blockquote>
<p>主从集群配置完成，暂时只能手动切换</p>
<p>修改主节点的数据库数据，即可实时同步到从节点了。</p>
<h1 id="11-主从切换-只适用于主从双节点"><a href="#11-主从切换-只适用于主从双节点" class="headerlink" title="11 主从切换(只适用于主从双节点)"></a>11 主从切换(只适用于主从双节点)</h1><div class="note info"><p><strong>备注</strong><br>主从节点切换，只适用于主从双节点集群；3个以上节点集群执行切换命令后原主节点会自动宕掉，需要手动对其进行故障恢复。参考第 12章节故障转移。</p></div>
<h2 id="11-1-场景"><a href="#11-1-场景" class="headerlink" title="11.1 场景"></a>11.1 场景</h2><p>各节点正常运行情况下，手动切换主从节点。</p>
<p>手动switchover，切换主从节点，提升从节点为主，主节点自动变为从节点</p>
<h2 id="11-2-操作"><a href="#11-2-操作" class="headerlink" title="11.2 操作"></a>11.2 操作</h2><p><strong>查看集群状态</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf cluster show</span><br><span class="line"> ID | Name | Role    | Status    | Upstream | Location | Priority | Timeline |<span class="built_in"> Connection </span>string</span><br><span class="line">----+------+---------+-----------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | standby |   running | pg2      |<span class="built_in"> default </span> | 100      | 4        | <span class="attribute">host</span>=pg1 <span class="attribute">user</span>=repmgr <span class="attribute">dbname</span>=repmgr <span class="attribute">connect_timeout</span>=2</span><br><span class="line"> 2  | pg2  | primary | * running |          |<span class="built_in"> default </span> | 100      | 4        | <span class="attribute">host</span>=pg2 <span class="attribute">user</span>=repmgr <span class="attribute">dbname</span>=repmgr <span class="attribute">connect_timeout</span>=2</span><br></pre></td></tr></table></figure>
<p><strong>在standby节点执行命令，升级为primary节点</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># repmgr standby switchover</span></span><br><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf standby switchover</span><br><span class="line"><span class="comment"># 下为执行过程</span></span><br><span class="line">NOTICE: executing switchover on node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line">NOTICE: <span class="built_in">local</span> node <span class="string">"pg1"</span> (ID: 1) will be promoted to primary; current primary <span class="string">"pg2"</span> (ID: 2) will be demoted to standby</span><br><span class="line">NOTICE: stopping current primary node <span class="string">"pg2"</span> (ID: 2)</span><br><span class="line">NOTICE: issuing CHECKPOINT on node <span class="string">"pg2"</span> (ID: 2)</span><br><span class="line">DETAIL: executing server <span class="built_in">command</span> <span class="string">"/usr/pgsql-11/bin/pg_ctl  -D '/var/lib/pgsql/11/data' -W -m fast stop"</span></span><br><span class="line">INFO: checking <span class="keyword">for</span> primary shutdown; 1 of 60 attempts (<span class="string">"shutdown_check_timeout"</span>)</span><br><span class="line">INFO: checking <span class="keyword">for</span> primary shutdown; 2 of 60 attempts (<span class="string">"shutdown_check_timeout"</span>)</span><br><span class="line">NOTICE: current primary has been cleanly shut down at location 0/23000028</span><br><span class="line">NOTICE: promoting standby to primary</span><br><span class="line">DETAIL: promoting server <span class="string">"pg1"</span> (ID: 1) using <span class="string">"/usr/pgsql-11/bin/pg_ctl  -w -D '/var/lib/pgsql/11/data' promote"</span></span><br><span class="line">等待服务器进程加载 .... 完成</span><br><span class="line">服务器加载完毕</span><br><span class="line">NOTICE: waiting up to 60 seconds (parameter <span class="string">"promote_check_timeout"</span>) <span class="keyword">for</span> promotion to complete</span><br><span class="line">NOTICE: STANDBY PROMOTE successful</span><br><span class="line">DETAIL: server <span class="string">"pg1"</span> (ID: 1) was successfully promoted to primary</span><br><span class="line">INFO: <span class="built_in">local</span> node 2 can attach to rejoin target node 1</span><br><span class="line">DETAIL: <span class="built_in">local</span> node<span class="string">'s recovery point: 0/23000028; rejoin target node'</span>s fork point: 0/23000098</span><br><span class="line">NOTICE: setting node 2<span class="string">'s upstream to node 1</span></span><br><span class="line"><span class="string">WARNING: unable to ping "host=pg2 user=repmgr dbname=repmgr connect_timeout=2"</span></span><br><span class="line"><span class="string">DETAIL: PQping() returned "PQPING_NO_RESPONSE"</span></span><br><span class="line"><span class="string">NOTICE: starting server using "/usr/pgsql-11/bin/pg_ctl  -w -D '</span>/var/lib/pgsql/11/data<span class="string">' start"</span></span><br><span class="line"><span class="string">NOTICE: NODE REJOIN successful</span></span><br><span class="line"><span class="string">DETAIL: node 2 is now attached to node 1</span></span><br><span class="line"><span class="string">NOTICE: node  "pg1" (ID: 1) promoted to primary, node "pg2" (ID: 2) demoted to standby</span></span><br><span class="line"><span class="string">NOTICE: switchover was successful</span></span><br><span class="line"><span class="string">DETAIL: node "pg1" is now primary and node "pg2" is attached as standby</span></span><br><span class="line"><span class="string">NOTICE: STANDBY SWITCHOVER has completed successfully</span></span><br></pre></td></tr></table></figure>
<p><strong>查看集群状态</strong></p>
<p>可以看到standby节点已升级为primary节点，原primary节点自动降级为standby节点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf cluster show</span><br><span class="line"> ID | Name | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+-----------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | primary | * running |          | default  | 100      | 5        | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 2  | pg2  | standby |   running | pg1      | default  | 100      | 4        | host=pg2 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line">bash-4.2$</span><br></pre></td></tr></table></figure>
<p><strong>其他standby节点指向新的primary节点</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf standby follow</span><br></pre></td></tr></table></figure>
<h1 id="12-故障转移，手动切换"><a href="#12-故障转移，手动切换" class="headerlink" title="12 故障转移，手动切换"></a>12 故障转移，手动切换</h1><h2 id="12-1-场景"><a href="#12-1-场景" class="headerlink" title="12.1 场景"></a>12.1 场景</h2><p>主节点宕机，升级从节点为primary，恢复原primary节点，并降级为standby.</p>
<h2 id="12-2-操作"><a href="#12-2-操作" class="headerlink" title="12.2 操作"></a>12.2 操作</h2><p><strong>查看集群状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr cluster show</span><br><span class="line"> ID | Name | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+-----------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | primary | * running |          | default  | 100      | 5        | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 2  | pg2  | standby |   running | pg1      | default  | 100      | 5        | host=pg2 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line">bash-4.2$</span><br></pre></td></tr></table></figure>
<p><strong>关闭主节点，模拟宕机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop postgresql-11.service</span><br></pre></td></tr></table></figure>
<p><strong>查看集群状态</strong></p>
<p>pg1 已经掉线</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr cluster show</span><br><span class="line"> ID | Name | Role    | Status        | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+---------------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | primary | ? unreachable | ?        | default  | 100      |          | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 2  | pg2  | standby |   running     | ? pg1    | default  | 100      | 5        | host=pg2 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"></span><br><span class="line">WARNING: following issues were detected</span><br><span class="line">  - unable to connect to node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line">  - node <span class="string">"pg1"</span> (ID: 1) is registered as an active primary but is unreachable</span><br><span class="line">  - unable to connect to node <span class="string">"pg2"</span> (ID: 2)<span class="string">'s upstream node "pg1" (ID: 1)</span></span><br><span class="line"><span class="string">  - unable to determine if node "pg2" (ID: 2) is attached to its upstream node "pg1" (ID: 1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HINT: execute with --verbose option to see connection error messages</span></span><br><span class="line"><span class="string">bash-4.2$</span></span><br></pre></td></tr></table></figure>
<p><strong>手动提升 pg2 节点为 primary节点</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf standby promote</span><br><span class="line">NOTICE: promoting standby to primary</span><br><span class="line">DETAIL: promoting server <span class="string">"pg2"</span> (ID: 2) using <span class="string">"/usr/pgsql-11/bin/pg_ctl  -w -D '/var/lib/pgsql/11/data' promote"</span></span><br><span class="line">could not change directory to <span class="string">"/root"</span>: 权限不够</span><br><span class="line">waiting <span class="keyword">for</span> server to promote.... <span class="keyword">done</span></span><br><span class="line">server promoted</span><br><span class="line">NOTICE: waiting up to 60 seconds (parameter <span class="string">"promote_check_timeout"</span>) <span class="keyword">for</span> promotion to complete</span><br><span class="line">NOTICE: STANDBY PROMOTE successful</span><br><span class="line">DETAIL: server <span class="string">"pg2"</span> (ID: 2) was successfully promoted to primary</span><br><span class="line">bash-4.2$</span><br></pre></td></tr></table></figure>
<p><strong>查看集群状态</strong></p>
<p>pg2 已经为primary节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr cluster show</span><br><span class="line"> ID | Name | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+-----------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | primary | - failed  | ?        | default  | 100      |          | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 2  | pg2  | primary | * running |          | default  | 100      | 6        | host=pg2 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"></span><br><span class="line">WARNING: following issues were detected</span><br><span class="line">  - unable to connect to node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line"></span><br><span class="line">HINT: execute with --verbose option to see connection error messages</span><br><span class="line">bash-4.2$</span><br></pre></td></tr></table></figure>
<p><strong>集群其他standby节点重新指向新primary</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">bash-<span class="number">4.2</span>$ repmgr -f <span class="regexp">/etc/</span>repmgr<span class="regexp">/11/</span>repmgr.conf standby follow</span><br></pre></td></tr></table></figure>
<p><strong>将宕机primary节点，降级为standby节点</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清空宕机节点数据目录</span></span><br><span class="line">bash-4.2$ rm -rf /var/lib/pgsql/11/data/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新从新primary节点克隆备份服务器</span></span><br><span class="line">bash-4.2$ repmgr -h pg2 -U repmgr -d repmgr -f /etc/repmgr/11/repmgr.conf standby <span class="built_in">clone</span></span><br><span class="line">NOTICE: destination directory <span class="string">"/var/lib/pgsql/11/data"</span> provided</span><br><span class="line">INFO: connecting to <span class="built_in">source</span> node</span><br><span class="line">DETAIL: connection string is: host=pg2 user=repmgr dbname=repmgr</span><br><span class="line">DETAIL: current installation size is 75 MB</span><br><span class="line">INFO: replication slot usage not requested;  no replication slot will be <span class="built_in">set</span> up <span class="keyword">for</span> this standby</span><br><span class="line">NOTICE: checking <span class="keyword">for</span> available walsenders on the <span class="built_in">source</span> node (2 required)</span><br><span class="line">NOTICE: checking replication connections can be made to the <span class="built_in">source</span> server (2 required)</span><br><span class="line">INFO: checking and correcting permissions on existing directory <span class="string">"/var/lib/pgsql/11/data"</span></span><br><span class="line">NOTICE: starting backup (using pg_basebackup)...</span><br><span class="line">HINT: this may take some time; consider using the -c/--fast-checkpoint option</span><br><span class="line">INFO: executing:</span><br><span class="line">  /usr/pgsql-11/bin/pg_basebackup -l <span class="string">"repmgr base backup"</span>  -D /var/lib/pgsql/11/data -h pg2 -p 5432 -U repmgr -X stream</span><br><span class="line">NOTICE: standby <span class="built_in">clone</span> (using pg_basebackup) complete</span><br><span class="line">NOTICE: you can now start your PostgreSQL server</span><br><span class="line">HINT: <span class="keyword">for</span> example: pg_ctl -D /var/lib/pgsql/11/data start</span><br><span class="line">HINT: after starting the server, you need to re-register this standby with <span class="string">"repmgr standby register --force"</span> to update the existing node record</span><br><span class="line">bash-4.2$ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动数据库</span></span><br><span class="line">systemctl start postgresql-11.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册standby 节点</span></span><br><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf standby register --force</span><br><span class="line">INFO: connecting to <span class="built_in">local</span> node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line">INFO: connecting to primary database</span><br><span class="line">INFO: standby registration complete</span><br><span class="line">NOTICE: standby node <span class="string">"pg1"</span> (ID: 1) successfully registered</span><br><span class="line">bash-4.2$</span><br></pre></td></tr></table></figure>
<p><strong>查看集群状态</strong></p>
<p>原宕机节点已经降级为standby节点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr cluster show</span><br><span class="line"> ID | Name | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+-----------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | standby |   running | pg2      | default  | 100      | 6        | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 2  | pg2  | primary | * running |          | default  | 100      | 6        | host=pg2 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line">bash-4.2$</span><br></pre></td></tr></table></figure>
<h2 id="12-3-补充"><a href="#12-3-补充" class="headerlink" title="12.3 补充"></a>12.3 补充</h2><p><a href="https://repmgr.org/docs/current/repmgr-command-reference.html" target="_blank" rel="noopener">官方文档</a></p>
<p><strong>主节点注销</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repmgr primary unregister -f /etc/repmgr/11/repmgr.conf --node-id=3</span><br></pre></td></tr></table></figure>
<p><strong>从节点注销</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repmgr standby unregister -f /etc/repmgr/11/repmgr.conf --node-id=3</span><br></pre></td></tr></table></figure>
<h1 id="13-故障自动转移"><a href="#13-故障自动转移" class="headerlink" title="13 故障自动转移"></a>13 故障自动转移</h1><h2 id="13-1-编辑sudoers文件"><a href="#13-1-编辑sudoers文件" class="headerlink" title="13.1 编辑sudoers文件"></a>13.1 编辑sudoers文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgres用户，所有sudo命令都不用密码</span></span><br><span class="line">postgres   ALL=(ALL) NOPASSWD: ALL</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgres用户，特定sudo命令不需要密码</span></span><br><span class="line">Defaults:postgres !requiretty</span><br><span class="line">postgres ALL = NOPASSWD: /usr/bin/systemctl stop postgresql-11.service, /usr/bin/systemctl start postgresql-11.service, /usr/bin/systemctl restart postgresql-11.service, /usr/bin/systemctl reload postgresql-11.service, /usr/bin/systemctl start repmgr11.service, /usr/bin/systemctl stop repmgr11.service</span><br></pre></td></tr></table></figure>
<div class="note danger"><p><strong>备注</strong>:</p>
<p>修改sudoers文件是必须的，否则standby节点在自动切换接入新primary节点时候，会报错重启postgres命令失败。</p>
<p>原因：postgres用户采用sudo 命令执行postgresql数据重启操作的时候需要密码验证，没有权限。</p></div>
<h2 id="13-2-配置postgresql-conf（所有节点）"><a href="#13-2-配置postgresql-conf（所有节点）" class="headerlink" title="13.2  配置postgresql.conf（所有节点）"></a>13.2  配置postgresql.conf（所有节点）</h2><p>在文件内添加如下内容，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shared_preload_libraries = <span class="string">'repmgr'</span></span><br></pre></td></tr></table></figure>
<h2 id="13-3-配置repmgr-conf文件（所有节点）"><a href="#13-3-配置repmgr-conf文件（所有节点）" class="headerlink" title="13.3 配置repmgr.conf文件（所有节点）"></a>13.3 配置repmgr.conf文件（所有节点）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必须项</span></span><br><span class="line">failover=<span class="string">'automatic'</span></span><br><span class="line">promote_command=<span class="string">'/usr/pgsql-11/bin/repmgr standby promote -f /etc/repmgr/11/repmgr.conf --log-to-file'</span></span><br><span class="line">follow_command=<span class="string">'/usr/pgsql-11/bin/repmgr standby follow -f /etc/repmgr/11/repmgr.conf --log-to-file --upstream-node-id=%n'</span></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line"><span class="comment"># 注意：standby的priority值需要更改，因为默认是100，而primary使用的是默认值。这里设置standby的priority为60，其他standby的priority为40。另外，priority的值越大，成为primary的优先级就越高。</span></span><br><span class="line">priority=70</span><br><span class="line">connection_check_type=ping</span><br><span class="line">reconnect_attempts=6</span><br><span class="line">reconnect_interval=10</span><br><span class="line">monitoring_history=yes</span><br><span class="line">monitor_interval_secs=2</span><br><span class="line">standby_disconnect_on_failover=<span class="literal">true</span></span><br><span class="line">primary_visibility_consensus=<span class="literal">true</span></span><br><span class="line">log_status_interval=60</span><br><span class="line">service_start_command = <span class="string">'sudo /usr/bin/systemctl start postgresql-11.service'</span></span><br><span class="line">service_stop_command = <span class="string">'sudo /usr/bin/systemctl stop postgresql-11.service'</span></span><br><span class="line">service_restart_command = <span class="string">'sudo /usr/bin/systemctl restart postgresql-11.service'</span></span><br><span class="line">service_reload_command = <span class="string">'sudo /usr/bin/systemctl reload postgresql-11.service'</span></span><br><span class="line">repmgrd_service_start_command = <span class="string">'sudo /usr/bin/systemctl start repmgr11.service'</span></span><br><span class="line">repmgrd_service_stop_command = <span class="string">'sudo /usr/bin/systemctl stop repmgr11.service'</span></span><br></pre></td></tr></table></figure>
<h2 id="13-3-启动repmgr服务（所有节点）"><a href="#13-3-启动repmgr服务（所有节点）" class="headerlink" title="13.3 启动repmgr服务（所有节点）"></a>13.3 启动repmgr服务（所有节点）</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">repmgrd11</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">enable</span> <span class="selector-tag">repmgrd11</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure>
<p><strong>启动完成后，可以在primary或者standby节点查询集群的events，如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@pg3 .ssh]<span class="comment">#  su - postgres -c "repmgr cluster event --event=repmgrd_start"</span></span><br><span class="line"> Node ID | Name | Event         | OK | Timestamp           | Details</span><br><span class="line">---------+------+---------------+----+---------------------+------------------------------------------------------</span><br><span class="line"> 3       | pg3  | repmgrd_start | t  | 2021-08-17 12:10:43 | monitoring connection to upstream node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line"> 2       | pg2  | repmgrd_start | t  | 2021-08-17 12:08:54 | monitoring connection to upstream node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line"> 1       | pg1  | repmgrd_start | t  | 2021-08-17 12:08:32 | monitoring cluster primary <span class="string">"pg1"</span> (ID: 1)</span><br></pre></td></tr></table></figure>
<h2 id="13-4-故障模拟测试"><a href="#13-4-故障模拟测试" class="headerlink" title="13.4 故障模拟测试"></a>13.4 故障模拟测试</h2><h3 id="13-4-1停止pg1节点（primary）的postgresql服务"><a href="#13-4-1停止pg1节点（primary）的postgresql服务" class="headerlink" title="13.4.1停止pg1节点（primary）的postgresql服务"></a>13.4.1停止pg1节点（primary）的postgresql服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop postgresql-11.service</span><br></pre></td></tr></table></figure>
<p>查看集群状态，gp1节点状态变为<code>unreachable</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr cluster show</span><br><span class="line"> ID | Name | Role    | Status        | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+---------------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | primary | ? unreachable | ?        | default  | 100      |          | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 2  | pg2  | standby |   running     | ? pg1    | default  | 70       | 10       | host=pg2 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 3  | pg3  | standby |   running     | ? pg1    | default  | 60       | 10       | host=pg3 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"></span><br><span class="line">WARNING: following issues were detected</span><br><span class="line">  - unable to connect to node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line">  - node <span class="string">"pg1"</span> (ID: 1) is registered as an active primary but is unreachable</span><br><span class="line">  - unable to connect to node <span class="string">"pg2"</span> (ID: 2)<span class="string">'s upstream node "pg1" (ID: 1)</span></span><br><span class="line"><span class="string">  - unable to determine if node "pg2" (ID: 2) is attached to its upstream node "pg1" (ID: 1)</span></span><br><span class="line"><span class="string">  - unable to connect to node "pg3" (ID: 3)'</span>s upstream node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line">  - unable to determine <span class="keyword">if</span> node <span class="string">"pg3"</span> (ID: 3) is attached to its upstream node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line"></span><br><span class="line">HINT: execute with --verbose option to see connection error messages</span><br></pre></td></tr></table></figure>
<p>1分钟后，再次查看集群状态，pg2升级为primary,gp3自动连接到pg2,作为主节点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr cluster show</span><br><span class="line"> ID | Name | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+-----------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | primary | - failed  | ?        | default  | 100      |          | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 2  | pg2  | primary | * running |          | default  | 70       | 11       | host=pg2 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 3  | pg3  | standby |   running | pg2      | default  | 60       | 10       | host=pg3 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"></span><br><span class="line">WARNING: following issues were detected</span><br><span class="line">  - unable to connect to node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line"></span><br><span class="line">HINT: execute with --verbose option to see connection error messages</span><br></pre></td></tr></table></figure>
<h3 id="13-4-2-旧primary节点恢复"><a href="#13-4-2-旧primary节点恢复" class="headerlink" title="13.4.2 旧primary节点恢复"></a>13.4.2 旧primary节点恢复</h3><p>当旧primary故障恢复后，并不会自动转换为standby，而是以primary角色独自运行，这时就需要将其重新加入到集群中。如下：</p>
<p><strong>关闭postgresql服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr node service --action=stop --checkpoint</span><br></pre></td></tr></table></figure>
<p><strong>重新加入集群</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr -f /etc/repmgr/11/repmgr.conf -d <span class="string">"host=pg2 user=repmgr dbname=repmgr"</span> node rejoin --force-rewind</span><br><span class="line">NOTICE: pg_rewind execution required <span class="keyword">for</span> this node to attach to rejoin target node 2</span><br><span class="line">DETAIL: rejoin target server<span class="string">'s timeline 11 forked off current database system timeline 10 before current recovery point 0/39000028</span></span><br><span class="line"><span class="string">NOTICE: executing pg_rewind</span></span><br><span class="line"><span class="string">DETAIL: pg_rewind command is "/usr/pgsql-11/bin/pg_rewind -D '</span>/var/lib/pgsql/11/data<span class="string">' --source-server='</span>host=pg2 user=repmgr dbname=repmgr connect_timeout=2<span class="string">'"</span></span><br><span class="line"><span class="string">NOTICE: 0 files copied to /var/lib/pgsql/11/data</span></span><br><span class="line"><span class="string">NOTICE: setting node 1'</span>s upstream to node 2</span><br><span class="line">WARNING: unable to ping <span class="string">"host=pg1 user=repmgr dbname=repmgr connect_timeout=2"</span></span><br><span class="line">DETAIL: PQping() returned <span class="string">"PQPING_NO_RESPONSE"</span></span><br><span class="line">NOTICE: starting server using <span class="string">"sudo /usr/bin/systemctl start postgresql-11.service"</span></span><br><span class="line">NOTICE: NODE REJOIN successful</span><br><span class="line">DETAIL: node 1 is now attached to node 2</span><br></pre></td></tr></table></figure>
<p><strong>查看集群状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr cluster show</span><br><span class="line"> ID | Name | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string</span><br><span class="line">----+------+---------+-----------+----------+----------+----------+----------+------------------------------------------------------</span><br><span class="line"> 1  | pg1  | standby |   running | pg2      | default  | 100      | 10       | host=pg1 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 2  | pg2  | primary | * running |          | default  | 70       | 11       | host=pg2 user=repmgr dbname=repmgr connect_timeout=2</span><br><span class="line"> 3  | pg3  | standby |   running | pg2      | default  | 60       | 11       | host=pg3 user=repmgr dbname=repmgr connect_timeout=2</span><br></pre></td></tr></table></figure>
<p>到此，postgres高可用自动故障转移方案成功，配合VIP服务，可实现自动故障转移及服务高可用。</p>
<div class="note warning"><p><strong>备注</strong><br>如果不能重新加入，可以将旧primary强制(-F)转换为standby。或参考 13章节，手动清除，克隆，加入standby。</p>
<p><code>repmgr -h pg2 -U repmgr -d repmgr -f /etc/repmgr/11/repmgr.conf standby clone -F</code></p>
<p><code>systemctl start postgresql-12.service</code></p>
<p><code>repmgr -f /etc/repmgr/11/repmgr.conf standby register -F</code></p></div>
<h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><h2 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h2><p>从节点同步主节点时，报错连接失败</p>
<blockquote>
<p>bash-4.2$ repmgr -h pg1 -U repmgr -d repmgr -f /etc/repmgr/11/repmgr.conf standby clone –dry-run<br>NOTICE: destination directory “/var/lib/pgsql/11/data” provided<br>INFO: connecting to source node<br>DETAIL: connection string is: host=pg1 user=repmgr dbname=repmgr<br>DETAIL: current installation size is 31 MB<br>INFO: “repmgr” extension is installed in database “repmgr”<br>INFO: replication slot usage not requested;  no replication slot will be set up for this standby<br>INFO: parameter “max_wal_senders” set to 10<br>NOTICE: checking for available walsenders on the source node (2 required)<br>INFO: sufficient walsenders available on the source node<br>DETAIL: 2 required, 10 available<br>NOTICE: checking replication connections can be made to the source server (2 required)<br>ERROR: connection to database failed<br>DETAIL:<br><strong>致命错误:  没有来自主机 “192.168.44.132”, 用户”repmgr”, SSL 关闭的复制连接的pg_hba.conf记录</strong></p>
<p>ERROR: connection to database failed<br>DETAIL:<br><strong>致命错误:  没有来自主机 “192.168.44.132”, 用户”repmgr”, SSL 关闭的复制连接的pg_hba.conf记录</strong></p>
<p>ERROR: unable to establish necessary replication connections<br>HINT: check replication permissions on the source server</p>
</blockquote>
<p><strong>解决办法：</strong></p>
<p>少加了 前三条授权，添加上后问题解决。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">local   replication   repmgr                              trust</span><br><span class="line">host    replication   repmgr      <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span>            trust</span><br><span class="line">host    replication   repmgr      <span class="number">192.168</span><span class="number">.44</span><span class="number">.0</span>/<span class="number">24</span>          trust</span><br><span class="line"></span><br><span class="line">local   repmgr        repmgr                              trust</span><br><span class="line">host    repmgr        repmgr      <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span>            trust</span><br><span class="line">host    repmgr        repmgr      <span class="number">192.168</span><span class="number">.44</span><span class="number">.0</span>/<span class="number">24</span>         trust</span><br></pre></td></tr></table></figure>
<h2 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h2><p>同样同步时错误</p>
<blockquote>
<p>bash-4.2$ repmgr -h pg1 -U repmgr -d repmgr -f /etc/repmgr/11/repmgr.conf standby clone<br>NOTICE: destination directory “/var/lib/pgsql/11/data” provided<br>INFO: connecting to source node<br>DETAIL: connection string is: host=pg1 user=repmgr dbname=repmgr<br>DETAIL: current installation size is 31 MB<br>INFO: replication slot usage not requested;  no replication slot will be set up for this standby<br>NOTICE: checking for available walsenders on the source node (2 required)<br>NOTICE: checking replication connections can be made to the source server (2 required)<br>WARNING: data checksums are not enabled and “wal_log_hints” is “off”<br>DETAIL: pg_rewind requires “wal_log_hints” to be enabled<br>INFO: checking and correcting permissions on existing directory “/var/lib/pgsql/11/data”<br>NOTICE: starting backup (using pg_basebackup)…<br>HINT: this may take some time; consider using the -c/–fast-checkpoint option<br>INFO: executing:<br>pg_basebackup -l “repmgr base backup”  -D /var/lib/pgsql/11/data -h pg1 -p 5432 -U repmgr -X stream<br><strong>pg_basebackup: 无法得到来自服务器的预写日志终止位置: 错误:  无法打开文件 “./postgresql.conf.bak”: 权限不够</strong><br><strong>pg_basebackup: 删除数据目录 “/var/lib/pgsql/11/data” 的内容</strong><br>ERROR: unable to take a base backup of the source server<br>HINT: data directory (“/var/lib/pgsql/11/data”) may need to be cleaned up manually</p>
</blockquote>
<p><strong>原因：</strong></p>
<p>1 数据库数据目录下存在非postgres用户权限的文件，postgresql.conf.bak权限是root权限，授权为postgres用户权限即可</p>
<p>2 从节点的数据目录要保证为空。</p>
<h2 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a>错误3</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># repmgr standby switchover 命令</span></span><br><span class="line">bash-4.2$ repmgr standby switchover -f /etc/repmgr/11/repmgr.conf</span><br><span class="line">NOTICE: checking switchover on node <span class="string">"pg2"</span> (ID: 2) <span class="keyword">in</span> --dry-run mode</span><br><span class="line">WARNING: unable to connect to remote host <span class="string">"pg1"</span> via SSH</span><br><span class="line">ERROR: unable to connect via SSH to host <span class="string">"pg1"</span>, user <span class="string">""</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong></p>
<p>创建postgres 用户免密SSH登陆。</p>
<h2 id="错误4"><a href="#错误4" class="headerlink" title="错误4"></a>错误4</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ repmgr standby switchover</span><br><span class="line">NOTICE: executing switchover on node <span class="string">"pg1"</span> (ID: 1)</span><br><span class="line">ERROR: unable to execute <span class="string">"repmgr"</span> on <span class="string">"pg2"</span></span><br><span class="line">HINT: check <span class="string">"pg_bindir"</span> is <span class="built_in">set</span> to the correct path <span class="keyword">in</span> <span class="string">"repmgr.conf"</span>; current value: (not <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong></p>
<p>修改<code>repmgr.conf</code>配置文件，增加 <code>pg_bindir</code>参数，设置postgresql的<code>bin</code>路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pg_bindir=<span class="string">'/usr/pgsql-11/bin'</span></span><br></pre></td></tr></table></figure>
<h2 id="错误5"><a href="#错误5" class="headerlink" title="错误5"></a>错误5</h2><p>standby升级为primary节点后，其他低权重的standby连接新primary使出现postgresql重启错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2021-08-17 14:24:08] [INFO] <span class="built_in">local</span> node 3 can attach to follow target node 2</span><br><span class="line">[2021-08-17 14:24:08] [DETAIL] <span class="built_in">local</span> node<span class="string">'s recovery point: 0/3802CD38; follow target node'</span>s fork point: 0/3802CD38</span><br><span class="line">[2021-08-17 14:24:08] [NOTICE] setting node 3<span class="string">'s upstream to node 2</span></span><br><span class="line"><span class="string">[2021-08-17 14:24:08] [NOTICE] restarting server using "sudo /usr/bin/systemctl restart postgresql-11.service"</span></span><br><span class="line"><span class="string">[2021-08-17 14:24:10] [ERROR] unable to restart server</span></span><br><span class="line"><span class="string">[2021-08-17 14:24:10] [NOTICE] STANDBY FOLLOW failed</span></span><br><span class="line"><span class="string">[2021-08-17 14:24:10] [ERROR] connection to database failed</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法：配置postgres用户sudo命令免输入密码</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgres用户，所有sudo命令都不用密码</span></span><br><span class="line">postgres   ALL=(ALL) NOPASSWD: ALL</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgres用户，特定sudo命令不需要密码</span></span><br><span class="line">Defaults:postgres !requiretty</span><br><span class="line">postgres ALL = NOPASSWD: <span class="regexp">/usr/</span>bin<span class="regexp">/systemctl stop postgresql-11.service, /u</span>sr<span class="regexp">/bin/</span>systemctl start postgresql-<span class="number">11</span>.service, <span class="regexp">/usr/</span>bin<span class="regexp">/systemctl restart postgresql-11.service, /u</span>sr<span class="regexp">/bin/</span>systemctl reload postgresql-<span class="number">11</span>.service, <span class="regexp">/usr/</span>bin<span class="regexp">/systemctl start repmgr11.service, /u</span>sr<span class="regexp">/bin/</span>systemctl stop repmgr11.service</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible Tower 安装</title>
    <url>/2021/11/02/Ansible-Tower-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="一、ansible-tower简介"><a href="#一、ansible-tower简介" class="headerlink" title="一、ansible-tower简介"></a>一、ansible-tower简介</h2><a id="more"></a>
<p>1）公司中实现运维自动化的架构中主要用到ansible，ansible脚本在部署服务器指令行中显得不太直观。Ansible-Tower（之前叫做awx）是将ansible的指令界面化，简明直观，简单易用。</p>
<p>2）Ansibke-tower其实就是一个图形化的任务调度，复杂服务部署，IT自动化的一个管理平台，属于发布配置管理系统，支持Api及界面操作，Django编写。</p>
<p>3）Ansible-tower可以通过界面从github拉取最新playbook实施服务部署，提高生产效率。当然它也提供一个RESET API和命令行的CLI以供python脚本调用</p>
<p>官方网站：<a href="https://www.ansible.com/products/tower" target="_blank" rel="noopener">https://www.ansible.com/products/tower</a></p>
<p>Ansible权威指南：<a href="http://www.ansible.com.cn/docs/tower.html" target="_blank" rel="noopener">http://www.ansible.com.cn/docs/tower.html</a></p>
<p>官方中文文档：<a href="https://docs.ansible.com/ansible-tower/3.8.4/html_zh/" target="_blank" rel="noopener">https://docs.ansible.com/ansible-tower/3.8.4/html_zh/</a></p>
<p>官方安装文档：<a href="http://docs.ansible.com/ansible-tower/latest/html/quickinstall/index.html" target="_blank" rel="noopener">http://docs.ansible.com/ansible-tower/latest/html/quickinstall/index.html</a></p>
<p>官方源下载地址：<a href="http://releases.ansible.com/ansible-tower/setup-bundle/" target="_blank" rel="noopener">http://releases.ansible.com/ansible-tower/setup-bundle/</a></p>
<h2 id="二、ansible-tower安装及配置"><a href="#二、ansible-tower安装及配置" class="headerlink" title="二、ansible-tower安装及配置"></a>二、ansible-tower安装及配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@tower ~]<span class="comment"># cd /opt/</span></span><br><span class="line">[root@tower opt]<span class="comment"># wget https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-3.8.3-2.tar.gz</span></span><br><span class="line">[root@tower opt]<span class="comment"># tar xf ansible-tower-setup-bundle-3.8.3-2.tar.gz</span></span><br><span class="line">[root@tower opt]<span class="comment"># cd ansible-tower-setup-bundle-3.8.3-2/</span></span><br><span class="line">[root@tower ansible-tower-setup-bundle-3.8.3-2]<span class="comment"># ls</span></span><br><span class="line">backup.yml  bundle  group_vars  install.yml  inventory  licenses  README.md  rekey.yml  restore.yml  roles  setup.sh</span><br><span class="line">[root@tower ansible-tower-setup-bundle-3.8.3-2]<span class="comment"># vim inventory</span></span><br><span class="line">[tower]</span><br><span class="line">localhost ansible_connection=<span class="built_in">local</span></span><br><span class="line"> </span><br><span class="line">[database]</span><br><span class="line"> </span><br><span class="line">[all:vars]</span><br><span class="line">admin_password=<span class="string">'tower'</span>   <span class="comment">#tower登录密码</span></span><br><span class="line"> </span><br><span class="line">pg_host=<span class="string">''</span></span><br><span class="line">pg_port=<span class="string">''</span></span><br><span class="line"> </span><br><span class="line">pg_database=<span class="string">'awx'</span></span><br><span class="line">pg_username=<span class="string">'awx'</span></span><br><span class="line">pg_password=<span class="string">'tower'</span>     <span class="comment"># 必填项</span></span><br><span class="line">pg_sslmode=<span class="string">'prefer'</span>  <span class="comment"># set to 'verify-full' for client-side enforced SSL</span></span><br><span class="line"> </span><br><span class="line">rabbitmq_username=tower</span><br><span class="line">rabbitmq_password=<span class="string">'tower'</span>    <span class="comment"># 必填项</span></span><br><span class="line">rabbitmq_cookie=cookiemonster</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Isolated Tower nodes automatically generate an RSA key for authentication;</span></span><br><span class="line"><span class="comment"># To disable this behavior, set this value to false</span></span><br><span class="line"><span class="comment"># isolated_key_generation=true</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># SSL-related variables</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># If set, this will install a custom CA certificate to the system trust store.</span></span><br><span class="line"><span class="comment"># custom_ca_cert=/path/to/ca.crt</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Certificate and key to install in nginx for the web UI and API</span></span><br><span class="line"><span class="comment"># web_server_ssl_cert=/path/to/tower.cert</span></span><br><span class="line"><span class="comment"># web_server_ssl_key=/path/to/tower.key</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Use SSL for RabbitMQ inter-node communication.  Because RabbitMQ never</span></span><br><span class="line"><span class="comment"># communicates outside the cluster, a private CA and certificates will be</span></span><br><span class="line"><span class="comment"># created, and do not need to be supplied.</span></span><br><span class="line"><span class="comment"># rabbitmq_use_ssl=False</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Server-side SSL settings for PostgreSQL (when we are installing it).</span></span><br><span class="line"><span class="comment"># postgres_use_ssl=False</span></span><br><span class="line"><span class="comment"># postgres_ssl_cert=/path/to/pgsql.crt</span></span><br><span class="line"><span class="comment"># postgres_ssl_key=/path/to/pgsql.key</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#开始安装</span></span><br><span class="line"><span class="comment">#数据及各服务自动安装，可能需要rync,需要手动安装。</span></span><br><span class="line">[root@tower ansible-tower-setup-bundle-3.8.6-2]<span class="comment"># ./setup.sh</span></span><br></pre></td></tr></table></figure>
<p>访问<a href="https://10.0.0.203/#/login" target="_blank" rel="noopener">https://10.0.0.203/#/login</a></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/11/1552342-20200112115614754-376356611.png" alt="image"></p>
<h1 id="三、ansible-tower激活"><a href="#三、ansible-tower激活" class="headerlink" title="三、ansible-tower激活"></a>三、ansible-tower激活</h1><p><strong>步骤简述：</strong></p>
<ol>
<li><strong>安装Ansible Tower，以setup.sh执行成功且完毕为开始</strong></li>
<li><strong>修改licensing.py文件</strong></li>
<li><strong>运行”ansible-tower-service restart”重启服务</strong></li>
<li><strong>Enjoy it</strong></li>
</ol>
<p><strong>btw：不需要去官网申请Trial License</strong></p>
<hr>
<h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>没什么好说的，setup.sh执行完了且不报错即可。说人话就是页面可以正常打开，没有任何报错。</p>
<h4 id="2-修改licensing-py文件"><a href="#2-修改licensing-py文件" class="headerlink" title="2. 修改licensing.py文件"></a>2. 修改licensing.py文件</h4><p>该文件位于：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/var/<span class="class"><span class="keyword">lib</span>/<span class="title">awx</span>/<span class="title">venv</span>/<span class="title">awx</span>/<span class="title">lib</span>/<span class="title">python3</span>.6/<span class="title">site</span>-<span class="title">packages</span>/<span class="title">awx</span>/<span class="title">main</span>/<span class="title">utils</span>/<span class="title">licensing</span>.<span class="title">py</span></span></span><br></pre></td></tr></table></figure>
<p>该文件内的方法是负责License验证的核心，将其用你熟悉的编辑器打开</p>
<p>找到validate方法，该方法就负责License的验证，在我这其位于该文件的409行。行数可能随着版本的升级或修改不一定准确，以方法名为主。</p>
<p>该方法原文如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># Return license attributes with additional validation info.</span></span><br><span class="line">    attrs = copy.deepcopy(self._attrs)</span><br><span class="line">    type = attrs.get(<span class="string">'license_type'</span>, <span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">'UNLICENSED'</span> <span class="keyword">or</span> <span class="keyword">False</span>):</span><br><span class="line">        attrs.update(dict(valid_key=<span class="keyword">False</span>, compliant=<span class="keyword">False</span>))</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line">    attrs[<span class="string">'valid_key'</span>] = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> Host:</span><br><span class="line">        current_instances = Host.objects.active_count()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        current_instances = <span class="number">0</span></span><br><span class="line">    available_instances = int(attrs.get(<span class="string">'instance_count'</span>, <span class="keyword">None</span>) <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">    attrs[<span class="string">'current_instances'</span>] = current_instances</span><br><span class="line">    attrs[<span class="string">'available_instances'</span>] = available_instances</span><br><span class="line">    free_instances = (available_instances - current_instances)</span><br><span class="line">    attrs[<span class="string">'free_instances'</span>] = max(<span class="number">0</span>, free_instances)</span><br><span class="line"></span><br><span class="line">    license_date = int(attrs.get(<span class="string">'license_date'</span>, <span class="number">0</span>) <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">    current_date = int(time.time())</span><br><span class="line">    time_remaining = license_date - current_date</span><br><span class="line">    attrs[<span class="string">'time_remaining'</span>] = time_remaining</span><br><span class="line">    <span class="keyword">if</span> attrs.setdefault(<span class="string">'trial'</span>, <span class="keyword">False</span>):</span><br><span class="line">        attrs[<span class="string">'grace_period_remaining'</span>] = time_remaining</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        attrs[<span class="string">'grace_period_remaining'</span>] = (license_date + <span class="number">2592000</span>) - current_date</span><br><span class="line">    attrs[<span class="string">'compliant'</span>] = bool(time_remaining &gt; <span class="number">0</span> <span class="keyword">and</span> free_instances &gt;= <span class="number">0</span>)</span><br><span class="line">    attrs[<span class="string">'date_warning'</span>] = bool(time_remaining &lt; self.SUBSCRIPTION_TIMEOUT)</span><br><span class="line">    attrs[<span class="string">'date_expired'</span>] = bool(time_remaining &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> attrs</span><br></pre></td></tr></table></figure>
<p>将其改成这个样子即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># Return license attributes with additional validation info.</span></span><br><span class="line">    attrs = copy.deepcopy(self._attrs)</span><br><span class="line"></span><br><span class="line">    attrs[<span class="string">'license_type'</span>] = <span class="string">'enterprise'</span> <span class="comment"># 设置License类型为企业版</span></span><br><span class="line">    attrs[<span class="string">'instance_count'</span>] = MAX_INSTANCES <span class="comment"># 设置Host数量为MAX_INSTANCES，即9999999。扛不住就改成自己需要的数。</span></span><br><span class="line">    attrs[<span class="string">'license_date'</span>] = <span class="string">'2567433600'</span> <span class="comment"># 设置License过期日期为”2051-05-12 00:00:00“，Unix时间戳，有需要自己改</span></span><br><span class="line">    attrs[<span class="string">'subscription_name'</span>] = <span class="string">'mxd'</span> <span class="comment"># 你猜	</span></span><br><span class="line"></span><br><span class="line">    type = attrs.get(<span class="string">'license_type'</span>, <span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注释掉下面的判断</span></span><br><span class="line">    <span class="comment">#if (type == 'UNLICENSED' or False):</span></span><br><span class="line">        <span class="comment">#attrs.update(dict(valid_key=False, compliant=False))</span></span><br><span class="line">        <span class="comment">#return attrs</span></span><br><span class="line">    attrs[<span class="string">'valid_key'</span>] = <span class="keyword">True</span> <span class="comment"># 直接将 valid_key 设为 true</span></span><br><span class="line">    <span class="keyword">if</span> Host:</span><br><span class="line">        current_instances = Host.objects.active_count()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        current_instances = <span class="number">0</span></span><br><span class="line">    available_instances = int(attrs.get(<span class="string">'instance_count'</span>, <span class="keyword">None</span>) <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">    attrs[<span class="string">'current_instances'</span>] = current_instances</span><br><span class="line">    attrs[<span class="string">'available_instances'</span>] = available_instances</span><br><span class="line">    free_instances = (available_instances - current_instances)</span><br><span class="line">    attrs[<span class="string">'free_instances'</span>] = max(<span class="number">0</span>, free_instances)</span><br><span class="line"></span><br><span class="line">    license_date = int(attrs.get(<span class="string">'license_date'</span>, <span class="number">0</span>) <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">    current_date = int(time.time())</span><br><span class="line">    time_remaining = license_date - current_date</span><br><span class="line">    attrs[<span class="string">'time_remaining'</span>] = time_remaining</span><br><span class="line">    <span class="keyword">if</span> attrs.setdefault(<span class="string">'trial'</span>, <span class="keyword">False</span>):</span><br><span class="line">        attrs[<span class="string">'grace_period_remaining'</span>] = time_remaining</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        attrs[<span class="string">'grace_period_remaining'</span>] = (license_date + <span class="number">2592000</span>) - current_date</span><br><span class="line">    attrs[<span class="string">'compliant'</span>] = bool(time_remaining &gt; <span class="number">0</span> <span class="keyword">and</span> free_instances &gt;= <span class="number">0</span>)</span><br><span class="line">    attrs[<span class="string">'date_warning'</span>] = bool(time_remaining &lt; self.SUBSCRIPTION_TIMEOUT)</span><br><span class="line">    attrs[<span class="string">'date_expired'</span>] = bool(time_remaining &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> attrs</span><br></pre></td></tr></table></figure>
<h4 id="3-运行”ansible-tower-service-restart”重启服务"><a href="#3-运行”ansible-tower-service-restart”重启服务" class="headerlink" title="3. 运行”ansible-tower-service restart”重启服务"></a>3. 运行”ansible-tower-service restart”重启服务</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ansible-tower-service restart</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2021/11/image.png" alt="img"></p>
<p>参考文档：</p>
<p><a href="https://www.milkfish.site/2021/05/13/1038.loli" target="_blank" rel="noopener">https://www.milkfish.site/2021/05/13/1038.loli</a></p>
<p><a href="https://blog.csdn.net/m0_46393435/article/details/108171655" target="_blank" rel="noopener">https://blog.csdn.net/m0_46393435/article/details/108171655</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql设置密码复杂度校验</title>
    <url>/2022/01/12/Postgresql%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="1-postgresql设置密码复杂度校验"><a href="#1-postgresql设置密码复杂度校验" class="headerlink" title="1 postgresql设置密码复杂度校验"></a>1 postgresql设置密码复杂度校验</h1><a id="more"></a>
<h2 id="1-1-默认密码校验策略"><a href="#1-1-默认密码校验策略" class="headerlink" title="1.1 默认密码校验策略"></a>1.1 默认密码校验策略</h2><p>在PG中可以使用<code>passwordcheck.so</code>模块实现密码复杂度校验的功能，不过这个工具的默认要求很低，只可用于简单的密码复杂度校验，默认检查规则如下：</p>
<ol>
<li>密码长度大于8位</li>
<li>密码不能与用户名相同</li>
<li>密码必须包括字母和数字</li>
</ol>
<h3 id="1-1-1-passwordcheck密码校验"><a href="#1-1-1-passwordcheck密码校验" class="headerlink" title="1.1.1 passwordcheck密码校验"></a>1.1.1 passwordcheck密码校验</h3><p>安装完PostgreSQL之后，默认是没有开启密码复杂度，为了数据库安全以及应对等保测评等要求，有时我们需要设置密码复杂度。</p>
<p>PostgreSQL支持通过动态库的方式扩展PG的功能，pg在使用这些功能时需要预加载相关的共享库。而密码复杂度可以通过预加载passwordcheck.so模块实现。</p>
<p>有几种设置可用于将共享库预加载到服务器中，如下：</p>
<ul>
<li>local_preload_libraries (string)</li>
<li>session_preload_libraries (string)</li>
<li>shared_preload_libraries (string)</li>
</ul>
<p>下面介绍shared_preload_libraries (string)方式加载<code>passwordcheck.so</code>模块，此模块可以检查密码，如果密码太弱，他会拒绝连接；创建用户或修改用户密码时，强制限制密码的复杂度，限制密码不能重复使用例如密码长度，包含数字，字母，大小写，特殊字符等，同时排除暴力破解字典中的字符串。</p>
<h3 id="1-1-2-shared-preload-libraries-方式启用passwordcheck-so模块"><a href="#1-1-2-shared-preload-libraries-方式启用passwordcheck-so模块" class="headerlink" title="1.1.2 shared_preload_libraries 方式启用passwordcheck.so模块"></a>1.1.2 shared_preload_libraries 方式启用passwordcheck.so模块</h3><p>在PG库的数据目录下（centos默认路径为：<code>/var/lib/pgsql/11/data</code>，windows默认路径为：<code>D:\PostgreSQL\11\data</code>）找到<code>postgresql.conf</code>文件，修改</p>
<p>修改内容行为：<code>shared_preload_libraries = &#39;passwordcheck&#39;  # (change requires restart)。</code></p>
<p>修改完成后重启服务服务生效（<code>systemctl restart postgresql-11</code>）。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/315861-20201127152459487-148259811.png" alt="image"><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/315861-20201127152500965-701180388.png" alt="image"></p>
<h3 id="1-1-3-验证"><a href="#1-1-3-验证" class="headerlink" title="1.1.3 验证"></a>1.1.3 验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示密码太短</span></span><br><span class="line">postgres=<span class="comment"># create role ttt with password '123123';</span></span><br><span class="line">ERROR:  password is too short</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示密码必须包含字母和非字母</span></span><br><span class="line">postgres=<span class="comment"># create role ttt with password '12345678';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role ttt with password 'qweqweqwe';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line"><span class="comment">#  提示密码不能包含用户名</span></span><br><span class="line">postgres=<span class="comment"># create role tttt with password 'tttt123456';</span></span><br><span class="line">ERROR:  password must not contain user name</span><br></pre></td></tr></table></figure>
<h2 id="1-2-增强密码校验策略"><a href="#1-2-增强密码校验策略" class="headerlink" title="1.2 增强密码校验策略"></a>1.2 增强密码校验策略</h2><p>通过修改源代码实现。本文记录如何通过修改源码<code>passwordcheck.c</code>达到增强复杂度检验的目的，修改后验证规则如下：</p>
<ol>
<li>密码长度大于8位</li>
<li>密码不能与用户名相同</li>
<li>密码必须包括字母</li>
<li>密码必须包括数字</li>
<li>密码必须包括特殊字符</li>
</ol>
<h3 id="1-2-1-步骤"><a href="#1-2-1-步骤" class="headerlink" title="1.2.1 步骤"></a>1.2.1 步骤</h3><h4 id="1-2-1-1-实验环境"><a href="#1-2-1-1-实验环境" class="headerlink" title="1.2.1.1 实验环境"></a>1.2.1.1 实验环境</h4><p>实验环境：CentOS7.6 + PG11.8 source code</p>
<p>源码下载地址: <a href="https://www.postgresql.org/ftp/source/v11.8/postgresql-11.8.tar.gz" target="_blank" rel="noopener">https://www.postgresql.org/ftp/source/v11.8/postgresql-11.8.tar.gz</a></p>
<p>源码安装文档：<a href="https://www.postgresql.org/docs/11/install-short.htm" target="_blank" rel="noopener">https://www.postgresql.org/docs/11/install-short.htm</a></p>
<h4 id="1-2-1-2-使用方式"><a href="#1-2-1-2-使用方式" class="headerlink" title="1.2.1.2 使用方式"></a>1.2.1.2 使用方式</h4><ul>
<li>替换目录 ../postgresql-11.4/contrib/passwordcheck 下的 passwordcheck.c</li>
<li>编译安装 make &amp;&amp; make install</li>
<li>postgresql配置文件内修改 (postgresql.conf)</li>
<li>shared_preload_libraries = ‘passwordcheck’</li>
<li>passwordcheck.level = ‘true’</li>
</ul>
<h4 id="1-2-1-3-效果"><a href="#1-2-1-3-效果" class="headerlink" title="1.2.1.3 效果"></a>1.2.1.3 效果</h4><p>当密码长度足够，不符合规则的时候，无法新建用户</p>
<h4 id="1-2-1-4-源码修改"><a href="#1-2-1-4-源码修改" class="headerlink" title="1.2.1.4 源码修改"></a>1.2.1.4 源码修改</h4><p>将下载后的源码解压缩, 找到<code>postgresql-11.8/contrib/passwordcheck/passwordcheck.c</code>源文件，修改后保存退出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Luckyness</span></span><br><span class="line"><span class="comment"> * 20191202</span></span><br><span class="line"><span class="comment"> * 在源代码上修改自用，配置pg密码必须包含特殊字符</span></span><br><span class="line"><span class="comment"> * pg版本11.4</span></span><br><span class="line"><span class="comment"> * 使用方式：</span></span><br><span class="line"><span class="comment"> * 替换目录 ../postgresql-11.4/contrib/passwordcheck 下的 passwordcheck.c</span></span><br><span class="line"><span class="comment"> * 编译安装 make &amp;&amp; make install</span></span><br><span class="line"><span class="comment"> * postgresql配置文件内修改 (postgresql.conf)</span></span><br><span class="line"><span class="comment"> * shared_preload_libraries = 'passwordcheck'</span></span><br><span class="line"><span class="comment"> * passwordcheck.level = 'true'</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * passwordcheck.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2009-2018, PostgreSQL Global Development Group</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Laurenz Albe &lt;laurenz.albe@wien.gv.at&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * IDENTIFICATION</span></span><br><span class="line"><span class="comment"> *	  contrib/passwordcheck/passwordcheck.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"postgres.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_CRACKLIB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;crack.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"commands/user.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libpq/crypt.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"fmgr.h"</span></span></span><br><span class="line"><span class="comment">/* 引入扩展 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils/guc.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PG_MODULE_MAGIC;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 配置文件内passwordcheck.level='true' 为需要特殊字符 </span></span><br><span class="line"><span class="comment"> * passwordcheck.level='false' 为只需要英文和数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> passwordcheck_level = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* passwords shorter than this will be rejected */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN_PWD_LENGTH 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">void</span> _PG_init(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * check_password</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * performs checks on an encrypted or unencrypted password</span></span><br><span class="line"><span class="comment"> * ereport's if not acceptable</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * username: name of role being created or changed</span></span><br><span class="line"><span class="comment"> * password: new password (possibly already encrypted)</span></span><br><span class="line"><span class="comment"> * password_type: PASSWORD_TYPE_* code, to indicate if the password is</span></span><br><span class="line"><span class="comment"> *			in plaintext or encrypted form.</span></span><br><span class="line"><span class="comment"> * validuntil_time: password expiration time, as a timestamptz Datum</span></span><br><span class="line"><span class="comment"> * validuntil_null: true if password expiration time is NULL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This sample implementation doesn't pay any attention to the password</span></span><br><span class="line"><span class="comment"> * expiration time, but you might wish to insist that it be non-null and</span></span><br><span class="line"><span class="comment"> * not too far in the future.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">check_password(<span class="keyword">const</span> <span class="keyword">char</span> *username,</span><br><span class="line">			   <span class="keyword">const</span> <span class="keyword">char</span> *shadow_pass,</span><br><span class="line">			   PasswordType password_type,</span><br><span class="line">			   Datum validuntil_time,</span><br><span class="line">			   <span class="keyword">bool</span> validuntil_null)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (password_type != PASSWORD_TYPE_PLAINTEXT)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Unfortunately we cannot perform exhaustive checks on encrypted</span></span><br><span class="line"><span class="comment">		 * passwords - we are restricted to guessing. (Alternatively, we could</span></span><br><span class="line"><span class="comment">		 * insist on the password being presented non-encrypted, but that has</span></span><br><span class="line"><span class="comment">		 * its own security disadvantages.)</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * We only check for username = password.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">char</span>	   *logdetail;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (plain_crypt_verify(username, shadow_pass, username, &amp;logdetail) == STATUS_OK)</span><br><span class="line">			ereport(ERROR,</span><br><span class="line">					(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">					 errmsg(<span class="string">"password must not equal user name"</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * For unencrypted passwords we can perform better checks</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">char</span> *password = shadow_pass;</span><br><span class="line">		<span class="keyword">int</span>			pwdlen = <span class="built_in">strlen</span>(password);</span><br><span class="line">		<span class="keyword">int</span>			i;</span><br><span class="line">		<span class="comment">/*                 bool            pwd_has_letter,*/</span></span><br><span class="line">		<span class="keyword">bool</span>		</span><br><span class="line">					pwd_has_number,pwd_has_special,pwd_has_letter;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* enforce minimum length */</span></span><br><span class="line">		<span class="keyword">if</span> (pwdlen &lt; MIN_PWD_LENGTH)</span><br><span class="line">			ereport(ERROR,</span><br><span class="line">					(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">					 errmsg(<span class="string">"password is too short"</span>)));</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* check if the password contains the username */</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strstr</span>(password, username))</span><br><span class="line">			ereport(ERROR,</span><br><span class="line">					(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">					 errmsg(<span class="string">"password must not contain user name"</span>)));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(passwordcheck_level)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* check if the password contains both letters and number and specialchar */</span></span><br><span class="line">			pwd_has_number = <span class="literal">false</span>;</span><br><span class="line">			pwd_has_special = <span class="literal">false</span>;</span><br><span class="line">			pwd_has_letter = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pwdlen; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">isalpha</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>) password[i]))</span><br><span class="line">					pwd_has_letter = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>) password[i]))</span><br><span class="line">					pwd_has_number = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					pwd_has_special = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!pwd_has_number || !pwd_has_letter || !pwd_has_special)</span><br><span class="line">				ereport(ERROR,</span><br><span class="line">						(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">						errmsg(<span class="string">"password must contain both letters and number and specialchar"</span>)));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* check if the password contains both letters and non-letters */</span></span><br><span class="line">			pwd_has_letter = <span class="literal">false</span>;</span><br><span class="line">			pwd_has_number = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pwdlen; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">isalpha</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>) password[i]))</span><br><span class="line">					pwd_has_letter = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					pwd_has_number = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!pwd_has_letter || !pwd_has_number)</span><br><span class="line">				ereport(ERROR,</span><br><span class="line">						(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">						errmsg(<span class="string">"password must contain both letters and nonletters"</span>)));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_CRACKLIB</span></span><br><span class="line">		<span class="comment">/* call cracklib to check password */</span></span><br><span class="line">		<span class="keyword">if</span> (FascistCheck(password, CRACKLIB_DICTPATH))</span><br><span class="line">			ereport(ERROR,</span><br><span class="line">					(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">					 errmsg(<span class="string">"password is easily cracked"</span>)));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* all checks passed, password is ok */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Module initialization function</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">_PG_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* 密码级别参数 */</span></span><br><span class="line">	DefineCustomBoolVariable(</span><br><span class="line">		<span class="string">"passwordcheck.level"</span>,</span><br><span class="line">		gettext_noop(<span class="string">"passwordcheck_level true: Password must contain leter, number, special characters;false : Password must contain leter, special characters"</span>),</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		&amp;passwordcheck_level,</span><br><span class="line">		<span class="literal">false</span>,</span><br><span class="line">		PGC_POSTMASTER,</span><br><span class="line">		GUC_SUPERUSER_ONLY,</span><br><span class="line">		<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* activate password checks when the module is loaded */</span></span><br><span class="line">	check_password_hook = check_password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-1-5-编译"><a href="#1-2-1-5-编译" class="headerlink" title="1.2.1.5 编译"></a>1.2.1.5 编译</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##编译安装pg server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##进入源码解压目录, 执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>  postgresql-11.8</span><br><span class="line"></span><br><span class="line">./configure--prefix=/u01/pgsql11.8 --without-zlib --without-readline   --&gt;&gt;&gt;&gt;指定安装目录为/u01/pgsql11.8, 处于演示目的,所以没有安装zlib和readline包。</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">##编译安装contrib,是一些第三方组织贡献出来的工具代码。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##进入源码解压目录执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>   postgresql-11.8/contrib</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">##编译完成后，在postgresql-11.8/contrib/passwordcheck/目录下增加passwordcheck.so文件</span></span><br><span class="line"><span class="comment">##编译后的文件，可以迁移到同版本数据库内使用</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-验证"><a href="#1-2-2-验证" class="headerlink" title="1.2.2 验证"></a>1.2.2 验证</h3><p>首先开启passwordcheck验证, 修改参数文件postgresql.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改如下</span></span><br><span class="line">shared_preload_libraries= <span class="string">'passwordcheck'</span></span><br><span class="line">passwordcheck.level=<span class="string">'true‘</span></span><br></pre></td></tr></table></figure>
<p> 重启实例生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pg_ctl restart</span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示密码太短</span></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '123';</span></span><br><span class="line">ERROR:  password is too short</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示必须同时包括字母、数字、特殊字符</span></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '12345678';</span></span><br><span class="line">ERROR:  password must contain both letters and number and specialchar</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password 'qqqqqqqq';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '!!!!!!!!!!!!';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '12345678a';</span></span><br><span class="line">ERROR:  password must contain both letters and number and specialchar</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '1234567!';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '12345678a!';</span></span><br><span class="line">CREATE ROLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码提示必须同时包含字母、数字和特殊字符</span></span><br><span class="line">postgres=<span class="comment"># alter role btest password '12345678!';</span></span><br><span class="line">ERROR:  password must contain both letters and number and specialchar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示密码不能包含用户名</span></span><br><span class="line">postgres=<span class="comment"># alter role btest password '123456btest!';</span></span><br><span class="line">ERROR:  password must not contain user name</span><br></pre></td></tr></table></figure>
<h3 id="1-2-3-问题"><a href="#1-2-3-问题" class="headerlink" title="1.2.3 问题"></a>1.2.3 问题</h3><div class="note danger"><p><strong>警告</strong><br>这里还存在个问题，就是通过<code>\password</code>命令修改的话，可以输入不满足长度的密码，原因是使用<code>\password</code>时<code>passwordcheck</code>检查的是加密后的口令，官方文档提到过，检查<code>md5</code>加密后的口令是很困难的，所以当<code>passwordcheck</code>检查加密的口令时，只检查密码是否与用户名相同这一项，实际上是将用户名通过<code>md5</code>加密后与数据库中的<code>md5</code>密码做比较，如果相同，则报错口令不能与用户名相同。</p></div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">postgres=#\password bert</span><br><span class="line"></span><br><span class="line">Enter new password:  <span class="comment">----&gt;&gt;&gt;&gt;&gt;可以输入小于8位的口令, 而不被阻. 但是输入的是与用户名相同的话可以被检测出来。</span></span><br><span class="line"></span><br><span class="line">Enter itagain:</span><br><span class="line"></span><br><span class="line">postgres=#</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">postgres=#\set ECHO_HIDDEN ON</span><br><span class="line"></span><br><span class="line">postgres=#\password bert</span><br><span class="line"></span><br><span class="line">Enter newpassword:</span><br><span class="line"></span><br><span class="line">Enter itagain:</span><br><span class="line"></span><br><span class="line">*********QUERY **********</span><br><span class="line"></span><br><span class="line">ALTERUSER bert PASSWORD 'md5efabd7549b98ddce9b14ba5e2e83eae1'</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="1-4-参考"><a href="#1-4-参考" class="headerlink" title="1.4 参考"></a>1.4 参考</h2><p><a href="https://www.modb.pro/db/171257" target="_blank" rel="noopener">https://www.modb.pro/db/171257</a></p>
<p><a href="https://www.cnblogs.com/Luckyness/p/11996834.html" target="_blank" rel="noopener">https://www.cnblogs.com/Luckyness/p/11996834.html</a></p>
<p><a href="https://github.com/Luckyness/passwordcheck/blob/master/passwordcheck.c" target="_blank" rel="noopener">https://github.com/Luckyness/passwordcheck/blob/master/passwordcheck.c</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
        <tag>密码校验</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql开启日志审计</title>
    <url>/2022/01/12/mysql%E5%BC%80%E5%90%AF%E6%97%A5%E5%BF%97%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="1安装"><a href="#1安装" class="headerlink" title="1安装"></a>1安装</h2><a id="more"></a>
<h3 id="1-1-下载插件"><a href="#1-1-下载插件" class="headerlink" title="1.1 下载插件"></a>1.1 下载插件</h3><p><a href="https://github.com/mcafee/mysql-audit/releases?page=1" target="_blank" rel="noopener">Releases · mcafee/mysql-audit · GitHub</a></p>
<blockquote>
<p>备注：下载插件一定要注意插件支持数据库的版本，否则安装失败。</p>
<p>经后期验证，基于docker版本的mysql安装插件失败，报错：patch send_result_to_client 。</p>
<p>经过相关信息搜索，docker版本和编译版本还是有一些区别，能够安装的docker版本，目前测试5.6.36版本可用。</p>
</blockquote>
<h3 id="1-2-解压插件"><a href="#1-2-解压插件" class="headerlink" title="1.2 解压插件"></a>1.2 解压插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip audit-plugin-mysql-5.7-1.1.7-805-linux-x86_64.zip</span><br><span class="line"><span class="built_in">cd</span> audit-plugin-mysql-5.7-1.1.7-805/lib</span><br></pre></td></tr></table></figure>
<h3 id="1-3-查询mysql的插件目录"><a href="#1-3-查询mysql的插件目录" class="headerlink" title="1.3 查询mysql的插件目录"></a>1.3 查询mysql的插件目录</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'plugin_dir'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://www.hualigs.cn/image/6040825eed60d.jpg" alt="img"></p>
<h3 id="1-4-拷贝libaudit-plugin-so到mysql插件目录"><a href="#1-4-拷贝libaudit-plugin-so到mysql插件目录" class="headerlink" title="1.4 拷贝libaudit_plugin.so到mysql插件目录"></a>1.4 拷贝libaudit_plugin.so到mysql插件目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp libaudit_plugin.so  /usr/<span class="built_in">local</span>/mysql/lib/plugin/</span><br><span class="line">chmod +x libaudit_plugin.so</span><br><span class="line">chown mysql:mysql libaudit_plugin.so</span><br></pre></td></tr></table></figure>
<h3 id="1-5-安装插件"><a href="#1-5-安装插件" class="headerlink" title="1.5 安装插件"></a>1.5 安装插件</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; install plugin audit soname 'libaudit_plugin.so';</span><br></pre></td></tr></table></figure>
<h3 id="1-6-开启设计功能"><a href="#1-6-开启设计功能" class="headerlink" title="1.6 开启设计功能"></a>1.6 开启设计功能</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global audit_json_file=1;</span><br></pre></td></tr></table></figure>
<h3 id="1-7-修改mysql配置文件"><a href="#1-7-修改mysql配置文件" class="headerlink" title="1.7 修改mysql配置文件"></a>1.7 修改mysql配置文件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">audit_record_cmds='<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">update</span>,<span class="keyword">create</span>,<span class="keyword">drop</span>,<span class="keyword">alter</span>,<span class="keyword">grant</span>,<span class="keyword">truncate</span><span class="string">'  # 记录操作内容</span></span><br><span class="line"><span class="string">audit_json_file=on       # 保证mysql重启后自动启动插件</span></span><br><span class="line"><span class="string">plugin-load=AUDIT=libaudit_plugin.so   # 防止删除了插件，重启后又会加载</span></span><br><span class="line"><span class="string">audit_json_log_file=/data/logs/mysql/mysql_audit.json  # 日志路径（可选，默认在数据库data目录下生成mysql_audit.json日志文件）</span></span><br></pre></td></tr></table></figure>
<h2 id="2-其他相关命令"><a href="#2-其他相关命令" class="headerlink" title="2 其他相关命令"></a>2 其他相关命令</h2><ul>
<li>查询插件相关配置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql &gt; SHOW GLOBAL VARIABLES LIKE '%audit%';</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220113121640885.png" alt="image-20220113121640885"></p>
<ul>
<li>查询插件版本</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql &gt; show global status like 'AUDIT_version';</span><br></pre></td></tr></table></figure>
<p><img src="https://www.hualigs.cn/image/604082852f8fd.jpg" alt="img"></p>
<ul>
<li>显示当前插件</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql &gt; show plugins;</span><br></pre></td></tr></table></figure>
<p><img src="https://www.hualigs.cn/image/60408295e7c39.jpg" alt="img"></p>
<h2 id="3-延申内容"><a href="#3-延申内容" class="headerlink" title="3 延申内容"></a>3 延申内容</h2><h3 id="3-1-docker版mysql5-6安装"><a href="#3-1-docker版mysql5-6安装" class="headerlink" title="3.1 docker版mysql5.6安装"></a>3.1 docker版mysql5.6安装</h3><div class="note warning"><p><strong>说明</strong><br>采用docker版本mysql5.6安装插件，发现只有mysql5.6.36版本可以正常加载插件安装，该版本以上没有成功。</p></div>
<p>参考</p>
<p><a href="https://www.cnblogs.com/syy1757528181/p/14480232.html" target="_blank" rel="noopener">https://www.cnblogs.com/syy1757528181/p/14480232.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>日志</tag>
        <tag>审计</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu20.04安装NVIDIA显卡驱动+CUDA</title>
    <url>/2022/01/12/Postgresql%E5%BC%80%E5%90%AF%E6%97%A5%E5%BF%97%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="postgresql开启日志审计"><a href="#postgresql开启日志审计" class="headerlink" title="postgresql开启日志审计"></a>postgresql开启日志审计</h1><a id="more"></a>
<p><strong>1、审计清单说明</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logging_collector   <span class="comment"># 是否开启日志收集开关，默认off，推荐on</span></span><br><span class="line"></span><br><span class="line">log_destination     -- 日志记录类型，默认是stderr，只记录错误输出，推荐csvlog，总共包含：`stderr, csvlog, syslog, and eventlog,`</span><br><span class="line"></span><br><span class="line">log_directory       <span class="comment"># 日志路径，默认是$PGDATA/pg_log, </span></span><br><span class="line"></span><br><span class="line">log_filename        <span class="comment"># 日志名称，默认是postgresql-%Y-%m-%d_%H%M%S.log</span></span><br><span class="line"></span><br><span class="line">log_file_mode       <span class="comment"># 日志文件类型，默认为0600</span></span><br><span class="line"></span><br><span class="line">log_truncate_on_rotation <span class="comment"># 默认为off，设置为on的话，文件内容覆盖方式：off后面附加，on：清空再加</span></span><br><span class="line"></span><br><span class="line">log_rotation_age    <span class="comment"># 保留单个文件的最大时长,默认是1d,也有1h,1min,1s</span></span><br><span class="line"></span><br><span class="line">log_rotation_size    <span class="comment"># 保留单个文件的最大尺寸，默认是10MB</span></span><br><span class="line"></span><br><span class="line">log_error_verbosity  <span class="comment"># 默认为default，verbose表示冗长的</span></span><br><span class="line"></span><br><span class="line">log_connections  <span class="comment"># 用户session登陆时是否写入日志，默认off，推荐为on</span></span><br><span class="line"></span><br><span class="line">log_disconnections <span class="comment"># 用户session退出时是否写入日志，默认off，推荐为on</span></span><br><span class="line"></span><br><span class="line">log_statement  --`记录用户登陆数据库后的各种操作`</span><br><span class="line"></span><br><span class="line">     1. none，即不记录</span><br><span class="line">     2. ddl(记录create,drop和alter)</span><br><span class="line">     3. mod(记录ddl+insert,delete,update和truncate)</span><br><span class="line">     4. all(mod+select)</span><br><span class="line"></span><br><span class="line">log_min_duration_statement = 2s        -- `记录超过2秒的SQL`</span><br><span class="line">log_checkpoints = on       <span class="comment"># 检查点和重启点被记录再服务器日志中。一些统计信息也被包括再日志消息中，包括写入缓冲区的数据和写他们呢所花的时间。这个参数智能在postgresql.conf文件中或在服务器命令行上设置。默认是关闭（off）</span></span><br><span class="line">log_lock_waits ＝ on       <span class="comment"># 如果一个会话等待某个类型的锁的时间超过deadlock_timeout的值，该参数决定是否在数据库日志中记录这个信息。</span></span><br><span class="line">deadlock_timeout ＝ 1s     <span class="comment"># 数据库的锁通常可以在pg_locks这个系统表里找，但这只是当前的锁表/行信息，如果你想看一天内有多少个超过死锁时间的锁发生，可以在日志里设置并查看，log_lock_waits 默认是off，可以设置开启。这个可以区分SQL慢是资源紧张还是锁等待的问题。</span></span><br></pre></td></tr></table></figure>
<p><strong>2、推荐的设置参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logging_collector = on</span><br><span class="line">log_destination = <span class="string">'csvlog'</span></span><br><span class="line">log_truncate_on_rotation = on</span><br><span class="line">log_connections = on</span><br><span class="line">log_disconnections = on</span><br><span class="line">log_error_verbosity = verbose</span><br><span class="line">log_statement = ddl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这部分是postgresql.conf文件中没有的</span></span><br><span class="line">log_min_duration_statement = 60s    <span class="comment"># 记录超过60s的SQL</span></span><br><span class="line">log_checkpoints = on                  </span><br><span class="line">log_lock_waits ＝ on</span><br><span class="line">deadlock_timeout ＝ 1s</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看日志目录和日志文件名</span></span><br><span class="line">show log_directory;</span><br><span class="line">show log_filename;</span><br></pre></td></tr></table></figure>
<p><strong>3、参数修改方法</strong></p>
<p>直接修改配置文件</p>
<p>postgresql.conf默认位于$PGDATA目录下。</p>
<p>vim /usr/data/pgsql/data/postgresql.conf</p>
<p>用超级用户运行：postgres=# SELECT pg_reload_conf();</p>
<p>show命令可以查询当前状态</p>
<p><strong>4、 参考文档</strong></p>
<p><a href="http://t.zoukankan.com/tiandi-p-13568675.html" target="_blank" rel="noopener">http://t.zoukankan.com/tiandi-p-13568675.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
        <tag>日志</tag>
        <tag>审计</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu20.04安装NVIDIA显卡驱动+CUDA</title>
    <url>/2022/01/12/ubuntu20-04%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8-CUDA/</url>
    <content><![CDATA[<h2 id="1-安装驱动"><a href="#1-安装驱动" class="headerlink" title="1 安装驱动"></a>1 安装驱动</h2><h3 id="1-1-查看显卡的型号"><a href="#1-1-查看显卡的型号" class="headerlink" title="1.1 查看显卡的型号"></a>1.1 查看显卡的型号</h3><p>打开终端，输入指令以查看电脑的显卡型号：·</p>
<a id="more"></a>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">lspci <span class="string">| grep -i vga</span></span><br></pre></td></tr></table></figure>
<p><code>ubuntu-drivers devices</code></p>
<p>可以看到如下界面：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110122259734.png" alt="image-20220110122259734">                               </p>
<p><code>model</code>即为显卡的型号信息，此处为<code>GeForce RTX 2070 SUPER</code>；推荐的显卡驱动版本号为<code>nvidia-driver-450 - distro non-free</code>。</p>
<h3 id="1-2-官网下载显卡驱动"><a href="#1-2-官网下载显卡驱动" class="headerlink" title="1.2 官网下载显卡驱动"></a>1.2 官网下载显卡驱动</h3><p>到官网下载对应的显卡驱动：</p>
<p>下载最新版官方 GeForce 驱动程序<a href="http://www.nvidia.cn" target="_blank" rel="noopener">www.nvidia.cn</a></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110122634928.png" alt="image-20220110122634928">                               </p>
<p>ubuntu系统的话，选择对应显卡型号的Display Driver进行下载。</p>
<h3 id="1-3-安装相关依赖"><a href="#1-3-安装相关依赖" class="headerlink" title="1.3 安装相关依赖"></a>1.3 安装相关依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line">sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br></pre></td></tr></table></figure>
<h3 id="1-4-禁用系统默认显卡驱动"><a href="#1-4-禁用系统默认显卡驱动" class="headerlink" title="1.4 禁用系统默认显卡驱动"></a>1.4 禁用系统默认显卡驱动</h3><p><code>sudo gedit /etc/modprobe.d/blacklist-nouveau.conf</code></p>
<p>打开文件，在文件末尾写入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure>
<p>保存后手动更新；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>
<p>电脑重启，输入下列指令进行确认，若无输出，则禁用成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | `grep` nouveau</span><br></pre></td></tr></table></figure>
<h3 id="1-5-停止lightdm桌面服务"><a href="#1-5-停止lightdm桌面服务" class="headerlink" title="1.5 停止lightdm桌面服务"></a>1.5 停止lightdm桌面服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure>
<p>如果提示没有lightdm，就安装一下，再执行上面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y lightdm</span><br></pre></td></tr></table></figure>
<p>（因为后面使用的命令行界面tty1~7 需要lightdm）<br> 接下来按住键盘的Ctrl+Alt+F1，如果黑屏就切换到tty2，按Ctrl+Alt+F2<br> 如果Ctrl+Alt+F1后还显示图形化桌面就重启一下电脑，之后不要登录，在登录界面直接按Ctrl+Alt+F1或F2，这时应该进了命令行界面了，然后登录root用户或者你的普通用户，如果登录root用户时所有密码都登录失败，一般是因为你装系统时没设置root密码的原因，这时就需要设置一下root账户密码，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>
<p>然后会让你输入你的普通用户密码，再输入两次root密码，然后就可以在命令行界面登录root账户了。</p>
<h3 id="1-6-安装驱动"><a href="#1-6-安装驱动" class="headerlink" title="1.6 安装驱动"></a>1.6 安装驱动</h3><p> （1）首先查看你有没有安装gcc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure>
<p> 如果没有安装gcc一般make也没安装，这时需要安装一下gcc和make</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc </span><br><span class="line">sudo apt install make</span><br><span class="line"><span class="comment"># 或者直接执行</span></span><br><span class="line">sudo apt install gcc &amp; make <span class="comment"># 同时安装gcc和make，不用一条一条执行了，效果和上面两条命令相同</span></span><br></pre></td></tr></table></figure>
<p>（2）执行安装<br> cd到你下载的显卡驱动的目录<br> 执行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo chmod a+x NVIDIA-Linux-x86_64-450.80.02.run</span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-450.80.02.run -no-x-<span class="keyword">check</span> -<span class="keyword">no</span>-nouveau-<span class="keyword">check</span> -<span class="keyword">no</span>-opengl-files</span><br><span class="line"># -<span class="keyword">no</span>-x-<span class="keyword">check</span>:安装时关闭X服务</span><br><span class="line"># -<span class="keyword">no</span>-nouveau-<span class="keyword">check</span>: 安装时禁用nouveau</span><br><span class="line"># -<span class="keyword">no</span>-opengl-files:只安装驱动文件，不安装OpenGL文件</span><br></pre></td></tr></table></figure>
<p>下面者两个按图中选择，其他默认就好</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110123344145.png" alt="image-20220110123344145"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110123354452.png" alt="image-20220110123354452"></p>
<p>安装完成以后执行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvidia-smi</span></span><br></pre></td></tr></table></figure>
<p>如果显示如下内容则表示安装成功</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110123423576.png" alt="image-20220110123423576"></p>
<h2 id="2-安装CUDA"><a href="#2-安装CUDA" class="headerlink" title="2 安装CUDA"></a>2 安装CUDA</h2><ol>
<li>从上面的图中可以看到我的显卡最高可以支持cuda11.0(绿色框内)<br> 下载cuda <a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit-archive</a><br> 首先需要知道不同版本的cuda需要的gcc版本是不同的，cuda11.0与gcc的对应关系如下：</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110123511530.png" alt="image-20220110123511530"></p>
<p>其他cuda版本与gcc的版本关系可以在cuda对应版本后面的document—&gt;Installation Guide Linux下找到，不再赘述。</p>
<p>找到自己需要的cuda版本如下选择，最下面虚线框内会给出下载和命令</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110123530015.png" alt="image-20220110123530015"></p>
<p>在终端中执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://developer.download.nvidia.com/compute/cuda/11.0.2/local_installers/cuda_11.0.2_450.51.05_linux.run</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>下载完成后进行cuda安装<br> cd到下载的cuda所在目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装cuda</span></span><br><span class="line">sudo sh cuda_11.0.2_450.51.05_linux.run</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>正常安装的情况下，会出现下面显示：</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110133108268.png" alt="image-20220110133108268"></p>
<p>这是软件协议，跟普通软件安装时一样，这时输入： accept</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110133118197.png" alt="image-20220110133118197"></p>
<p>在Driver处敲回车，选择不安装驱动，因为之前已经安装过驱动程序，这里是因为每个cuda都会自带一套符合当前版本cuda最低要求的驱动程序，如果这里选择安装的驱动的话，在Windows上安装时会将之前安装的驱动覆盖，但是在linux上覆盖安装的话，可能会出现错误，具体没有试过，如果想试试可以自行测试。我们使用之前自己下载的驱动。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110133141141.png" alt="image-20220110133141141"></p>
<p>然后按方向键将光标选中最后的Install再回车，开始安装，过一会儿会显示如下：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110133216983.png" alt="image-20220110133216983"></p>
<p>如果显示如上图，则表示安装完成，这时还不算安装成功，根据上面提示需要配置环境变量，进行如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开.bashrc文件</span></span><br><span class="line">gedit ~/.bashrc</span><br><span class="line"><span class="comment"># 将下面的11.0替换为你的cuda版本，其他不变，如果不知道自己安装的是哪个版本，就去/usr/local/文件夹下找一下</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-11.0/bin<span class="variable">$&#123;PATH:+:$&#123;PATH&#125;</span>&#125;</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-11.0/lib64<span class="variable">$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>完事儿以后，执行如下命令更新变量，使其生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>在终端输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvcc -V</span></span><br></pre></td></tr></table></figure>
<p>如果显示<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/image-20220110133336718.png" alt="image-20220110133336718"><br> 至此，cuda的安装就算完成了。</p>
<h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3 参考"></a>3 参考</h2><p><a href="https://www.mlzhilu.com/archives/ubuntu2004安装nvidia显卡驱动" target="_blank" rel="noopener">Ubuntu20.04安装NVIDIA显卡驱动+cuda+cudnn配置深度学习环境 (mlzhilu.com)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>显卡</tag>
        <tag>ubuntu</tag>
        <tag>驱动</tag>
        <tag>cuda</tag>
        <tag>nvidia</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql开启密码复杂度配置</title>
    <url>/2022/01/13/mysql%E5%BC%80%E5%90%AF%E5%AF%86%E7%A0%81%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>mysql 5.6对密码的强度进行了加强，推出了 validate_password 插件。支持密码的强度要求。</p>
<a id="more"></a>
<p>mysql默认带validate_password 插件，直接装载插件即可。</p>
<h2 id="1-装载plugin"><a href="#1-装载plugin" class="headerlink" title="1 装载plugin"></a>1 装载plugin</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;&gt;INSTALL PLUGIN validate_password SONAME 'validate_password.so';</span><br></pre></td></tr></table></figure>
<h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2 修改配置文件"></a>2 修改配置文件</h2><p>在配置文件中打开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugin-load=validate_password.so</span><br><span class="line">validate-password=FORCE_PLUS_PERMANENT</span><br><span class="line">validate_password_policy=2</span><br></pre></td></tr></table></figure>
<h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3 验证"></a>3 验证</h2><p>当建立用户密码时，如果不符合预设的规则，那么就不会通过：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on *.* totester@'localhost' identified by 'tasssss';</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements；</span><br></pre></td></tr></table></figure>
<p>修改密码时，一样不通过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set password for test@‘localhost’ = password('123qwe!');</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure>
<h2 id="4-密码默认规则"><a href="#4-密码默认规则" class="headerlink" title="4 密码默认规则"></a>4 密码默认规则</h2><ol>
<li>必须包含数字</li>
<li>必须包含大、小写字母</li>
<li>必须包含特殊字符</li>
<li>必须大于等于8位</li>
</ol>
<h2 id="5-插件说明"><a href="#5-插件说明" class="headerlink" title="5 插件说明"></a>5 插件说明</h2><h3 id="5-1-相关选项"><a href="#5-1-相关选项" class="headerlink" title="5.1 相关选项"></a>5.1 相关选项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">validate-password=ON/OFF/FORCE/FORCE_PLUS_PERMANENT  <span class="comment"># 决定是否使用该插件(及强制/永久强制使用)。</span></span><br><span class="line"></span><br><span class="line">validate_password_dictionary_file                <span class="comment"># 插件用于验证密码强度的字典文件路径。</span></span><br><span class="line"></span><br><span class="line">validate_password_length                         <span class="comment"># 密码最小长度。</span></span><br><span class="line"></span><br><span class="line">validate_password_mixed_case_count               <span class="comment"># 密码至少要包含的小写字母个数和大写字母个数。</span></span><br><span class="line"></span><br><span class="line">validate_password_number_count                   <span class="comment"># 密码至少要包含的数字个数。</span></span><br><span class="line"></span><br><span class="line">validate_password_policy                         <span class="comment"># 密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。</span></span><br><span class="line"></span><br><span class="line">validate_password_special_char_count             <span class="comment"># 密码至少要包含的特殊字符数。</span></span><br></pre></td></tr></table></figure>
<p><strong>其中，关于validate_password_policy-密码强度检查等级：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0/LOW     <span class="comment"># 只检查长度。</span></span><br><span class="line"></span><br><span class="line">1/MEDIUM  <span class="comment"># 检查长度、数字、大小写、特殊字符。</span></span><br><span class="line"></span><br><span class="line">2/STRONG  <span class="comment"># 检查长度、数字、大小写、特殊字符字典文件。</span></span><br></pre></td></tr></table></figure>
<h3 id="5-2-插件的安装启用"><a href="#5-2-插件的安装启用" class="headerlink" title="5.2 插件的安装启用"></a>5.2 插件的安装启用</h3><p>插件对应的库对象文件需在配置选项<code>plugin_dir</code>指定的目录中。</p>
<p>可使用<code>--plugin-load=validate_password.so</code>，在server启动时载入插件，或者将<code>plugin-load=validate_password.so</code>写入配置文件。</p>
<p>也可以通过如下语句在server运行时载入插件（会注册进mysql.plugins表）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSTALL PLUGIN validate_password SONAME 'validate_password.so';</span><br></pre></td></tr></table></figure>
<h3 id="5-3-为阻止该插件在运行时被删除可在配置文件中添加"><a href="#5-3-为阻止该插件在运行时被删除可在配置文件中添加" class="headerlink" title="5.3 为阻止该插件在运行时被删除可在配置文件中添加"></a>5.3 为阻止该插件在运行时被删除可在配置文件中添加</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">plugin-<span class="keyword">load</span>=validate_password.so</span><br><span class="line"><span class="keyword">validate</span>-<span class="keyword">password</span>=FORCE_PLUS_PERMANENT</span><br></pre></td></tr></table></figure>
<h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h2><p><a href="https://www.jb51.net/article/87773.htm" target="_blank" rel="noopener">MySql5.6使用validate password 插件加强密码强度的安装及使用方法<em>Mysql</em>脚本之家 (jb51.net)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>审计</tag>
        <tag>密码</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7系统安全审计</title>
    <url>/2022/01/14/Centos7%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="1-Centos7审计配置"><a href="#1-Centos7审计配置" class="headerlink" title="1 Centos7审计配置"></a>1 Centos7审计配置</h1><p>通过<code>auditd</code>，系统审核允许系统管理员监视其系统这样他们就可以检测到未经授权的数据访问或修改。</p>
<p>默认情况下，<code>auditd</code>将审核<code>SELinux AVC</code>拒绝、系统登录、帐户修改和身份验证事件。事件将记录到 <code>/var/log/audit/audit.log</code></p>
<a id="more"></a>
<h1 id="2-audit使用"><a href="#2-audit使用" class="headerlink" title="2 audit使用"></a>2 audit使用</h1><h2 id="2-1-配置文件"><a href="#2-1-配置文件" class="headerlink" title="2.1 配置文件"></a>2.1 配置文件</h2><p><code>auditctl</code> : 即时控制审计守护进程的行为的工具，比如如添加规则等等</p>
<p><code>aureport</code> : 查看和生成审计报告的工具</p>
<p><code>ausearch</code> : 查找审计事件的工具</p>
<p><code>auditspd</code> : 转发事件通知给其他应用程序，而不是写入到审计日志文件中</p>
<p><code>autrace</code> : 一个用于跟踪进程的命令</p>
<ul>
<li>/etc/audit/auditd.conf</li>
<li>/etc/audit/rules.d/audit.rules</li>
<li>/etc/audit/audit.rules                                 #　根据/etc/audit/rules.d/audit.rules自动生成</li>
</ul>
<h3 id="2-1-1-auditd-conf"><a href="#2-1-1-auditd-conf" class="headerlink" title="2.1.1 auditd.conf"></a>2.1.1 auditd.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否记录本地事件，如果设为no，只记录来自网络的事件</span></span><br><span class="line">local_events = yes</span><br><span class="line">write_logs = yes</span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line">log_file = /var/<span class="built_in">log</span>/audit/audit.log</span><br><span class="line">log_group = root</span><br><span class="line">log_format = RAW</span><br><span class="line"><span class="comment"># 日志文件刷新方式，可选的选项有：</span></span><br><span class="line"><span class="comment"># NONE：不做特别处理</span></span><br><span class="line"><span class="comment"># INCREMENTAL：用freq选项的值确定多长时间发生一次向磁盘的刷新</span></span><br><span class="line"><span class="comment"># DATA：审计数据和日志文件是同步的</span></span><br><span class="line"><span class="comment"># SYNC：写日志文件时，数据和元数据是同步的</span></span><br><span class="line">flush = INCREMENTAL_ASYNC</span><br><span class="line">freq = 50</span><br><span class="line"><span class="comment"># 日志文件最大8MB</span></span><br><span class="line">max_log_file = 8</span><br><span class="line"><span class="comment"># 日志文件数量</span></span><br><span class="line">num_logs = 5</span><br><span class="line"><span class="comment"># 进程优先级（-4），ps axl | grep auditd 可查</span></span><br><span class="line">priority_boost = 4</span><br><span class="line">disp_qos = lossy</span><br><span class="line">dispatcher = /sbin/audispd</span><br><span class="line">name_format = NONE</span><br><span class="line"><span class="comment">##name = mydomain</span></span><br><span class="line"><span class="comment"># 当log文件达到max_log_file设定大小后的动作。可选的动作有：</span></span><br><span class="line"><span class="comment"># IGNORE：忽略max_log_file设置的限制，继续写log文件</span></span><br><span class="line"><span class="comment"># SYSLOG：向syslog中写入一条warning</span></span><br><span class="line"><span class="comment"># SUSPEND：auditd不再写log文件，但是auditd继续运行</span></span><br><span class="line"><span class="comment"># ROTATE：分多个log文件，一个log文件达到上限后在创建一个新的不同名字的log文件</span></span><br><span class="line">max_log_file_action = ROTATE</span><br><span class="line"><span class="comment"># log_file文件所在的分区空闲空间少于这个设定的值时，触发相应的动作，单位是MB</span></span><br><span class="line">space_left = 75</span><br><span class="line"><span class="comment"># space_left设定被触发时的动作。可选动作有：</span></span><br><span class="line"><span class="comment"># IGNORE, SYSLOG, SUSPEND：与前面max_log_file_action相似</span></span><br><span class="line"><span class="comment"># SINGLE：audit进程会将系统模式变为单用户模式</span></span><br><span class="line"><span class="comment"># HALT：audit进程将会触发系统关机</span></span><br><span class="line">space_left_action = SYSLOG</span><br><span class="line">verify_email = yes</span><br><span class="line">action_mail_acct = root</span><br><span class="line">admin_space_left = 50</span><br><span class="line">admin_space_left_action = SUSPEND</span><br><span class="line"><span class="comment"># 磁盘满后触发的动作</span></span><br><span class="line">disk_full_action = SUSPEND</span><br><span class="line"><span class="comment"># 磁盘错误触发的动作</span></span><br><span class="line">disk_error_action = SUSPEND</span><br><span class="line">use_libwrap = yes</span><br><span class="line"><span class="comment">##tcp_listen_port = 60</span></span><br><span class="line">tcp_listen_queue = 5</span><br><span class="line">tcp_max_per_addr = 1</span><br><span class="line"><span class="comment">##tcp_client_ports = 1024-65535</span></span><br><span class="line">tcp_client_max_idle = 0</span><br><span class="line">enable_krb5 = no</span><br><span class="line">krb5_principal = auditd</span><br><span class="line"><span class="comment">##krb5_key_file = /etc/audit/audit.key</span></span><br><span class="line">distribute_network = no</span><br></pre></td></tr></table></figure>
<h2 id="2-2-常用命令"><a href="#2-2-常用命令" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*查看规则*/</span></span><br><span class="line">auditctl -l</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查看命令帮助*/</span></span><br><span class="line">auditctl -h</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">auditctl -w /data -p rwxa</span><br><span class="line"><span class="comment">/*监控/data目录</span></span><br><span class="line"><span class="comment">-w path : 指定要监控的路径</span></span><br><span class="line"><span class="comment">-p : 指定触发审计的文件/目录的访问权限</span></span><br><span class="line"><span class="comment">rwxa ： 指定的触发条件，r 读取权限，w 写入权限，x 执行权限，a 属性（attr）*/</span></span><br></pre></td></tr></table></figure>
<p><strong>永久保存审计规则</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/audit/rules.d/audit.rules</span><br><span class="line">例如将-w /data/ -p rwxa加入到最后一行</span><br><span class="line">service auditd restart</span><br><span class="line">auditctl -l</span><br></pre></td></tr></table></figure>
<h1 id="3-配置开机启动"><a href="#3-配置开机启动" class="headerlink" title="3 配置开机启动"></a>3 配置开机启动</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span>  auditd</span><br></pre></td></tr></table></figure>
<h1 id="4-配置规则"><a href="#4-配置规则" class="headerlink" title="4 配置规则"></a>4 配置规则</h1><p>规则类型可分为：</p>
<ol>
<li><strong>控制规则</strong>：控制audit系统的规则；</li>
<li><strong>文件系统规则</strong>：也可以认为是文件监控，可以监控一个特定文件或者一个路径。</li>
<li><strong>系统调用规则</strong>：可以记录特定程序的系统调用。</li>
</ol>
<h2 id="4-1-控制规则"><a href="#4-1-控制规则" class="headerlink" title="4.1 控制规则"></a>4.1 控制规则</h2><p><code>-b</code> 设置在内核中audit缓冲空间的最大值。</p>
<p><code>-f</code>  这个选项来决定内核如何处理<code>critical erros：0=silent 1=printk 2=panic</code>.默认值为1。</p>
<p><code>-e</code> 设置使能标志，设置为0，为关闭了audit，设置为1，则开启audit；当设置为2时，表示锁定，一般在设置完其他规则后最后设置，防止其他人修改规则；任何修改规则的行为都会被拒绝，并且记录审计日志，只有当重启系统后，这个使能标志才可以被修改。</p>
<h2 id="4-2-文件系统规则"><a href="#4-2-文件系统规则" class="headerlink" title="4.2 文件系统规则"></a>4.2 文件系统规则</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auditctl -w path -p permissions -k key_name</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-w</code> : 目录或者文件路径</li>
<li><code>-p</code>： 描述文件系统监视将触发的权限访问类型，r=读取，w=写入，x=执行，a=属性更改。</li>
<li><code>-k</code>: 设置审核规则的筛选关键字</li>
</ul>
<h2 id="4-3-系统调用规则"><a href="#4-3-系统调用规则" class="headerlink" title="4.3 系统调用规则"></a>4.3 系统调用规则</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auditctl -a [list,action|action,list] -S [Syscall name or number|all] -F field=value -k key_name</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-a</code>:   action和list 明确一个事件被记录。action可以为always或者never，list明确出对应的匹配过滤，list可以为：task,exit,user,exclude,filesystem。</li>
<li><code>-S</code><strong>:</strong>   system_call 明确出系统调用的名字，几个系统调用可以写在一个规则里，如-S xxx -S xxx。系统调用的名字可以在/usr/include/asm/unistd_64.h文件中找到。</li>
<li><code>-F</code>:   field=value 作为附加选项，修改规则以匹配特定架构、GroupID，ProcessID等的事件。具体有哪些字段，可以参考man linux <a href="https://linux.die.net/man/8/auditctl" target="_blank" rel="noopener">https://linux.die.net/man/8/auditctl</a></li>
</ul>
<h1 id="5-配置实例"><a href="#5-配置实例" class="headerlink" title="5 配置实例"></a>5 配置实例</h1><h2 id="5-1-记录系统的日期和时间的修改"><a href="#5-1-记录系统的日期和时间的修改" class="headerlink" title="5.1 记录系统的日期和时间的修改"></a>5.1 记录系统的日期和时间的修改</h2><p>vim   /etc/audit/rules.d/audit.rules</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S adjtimex -S settimeofday -k time-change</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S adjtimex -S settimeofday -S stime -k timechange</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S clock_settime -k time-change</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S clock_settime -k time-change</span><br><span class="line">-w /etc/localtime -p wa -k time-change</span><br></pre></td></tr></table></figure>
<h2 id="5-2-记录用户和组的修改事件"><a href="#5-2-记录用户和组的修改事件" class="headerlink" title="5.2 记录用户和组的修改事件"></a>5.2 记录用户和组的修改事件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-w /etc/group -p wa -k identity</span><br><span class="line">-w /etc/passwd -p wa -k identity</span><br><span class="line">-w /etc/gshadow -p wa -k identity</span><br><span class="line">-w /etc/shadow -p wa -k identity</span><br><span class="line">-w /etc/security/opasswd -p wa -k identity</span><br></pre></td></tr></table></figure>
<h2 id="5-3-记录网络环境修改时间"><a href="#5-3-记录网络环境修改时间" class="headerlink" title="5.3 记录网络环境修改时间"></a>5.3 记录网络环境修改时间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S sethostname -S setdomainname -k system-locale</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S sethostname -S setdomainname -k system-locale</span><br><span class="line">-w /etc/issue -p wa -k system-locale</span><br><span class="line">-w /etc/issue.net -p wa -k system-locale</span><br><span class="line">-w /etc/hosts -p wa -k system-locale</span><br><span class="line">-w /etc/sysconfig/network -p wa -k system-locale</span><br><span class="line">-w /etc/sysconfig/network-scripts/ -p wa -k system-locale</span><br></pre></td></tr></table></figure>
<h2 id="5-4-记录登录和登出事件"><a href="#5-4-记录登录和登出事件" class="headerlink" title="5.4 记录登录和登出事件"></a>5.4 记录登录和登出事件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-w /var/<span class="built_in">log</span>/lastlog -p wa -k logins</span><br><span class="line">-w /var/run/faillock/ -p wa -k logins</span><br></pre></td></tr></table></figure>
<h2 id="5-5-记录会话启动事件"><a href="#5-5-记录会话启动事件" class="headerlink" title="5.5 记录会话启动事件"></a>5.5 记录会话启动事件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-w /var/run/utmp -p wa -k session</span><br><span class="line">-w /var/<span class="built_in">log</span>/wtmp -p wa -k logins</span><br><span class="line">-w /var/<span class="built_in">log</span>/btmp -p wa -k logins</span><br></pre></td></tr></table></figure>
<p>文件<code>/var/run/utmp</code>跟踪当前登录的所有用户。所有审计记录都将用标识符“<code>session</code>”标记， 可以用<code>who</code>命令读取</p>
<p><code>/var/log/wtmp</code>文件跟踪登录、注销、关机和重新启动事件。</p>
<p>文件<code>/var/log/btmp</code>跟踪失败的登录尝试，可以通过输入命令 <code>‘/usr/bin/last-f /var/log/btmp’</code> 读取。所有审核记录都将被标记为标识符<code>“logins”</code></p>
<h2 id="5-6-监视对文件权限、属性、所有权和组的更改"><a href="#5-6-监视对文件权限、属性、所有权和组的更改" class="headerlink" title="5.6 监视对文件权限、属性、所有权和组的更改"></a>5.6 监视对文件权限、属性、所有权和组的更改</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod</span><br></pre></td></tr></table></figure>
<p>在所有情况下，审核记录将只为非系统用户id（<code>auid&gt;=1000</code>）并将忽略守护进程事件（<code>auid=4294967295</code>）。</p>
<p>所有审计记录用标识符“perm_mod”标记</p>
<h2 id="5-7-记录未授权文件访问尝试"><a href="#5-7-记录未授权文件访问尝试" class="headerlink" title="5.7 记录未授权文件访问尝试"></a>5.7 记录未授权文件访问尝试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F <span class="built_in">exit</span>=-EACCES -F auid&gt;=1000 -F auid!=4294967295 -k access</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F <span class="built_in">exit</span>=-EACCES -F auid&gt;=1000 -F auid!=4294967295 -k access</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F <span class="built_in">exit</span>=-EPERM -F auid&gt;=1000 -F auid!=4294967295 -k access</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F <span class="built_in">exit</span>=-EPERM -F auid&gt;=1000 -F auid!=4294967295 -k access</span><br></pre></td></tr></table></figure>
<h2 id="5-8-确保收集使用特权命令"><a href="#5-8-确保收集使用特权命令" class="headerlink" title="5.8 确保收集使用特权命令"></a>5.8 确保收集使用特权命令</h2><p>监视特权程序（那些在执行时设置了setuid和/或setgid位的程序）以确定没有权限的用户是否正在运行这些命令。</p>
<p><strong>通过下面命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> find / -xdev \( -perm -4000 -o -perm -2000 \) -<span class="built_in">type</span> f | awk</span><br><span class="line"><span class="string">'&#123;print \</span></span><br><span class="line"><span class="string">"-a always,exit -F path=" $1 " -F perm=x -F auid&gt;=1000 -F auid!=4294967295 \</span></span><br><span class="line"><span class="string">-k privileged" &#125;'</span></span><br></pre></td></tr></table></figure>
<p><strong>得到记录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/wall -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/chfn -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/chsh -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/chage -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/gpasswd -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/newgrp -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/mount -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/su -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/umount -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/sudo -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/write -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/crontab -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/ssh-agent -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/pkexec -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/bin/passwd -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/sbin/unix_chkpwd -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/sbin/pam_timestamp_check -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/sbin/netreport -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/sbin/usernetctl -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/sbin/postdrop -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/sbin/postqueue -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/lib/polkit-1/polkit-agent-helper-1 -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/libexec/utempter/utempter -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/libexec/dbus-1/dbus-daemon-launch-helper -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br><span class="line">-a always,<span class="built_in">exit</span> -F path=/usr/libexec/openssh/ssh-keysign -F perm=x -F auid&gt;=1000 -F auid!=4294967295  -k privileged</span><br></pre></td></tr></table></figure>
<h2 id="5-9-收集成功挂载磁盘事件"><a href="#5-9-收集成功挂载磁盘事件" class="headerlink" title="5.9 收集成功挂载磁盘事件"></a>5.9 收集成功挂载磁盘事件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S mount -F auid&gt;=1000 -F auid!=4294967295 -k mounts</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S mount -F auid&gt;=1000 -F auid!=4294967295 -k mount</span><br></pre></td></tr></table></figure>
<p>在所有情况下，审核记录将只为非系统用户id（<code>auid&gt;=1000</code>）并将忽略守护进程事件（<code>auid=4294967295</code>）。</p>
<p>所有审计记录用标识符“mount”和“mounts”标记</p>
<h2 id="5-10-确保收集用户的文件删除事件"><a href="#5-10-确保收集用户的文件删除事件" class="headerlink" title="5.10 确保收集用户的文件删除事件"></a>5.10 确保收集用户的文件删除事件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid&gt;=1000 -F auid!=4294967295 -k delete</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid&gt;=1000 -F auid!=4294967295 -k delete</span><br></pre></td></tr></table></figure>
<p>在所有情况下，审核记录将只为非系统用户id（<code>auid&gt;=1000</code>）并将忽略守护进程事件（<code>auid=4294967295</code>）。</p>
<p>所有审计记录用标识符“delete”标记</p>
<h2 id="5-11-确保收集对系统管理范围（sudoers）的更改"><a href="#5-11-确保收集对系统管理范围（sudoers）的更改" class="headerlink" title="5.11 确保收集对系统管理范围（sudoers）的更改"></a>5.11 确保收集对系统管理范围（sudoers）的更改</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-w /etc/sudoers -p wa -k scope</span><br><span class="line">-w /etc/sudoers.d/ -p wa -k scope</span><br></pre></td></tr></table></figure>
<h2 id="5-12-监视sudo日志文件"><a href="#5-12-监视sudo日志文件" class="headerlink" title="5.12 监视sudo日志文件"></a>5.12 监视sudo日志文件</h2><p>如果系统已正确配置为禁用su命令并强制所有管理员必须先登录，然后使用sudo执行特权命令，</p>
<p>然后所有管理员命令将被记录到/var/log/sudo.log文件.</p>
<p>每当执行命令时，审核事件将被触发为/var/log/sudo.log文件将打开文件进行写入，并执行管理命令将写入日志。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-w /var/<span class="built_in">log</span>/sudo.log -p wa -k actions</span><br></pre></td></tr></table></figure>
<h2 id="5-13-确保收集内核模块加载和卸载"><a href="#5-13-确保收集内核模块加载和卸载" class="headerlink" title="5.13 确保收集内核模块加载和卸载"></a>5.13 确保收集内核模块加载和卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-w /sbin/insmod -p x -k modules</span><br><span class="line">-w /sbin/rmmod -p x -k modules</span><br><span class="line">-w /sbin/modprobe -p x -k modules</span><br><span class="line">-a always,<span class="built_in">exit</span> -F arch=b64 -S init_module -S delete_module -k modules</span><br></pre></td></tr></table></figure>
<h2 id="5-14-确保审核配置是不可变的"><a href="#5-14-确保审核配置是不可变的" class="headerlink" title="5.14 确保审核配置是不可变的"></a>5.14 确保审核配置是不可变的</h2><p>审核规则不能使用auditctl修改。设置标志“-e2“强制将审核置于不可变模式。进行审核更改只能对系统重新启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-e 2</span><br></pre></td></tr></table></figure>
<h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6 参考"></a>6 参考</h1><p><a href="https://cloud.tencent.com/developer/article/1653503" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1653503</a></p>
<p><a href="https://www.cnblogs.com/zydev/p/13086818.html" target="_blank" rel="noopener">https://www.cnblogs.com/zydev/p/13086818.html</a></p>
<p><a href="https://linux.die.net/man/8/auditctl" target="_blank" rel="noopener">auditctl(8) - Linux man page (die.net)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>审计</tag>
        <tag>linux</tag>
        <tag>安全</tag>
        <tag>auditd</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx代理示例</title>
    <url>/2022/01/20/nginx%E4%BB%A3%E7%90%86%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="1-示例1"><a href="#1-示例1" class="headerlink" title="1 示例1"></a>1 示例1</h1><a id="more"></a>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"># 多本地路径代理</span><br><span class="line">    location /test &#123;</span><br><span class="line">        alias /test;</span><br><span class="line">    &#125;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">         alias /admin;</span><br><span class="line">    &#125;</span><br><span class="line"># 反向代理</span><br><span class="line">    location /landBlockOpt/ &#123;</span><br><span class="line">        proxy_pass http://192.168.0.91:85/landBlockOpt/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache's document root</span><br><span class="line">    # concurs with nginx's one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat安全加固</title>
    <url>/2022/01/25/Tomcat%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<h1 id="1-删除文档和实例程序"><a href="#1-删除文档和实例程序" class="headerlink" title="1. 删除文档和实例程序"></a>1. 删除文档和实例程序</h1><p><strong>检查方法</strong> ：打开tomcat_home/webapps文件夹，默认存在docs和examples文件夹</p>
<p><strong>加固方法</strong>：建议删除docs和examples文件夹</p>
<a id="more"></a>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/20200529173231161.png" alt="在这里插入图片描述"></p>
<h1 id="2-设置shutdown字符串"><a href="#2-设置shutdown字符串" class="headerlink" title="2 设置shutdown字符串"></a>2 <strong>设置shutdown字符串</strong></h1><p><strong>安全基线项说明</strong>：防止恶意用户telnet到8005端口后，发送SHUTDOWN命令停止tomcat服务</p>
<p><strong>检查方法</strong>：打开tomcat_home/conf/server.xml，查看是否设置了复杂的字符串<br><code>&lt;Server port=&quot;8005&quot;shutdown=“复杂的字符串”&gt;</code></p>
<p><strong>加固方法</strong>：设置复杂的字符串，防止恶意用户猜测</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/20200529173309930.png" alt="在这里插入图片描述"></p>
<h1 id="3-检查控制台口令"><a href="#3-检查控制台口令" class="headerlink" title="3 检查控制台口令"></a>3 检查控制台口令</h1><p><strong>安全基线项说明</strong>：加固tomcat控制台，设置复杂的口令</p>
<p><strong>检查方法：</strong></p>
<ol>
<li>如果不需要使用控制台<br>Tomcat 6.x/7.x：<br>默认通过<a href="http://ip:8080/manager/html可以访问tomcatmanager，如果不需要使用，建议删除tomcat_home/webapps/manager和host-manager文件夹；" target="_blank" rel="noopener">http://ip:8080/manager/html可以访问tomcatmanager，如果不需要使用，建议删除tomcat_home/webapps/manager和host-manager文件夹；</a></li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/20200529173403603.png" alt="在这里插入图片描述"></p>
<ol start="2">
<li>如果需要使用tomcatmanager<br>Tomcat 5.x/6.x:<br>打开tomcat_home/conf/tomcat-users.xml，查看用户密码复杂度</li>
</ol>
<p><strong>例如：</strong></p>
<p><code>&lt;user username=&quot;tomcat&quot;password=&quot;复杂的口令&quot;roles=“manager”/&gt;</code></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/20200529173422127.png" alt="在这里插入图片描述"></p>
<h1 id="4-禁止列目录"><a href="#4-禁止列目录" class="headerlink" title="4 禁止列目录"></a>4 禁止列目录</h1><p><strong>安全基线项说明</strong>：防止直接访问目录时由于找不到默认主页而列出目录下所有文件</p>
<p><strong>检查方法</strong>：打开应用程序的web.xml，查看listings是否设置为false<br>listings<br>false</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/20200529173501171.png" alt="在这里插入图片描述"></p>
<h1 id="5-日志审核"><a href="#5-日志审核" class="headerlink" title="5 日志审核"></a>5 日志审核</h1><p><strong>安全基线项说明</strong>：检查tomcat是否记录了访问日志</p>
<p><strong>检查方法</strong>：tomcat的日志信息默认存放在tomcat_home/logs中，访问日志默认未开启</p>
<p><strong>加固方法：</strong><br>如果tomcat前端有Apache，Apache可以记录访问日志。<br>如果tomcat独立运行，可以开启tomcat访问日志，修改<code>tomcat_home/conf/server.xml</code>，取消注释：<br><code>&lt;ValveclassName=&quot;org.apache.catalina.valves.AccessLogValve&quot;directory=“logs”
prefix=“localhost_access_log.“suffix=”.txt” pattern=&quot;common&quot;resolveHosts=“false”/&gt;</code><br>启用access_log后，重启tomcat，在tomcat_home/logs中可以看到访问日志<br><strong>注：这里记录的时间转换为北京时间需要+8小时</strong></p>
<h1 id="6-禁止非法HTTP方法"><a href="#6-禁止非法HTTP方法" class="headerlink" title="6 禁止非法HTTP方法"></a>6 禁止非法HTTP方法</h1><p><strong>安全基线项目名称</strong>：禁用PUT、DELETE等危险的HTTP方法</p>
<p><strong>检查方法</strong>：编辑web.xml文件中配置，查看readonly的param-value值是否为false</p>
<p><strong>加固方法</strong>：编辑web.xml文件中配置，将readonly的param-value值设为false<br>org.apache.catalina.servlets.DefaultServlet的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="7-系统Banner信息"><a href="#7-系统Banner信息" class="headerlink" title="7 系统Banner信息"></a>7 系统Banner信息</h1><p><strong>安全基线项说明</strong>：修改系统Banner信息</p>
<p><strong>检查方法：</strong><br><strong>telnet判断信息：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet ip 8080</span><br><span class="line">HEAD /HTTP1.1然后两次回车，可以看到server的信息</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/01/20200529173706297.png" alt="在这里插入图片描述"></p>
<p>参考：<a href="https://mp.weixin.qq.com/s/RwjnnXKdIADp0rMMI_m5cQ" target="_blank" rel="noopener">安全服务之安全基线及加固（四）Tomcat篇 (qq.com)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2下的GPU调用</title>
    <url>/2022/01/28/WSL2%E4%B8%8B%E7%9A%84GPU%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<p><code>wsl</code>  wsl2</p>
<p><code>分支</code> ubuntu20.4</p>
<p><code>组件</code> nvidia-docker2</p>
<h1 id="2-安装wsl2"><a href="#2-安装wsl2" class="headerlink" title="2 安装wsl2"></a>2 安装wsl2</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windown 10 2004及以上（保证windown环境已正确安装驱动）</span></span><br><span class="line">wsl --install      <span class="comment"># 默认安装ubuntu</span></span><br><span class="line">wsl --update       <span class="comment"># 更新到最新版本</span></span><br><span class="line">wsl -d ubuntu      <span class="comment"># 启动并进入ubuntu</span></span><br></pre></td></tr></table></figure>
<h1 id="3-安装docker"><a href="#3-安装docker" class="headerlink" title="3 安装docker"></a>3 安装docker</h1><p>参考ubuntu安装docker官方教程</p>
<h1 id="4-安装nvidia-docker"><a href="#4-安装nvidia-docker" class="headerlink" title="4 安装nvidia-docker"></a>4 安装nvidia-docker</h1><h2 id="4-1-安装nvidia库"><a href="#4-1-安装nvidia库" class="headerlink" title="4.1 安装nvidia库"></a>4.1 安装nvidia库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line"><span class="variable">$curl</span> -s -L https://nvidia.github.io/nvidia-docker/ubuntu18.04/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line"><span class="variable">$sudo</span> apt-get update</span><br></pre></td></tr></table></figure>
<h2 id="4-2-安装nvidia-docker2并重新加载docker守护进程"><a href="#4-2-安装nvidia-docker2并重新加载docker守护进程" class="headerlink" title="4.2 安装nvidia-docker2并重新加载docker守护进程"></a>4.2 安装nvidia-docker2并重新加载docker守护进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt-get install nvidia-docker2</span><br><span class="line"><span class="variable">$sudo</span> pkill -SIGHUP dockerd</span><br><span class="line"><span class="variable">$docker</span> run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：运行上一步若报错</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qyh@qyh-mas:~$ sudo docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br><span class="line">docker: Error response from daemon: Unknown runtime specified nvidia.</span><br><span class="line">See <span class="string">'docker run --help'</span>.</span><br></pre></td></tr></table></figure>
<p>当显卡驱动安装好的前提下（用指令<code>nvidia-smi</code>来显示显卡驱动），则换成运行下步，指定安装的cuda版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@YW-HUAN-PC:/etc/apt/sources.list.d<span class="comment"># nvidia-smi</span></span><br><span class="line">Fri Jan 28 10:34:52 2022</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 470.57.01    Driver Version: 471.41       CUDA Version: 11.4     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                               |                      |               MIG M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0  On |                  N/A |</span><br><span class="line">| 38%   29C    P8     1W /  38W |    520MiB /  2048MiB |    ERR!      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                  |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class="line">|        ID   ID                                                   Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">root@YW-HUAN-PC:/etc/apt/sources.list.d<span class="comment"># nvidia-docker run --rm nvidia/cuda:10.1-devel | nvidia-smi</span></span><br><span class="line">Fri Jan 28 10:35:24 2022</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 470.57.01    Driver Version: 471.41       CUDA Version: 11.4     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                               |                      |               MIG M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0  On |                  N/A |</span><br><span class="line">| 38%   29C    P8     1W /  38W |    519MiB /  2048MiB |    ERR!      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                  |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class="line">|        ID   ID                                                   Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">root@YW-HUAN-PC:/etc/apt/sources.list.d<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>显示如上表示成功了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>gpu</tag>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习三-kubeadm安装k8s高可用集群</title>
    <url>/2022/02/09/kubernetes%E5%AD%A6%E4%B9%A0%E4%B8%89-kubeadm%E5%88%9B%E5%BB%BAk8s%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="1-集群逻辑架构"><a href="#1-集群逻辑架构" class="headerlink" title="1 集群逻辑架构"></a>1 集群逻辑架构</h1><a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/2018120518452648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5sZWlraW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%BB%98%E5%9B%BE-%E7%AC%AC%201%20%E9%A1%B5.drawio.png" alt="k8s集群高可用方案"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/k8s%E9%9B%86%E7%BE%A4%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%96%B9%E6%A1%88.png" alt="k8s集群高可用负载均衡方案"></p>
<p>这里主要基于k8s集群高可用负载均衡方案进行介绍，过程包含基于keepalived的高可用方案。</p>
<h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2 环境"></a>2 环境</h1><h2 id="2-1-物理环境"><a href="#2-1-物理环境" class="headerlink" title="2.1 物理环境"></a>2.1 物理环境</h2><table>
<thead>
<tr>
<th style="text-align:center">主机</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">配置</th>
<th style="text-align:center">OS</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">node1</td>
<td style="text-align:center">192.168.1.7</td>
<td style="text-align:center">2core 2GB</td>
<td style="text-align:center">Centos7.9</td>
<td>master1</td>
</tr>
<tr>
<td style="text-align:center">node2</td>
<td style="text-align:center">192.168.1.8</td>
<td style="text-align:center">2core 2GB</td>
<td style="text-align:center">Centos7.9</td>
<td>master2</td>
</tr>
<tr>
<td style="text-align:center">node3</td>
<td style="text-align:center">192.168.1.9</td>
<td style="text-align:center">2core 2GB</td>
<td style="text-align:center">Centos7.9</td>
<td>master3</td>
</tr>
<tr>
<td style="text-align:center">node4</td>
<td style="text-align:center">192.168.1.10</td>
<td style="text-align:center">2core 2GB</td>
<td style="text-align:center">Centos7.9</td>
<td>工作节点</td>
</tr>
</tbody>
</table>
<h2 id="2-2-软件环境"><a href="#2-2-软件环境" class="headerlink" title="2.2 软件环境"></a>2.2 软件环境</h2><table>
<thead>
<tr>
<th style="text-align:center">软件</th>
<th style="text-align:center">版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">docker</td>
<td style="text-align:center">v20.10.12</td>
</tr>
<tr>
<td style="text-align:center">kubeadmin</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kubelet</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kubectl</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">keeplalived</td>
<td style="text-align:center">1.3.5</td>
</tr>
<tr>
<td style="text-align:center">haproxy</td>
<td style="text-align:center">2.5</td>
</tr>
</tbody>
</table>
<h2 id="2-3-镜像"><a href="#2-3-镜像" class="headerlink" title="2.3 镜像"></a>2.3 镜像</h2><table>
<thead>
<tr>
<th style="text-align:center">镜像</th>
<th style="text-align:center">版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">conformance</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kube-apiserver</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kube-controller-manager</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kube-proxy</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kube-scheduler</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">flannel</td>
<td style="text-align:center">v1.0.1</td>
</tr>
</tbody>
</table>
<h1 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3 步骤"></a>3 步骤</h1><h2 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h2><h3 id="3-1-1-确保各节点MAC和product-uuid的唯一性"><a href="#3-1-1-确保各节点MAC和product-uuid的唯一性" class="headerlink" title="3.1.1 确保各节点MAC和product_uuid的唯一性"></a>3.1.1 确保各节点MAC和product_uuid的唯一性</h3><ul>
<li>你可以使用命令 <code>ip link</code> 或 <code>ifconfig -a</code> 来获取网络接口的 MAC 地址</li>
<li>可以使用 <code>sudo cat /sys/class/dmi/id/product_uuid</code> 命令对 product_uuid 校验</li>
</ul>
<p>一般来讲，硬件设备会拥有唯一的地址，但是有些虚拟机的地址可能会重复。</p>
<h3 id="3-1-2-运行iptables检查桥接流量"><a href="#3-1-2-运行iptables检查桥接流量" class="headerlink" title="3.1.2 运行iptables检查桥接流量"></a>3.1.2 运行iptables检查桥接流量</h3><p>确保 <code>br_netfilter</code> 模块被加载。这一操作可以通过运行 <code>lsmod | grep br_netfilter</code> 来完成。若要显式加载该模块，可执行 <code>sudo modprobe br_netfilter</code>。</p>
<p>为了让你的 Linux 节点上的 iptables 能够正确地查看桥接流量，你需要确保在你的 <code>sysctl</code> 配置中将 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure>
<h3 id="3-1-3-关闭防火墙"><a href="#3-1-3-关闭防火墙" class="headerlink" title="3.1.3 关闭防火墙"></a>3.1.3 关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
<p>如果各个主机启用了防火墙，需要开放Kubernetes各个组件所需要的端口。如下图所示，详细信息请看<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports" target="_blank" rel="noopener">官网</a>。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/20200416001914959.png" alt="在这里插入图片描述"></p>
<h3 id="3-1-4-永久关闭swap"><a href="#3-1-4-永久关闭swap" class="headerlink" title="3.1.4 永久关闭swap"></a>3.1.4 永久关闭swap</h3><p>vim /etc/fstab</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220207202709095.png" alt="image-20220207202709095"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220207202741311.png" alt="image-20220207202741311"></p>
<p>如果不修改，kubelet启动报错：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220207202527741.png" alt="image-20220207202527741"></p>
<h3 id="3-1-5-关闭selinux"><a href="#3-1-5-关闭selinux" class="headerlink" title="3.1.5 关闭selinux"></a>3.1.5 关闭selinux</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 SELinux 设置为 permissive 或 disabled模式（相当于将其禁用）</span></span><br><span class="line">sudo setenforce 0</span><br><span class="line">sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</span><br><span class="line">或</span><br><span class="line">sudo sed -i 's/^SELINUX=enforcing$/SELINUX=disabled/' /etc/selinux/config</span><br></pre></td></tr></table></figure>
<h2 id="3-2-安装docker"><a href="#3-2-安装docker" class="headerlink" title="3.2 安装docker"></a>3.2 安装docker</h2><p><strong>卸载旧版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>
<p><strong>源安装</strong></p>
<p>执行以下命令安装依赖包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。</p>
<p>执行下面的命令添加 <code>yum</code> 软件源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">$ sudo sed -i <span class="string">'s/download.docker.com/mirrors.aliyun.com\/docker-ce/g'</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo yum-config-manager \</span></span><br><span class="line"><span class="comment">#     --add-repo \</span></span><br><span class="line"><span class="comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>
<p><strong>安装docker-ce</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<p><strong>开机自启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">启动 Docker</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<h2 id="3-3-安装-kubeadm、kubelet-和-kubectl"><a href="#3-3-安装-kubeadm、kubelet-和-kubectl" class="headerlink" title="3.3 安装 kubeadm、kubelet 和 kubectl"></a>3.3 安装 kubeadm、kubelet 和 kubectl</h2><p>你需要在每台机器上安装以下的软件包：</p>
<ul>
<li><code>kubeadm</code>：用来初始化集群的指令。</li>
<li><code>kubelet</code>：在集群中的每个节点上用来启动 Pod 和容器等。</li>
<li><code>kubectl</code>：用来与集群通信的命令行工具。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\<span class="variable">$basearch</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">exclude=kubelet kubeadm kubectl</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装服务</span></span><br><span class="line">sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置kubelet开机自启</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span>  kubelet</span><br></pre></td></tr></table></figure>
<h2 id="3-4-配置cgroup驱动程序"><a href="#3-4-配置cgroup驱动程序" class="headerlink" title="3.4 配置cgroup驱动程序"></a>3.4 配置cgroup驱动程序</h2><p>需保证容器服务和kubelet的cgroup驱动一致，否则kubelet启动报错：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208095347892.png" alt="image-20220208095347892"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208095316580.png" alt="image-20220208095316580"></p>
<p><strong>由于 kubeadm 把 kubelet 视为一个系统服务来管理，所以对基于 kubeadm 的安装， 我们推荐使用 <code>systemd</code> 驱动，不推荐 <code>cgroupfs</code> 驱动。</strong></p>
<h3 id="3-4-1-Cgroup-驱动程序说明"><a href="#3-4-1-Cgroup-驱动程序说明" class="headerlink" title="3.4.1 Cgroup 驱动程序说明"></a>3.4.1 Cgroup 驱动程序说明</h3><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208110411304.png" alt="image-20220208110411304"></p>
<blockquote>
<p><strong>警告：</strong></p>
<p>你需要确保容器（docker）和 kubelet 所使用的是相同的 cgroup 驱动，否则 kubelet 进程会失败。</p>
<p>相关细节可参见<a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/" target="_blank" rel="noopener">kubelet配置 cgroup 驱动</a>。<a href="https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noopener">容器配置cgroup驱动</a></p>
</blockquote>
<h3 id="3-4-2-查看kubelet和docker的驱动程序"><a href="#3-4-2-查看kubelet和docker的驱动程序" class="headerlink" title="3.4.2 查看kubelet和docker的驱动程序"></a>3.4.2 查看kubelet和docker的驱动程序</h3><ul>
<li>kubelet</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment">#  cat /var/lib/kubelet/kubeadm-flags.env</span></span><br><span class="line">KUBELET_KUBEADM_ARGS=<span class="string">"--cgroup-driver=cgroup --hostname-override=node --network-plugin=cni --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/k8s-images-kx/pause:3.6"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --cgroup-driver=cgroup 该节点驱动程序为cgroup</span></span><br></pre></td></tr></table></figure>
<ul>
<li>docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker info |grep Cgroup</span></span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker驱动程序为 cgroupfs</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-4-Docker配置cgroup驱动"><a href="#3-4-4-Docker配置cgroup驱动" class="headerlink" title="3.4.4 Docker配置cgroup驱动"></a>3.4.4 Docker配置cgroup驱动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /etc/docker</span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  "exec-opts": ["native.cgroupdriver=systemd"],</span><br><span class="line">  "log-driver": "json-file",</span><br><span class="line">  "log-opts": &#123;</span><br><span class="line">    "max-size": "100m"</span><br><span class="line">  &#125;,</span><br><span class="line">  "storage-driver": "overlay2"</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@node3 ~]# systemctl daemon-reload </span><br><span class="line">[root@node3 ~]# systemctl restart docker</span><br><span class="line">[root@node3 ~]# docker info | grep cgroup</span><br><span class="line"> Cgroup Driver: systemd</span><br><span class="line"> Cgroup Version: 1</span><br></pre></td></tr></table></figure>
<h3 id="3-4-5-kubelet配置cgroup驱动（可选）"><a href="#3-4-5-kubelet配置cgroup驱动（可选）" class="headerlink" title="3.4.5 kubelet配置cgroup驱动（可选）"></a>3.4.5 kubelet配置cgroup驱动（可选）</h3><p><strong>kubelet不配置默认即使用<code>systemd</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将kubelet和docker 的驱动程序改成一致。</span></span><br><span class="line">vim /var/lib/kubelet/kubeadm-flags.env</span><br><span class="line">KUBELET_KUBEADM_ARGS=<span class="string">"--cgroup-driver=systemd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.1"</span></span><br><span class="line"><span class="comment"># 将cgroup改成systemd</span></span><br><span class="line"></span><br><span class="line">[root@node3 ~]<span class="comment"># systemctl daemon-reload </span></span><br><span class="line">[root@node3 ~]<span class="comment"># systemctl restart kubelet</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上步骤和《kubernetes学习二:kubeadm安装kubernetes集群（单master）》完全一致，主要区别在<strong>集群负载均衡及集群初始化方式</strong>上。</p>
<h2 id="3-5-keepalived-和-haproxy"><a href="#3-5-keepalived-和-haproxy" class="headerlink" title="3.5 keepalived 和 haproxy"></a>3.5 <a href="https://www.keepalived.org/" target="_blank" rel="noopener">keepalived</a> 和 <a href="https://www.haproxy.com/" target="_blank" rel="noopener">haproxy</a></h2><p><code>keepalived</code> : <strong>高可用软件</strong>，通过vrrp协议，vip地址的漂移，实现服务的高可用。</p>
<p><code>haproxy</code>: haproxy是一个开源的，高性能的，<strong>负载均衡软件</strong>。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220209174127641.png" alt="image-20220209174127641"></p>
<p><code>haproxy</code>主要用来实现kube-apiserver的负载，实际操作中非必选。</p>
<p><a href="https://github.com/kubernetes/kubeadm/blob/main/docs/ha-considerations.md#options-for-software-load-balancing" target="_blank" rel="noopener">官网说明</a></p>
<h3 id="3-5-1-请求架构"><a href="#3-5-1-请求架构" class="headerlink" title="3.5.1 请求架构"></a>3.5.1 请求架构</h3><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210164628651.png" alt="image-20220210164628651"></p>
<h3 id="3-5-2-keepalived"><a href="#3-5-2-keepalived" class="headerlink" title="3.5.2 keepalived"></a>3.5.2 keepalived</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y keepalived</span><br></pre></td></tr></table></figure>
<p><strong>主mastet</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"><span class="comment"># 关于邮箱的配置全部注释</span></span><br><span class="line"><span class="comment">#   notification_email &#123;</span></span><br><span class="line"><span class="comment">#     acassen@firewall.loc</span></span><br><span class="line"><span class="comment">#     failover@firewall.loc</span></span><br><span class="line"><span class="comment">#     sysadmin@firewall.loc</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#   notification_email_from Alexandre.Cassen@firewall.loc</span></span><br><span class="line"><span class="comment">#   smtp_server 192.168.200.1</span></span><br><span class="line"><span class="comment">#   smtp_connect_timeout 30</span></span><br><span class="line"><span class="comment"># 节点起名/标识，不能一致，局域网内唯一。</span></span><br><span class="line">   router_id LVS_01</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line"><span class="comment"># 绑定网卡</span></span><br><span class="line">    interface ens33</span><br><span class="line"><span class="comment"># 工作组，保持各节点一致，自定义</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line"><span class="comment"># 权重，抢占模式下高权限节点获得VIP</span></span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line"><span class="comment"># 认证通信认证方式和密码</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass k8stest</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># VIP</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.233</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>备master</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"><span class="comment"># 关于邮箱的配置全部注释</span></span><br><span class="line"><span class="comment">#   notification_email &#123;</span></span><br><span class="line"><span class="comment">#     acassen@firewall.loc</span></span><br><span class="line"><span class="comment">#     failover@firewall.loc</span></span><br><span class="line"><span class="comment">#     sysadmin@firewall.loc</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#   notification_email_from Alexandre.Cassen@firewall.loc</span></span><br><span class="line"><span class="comment">#   smtp_server 192.168.200.1</span></span><br><span class="line"><span class="comment">#   smtp_connect_timeout 30</span></span><br><span class="line"><span class="comment"># 节点起名/标识，不能一致，局域网内唯一。</span></span><br><span class="line">   router_id LVS_02</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line"><span class="comment"># 绑定网卡</span></span><br><span class="line">    interface ens33</span><br><span class="line"><span class="comment"># 工作组，保持各节点一致，自定义</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line"><span class="comment"># 权重，抢占模式下高权限节点获得VIP</span></span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line"><span class="comment"># 认证通信认证方式和密码</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass k8stest</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># VIP</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.233</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart keeplived</span><br><span class="line">systemctl <span class="built_in">enable</span> keeplived</span><br></pre></td></tr></table></figure>
<h3 id="3-5-3-haproxy"><a href="#3-5-3-haproxy" class="headerlink" title="3.5.3 haproxy"></a>3.5.3 haproxy</h3><p><a href="https://www.haproxy.org/download/" target="_blank" rel="noopener">官方源码下载地址</a></p>
<p>示例：<a href="https://www.haproxy.org/download/2.5/src/haproxy-2.5.1.tar.gz" target="_blank" rel="noopener">https://www.haproxy.org/download/2.5/src/haproxy-2.5.1.tar.gz</a></p>
<blockquote>
<p>想偷懒也可以直接 yum install haproxy -y  使用默认仓库的版本，相对版本较低。</p>
</blockquote>
<p><strong>安装依赖</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y make gcc gcc-c++ pcre-devel zlib-devel openssl-devel</span><br></pre></td></tr></table></figure>
<p><strong>创建安装目录</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdri <span class="regexp">/usr/</span>local<span class="regexp">/haproxy/</span></span><br></pre></td></tr></table></figure>
<p><strong>编译安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf haproxy-2.5.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> haproxy-2.5.1</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="comment"># 参考目录下INSTALL安装文档，相关参数说明</span></span><br><span class="line">make TARGET=linux-glibc ARCH=x86_64 USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 PREFIX=/usr/<span class="built_in">local</span>/haproxy</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make install PREFIX=/usr/<span class="built_in">local</span>/haproxy</span><br></pre></td></tr></table></figure>
<p><strong>创建配置文件目录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/haproxy/</span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/haproxy/conf/</span><br></pre></td></tr></table></figure>
<p><strong>从配置文件名模板复制配置文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp examples/option-http_proxy.cfg /usr/<span class="built_in">local</span>/haproxy/conf/haproxy.cfg</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/haproxy/conf/haproxy.cfg /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>
<p><strong>拷贝开机启动文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp haproxy-2.5.1/examples/haproxy.init /etc/init.d/haproxy</span><br><span class="line">chmod +x /etc/init.d/haproxy</span><br></pre></td></tr></table></figure>
<p><strong>添加haproxy命令脚本软连接</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/haproxy/sbin/haproxy /usr/sbin</span><br></pre></td></tr></table></figure>
<p><strong>设置开机自启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --add haproxy</span><br><span class="line">chkconfig haproxy on</span><br></pre></td></tr></table></figure>
<p><strong>创建用户</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd haproxy</span><br><span class="line">useradd -g haproxy haproxy</span><br><span class="line">mkdir /usr/share/haproxy</span><br></pre></td></tr></table></figure>
<p><strong>修改配置/etc/haproxy/haproxy.cfg</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Global settings</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line">global</span><br><span class="line">    <span class="comment"># to have these messages end up in /var/log/haproxy.log you will</span></span><br><span class="line">    <span class="comment"># need to:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 1) configure syslog to accept network log events.  This is done</span></span><br><span class="line">    <span class="comment">#    by adding the '-r' option to the SYSLOGD_OPTIONS in</span></span><br><span class="line">    <span class="comment">#    /etc/sysconfig/syslog</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 2) configure local2 events to go to the /var/log/haproxy.log</span></span><br><span class="line">    <span class="comment">#   file. A line like the following can be added to</span></span><br><span class="line">    <span class="comment">#   /etc/sysconfig/syslog</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#    local2.*                       /var/log/haproxy.log</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="built_in">log</span>         127.0.0.1 local2</span><br><span class="line"></span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line"><span class="comment">#    pidfile     /var/run/haproxy.pid</span></span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line"></span><br><span class="line">    <span class="comment"># turn on stats unix socket</span></span><br><span class="line"><span class="comment">#    stats socket /var/lib/haproxy/stats</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># common defaults that all the 'listen' and 'backend' sections will</span></span><br><span class="line"><span class="comment"># use if not designated in their block</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    <span class="built_in">log</span>                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line"><span class="comment">#    option forwardfor       except 127.0.0.0/8</span></span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># kubernetes apiserver frontend which proxys to the backends</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line">frontend kubernetes-apiserver</span><br><span class="line">    mode                 tcp</span><br><span class="line">    <span class="built_in">bind</span>                 *:16443</span><br><span class="line">    option               tcplog</span><br><span class="line">    default_backend      kubernetes-apiserver</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># round robin balancing between the various backends</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line">backend kubernetes-apiserver</span><br><span class="line">    mode        tcp</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server  node1 192.168.1.7:6443 check</span><br><span class="line">    server  node2 192.168.1.8:6443 check</span><br><span class="line">    server  node3 192.168.1.9:6443 check</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># collection haproxy statistics message</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line">listen stats</span><br><span class="line">    <span class="built_in">bind</span>                 *:1080</span><br><span class="line">    stats auth           admin:awesomePassword</span><br><span class="line">    stats refresh        5s</span><br><span class="line">    stats realm          HAProxy\ Statistics</span><br><span class="line">    stats uri            /admin?stats</span><br></pre></td></tr></table></figure>
<p>各节点配置文件一致。</p>
<h2 id="3-6-kubeadm创建集群"><a href="#3-6-kubeadm创建集群" class="headerlink" title="3.6 kubeadm创建集群"></a>3.6 kubeadm创建集群</h2><p><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/high-availability/" target="_blank" rel="noopener">官网文档</a></p>
<h3 id="3-5-1-kubeadm-config"><a href="#3-5-1-kubeadm-config" class="headerlink" title="3.5.1 kubeadm config"></a>3.5.1 kubeadm config</h3><p>kubeadm已经进入GA阶段，其控制面初始化和加入节点步骤都支持大量的可定制内容，因此kubeadm还提供了配置文件功能用于复杂定制。同时，kubeadm将配置文件以ConfigMap的形式保存到集群之中，便于后续的查询和升级工作。kubeadm config子命令提供了对这一组功能的支持：</p>
<p>◎ kubeadm config upload from-file：由配置文件上传到集群中生成ConfigMap。</p>
<p>◎ kubeadm config upload from-flags：由配置参数生成ConfigMap。</p>
<p>◎ kubeadm config view：查看当前集群中的配置值。</p>
<p>◎ kubeadm config print init-defaults：输出kubeadm init默认参数文件的内容。</p>
<p>◎ kubeadm config print join-defaults：输出kubeadm join默认参数文件的内容。</p>
<p>◎ kubeadm config migrate：在新旧版本之间进行配置转换。</p>
<p>◎ kubeadm config images list：列出所需的镜像列表。</p>
<p>◎ kubeadm config images pull：拉取镜像到本地。例如，执行kubeadm config print init-defaults，可以取得默认的初始化参数文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; init.default.yaml</span><br></pre></td></tr></table></figure>
<h3 id="3-5-2-导出kubeadm集群默认配置文件"><a href="#3-5-2-导出kubeadm集群默认配置文件" class="headerlink" title="3.5.2 导出kubeadm集群默认配置文件"></a>3.5.2 导出kubeadm集群默认配置文件</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">kubeadm<span class="built_in"> config </span><span class="builtin-name">print</span> init-defaults &gt; init.default.yaml</span><br></pre></td></tr></table></figure>
<h3 id="3-5-3-修改默认配置文件"><a href="#3-5-3-修改默认配置文件" class="headerlink" title="3.5.3 修改默认配置文件"></a>3.5.3 修改默认配置文件</h3><p>修改如下内容：</p>
<ol>
<li>主节点IP——advertiseAddress  </li>
<li>国内阿里镜像地址imageRepository——registry.cn-hangzhou.aliyuncs.com/k8s-images-kx（通过阿里镜像仓库拉取的国外镜像）</li>
<li>pod网段配置——不同网络插件网段不一样详细见<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network" target="_blank" rel="noopener">官网</a>（配置网络插件subnet地址段）</li>
<li>高可用集群api请求地址——controlPlaneEndpoint（这里设置为keepalived的VIP地址+haproxy负载均衡监听端口）</li>
</ol>
<p>![(<a href="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210153000232.png" target="_blank" rel="noopener">https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210153000232.png</a>)</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210165340733.png" alt="image-20220210165340733"></p>
<blockquote>
<p><strong>纠正：</strong></p>
<p><code>podSubent</code>的值设置为flannel的默认网段，<code>FLANNEL_NETWORK</code>的默认值（可通过flannel.yaml文件查看）；<code>podSubent=10.244.0.0/16</code></p>
<p><strong>原因：</strong></p>
<p>后面配置NFS存储类的时候，pod无法正常访问kube-apiserver。</p>
<p><strong>参考：</strong></p>
<p><a href="https://www.cnblogs.com/zhangb8042/p/14252294.html" target="_blank" rel="noopener">k8s 1.20.x版本NFS动态存储配置 - 巽逸 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/weixin_40455124/article/details/104825270" target="_blank" rel="noopener">(71条消息) Kubeadm 部署 使用flannel无法连接service/kubernetes_weixin_40455124的博客-CSDN博客</a></p>
</blockquote>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220215134508429.png" alt="image-20220215134508429"></p>
<h3 id="3-5-4-下载kubernetes相关镜像"><a href="#3-5-4-下载kubernetes相关镜像" class="headerlink" title="3.5.4 下载kubernetes相关镜像"></a>3.5.4 下载kubernetes相关镜像</h3><p>使用config images list 子命令查询所需的镜像，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 home]<span class="comment"># kubeadm config images list --config=init.default.yaml</span></span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.23.0</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.23.0</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.23.0</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.23.0</span><br><span class="line">k8s.gcr.io/pause:3.6</span><br><span class="line">k8s.gcr.io/etcd:3.5.1-0</span><br><span class="line">k8s.gcr.io/coredns/coredns:v1.8.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认初始化配置文件下载的是1.23.0版本，如上图显示，可以修改初始化配置文件，改为1.23.3版本</span></span><br></pre></td></tr></table></figure>
<p>使用config images pull 子命令下载所需的镜像，例如（国内无法下载，只做演示）</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220207174123729.png" alt="image-20220207174123729"></p>
<p><strong>预拉取镜像</strong></p>
<p>通过阿里云镜像仓库构建下载镜像，具体方法不做细说。</p>
<blockquote>
<p>镜像使用方式有2种：</p>
<ol>
<li>修改镜像名为国外镜像名，例如</li>
</ol>
<p>k8s.gcr.io/kube-apiserver:v1.23.0<br>k8s.gcr.io/kube-controller-manager:v1.23.0<br>k8s.gcr.io/kube-scheduler:v1.23.0<br>k8s.gcr.io/kube-proxy:v1.23.0<br>k8s.gcr.io/pause:3.6<br>k8s.gcr.io/etcd:3.5.1-0<br>k8s.gcr.io/coredns/coredns:v1.8.6</p>
<ol start="2">
<li>修改初始化配置文件，修改国外仓库为阿里云仓库</li>
</ol>
<p>imageRepository: registry.cn-hangzhou.aliyuncs.com/k8s-images-kx<br>kind: ClusterConfiguration<br>kubernetesVersion: 1.23.3<br>networking:<br>  dnsDomain: cluster.local<br>  serviceSubnet: 10.96.0.0/12</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 home]<span class="comment"># kubeadm config images pull --config=init.default.yaml</span></span><br></pre></td></tr></table></figure>
<h3 id="3-5-5-初始化集群"><a href="#3-5-5-初始化集群" class="headerlink" title="3.5.5 初始化集群"></a>3.5.5 初始化集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --upload-certs根据情况可选</span></span><br><span class="line">kubeadm init --config /home/init.default.yaml --upload-certs</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210153548055.png" alt="image-20220210153548055"></p>
<p>![(<a href="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210154221965.png" target="_blank" rel="noopener">https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210154221965.png</a>)</p>
<p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20220210154352724.png" alt="image-20220210154352724"></p>
<h3 id="3-5-6-加入master节点"><a href="#3-5-6-加入master节点" class="headerlink" title="3.5.6 加入master节点"></a>3.5.6 加入master节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.1.133:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">	--discovery-token-ca-cert-hash sha256:d264137849995438cfda460507958165ad026fc804206c9000e7f2c6c4b8b66c \</span><br><span class="line">	--control-plane</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210155044128.png" alt="image-20220210155044128"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行以下步骤，才能使用kubectl命令</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>
<h3 id="3-5-7-加入工作节点"><a href="#3-5-7-加入工作节点" class="headerlink" title="3.5.7 加入工作节点"></a>3.5.7 加入工作节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.1.133:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">	--discovery-token-ca-cert-hash sha256:d264137849995438cfda460507958165ad026fc804206c9000e7f2c6c4b8b66c</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210155225404.png" alt="image-20220210155225404"></p>
<h3 id="3-5-8-检查节点"><a href="#3-5-8-检查节点" class="headerlink" title="3.5.8 检查节点"></a>3.5.8 检查节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get node</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210161203270.png" alt="image-20220210161203270"></p>
<h1 id="3-5-9-验证"><a href="#3-5-9-验证" class="headerlink" title="3.5.9 验证"></a>3.5.9 验证</h1><p>关闭master1节点，通过master2或master3节点尝试集群命令。</p>
<p>vip转移到node2即master2节点，node2和node4执行管理权限不受影像</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210161417179.png" alt="image-20220210161417179"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210161241890.png" alt="image-20220210161241890"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220210161312871.png" alt="image-20220210161312871"></p>
<p>到此简单验证成功。其他问题参考《kubenetes学习二》</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/chenleiking/article/details/84841394" target="_blank" rel="noopener">Kubeadm + HAProxy + Keepalived部署高可用Kubernetes集群</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx安全加固</title>
    <url>/2022/01/28/nginx%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<h1 id="1-禁用目录浏览"><a href="#1-禁用目录浏览" class="headerlink" title="1 禁用目录浏览"></a>1 禁用目录浏览</h1><p>禁用nginx.conf中的autoindex模块。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">autoindex off</span><br><span class="line"><span class="comment"># 或者删除autoindex配置</span></span><br></pre></td></tr></table></figure>
<h1 id="2-隐藏版本信息"><a href="#2-隐藏版本信息" class="headerlink" title="2 隐藏版本信息"></a>2 隐藏版本信息</h1><p>如果开启的话（默认情况下）所有的错误页面都会显示服务器的版本和信息。nginx.conf配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line">    include       naxsi_core.rules;</span><br><span class="line"></span><br><span class="line">    include      mime.types;</span><br><span class="line"></span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"><span class="comment"># 增加下面配置</span></span><br><span class="line">    server_tokens off;</span><br><span class="line"></span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure>
<p>加固检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@9340a450ae64:/workspace<span class="comment"># curl -I insight.jx-lab.com</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.16.1</span><br><span class="line">Date: Fri, 28 Jan 2022 03:26:35 GMT</span><br><span class="line">Content-Type: text/html; charset=utf-8,gbk</span><br><span class="line">Content-Length: 14052</span><br><span class="line">Last-Modified: Tue, 14 Apr 2020 06:26:50 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">"5e9557aa-36e4"</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line"></span><br><span class="line">root@9340a450ae64:/workspace<span class="comment"># curl -I insight.jx-lab.com</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Fri, 28 Jan 2022 03:30:29 GMT</span><br><span class="line">Content-Type: text/html; charset=utf-8,gbk</span><br><span class="line">Content-Length: 14052</span><br><span class="line">Last-Modified: Tue, 14 Apr 2020 06:26:50 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">"5e9557aa-36e4"</span></span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>
<h1 id="3-限制HTTP请求方法"><a href="#3-限制HTTP请求方法" class="headerlink" title="3 限制HTTP请求方法"></a>3 限制HTTP请求方法</h1><p>备份nginx.conf配置文件。</p>
<p>编辑配置文件，添加如下内容：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($request_method !~ ^(GET|HEAD|POST)$ ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存，然后后重启nginx服务。</p>
<blockquote>
<p>备注：只允许常用的GET和POST方法，顶多再加一个HEAD方法</p>
</blockquote>
<h1 id="4-限制IP访问"><a href="#4-限制IP访问" class="headerlink" title="4 限制IP访问"></a>4 限制IP访问</h1><p>备份nginx.conf配置文件。</p>
<p>编辑配置文件，添加如下内容：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($request_method !~ ^(GET|HEAD|POST)$ ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存，然后后重启nginx服务。</p>
<blockquote>
<p>备注：只允许常用的GET和POST方法，顶多再加一个HEAD方法</p>
</blockquote>
<h1 id="5-限制并发和速度"><a href="#5-限制并发和速度" class="headerlink" title="5 限制并发和速度"></a>5 限制并发和速度</h1><p>编辑配置文件，在server标签内添加如下内容：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">limit_zone one $binary_remote_addr <span class="number">10</span>m;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">     listen   <span class="number">80</span>;</span><br><span class="line">     server_name down.test.com;</span><br><span class="line">     index index.html index.htm index.php;</span><br><span class="line">     root  /usr/local/www;</span><br><span class="line">     #Zone limit;</span><br><span class="line">     location / &#123;</span><br><span class="line">         limit_conn one <span class="number">1</span>;</span><br><span class="line">         limit_rate <span class="number">20</span>k;</span><br><span class="line">     &#125;</span><br><span class="line">………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存，然后后重启nginx服务。</p>
<h1 id="6-控制超时时间"><a href="#6-控制超时时间" class="headerlink" title="6 控制超时时间"></a>6 控制超时时间</h1><p>编辑配置文件，具体设置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">client_body_timeout 10;  <span class="comment">#设置客户端请求主体读取超时时间</span></span><br><span class="line">client_header_timeout 10;  <span class="comment">#设置客户端请求头读取超时时间</span></span><br><span class="line">keepalive_timeout 5 5;  <span class="comment">#第一个参数指定客户端连接保持活动的超时时间，第二个参数是可选的，它指定了消息头保持活动的有效时间</span></span><br><span class="line">send_timeout10;  <span class="comment">#指定响应客户端的超时时间</span></span><br></pre></td></tr></table></figure>
<p>保存，然后后重启nginx服务。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习二:kubeadm安装kubernetes集群（单master）</title>
    <url>/2022/02/07/kubernetes%E5%AD%A6%E4%B9%A0%E4%BA%8C-kubeadm%E5%AE%89%E8%A3%85kubernetes%E9%9B%86%E7%BE%A4-%E5%8D%95master/</url>
    <content><![CDATA[<h1 id="1-参考文档"><a href="#1-参考文档" class="headerlink" title="1 参考文档"></a>1 参考文档</h1><a id="more"></a>
<p><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">官方文档</a></p>
<p><a href="https://blog.csdn.net/u013164931/article/details/105548102/" target="_blank" rel="noopener">kubeadm安装k8s v1.18.0</a></p>
<p><a href="https://www.freesion.com/article/92691395728/" target="_blank" rel="noopener">cgroup造成的kubelet启动失败</a></p>
<h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2 环境准备"></a>2 环境准备</h1><h2 id="2-1-物理环境"><a href="#2-1-物理环境" class="headerlink" title="2.1 物理环境"></a>2.1 物理环境</h2><table>
<thead>
<tr>
<th style="text-align:center">主机</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">配置</th>
<th style="text-align:center">OS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">master/node1</td>
<td style="text-align:center">192.168.67.139</td>
<td style="text-align:center">2core 2GB</td>
<td style="text-align:center">Centos7.9</td>
</tr>
<tr>
<td style="text-align:center">node2</td>
<td style="text-align:center">192.168.67.140</td>
<td style="text-align:center">2core 2GB</td>
<td style="text-align:center">Centos7.9</td>
</tr>
<tr>
<td style="text-align:center">node3</td>
<td style="text-align:center">192.168.67.141</td>
<td style="text-align:center">2core 2GB</td>
<td style="text-align:center">Centos7.9</td>
</tr>
<tr>
<td style="text-align:center">node4</td>
<td style="text-align:center">192.168.67.142</td>
<td style="text-align:center">2core 2GB</td>
<td style="text-align:center">Centos7.9</td>
</tr>
</tbody>
</table>
<h2 id="2-2-软件环境"><a href="#2-2-软件环境" class="headerlink" title="2.2 软件环境"></a>2.2 软件环境</h2><table>
<thead>
<tr>
<th style="text-align:center">软件</th>
<th style="text-align:center">版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">docker</td>
<td style="text-align:center">v20.10.12</td>
</tr>
<tr>
<td style="text-align:center">kubeadmin</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kubelet</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kubectl</td>
<td style="text-align:center">v1.23.3</td>
</tr>
</tbody>
</table>
<h2 id="2-3-镜像"><a href="#2-3-镜像" class="headerlink" title="2.3 镜像"></a>2.3 镜像</h2><table>
<thead>
<tr>
<th style="text-align:center">镜像</th>
<th style="text-align:center">版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">conformance</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kube-apiserver</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kube-controller-manager</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kube-proxy</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kube-scheduler</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">flannel</td>
<td style="text-align:center">v1.0.1</td>
</tr>
</tbody>
</table>
<h1 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3 步骤"></a>3 步骤</h1><h2 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h2><h3 id="3-1-1-确保各节点MAC和product-uuid的唯一性"><a href="#3-1-1-确保各节点MAC和product-uuid的唯一性" class="headerlink" title="3.1.1 确保各节点MAC和product_uuid的唯一性"></a>3.1.1 确保各节点MAC和product_uuid的唯一性</h3><ul>
<li>你可以使用命令 <code>ip link</code> 或 <code>ifconfig -a</code> 来获取网络接口的 MAC 地址</li>
<li>可以使用 <code>sudo cat /sys/class/dmi/id/product_uuid</code> 命令对 product_uuid 校验</li>
</ul>
<p>一般来讲，硬件设备会拥有唯一的地址，但是有些虚拟机的地址可能会重复。</p>
<h3 id="3-1-2-运行iptables检查桥接流量"><a href="#3-1-2-运行iptables检查桥接流量" class="headerlink" title="3.1.2 运行iptables检查桥接流量"></a>3.1.2 运行iptables检查桥接流量</h3><p>确保 <code>br_netfilter</code> 模块被加载。这一操作可以通过运行 <code>lsmod | grep br_netfilter</code> 来完成。若要显式加载该模块，可执行 <code>sudo modprobe br_netfilter</code>。</p>
<p>为了让你的 Linux 节点上的 iptables 能够正确地查看桥接流量，你需要确保在你的 <code>sysctl</code> 配置中将 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure>
<h3 id="3-1-3-关闭防火墙"><a href="#3-1-3-关闭防火墙" class="headerlink" title="3.1.3 关闭防火墙"></a>3.1.3 关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
<p>如果各个主机启用了防火墙，需要开放Kubernetes各个组件所需要的端口。如下图所示，详细信息请看<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports" target="_blank" rel="noopener">官网</a>。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/20200416001914959.png" alt="在这里插入图片描述"></p>
<h3 id="3-1-4-永久关闭swap"><a href="#3-1-4-永久关闭swap" class="headerlink" title="3.1.4 永久关闭swap"></a>3.1.4 永久关闭swap</h3><p>vim /etc/fstab</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220207202709095.png" alt="image-20220207202709095"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220207202741311.png" alt="image-20220207202741311"></p>
<p>如果不修改，kubelet启动报错：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220207202527741.png" alt="image-20220207202527741"></p>
<h3 id="3-1-5-关闭selinux"><a href="#3-1-5-关闭selinux" class="headerlink" title="3.1.5 关闭selinux"></a>3.1.5 关闭selinux</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 SELinux 设置为 permissive 或 disabled模式（相当于将其禁用）</span></span><br><span class="line">sudo setenforce 0</span><br><span class="line">sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</span><br><span class="line">或</span><br><span class="line">sudo sed -i 's/^SELINUX=enforcing$/SELINUX=disabled/' /etc/selinux/config</span><br></pre></td></tr></table></figure>
<h2 id="3-2-安装docker"><a href="#3-2-安装docker" class="headerlink" title="3.2 安装docker"></a>3.2 安装docker</h2><p><strong>卸载旧版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>
<p><strong>源安装</strong></p>
<p>执行以下命令安装依赖包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。</p>
<p>执行下面的命令添加 <code>yum</code> 软件源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">$ sudo sed -i <span class="string">'s/download.docker.com/mirrors.aliyun.com\/docker-ce/g'</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo yum-config-manager \</span></span><br><span class="line"><span class="comment">#     --add-repo \</span></span><br><span class="line"><span class="comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>
<p><strong>安装docker-ce</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<p><strong>开机自启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">启动 Docker</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<h2 id="3-3-安装-kubeadm、kubelet-和-kubectl"><a href="#3-3-安装-kubeadm、kubelet-和-kubectl" class="headerlink" title="3.3 安装 kubeadm、kubelet 和 kubectl"></a>3.3 安装 kubeadm、kubelet 和 kubectl</h2><p>你需要在每台机器上安装以下的软件包：</p>
<ul>
<li><code>kubeadm</code>：用来初始化集群的指令。</li>
<li><code>kubelet</code>：在集群中的每个节点上用来启动 Pod 和容器等。</li>
<li><code>kubectl</code>：用来与集群通信的命令行工具。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装服务</span></span><br><span class="line">sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置kubelet开机自启</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span>  kubelet</span><br></pre></td></tr></table></figure>
<h2 id="3-4-配置cgroup驱动程序"><a href="#3-4-配置cgroup驱动程序" class="headerlink" title="3.4 配置cgroup驱动程序"></a>3.4 配置cgroup驱动程序</h2><p>需保证容器服务和kubelet的cgroup驱动一致，否则kubelet启动报错：</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208095347892.png" alt="image-20220208095347892"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208095316580.png" alt="image-20220208095316580"></p>
<p><strong>由于 kubeadm 把 kubelet 视为一个系统服务来管理，所以对基于 kubeadm 的安装， 我们推荐使用 <code>systemd</code> 驱动，不推荐 <code>cgroupfs</code> 驱动。</strong></p>
<h3 id="3-4-1-Cgroup-驱动程序说明"><a href="#3-4-1-Cgroup-驱动程序说明" class="headerlink" title="3.4.1 Cgroup 驱动程序说明"></a>3.4.1 Cgroup 驱动程序说明</h3><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208110411304.png" alt="image-20220208110411304"></p>
<blockquote>
<p><strong>警告：</strong></p>
<p>你需要确保容器（docker）和 kubelet 所使用的是相同的 cgroup 驱动，否则 kubelet 进程会失败。</p>
<p>相关细节可参见<a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/" target="_blank" rel="noopener">kubelet配置 cgroup 驱动</a>。<a href="https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noopener">容器配置cgroup驱动</a></p>
</blockquote>
<h3 id="3-4-2-查看kubelet和docker的驱动程序"><a href="#3-4-2-查看kubelet和docker的驱动程序" class="headerlink" title="3.4.2 查看kubelet和docker的驱动程序"></a>3.4.2 查看kubelet和docker的驱动程序</h3><ul>
<li>kubelet</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment">#  cat /var/lib/kubelet/kubeadm-flags.env</span></span><br><span class="line">KUBELET_KUBEADM_ARGS=<span class="string">"--cgroup-driver=cgroup --hostname-override=node --network-plugin=cni --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/k8s-images-kx/pause:3.6"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --cgroup-driver=cgroup 该节点驱动程序为cgroup</span></span><br></pre></td></tr></table></figure>
<ul>
<li>docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker info |grep Cgroup</span></span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker驱动程序为 cgroupfs</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-4-Docker配置cgroup驱动"><a href="#3-4-4-Docker配置cgroup驱动" class="headerlink" title="3.4.4 Docker配置cgroup驱动"></a>3.4.4 Docker配置cgroup驱动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /etc/docker</span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  "exec-opts": ["native.cgroupdriver=systemd"],</span><br><span class="line">  "log-driver": "json-file",</span><br><span class="line">  "log-opts": &#123;</span><br><span class="line">    "max-size": "100m"</span><br><span class="line">  &#125;,</span><br><span class="line">  "storage-driver": "overlay2"</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@node3 ~]# systemctl daemon-reload </span><br><span class="line">[root@node3 ~]# systemctl restart docker</span><br><span class="line">[root@node3 ~]# docker info | grep cgroup</span><br><span class="line"> Cgroup Driver: systemd</span><br><span class="line"> Cgroup Version: 1</span><br></pre></td></tr></table></figure>
<h3 id="3-4-5-kubelet配置cgroup驱动（可选）"><a href="#3-4-5-kubelet配置cgroup驱动（可选）" class="headerlink" title="3.4.5 kubelet配置cgroup驱动（可选）"></a>3.4.5 kubelet配置cgroup驱动（可选）</h3><p><strong>kubelet不配置默认即使用<code>systemd</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将kubelet和docker 的驱动程序改成一致。</span></span><br><span class="line">vim /var/lib/kubelet/kubeadm-flags.env</span><br><span class="line">KUBELET_KUBEADM_ARGS=<span class="string">"--cgroup-driver=systemd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.1"</span></span><br><span class="line"><span class="comment"># 将cgroup改成systemd</span></span><br><span class="line"></span><br><span class="line">[root@node3 ~]<span class="comment"># systemctl daemon-reload </span></span><br><span class="line">[root@node3 ~]<span class="comment"># systemctl restart kubelet</span></span><br></pre></td></tr></table></figure>
<h2 id="3-5-kubeadm创建集群"><a href="#3-5-kubeadm创建集群" class="headerlink" title="3.5 kubeadm创建集群"></a>3.5 kubeadm创建集群</h2><h3 id="3-5-1-kubeadm-config"><a href="#3-5-1-kubeadm-config" class="headerlink" title="3.5.1 kubeadm config"></a>3.5.1 kubeadm config</h3><p>kubeadm已经进入GA阶段，其控制面初始化和加入节点步骤都支持大量的可定制内容，因此kubeadm还提供了配置文件功能用于复杂定制。同时，kubeadm将配置文件以ConfigMap的形式保存到集群之中，便于后续的查询和升级工作。kubeadm config子命令提供了对这一组功能的支持：</p>
<p>◎ kubeadm config upload from-file：由配置文件上传到集群中生成ConfigMap。</p>
<p>◎ kubeadm config upload from-flags：由配置参数生成ConfigMap。</p>
<p>◎ kubeadm config view：查看当前集群中的配置值。</p>
<p>◎ kubeadm config print init-defaults：输出kubeadm init默认参数文件的内容。</p>
<p>◎ kubeadm config print join-defaults：输出kubeadm join默认参数文件的内容。</p>
<p>◎ kubeadm config migrate：在新旧版本之间进行配置转换。</p>
<p>◎ kubeadm config images list：列出所需的镜像列表。</p>
<p>◎ kubeadm config images pull：拉取镜像到本地。例如，执行kubeadm config print init-defaults，可以取得默认的初始化参数文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; init.default.yaml</span><br></pre></td></tr></table></figure>
<h3 id="3-5-2-导出kubeadm集群默认配置文件"><a href="#3-5-2-导出kubeadm集群默认配置文件" class="headerlink" title="3.5.2 导出kubeadm集群默认配置文件"></a>3.5.2 导出kubeadm集群默认配置文件</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">kubeadm<span class="built_in"> config </span><span class="builtin-name">print</span> init-defaults &gt; init.default.yaml</span><br></pre></td></tr></table></figure>
<h3 id="3-5-3-修改默认配置文件"><a href="#3-5-3-修改默认配置文件" class="headerlink" title="3.5.3 修改默认配置文件"></a>3.5.3 修改默认配置文件</h3><p>修改如下内容：</p>
<ol>
<li>主节点IP——advertiseAddress</li>
<li>国内阿里镜像地址imageRepository——registry.cn-hangzhou.aliyuncs.com/k8s-images-kx（通过阿里镜像仓库拉取的国外镜像）</li>
<li>pod网段配置——不同网络插件网段不一样详细见<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network" target="_blank" rel="noopener">官网</a>（配置网络插件subnet地址段）</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208135503045.png" alt="image-20220208135503045"></p>
<p>将上面的内容保存为init-config.yaml备用。</p>
<blockquote>
<p><strong>纠正：</strong></p>
<p><code>podSubent</code>的值设置为flannel的默认网段，<code>FLANNEL_NETWORK</code>的默认值（可通过flannel.yaml文件查看）；<code>podSubent=10.244.0.0/16</code></p>
<p><strong>原因：</strong></p>
<p>后面配置NFS存储类的时候，pod无法正常访问kube-apiserver。</p>
<p><strong>参考：</strong></p>
<p><a href="https://www.cnblogs.com/zhangb8042/p/14252294.html" target="_blank" rel="noopener">k8s 1.20.x版本NFS动态存储配置 - 巽逸 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/weixin_40455124/article/details/104825270" target="_blank" rel="noopener">(71条消息) Kubeadm 部署 使用flannel无法连接service/kubernetes_weixin_40455124的博客-CSDN博客</a></p>
</blockquote>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220215134508429.png" alt="image-20220215134508429"></p>
<h3 id="3-5-4-下载kubernetes相关镜像"><a href="#3-5-4-下载kubernetes相关镜像" class="headerlink" title="3.5.4 下载kubernetes相关镜像"></a>3.5.4 下载kubernetes相关镜像</h3><p>使用config images list 子命令查询所需的镜像，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 home]<span class="comment"># kubeadm config images list --config=init.default.yaml</span></span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.23.0</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.23.0</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.23.0</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.23.0</span><br><span class="line">k8s.gcr.io/pause:3.6</span><br><span class="line">k8s.gcr.io/etcd:3.5.1-0</span><br><span class="line">k8s.gcr.io/coredns/coredns:v1.8.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认初始化配置文件下载的是1.23.0版本，如上图显示，可以修改初始化配置文件，改为1.23.3版本</span></span><br></pre></td></tr></table></figure>
<p>使用config images pull 子命令下载所需的镜像，例如（国内无法下载，只做演示）</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220207174123729.png" alt="image-20220207174123729"></p>
<p><strong>预拉取镜像</strong></p>
<p>通过阿里云镜像仓库构建下载镜像，具体方法不做细说。</p>
<blockquote>
<p>镜像使用方式有2种：</p>
<ol>
<li>修改镜像名为国外镜像名，例如</li>
</ol>
<p>k8s.gcr.io/kube-apiserver:v1.23.0<br>k8s.gcr.io/kube-controller-manager:v1.23.0<br>k8s.gcr.io/kube-scheduler:v1.23.0<br>k8s.gcr.io/kube-proxy:v1.23.0<br>k8s.gcr.io/pause:3.6<br>k8s.gcr.io/etcd:3.5.1-0<br>k8s.gcr.io/coredns/coredns:v1.8.6</p>
<ol start="2">
<li>修改初始化配置文件，修改国外仓库为阿里云仓库</li>
</ol>
<p>imageRepository: registry.cn-hangzhou.aliyuncs.com/k8s-images-kx<br>kind: ClusterConfiguration<br>kubernetesVersion: 1.23.3<br>networking:<br>  dnsDomain: cluster.local<br>  serviceSubnet: 10.96.0.0/12</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 home]<span class="comment"># kubeadm config images pull --config=init.default.yaml</span></span><br></pre></td></tr></table></figure>
<h3 id="3-5-5-初始化集群"><a href="#3-5-5-初始化集群" class="headerlink" title="3.5.5 初始化集群"></a>3.5.5 初始化集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 home]<span class="comment"># kubeadm init --config=init.default.yaml</span></span><br></pre></td></tr></table></figure>
<p>初始化失败，可以如下命令重置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 home]<span class="comment"># kubeadm reset</span></span><br></pre></td></tr></table></figure>
<p>显示如下安装成功</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208140143943.png" alt="image-20220208140143943"></p>
<p>普通用户使用集群需如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>
<h3 id="3-5-6-查询集群状态"><a href="#3-5-6-查询集群状态" class="headerlink" title="3.5.6 查询集群状态"></a>3.5.6 查询集群状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get node</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208140453955.png" alt="image-20220208140453955"></p>
<p>notready原因是没有安装pod网络。</p>
<h3 id="3-5-7-安装pod网络（二选一）"><a href="#3-5-7-安装pod网络（二选一）" class="headerlink" title="3.5.7 安装pod网络（二选一）"></a>3.5.7 安装pod网络（二选一）</h3><p>各pod组件的链接均可以通过如下地址找到，及相关使用教程。</p>
<p><a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/addons/" target="_blank" rel="noopener">安装扩展（Addons） | Kubernetes</a></p>
<p><a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/#how-to-implement-the-kubernetes-networking-model" target="_blank" rel="noopener">集群网络系统 | Kubernetes</a></p>
<p><strong>网络说明</strong></p>
<p><strong>Kubernetes的网络通信问题:</strong><br>　　1. 容器间通信： 即同一个Pod内多个容器间通信，通常使用loopback来实现。<br>　　2. Pod间通信： K8s要求,Pod和Pod之间通信必须使用Pod-IP 直接访问另一个Pod-IP<br>　　3. Pod与Service通信： 即PodIP去访问ClusterIP，当然，clusterIP实际上是IPVS 或 iptables规则的虚拟IP，是没有TCP/IP协议栈支持的。但不影响Pod访问它.<br>　　4. Service与集群外部Client的通信，即K8s中Pod提供的服务必须能被互联网上的用户所访问到。</p>
<p>需要注意的是，k8s集群初始化时的service网段，pod网段，网络插件的网段，以及真实服务器的网段，都不能相同，如果相同就会出各种各样奇怪的问题，而且这些问题在集群做好之后是不方便改的，改会导致更多的问题，所以，就在搭建前将其规划好。</p>
<p>CNI(容器网络接口)：<br>　　这是K8s中提供的一种通用网络标准规范，因为k8s本身不提供网络解决方案。<br>　　目前比较知名的网络解决方案有:<br>　　　　flannel<br>　　　　calico<br>　　　　canel<br>　　　　kube-router<br>　　　　…….<br>等等，目前比较常用的时flannel和calico，flannel的功能比较简单，不具备复杂网络的配置能力，calico是比较出色的网络管理插件，单具备复杂网络配置能力的同时，往往意味着本身的配置比较复杂，<strong>所以相对而言，比较小而简单的集群使用flannel，考虑到日后扩容，未来网络可能需要加入更多设备，配置更多策略，则使用calico更好</strong></p>
<p>所有的网络解决方案，它们的共通性：<br>　　1. 虚拟网桥<br>　　2. 多路复用：MacVLAN<br>　　3. 硬件交换：SR-IOV（单根-I/O虚拟网络）：它是一种物理网卡的硬件虚拟化技术，它通过输出VF(虚拟功能)来将网卡虚拟为多个虚拟子接口，每个VF绑定给一个VM后，该VM就可以直接操纵该物理网卡。</p>
<p><strong>kubelet来调CNI插件时，会到 /etc/cni/net.d/目录下去找插件的配置文件，并读取它，来加载该插件,并让该网络插件来为Pod提供网络服务。</strong></p>
<p>flannel网络插件要怎么部署？<br>　1. flannel部署到那个节点上？<br>　　因为kubelet是用来管理Pod的，而Pod运行需要网络，因此凡是部署kubelet的节点，都需要部署flannel来提供网络，因为kubelet正是通过调用flannel来实现为Pod配置网络的(如:添加网络，配置网络，激活网络等)。</p>
<h4 id="3-5-7-1-flannel"><a href="#3-5-7-1-flannel" class="headerlink" title="3.5.7.1 flannel"></a>3.5.7.1 flannel</h4><p><a href="https://github.com/flannel-io/flannel#flannel" target="_blank" rel="noopener">flannel GIT仓库</a></p>
<p>在所有节点都pull下载flannel镜像，节点加入集群时自动创建flannel容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>
<h4 id="3-5-7-2-calico"><a href="#3-5-7-2-calico" class="headerlink" title="3.5.7.2 calico"></a>3.5.7.2 calico</h4><p><a href="https://projectcalico.docs.tigera.io/about/about-calico" target="_blank" rel="noopener">calico官网</a></p>
<p>在所有节点都pull下载calico镜像</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https:<span class="regexp">//</span>projectcalico.docs.tigera.io<span class="regexp">/manifests/</span>canal.yaml</span><br></pre></td></tr></table></figure>
<h4 id="3-5-7-3-查看集群状态"><a href="#3-5-7-3-查看集群状态" class="headerlink" title="3.5.7.3 查看集群状态"></a>3.5.7.3 查看集群状态</h4><p>coredns正常运行，节点状态ready.</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208145623345.png" alt="image-20220208145623345"></p>
<h3 id="3-5-8-添加Node节点"><a href="#3-5-8-添加Node节点" class="headerlink" title="3.5.8 添加Node节点"></a>3.5.8 添加Node节点</h3><p><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/" target="_blank" rel="noopener">官方文档</a></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208150015590.png" alt="image-20220208150015590"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># token和hash 下面会介绍如何获取</span></span><br><span class="line"><span class="comment"># control-plane-host和control-plane-port分别是控制面对应的ip和端口</span></span><br><span class="line"></span><br><span class="line">kubeadm join --token &lt;token&gt; &lt;control-plane-host&gt;:&lt;control-plane-port&gt; --discovery-token-ca-cert-hash sha256:&lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure>
<p>输出如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node3 ~]<span class="comment"># kubeadm join --token abcdef.01234ad56789abcdef 192.168.76.139:6443 --discovery-token-ca-cert-hash sha256:500813d6c8feca1d82468821993be623d3d7ccdfa33d202f3c7fe3c6b39da086c7d</span></span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with <span class="string">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span></span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[kubelet-start] Waiting <span class="keyword">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run <span class="string">'kubectl get nodes'</span> on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure>
<p><strong>查询token</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure>
<p>输出类似于以下内容：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">5didvk.d09sbcov8ph2amjw</span><br></pre></td></tr></table></figure>
<p><strong>查询 –discovery-token-ca-cert-hash</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>ca.crt | openssl rsa -pubin -outform der <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="literal">null</span> | \</span><br><span class="line">   openssl dgst -sha256 -hex | sed <span class="string">'s/^.* //'</span></span><br></pre></td></tr></table></figure>
<p>输出类似于以下内容：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">8cb2de97839780a412b93877f8507ad6c94f73add17d5d7058e91741c9d5ec78</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220208153910342.png" alt="image-20220208153910342"></p>
<h3 id="3-5-8-测试"><a href="#3-5-8-测试" class="headerlink" title="3.5.8 测试"></a>3.5.8 测试</h3><p><strong>首先验证<em>kube-apiserver</em>, <em>kube-controller-manager</em>, <em>kube-scheduler</em>, <em>pod network</em> 是否正常：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署一个 Nginx Deployment，包含两个Pod</span></span><br><span class="line"><span class="comment"># https://kubernetes.io/docs/concepts/workloads/controllers/deployment/</span></span><br><span class="line">kubectl create deployment nginx --image=nginx:alpine</span><br><span class="line">kubectl scale deployment nginx --replicas=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证Nginx Pod是否正确运行，并且会分配192.168.开头的集群IP</span></span><br><span class="line">kubectl get pods -l app=nginx -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-54458cd494-p8jzs   1/1     Running   0          31s   192.168.1.2   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-54458cd494-v2m4b   1/1     Running   0          24s   192.168.1.3   node1   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p><strong>再验证一下<code>kube-proxy</code>是否正常：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以 NodePort 方式对外提供服务 https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/</span></span><br><span class="line">kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群外可访问的Port</span></span><br><span class="line">kubectl get services nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">NAME    TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">nginx   NodePort   10.110.49.49   &lt;none&gt;        80:31899/TCP   4s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过任意 NodeIP:Port 在集群外部访问这个服务，本示例中部署的集群IP分别是192.168.76.139-142</span></span><br><span class="line">curl http://192.168.76.139:31899</span><br><span class="line">curl http://192.168.76.140:31899</span><br></pre></td></tr></table></figure>
<p><strong>最后验证一下<em>dns</em>, <em>pod network</em>是否正常：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行Busybox并进入交互模式</span></span><br><span class="line">kubectl run -it curl --image=radial/busyboxplus:curl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入`nslookup nginx`查看是否可以正确解析出集群内的IP，已验证DNS是否正常</span></span><br><span class="line">[ root@curl-66959f6557-6sfqh:/ ]$ nslookup nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">Server:    10.96.0.10</span><br><span class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      nginx</span><br><span class="line">Address 1: 10.110.49.49 nginx.default.svc.cluster.local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过服务名进行访问，验证kube-proxy是否正常</span></span><br><span class="line">[ root@curl-66959f6557-6sfqh:/ ]$ curl http://nginx/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># &lt;!DOCTYPE html&gt; ---省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别访问一下2个Pod的内网IP，验证跨Node的网络通信是否正常</span></span><br><span class="line">[ root@curl-66959f6557-6sfqh:/ ]$ curl http://192.168.1.2/</span><br><span class="line">[ root@curl-66959f6557-6sfqh:/ ]$ curl http://192.168.1.3/</span><br></pre></td></tr></table></figure>
<h1 id="4-补充"><a href="#4-补充" class="headerlink" title="4 补充"></a>4 补充</h1><h2 id="4-1-允许master节点部署pod"><a href="#4-1-允许master节点部署pod" class="headerlink" title="4.1 允许master节点部署pod"></a>4.1 允许master节点部署pod</h2><p>这是因为k8s集群默认不让在master节点创建pod，也就是说Master Node不参与工作负载。</p>
<p>当前的master节点被打上了<code>node-role.kubernetes.io/master:NoSchedule</code>的污点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master k8s]<span class="comment"># kubectl describe nodes node1 |grep -E '(Roles|Taints)'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/1752532-20211130171556972-1751835178.png" alt="img"></p>
<p><strong>允许master部署pod</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master nginx]<span class="comment"># kubectl taint nodes node1 node-role.kubernetes.io/master-</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">  node/k8s-master untainted</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/1752532-20211130171617841-530484044.png" alt="img"></p>
<p><strong>禁止master部署pod</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master]<span class="comment"># kubectl taint nodes node1 node-role.kubernetes.io/master=true:NoSchedule</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-卸载集群"><a href="#4-2-卸载集群" class="headerlink" title="4.2 卸载集群"></a>4.2 卸载集群</h2><p>想要撤销kubeadm执行的操作，首先要<a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#drain" target="_blank" rel="noopener">排除节点</a>，并确保该节点为空, 然后再将其关闭。</p>
<p>在Master节点上运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node &lt;node name&gt;</span><br></pre></td></tr></table></figure>
<p>然后在需要移除的节点上，重置kubeadm的安装状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo kubeadm reset</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载集群后，建议手动删除CNI网络的地址段配置文件，避免重装集群造成影像。</span></span><br><span class="line">rm -rf /run/flannel</span><br></pre></td></tr></table></figure>
<p>如果你想重新配置集群，使用新的参数重新运行<code>kubeadm init</code>或者<code>kubeadm join</code>即可。</p>
<h1 id="5-问题总结"><a href="#5-问题总结" class="headerlink" title="5 问题总结"></a>5 问题总结</h1><h2 id="5-1-创建deployment后，配置NodePort，无法通过任意节点访问"><a href="#5-1-创建deployment后，配置NodePort，无法通过任意节点访问" class="headerlink" title="5.1 创建deployment后，配置NodePort，无法通过任意节点访问"></a>5.1 创建deployment后，配置NodePort，无法通过任意节点访问</h2><blockquote>
<p>问题描述：</p>
<p>创建nginx的depolyment，并配置nodeport端口配置，只能通过pod所在的节点IP和暴漏端口访问，无法通过其他节点“IP:端口”访问;集群内pod之间不能通过pod IP互相访问；kube-dns解析异常等问题。</p>
</blockquote>
<p>查看节点kube-proxy服务日志显示如下错误</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220209114644724.png" alt="image-20220209114644724"></p>
<p><strong>问题原因：</strong>节点没有开启路由转发功能。</p>
<p><strong>解决办法</strong>：添加<code>net.ipv4.ip_forward = 1</code>到/etc/sysctl.conf或/etc/sysctl.d/k8s.conf，执行<code>sysctl -p</code>命令生效。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习四-kubernetes配置NFS持久化存储</title>
    <url>/2022/02/15/kubernetes%E5%AD%A6%E4%B9%A0%E5%9B%9B-kubernetes%E9%85%8D%E7%BD%AENFS%E5%AD%98%E5%82%A8%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><a id="more"></a>
<p>k8s集群基于kubeadm工具部署，过程参考《kubernetes学习二-kubeadm安装kubernetes集群-单master》</p>
<p><strong>kubernetes版本：1.23.3</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">主机</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">角色</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">node1</td>
<td style="text-align:center">192.168.1.201</td>
<td style="text-align:center">master</td>
</tr>
<tr>
<td style="text-align:center">node2</td>
<td style="text-align:center">192.168.1.202</td>
<td style="text-align:center">node</td>
</tr>
<tr>
<td style="text-align:center">node3</td>
<td style="text-align:center">192.168.1.203</td>
<td style="text-align:center">nfs server</td>
</tr>
</tbody>
</table>
<h1 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2 介绍"></a>2 介绍</h1><p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220608171554052.png" alt="image-20220608171554052"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220608171226158.png" alt="image-20220608171226158"></p>
<p><strong>PV说明：</strong></p>
<ul>
<li>由集群管理员创建和管理</li>
<li>设置底层存储，比如使用NFS</li>
<li>设置存储容量大小</li>
<li>设置访问模式（Access mode）</li>
<li>指定Reclaim Policy</li>
<li>PV不属于任何命名空间，是节点层面的资源</li>
<li>PV的状态：Available -可用，未绑定PVC；Bound - 已绑定PVC；Terminating -删除中；</li>
</ul>
<p><strong>PVC说明</strong>：</p>
<ul>
<li>由开发团队创建和管理</li>
<li>不需要知道底层存储的实现细节</li>
<li>指定所需的最低存储容量</li>
<li>指定访问模式</li>
<li>可选指定PV名称<code>volumeName</code>,不指定时自动由kuberntes自动匹配（根据存储容量和访问模式）</li>
<li>PVC和PV的关系是一对一，只能将一个PVC绑定到一个PV上</li>
<li>PVC属于某个命名空间</li>
<li>PVC状态：Pending - 待绑定；Bound- 已绑定PVC；Terminatinig-删除中</li>
</ul>
<h1 id="3-准备NFS服务器"><a href="#3-准备NFS服务器" class="headerlink" title="3 准备NFS服务器"></a>3 准备NFS服务器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils rpcbind</span><br><span class="line">systemctl  start rpcbind.service </span><br><span class="line">systemctl  start nfs</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置, * 代表所有IP</span></span><br><span class="line">mkdir /mnt/nfs -p</span><br><span class="line">chown nfsnobody.nfsnobody /data/nfs</span><br><span class="line"></span><br><span class="line">cat&gt;&gt;/etc/exports&lt;&lt;EOF</span><br><span class="line">/mnt/nfs *(rw,sync,no_root_squash,no_all_squash)</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 加载配置</span></span><br><span class="line">exportfs  -arv</span><br></pre></td></tr></table></figure>
<p><strong>所有kubernetes集群节点安装nfs-utils</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y  nfs-utils</span><br></pre></td></tr></table></figure>
<p><strong>kubernetes集群节点验证nfs服务器挂载点</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 nfs]<span class="comment"># showmount -e 192.168.1.203</span></span><br><span class="line">Export list <span class="keyword">for</span> 192.168.1.203:</span><br><span class="line">/mnt/nfs *</span><br></pre></td></tr></table></figure>
<h1 id="4-NFS静态供给（Static-Provision）"><a href="#4-NFS静态供给（Static-Provision）" class="headerlink" title="4 NFS静态供给（Static Provision）"></a>4 NFS静态供给（Static Provision）</h1><p>我们提前创建PV，然后通过PVC申请PV并在pod中使用，这种方式叫做静态供给（Static Provision）。</p>
<h2 id="4-1-首先创建PV（PersistentVolume）"><a href="#4-1-首先创建PV（PersistentVolume）" class="headerlink" title="4.1 首先创建PV（PersistentVolume）"></a>4.1 首先创建PV（PersistentVolume）</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-nfs-pv1</span>               </span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">5</span><span class="string">Mi</span>                 </span><br><span class="line"><span class="attr">  accessModes:</span>  </span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span>        </span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">nfs</span>                         </span><br><span class="line"><span class="attr">  mountOptions:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hard</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">nfsvers=4.1</span></span><br><span class="line"><span class="attr">  nfs:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/opt/nfs/pv1</span>                            <span class="comment"># 指定PV在NFS服务器上的对应目录。</span></span><br><span class="line"><span class="attr">    server:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.75</span>                          <span class="comment"># NFS服务器的地址</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>name</code>:  定义PV的名称。</li>
<li><code>capacity</code>:  指定存储的容量</li>
<li><code>accessModes</code>: 指定访问模式，支持三种模式。ReadWriteOnce标识PV能以read-write模式mount到单个节点，ReadOnlyMany表示PV能以read-only模式mount到多个节点，ReadWriteMany表示PV能以read-write模式mount到多个节点。</li>
<li><code>persistentVolumeReclaimPolicy</code>:  指定回收策略。<code>Retain</code>表示需要管理员手工回收即手动删除文件；<code>Recycle</code>表示清除PV中的数据即删除PVC时直接删除PV中的数据；<code>Delete</code>表示删除Storage Provider上的对应存储资源，例如 Aws、 EBS、 GCE PD、Azure Disk、OpenStack Cinder Volume等</li>
<li><code>storageClassName</code>:  指定PV的class为nfs，相当于设置PV的分类。PVC可以指定class申请相应class的PV。</li>
<li><code>nfs</code>:  指定PV在NFS服务器上的路径</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建PV</span></span><br><span class="line">[root@k8s-master nfs_]<span class="comment"># kuberctl apply -f pv.yaml</span></span><br><span class="line"><span class="comment"># 查看PV</span></span><br><span class="line">[root@k8s-master nfs_]<span class="comment"># kubectl get pv</span></span><br><span class="line">NAME         CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">my-nfs-pv1   5Mi        RWO            Recycle          Available           nfs                     92m</span><br><span class="line"><span class="comment"># STATUS 为Available,表示就绪，可以被PVC申请。</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-创建PVC（PersistentVolumeClaim）"><a href="#4-2-创建PVC（PersistentVolumeClaim）" class="headerlink" title="4.2 创建PVC（PersistentVolumeClaim）"></a>4.2 创建PVC（PersistentVolumeClaim）</h2><p>PVC创建就很简单，只需要指定PV的容量、访问模式、class即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">pvc1-pv1</span>                    <span class="comment"># 指定pvc名称</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">geocms</span>                 <span class="comment"># 指定PVC属于哪个命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  resources:</span>                     </span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">5</span><span class="string">Mi</span>                  <span class="comment"># 指定PV最低存储容量</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span>                 <span class="comment"># 指定访问模式</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">nfs</span>             <span class="comment"># 指定匹配PV的class</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建PVC</span></span><br><span class="line">[root@k8s-master nfs_]<span class="comment"># kubectl apply -f nfs_pvc1.yaml </span></span><br><span class="line">persistentvolumeclaim/pvc1-pv1 created</span><br><span class="line"><span class="comment"># 查看PVC</span></span><br><span class="line"><span class="comment"># STATUS 为Bound 表示申请成功</span></span><br><span class="line">[root@k8s-master nfs_]<span class="comment"># kubectl get pvc -n geocms </span></span><br><span class="line">NAME       STATUS   VOLUME       CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">pvc1-pv1   Bound    my-nfs-pv1   5Mi        RWO            nfs            7s</span><br><span class="line"><span class="comment"># 查看PV</span></span><br><span class="line"><span class="comment"># STATUS为Bound，CLATMIM表示被geocms命名空间的PVC(pvc1-pv1)绑定成功。 </span></span><br><span class="line">[root@k8s-master nfs_]<span class="comment"># kubectl get pv</span></span><br><span class="line">NAME         CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   REASON   AGE</span><br><span class="line">my-nfs-pv1   5Mi        RWO            Recycle          Bound    geocms/pvc1-pv1   nfs                     106m</span><br></pre></td></tr></table></figure>
<h2 id="4-3-POD挂载"><a href="#4-3-POD挂载" class="headerlink" title="4.3 POD挂载"></a>4.3 POD挂载</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">geocms</span>                      <span class="comment"># 要和PVC在同一个命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.20.1</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">nginx-html</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"128Mi"</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"500m"</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx-html</span></span><br><span class="line"><span class="attr">        persistentVolumeClaim:</span>             <span class="comment"># 指定存储类型</span></span><br><span class="line"><span class="attr">          claimName:</span> <span class="string">pvc1-pv1</span>              <span class="comment"># 指定PVC的名称</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">geocms</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30001</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Deployment</span></span><br><span class="line">kubectl apply -f nginx.yaml</span><br><span class="line"><span class="comment"># 在/opt/nfs/pv1下创建index.html文件</span></span><br><span class="line"><span class="comment"># 访问nginx，显示成功表示挂载成功。</span></span><br></pre></td></tr></table></figure>
<h1 id="2-NFS动态供给（Static-Provision）"><a href="#2-NFS动态供给（Static-Provision）" class="headerlink" title="2 NFS动态供给（Static Provision）"></a>2 NFS动态供给（Static Provision）</h1><p>参考：<a href="https://www.cnblogs.com/zhangb8042/p/14252294.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangb8042/p/14252294.html</a></p>
<p>动态供给，即如果没有满足PVC条件的PV，会动态创建PV。相比静态供给，动态供给由明显的优势：不需要提前创建按PV,减少了管理员的工作量，效率高。</p>
<p>动态供给是通过StorageClass实现的，StorageClass定义了如何创建PV，下面给出NFS实现动态供给的例子。</p>
<p><strong>github地址:</strong> <a href="https://github.com/kubernetes-retired/external-storage" target="_blank" rel="noopener">https://github.com/kubernetes-retired/external-storage</a></p>
<h2 id="2-1-下载yaml配置"><a href="#2-1-下载yaml配置" class="headerlink" title="2.1 下载yaml配置"></a>2.1 下载yaml配置</h2><p><a href="https://github.com/kubernetes-retired/external-storage/tree/master/nfs" target="_blank" rel="noopener">https://github.com/kubernetes-retired/external-storage/tree/master/nfs</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes-retired/external-storage/master/nfs-client/deploy/rbac.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes-retired/external-storage/master/nfs-client/deploy/class.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes-retired/external-storage/master/nfs-client/deploy/deployment.yaml</span><br></pre></td></tr></table></figure>
<h2 id="2-2-创建StorageClass"><a href="#2-2-创建StorageClass" class="headerlink" title="2.2 创建StorageClass"></a>2.2 创建<code>StorageClass</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl  apply -f class.yaml</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># class.yaml</span></span><br><span class="line"><span class="comment"># 动态供给是通过StorageClass实现的，StorageClass定义如何创建PV。</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">--------------------------------------------------------------</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span>              </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">managed-nfs-storage</span>     </span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">fuseim.pri/ifs</span>     <span class="comment"># 可自定义名称，但必须和deployment配置的变量 “PROVISIONER_NAME” 匹配</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  archiveOnDelete:</span> <span class="string">"false"</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-创建-ClusterRole"><a href="#2-3-创建-ClusterRole" class="headerlink" title="2.3 创建 ClusterRole"></a>2.3 创建 ClusterRole</h2><p>创建<code>ClusterRole</code>、<code>ClusterRoleBinding</code>,<code>Role</code>和<code>RoleBinding</code>（如果您在集群上使用 RBAC 授权，这是必需的，这是较新 kubernetes 版本的默认设置）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rbac.yaml</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">---------------------------------------------------------------</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">  - apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">    resources:</span> <span class="string">["persistentvolumes"]</span></span><br><span class="line"><span class="attr">    verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"delete"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  - apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">    resources:</span> <span class="string">["persistentvolumeclaims"]</span></span><br><span class="line"><span class="attr">    verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  - apiGroups:</span> <span class="string">["storage.k8s.io"]</span></span><br><span class="line"><span class="attr">    resources:</span> <span class="string">["storageclasses"]</span></span><br><span class="line"><span class="attr">    verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  - apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">    resources:</span> <span class="string">["events"]</span></span><br><span class="line"><span class="attr">    verbs:</span> <span class="string">["create",</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">]</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">run-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">  - kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">  - apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">    resources:</span> <span class="string">["endpoints"]</span></span><br><span class="line"><span class="attr">    verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">]</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">  - kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-创建Deployment"><a href="#2-4-创建Deployment" class="headerlink" title="2.4 创建Deployment"></a>2.4 创建Deployment</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deployment.yaml </span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">  labels:</span><br><span class="line">    app: nfs-client-provisioner</span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nfs-client-provisioner</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs-client-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nfs-client-provisioner</span><br><span class="line">      containers:</span><br><span class="line">        - name: nfs-client-provisioner</span><br><span class="line">          image: quay.io/external_storage/nfs-client-provisioner:latest</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: nfs-client-root</span><br><span class="line">              mountPath: /persistentvolumes</span><br><span class="line">          env:</span><br><span class="line">            - name: PROVISIONER_NAME    </span><br><span class="line">              value: fuseim.pri/ifs           <span class="comment"># PROVISIONER_NAME变量的值必须好class中的 “provisioner” 匹配</span></span><br><span class="line">            - name: NFS_SERVER</span><br><span class="line">              value: 192.168.1.203            <span class="comment"># nfs服务器ip</span></span><br><span class="line">            - name: NFS_PATH</span><br><span class="line">              value: /mnt/nfs                 <span class="comment"># nfs服务器的挂载目录</span></span><br><span class="line">      volumes:</span><br><span class="line">        - name: nfs-client-root</span><br><span class="line">          nfs:</span><br><span class="line">            server: 192.168.1.2036            <span class="comment"># nfs服务器ip</span></span><br><span class="line">            path: /mnt/nfs                    <span class="comment"># nfs服务器的挂载目录</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Deployment</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl apply -f deployment.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pod </span></span><br><span class="line">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nfs-client-provisioner-dfb75c8bb-42p8l   1/1     Running   0          80s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看存储类 kubectl get storageclasses.storage.k8s.io</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get sc        </span></span><br><span class="line">NAME                  PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">managed-nfs-storage   fuseim.pri/ifs   Delete          Immediate           <span class="literal">false</span>                  5m56s</span><br></pre></td></tr></table></figure>
<h2 id="2-5-设置默认存储"><a href="#2-5-设置默认存储" class="headerlink" title="2.5  设置默认存储"></a>2.5  设置默认存储</h2><p>设置managed-nfs-storage为kubernetes的默认存储后端</p>
<ul>
<li>我们可以用kubectl patch命令来更新</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置managed-nfs-storage为默认存储</span></span><br><span class="line">kubectl patch storageclass managed-nfs-storage -p <span class="string">'&#123;"metadata": &#123;"annotations":&#123;"storageclass.kubernetes.io/is-default-class":"true"&#125;&#125;&#125;'</span></span><br><span class="line"><span class="comment"># 取消设置managed-nfs-storage为默认存储</span></span><br><span class="line">kubectl patch storageclass managed-nfs-storage -p <span class="string">'&#123;"metadata": &#123;"annotations":&#123;"storageclass.kubernetes.io/is-default-class":"false"&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>也可以修改class.yaml文件</li>
</ul>
<p>增加如下2行，设置为默认存储类</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">  annotations:                                            <span class="comment"># 配置默认存储类</span></span><br><span class="line">    storageclass.kubernetes.io/is-default-class: <span class="string">"true"</span>   <span class="comment"># 配置默认存储类</span></span><br><span class="line">provisioner: nfsserver-test <span class="comment"># or choose another name, must match deployment's env PROVISIONER_NAME'</span></span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">"false"</span></span><br></pre></td></tr></table></figure>
<p><strong>验证</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 nfs]<span class="comment"># kubectl get sc</span></span><br><span class="line">NAME                            PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">managed-nfs-storage (default)   nfsserver-test   Delete          Immediate           <span class="literal">false</span>                  160m</span><br></pre></td></tr></table></figure>
<h2 id="2-6-修改api-server的配置"><a href="#2-6-修改api-server的配置" class="headerlink" title="2.6 修改api-server的配置"></a>2.6 修改api-server的配置</h2><p>修改<strong>/etc/kubernetes/manifests/kube-apiserver.yaml</strong> 文件</p>
<p>添加添加<strong>- –feature-gates=RemoveSelfLink=false</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># grep -B 5 'feature-gates' /etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br><span class="line">    - --service-account-key-file=/etc/kubernetes/pki/sa.pub</span><br><span class="line">    - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key</span><br><span class="line">    - --service-cluster-ip-range=10.96.0.0/12</span><br><span class="line">    - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt</span><br><span class="line">    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span><br><span class="line">    - --feature-gates=RemoveSelfLink=<span class="literal">false</span> <span class="comment">#添加内容</span></span><br></pre></td></tr></table></figure>
<p>修改后 apiserver会自动重启。</p>
<h2 id="2-7-测试"><a href="#2-7-测试" class="headerlink" title="2.7 测试"></a>2.7 测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test-pvc.yaml</span></span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">[root@master ~]<span class="comment"># cat  test-pvc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: geocms-html-claim</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"managed-nfs-storage"</span></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Gi</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建PVC</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl  apply -f test-pvc.yaml</span></span><br><span class="line">persistentvolumeclaim/<span class="built_in">test</span>-claim created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看PVC。STATUS 为Bound表示绑定PV成功，VOLUME为挂载的PV名称</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pvc</span></span><br><span class="line">NAME                STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">geocms-html-claim   Bound    pvc-93404728-f6f4-4ba2-8146-1553be9bedad   1Gi        RWX            managed-nfs-storage   12s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看PV。发现自动创建了PV，STATUS为Bound，表示绑定成功，被default命名空间的geocms-html-claim申请成功。</span></span><br><span class="line">[root@k8s-master geocms]<span class="comment"># kubectl get pv</span></span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS          REASON   AGE</span><br><span class="line">pvc-93404728-f6f4-4ba2-8146-1553be9bedad   1Gi        RWX            Delete           Bound    default/geocms-html-claim   managed-nfs-storage            84s</span><br></pre></td></tr></table></figure>
<h1 id="3-问题汇总"><a href="#3-问题汇总" class="headerlink" title="3 问题汇总"></a>3 问题汇总</h1><h2 id="3-1-pvc一直Pengding"><a href="#3-1-pvc一直Pengding" class="headerlink" title="3.1 pvc一直Pengding"></a>3.1 pvc一直Pengding</h2><p><strong>现象：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pvc状态</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># kubectl get pvc</span></span><br><span class="line">NAME         STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line"><span class="built_in">test</span>-claim   Pending                                      managed-nfs-storage   3s</span><br><span class="line"></span><br><span class="line"><span class="comment"># pvc信息</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># kubectl describe pvc test-claim </span></span><br><span class="line">Name:          <span class="built_in">test</span>-claim</span><br><span class="line">Namespace:     default</span><br><span class="line">StorageClass:  managed-nfs-storage</span><br><span class="line">Status:        Pending</span><br><span class="line">Volume:        </span><br><span class="line">Labels:        &lt;none&gt;</span><br><span class="line">Annotations:   volume.beta.kubernetes.io/storage-class: managed-nfs-storage</span><br><span class="line">               volume.beta.kubernetes.io/storage-provisioner: nfsserver-test</span><br><span class="line">               volume.kubernetes.io/storage-provisioner: nfsserver-test</span><br><span class="line">Finalizers:    [kubernetes.io/pvc-protection]</span><br><span class="line">Capacity:      </span><br><span class="line">Access Modes:  </span><br><span class="line">VolumeMode:    Filesystem</span><br><span class="line">Used By:       &lt;none&gt;</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason                Age               From                         Message</span><br><span class="line">  ----    ------                ----              ----                         -------</span><br><span class="line">  Normal  ExternalProvisioning  7s (x3 over 26s)  persistentvolume-controller  waiting <span class="keyword">for</span> a volume to be created, either by external provisioner <span class="string">"nfsserver-test"</span> or manually created by system administrator</span><br><span class="line">[root@node1 nfs]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p><strong>原因：</strong></p>
<ol>
<li><p>需修改api-server.yaml配置，添加<strong>- –feature-gates=RemoveSelfLink=false</strong></p>
</li>
<li><p>nfs挂载目录需要有权限</p>
</li>
<li>nfs存储类没有配置正确。（我遇到的问题是nfs的depoyment无法正常连接api-server，原因是集群初始化时候flannel的网络配置和默认网络不一致。）</li>
</ol>
<p><strong>解决办法：</strong></p>
<p>参考 <strong>3.2 nfs的deployment异常</strong></p>
<h2 id="3-2-nfs的deployment异常"><a href="#3-2-nfs的deployment异常" class="headerlink" title="3.2 nfs的deployment异常"></a>3.2 nfs的deployment异常</h2><p>参考：<a href="https://blog.csdn.net/weixin_40455124/article/details/104825270" target="_blank" rel="noopener"> Kubeadm 部署 使用flannel无法连接service/kubernetes</a></p>
<p><strong>现象：</strong>deployment创建的pod总是异常挂掉或无法正常启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nfs deploy状态</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                                     READY   STATUS              RESTARTS   AGE</span><br><span class="line">nfs-client-provisioner-b8b468858-m9c79   0/1     ContainerCreating   0          4m24s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod状态</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># kubectl describe pod nfs-client-provisioner-b8b468858-m9c79 </span></span><br><span class="line">......</span><br><span class="line">  Normal   SandboxChanged          20s (x12 over 31s)   kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class="line">  Warning  FailedCreatePodSandBox  19s (x4 over 22s)    kubelet            (combined from similar events): Failed to create pod sandbox: rpc error: code = Unknown desc = failed to <span class="built_in">set</span> up sandbox container <span class="string">"01a249d53627976e4d872e44004b436600bef233a5dee8814760e9e0cdabc015"</span> network <span class="keyword">for</span> pod <span class="string">"nfs-client-provisioner-b8b468858-m9c79"</span>: networkPlugin cni failed to <span class="built_in">set</span> up pod <span class="string">"nfs-client-provisioner-b8b468858-m9c79_default"</span> network: failed to delegate add: failed to <span class="built_in">set</span> bridge addr: <span class="string">"cni0"</span> already has an IP address different from 101.100.1.1/24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod日志</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                                     READY   STATUS              RESTARTS   AGE</span><br><span class="line">nfs-client-provisioner-b8b468858-m9c79   0/1     ContainerCreating   0          4m24s</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看各节点flannel网络配置</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># cat /run/flannel/subnet.env </span></span><br><span class="line">FLANNEL_NETWORK=10.244.0.0/16</span><br><span class="line">FLANNEL_SUBNET=101.100.0.1/24</span><br><span class="line">FLANNEL_MTU=1450</span><br><span class="line">FLANNEL_IPMASQ=<span class="literal">true</span></span><br><span class="line">[root@node1 nfs]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p><strong>原因：</strong>flanenl网络地址端配置不正确，<code>FLANNEL_NETWORK</code>和<code>FLANNEL_SUBNET</code>需要在一个网段。</p>
<p><strong>解决办法：</strong></p>
<p>flannel网络的<code>FLANNEL_NETWORK</code>和<code>FLANNEL_SUBNET</code>需要在一个网段，使flannel的默认网段和集群初始化的cni网络在一个网段。重新安装kubernetes 使用默认–pod-network-cidr=10.244.0.0/16 （下面示例均使用101.100.0.0/16）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看flannel.yaml,发现flannel默认网络是10.244.0.0/16</span></span><br><span class="line">[root@node1 home]<span class="comment"># cat flannel.yml</span></span><br><span class="line">.....</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">---</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置集群初始化yaml文件，设置podSubnet:10.244.0.0/16(也可以配置为其他段，只需要保证和flannel.yaml中的网段即`FLANNEL_NETWORK`和`FLANNEL_SUBNET`需要在一个网段。)</span></span><br><span class="line"><span class="comment"># 这里我直接修改flannel.yaml和初始化yaml文件内的网段均为101.100.0.0/16</span></span><br><span class="line"><span class="comment"># 重新初始化安装kubernentes</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># cat /run/flannel/subnet.env </span></span><br><span class="line">FLANNEL_NETWORK=101.100.0.0/16</span><br><span class="line">FLANNEL_SUBNET=101.100.0.1/24</span><br><span class="line">FLANNEL_MTU=1450</span><br><span class="line">FLANNEL_IPMASQ=<span class="literal">true</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nfs pod和pvc均正常了</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># kubectl describe pod nfs-client-provisioner-b8b468858-gn2b6 </span></span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  15s   default-scheduler  Successfully assigned default/nfs-client-provisioner-b8b468858-gn2b6 to node2</span><br><span class="line">  Normal  Pulling    14s   kubelet            Pulling image <span class="string">"quay.io/external_storage/nfs-client-provisioner:latest"</span></span><br><span class="line">  Normal  Pulled     10s   kubelet            Successfully pulled image <span class="string">"quay.io/external_storage/nfs-client-provisioner:latest"</span> <span class="keyword">in</span> 4.239848452s</span><br><span class="line">  Normal  Created    10s   kubelet            Created container nfs-client-provisioner</span><br><span class="line">  Normal  Started    10s   kubelet            Started container nfs-client-provisioner</span><br><span class="line"></span><br><span class="line">[root@node1 nfs]<span class="comment"># kubectl get pvc</span></span><br><span class="line">NAME         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line"><span class="built_in">test</span>-claim   Bound    pvc-811d031b-e842-4103-bdaa-cc89f51e1fc8   1Mi        RWX            managed-nfs-storage   2m18s</span><br><span class="line"></span><br><span class="line"><span class="comment"># pvc状态</span></span><br><span class="line">[root@node1 nfs]<span class="comment"># kubectl describe pvc test-claim </span></span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason                 Age                  From                                                                                        Message</span><br><span class="line">  ----    ------                 ----                 ----                                                                                        -------</span><br><span class="line">  Normal  ExternalProvisioning   87s (x6 over 2m13s)  persistentvolume-controller                                                                 waiting <span class="keyword">for</span> a volume to be created, either by external provisioner <span class="string">"nfsserver-test"</span> or manually created by system administrator</span><br><span class="line">  Normal  ExternalProvisioning   7s                   persistentvolume-controller                                                                 waiting <span class="keyword">for</span> a volume to be created, either by external provisioner <span class="string">"nfsserver-test"</span> or manually created by system administrator</span><br><span class="line">  Normal  Provisioning           5s                   nfsserver-test_nfs-client-provisioner-b8b468858-gn2b6_bb6b9b33-8e34-11ec-ab4a-ca0aed401744  External provisioner is provisioning volume <span class="keyword">for</span> claim <span class="string">"default/test-claim"</span></span><br><span class="line">  Normal  ProvisioningSucceeded  5s                   nfsserver-test_nfs-client-provisioner-b8b468858-gn2b6_bb6b9b33-8e34-11ec-ab4a-ca0aed401744  Successfully provisioned volume pvc-811d031b-e842-4103-bdaa-cc89f51e1fc8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx反向代理/配置</title>
    <url>/2022/03/29/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/03/image-20220329085810262.png" alt="image-20220329085810262"></p>
<a id="more"></a>
<p><a href="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/03/nginx反向代理配置对比.xlsx" target="_blank" rel="noopener">原始表格</a></p>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习五-kubernetes集群二进制安装</title>
    <url>/2022/02/23/kubernetes%E5%AD%A6%E4%B9%A0%E4%BA%94-kubernetes%E9%9B%86%E7%BE%A4%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><a id="more"></a>
<p>今天这篇文章教给大家如何快速部署一套<code>Kubernetes</code>集群。K8S集群部署有几种方式：<code>kubeadm</code>、<code>minikube</code>和<code>二进制包</code>。前两者属于自动部署，简化部署操作，我们这里强烈推荐初学者使用二进制包部署，因为自动部署屏蔽了很多细节，使得对各个模块感知很少，非常不利用学习。</p>
<p>所以，这篇文章也是使用二进制包部署Kubernetes集群。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220223144316032.png" alt="image-20220223144316032"></p>
<h1 id="二、环境规划"><a href="#二、环境规划" class="headerlink" title="二、环境规划"></a>二、环境规划</h1><p><strong>环境说明</strong>：</p>
<table>
<thead>
<tr>
<th style="text-align:center">软件</th>
<th style="text-align:center">版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Centos</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">etcd</td>
<td style="text-align:center">v3.5.2</td>
</tr>
<tr>
<td style="text-align:center">Docker</td>
<td style="text-align:center">v20.10.12</td>
</tr>
<tr>
<td style="text-align:center">kubelet</td>
<td style="text-align:center">v1.23.3</td>
</tr>
<tr>
<td style="text-align:center">kubectl</td>
<td style="text-align:center">v1.23.3</td>
</tr>
</tbody>
</table>
<p>关闭selinux。</p>
<table>
<thead>
<tr>
<th style="text-align:center">角色</th>
<th style="text-align:center">IP</th>
<th>组件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">master</td>
<td style="text-align:center">192.168.164.128</td>
<td>etcd  kube-apiserver  kube-controller-manager  kube-scheduler  docker</td>
</tr>
<tr>
<td style="text-align:center">node01</td>
<td style="text-align:center">192.168.164.129</td>
<td>kubelet  kube-proxy  docker</td>
</tr>
<tr>
<td style="text-align:center">node02</td>
<td style="text-align:center">192.168.164.130</td>
<td>kubelet  kube-proxy  docker</td>
</tr>
</tbody>
</table>
<h1 id="三、部署集群"><a href="#三、部署集群" class="headerlink" title="三、部署集群"></a>三、部署集群</h1><h2 id="3-1下载二进制包"><a href="#3-1下载二进制包" class="headerlink" title="3.1下载二进制包"></a>3.1下载二进制包</h2><p>打开下面网址，下载下面两个红色框框的包。</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.23.md" target="_blank" rel="noopener">kubernetes/CHANGELOG-1.23.md at master · kubernetes/kubernetes · GitHub</a></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2022/02/image-20220223144658913.png" alt="image-20220223144658913"></p>
<p>下载完成后，上传到服务器：</p>
<p><code>kubernetes-server-linux-amd64.tar.gz</code> 上传到master节点。</p>
<p><code>kubernetes-node-linux-amd64.tar.gz</code>     上传到node节点。</p>
<p>卸载旧程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>
<h2 id="3-2-master节点操作"><a href="#3-2-master节点操作" class="headerlink" title="3.2   master节点操作"></a>3.2   master节点操作</h2><h3 id="3-2-1-安装etcd"><a href="#3-2-1-安装etcd" class="headerlink" title="3.2.1 安装etcd"></a>3.2.1 安装etcd</h3><p>etcd服务作为Kubernetes集群的主数据库，在安装Kubernetes各服务之前需要首先安装和启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install etcd –y</span></span><br><span class="line"><span class="comment"># vi /etc/etcd/etcd.conf </span></span><br><span class="line">修改：</span><br><span class="line">ETCD_NAME=<span class="string">"default"</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd/default"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"http://0.0.0.0:2379"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"http://0.0.0.0:2379"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">启动：</span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> etcd</span><br><span class="line">$ systemctl start etcd</span><br><span class="line"></span><br><span class="line">$ etcdctl endpoint health</span><br><span class="line">0.0.0.0:2379 is healthy: successfully committed proposal: took = 4.295226ms</span><br></pre></td></tr></table></figure>
<p>注意：Ubuntu系统etcd配置文件在/etc/default/etcd。</p>
<h3 id="3-2-2-安装Master节点组件"><a href="#3-2-2-安装Master节点组件" class="headerlink" title="3.2.2 安装Master节点组件"></a>3.2.2 安装Master节点组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar zxvf kubernetes-server-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">$ mkdir -p /opt/kubernetes/&#123;bin,cfg&#125;</span><br><span class="line"></span><br><span class="line">$ mv kubernetes/server/bin/&#123;kube-apiserver,kube-scheduler,kube-controller-manager,kubectl&#125; /opt/kubernetes/bin</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-1-Apiserver"><a href="#3-2-2-1-Apiserver" class="headerlink" title="3.2.2.1 Apiserver"></a>3.2.2.1 Apiserver</h4><p>新建配置文件：</p>
<p>#vi /opt/kubernetes/cfg/kube-apiserver</p>
<p>添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用日志标准错误</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=4"</span></span><br><span class="line"><span class="comment"># Etcd服务地址</span></span><br><span class="line">KUBE_ETCD_SERVERS=<span class="string">"--etcd-servers=http://192.168.164.128:2379"</span></span><br><span class="line"><span class="comment"># API服务监听地址</span></span><br><span class="line">KUBE_API_ADDRESS=<span class="string">"--insecure-bind-address=0.0.0.0"</span></span><br><span class="line"><span class="comment"># API服务监听端口</span></span><br><span class="line">KUBE_API_PORT=<span class="string">"--insecure-port=8080"</span></span><br><span class="line"><span class="comment"># 对集群中成员提供API服务地址</span></span><br><span class="line">KUBE_ADVERTISE_ADDR=<span class="string">"--advertise-address=192.168.164.128"</span></span><br><span class="line"><span class="comment"># 允许容器请求特权模式，默认false</span></span><br><span class="line">KUBE_ALLOW_PRIV=<span class="string">"--allow-privileged=false"</span></span><br><span class="line"><span class="comment"># 集群分配的IP范围</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=10.10.10.0/24"</span></span><br></pre></td></tr></table></figure>
<p>新建systemd服务文件：/lib/systemd/system/kube-apiserver.service </p>
<p>添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"></span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line"></span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-apiserver</span><br><span class="line"></span><br><span class="line">\<span class="comment">#ExecStart=/opt/kubernetes/bin/kube-apiserver $&#123;KUBE_APISERVER_OPTS&#125;</span></span><br><span class="line"></span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-apiserver \</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;KUBE_LOGTOSTDERR&#125;</span> \</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;KUBE_LOG_LEVEL&#125;</span> \</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;KUBE_ETCD_SERVERS&#125;</span> \</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;KUBE_API_ADDRESS&#125;</span> \</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;KUBE_API_PORT&#125;</span> \</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;KUBE_ADVERTISE_ADDR&#125;</span> \</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;KUBE_ALLOW_PRIV&#125;</span> \</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;KUBE_SERVICE_ADDRESSES&#125;</span></span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"></span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>启动服务，并设置开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> kube-apiserver</span><br><span class="line">$ systemctl restart kube-apiserver</span><br></pre></td></tr></table></figure>
<p>注意：apiserver默认支持etcd3，如果是etcd2，需启动时指定版本选项–storage-backend=etcd2</p>
<h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><p>docker-compose教程：<a href="https://blog.csdn.net/pushiqiang/article/details/78682323" target="_blank" rel="noopener">https://blog.csdn.net/pushiqiang/article/details/78682323</a> //用于把多个服务串联起来统一管理</p>
<p>Kubernetes常用命令：<a href="https://www.cnblogs.com/FRESHMANS/p/8444098.html" target="_blank" rel="noopener">https://www.cnblogs.com/FRESHMANS/p/8444098.html</a></p>
<p>Kubernetes中文社区：<a href="https://www.kubernetes.org.cn/k8s" target="_blank" rel="noopener">https://www.kubernetes.org.cn/k8s</a></p>
<p>群集搭建：<a href="https://blog.csdn.net/zhenliang8/article/details/78611004" target="_blank" rel="noopener">https://blog.csdn.net/zhenliang8/article/details/78611004</a></p>
<p>web管理平台portainer：<a href="https://www.cnblogs.com/gao88/p/7011175.html" target="_blank" rel="noopener">https://www.cnblogs.com/gao88/p/7011175.html</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置示例1</title>
    <url>/2022/03/29/nginx%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B1/</url>
    <content><![CDATA[<p>Nginx:1.20.1版本</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"><span class="comment"># 使用用户和组</span></span><br><span class="line"><span class="comment"># user nginx nginx;</span></span><br><span class="line"><span class="comment"># 使用使用用户</span></span><br><span class="line">user nginx;</span><br><span class="line"><span class="comment"># 指定工作进程数（一般等于CPU的总核数或者总核数的2倍）</span></span><br><span class="line"><span class="comment"># 默认值为 auto（根据核心数自动生成对应数量的work进程）。</span></span><br><span class="line">worker_processes 8;</span><br><span class="line"><span class="comment"># 指定错误日志存放位置</span></span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log info;</span><br><span class="line"><span class="comment"># 指定pid文件位置</span></span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定文件描述符数量（默认不配置）</span></span><br><span class="line"><span class="comment"># 将此值增加到大于worker_processes * worker_connections的值</span></span><br><span class="line">worker_rlimit_nofile 51200;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line"><span class="comment"># 加载本地动态模块</span></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"> </span><br><span class="line">events &#123;</span><br><span class="line"><span class="comment"># 使用的网络I/O模型，Linux系统推荐epoll模型，FreeBSD系统推荐kqueue模型（默认不配置）</span></span><br><span class="line">    use epoll;</span><br><span class="line"><span class="comment"># 允许的最大连接数（默认500）</span></span><br><span class="line">    worker_connections 51200;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"><span class="comment"># 指定访问日志位置</span></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"> </span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 4096;</span><br><span class="line"> </span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置使用的字符集，如果网站有多个字符集，不要随便设置，应让程序员在HTML代码中通过Meta标签设置</span></span><br><span class="line"><span class="comment"># 默认不配置</span></span><br><span class="line"><span class="comment"># charset gb2312</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置客户端能够上传的文件大小（默认不配置）</span></span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 开启gzip压缩(默认不配置)</span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_comp_level 3;</span><br><span class="line">    gzip_types text/plain application/javascript application/json application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 静态缓存</span></span><br><span class="line">    proxy_connect_timeout 10;</span><br><span class="line">    proxy_read_timeout 180;</span><br><span class="line">    proxy_send_timeout 5;</span><br><span class="line">    proxy_buffer_size 16k;</span><br><span class="line">    proxy_buffers 4 32k;</span><br><span class="line">    proxy_busy_buffers_size 96k;</span><br><span class="line">    proxy_temp_file_write_size 96k;</span><br><span class="line">    proxy_temp_path /tmp/temp_dir;</span><br><span class="line">    proxy_cache_path /tmp/cache levels=1:2 keys_zone=cache_one:100m inactive=1d max_size=10g;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"> </span><br><span class="line">     server &#123;</span><br><span class="line">         listen       80;</span><br><span class="line">         listen       [::]:80;</span><br><span class="line">         server_name  _;</span><br><span class="line">         root         /usr/share/nginx/html;</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 开启目录文件列表（此位置开启全局，放到location下，只开启对应路劲的列表）</span></span><br><span class="line">         autoindex on;</span><br><span class="line">         autoindex_exact_size on;</span><br><span class="line">         autoindex_localtime on;</span><br><span class="line">         charset utf-8,gbk;        <span class="comment"># 设置列表字符集</span></span><br><span class="line"> </span><br><span class="line">         <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">         include /etc/nginx/default.d/*.conf;</span><br><span class="line"> </span><br><span class="line">         error_page 404 /404.html;</span><br><span class="line">         location = /404.html &#123;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         error_page 500 502 503 504 /50x.html;</span><br><span class="line">         location = /50x.html &#123;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Settings for a TLS enabled server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    server &#123;</span></span><br><span class="line"><span class="comment">#        listen       443 ssl http2;</span></span><br><span class="line"><span class="comment">#        listen       [::]:443 ssl http2;</span></span><br><span class="line"><span class="comment">#        server_name  _;</span></span><br><span class="line"><span class="comment">#        root         /usr/share/nginx/html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        ssl_certificate "/etc/pki/nginx/server.crt";</span></span><br><span class="line"><span class="comment">#        ssl_certificate_key "/etc/pki/nginx/private/server.key";</span></span><br><span class="line"><span class="comment">#        ssl_session_cache shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#        ssl_session_timeout  10m;</span></span><br><span class="line"><span class="comment">#        ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#        ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        # Load configuration files for the default server block.</span></span><br><span class="line"><span class="comment">#        include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 404 /404.html;</span></span><br><span class="line"><span class="comment">#            location = /40x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"><span class="comment">#            location = /50x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习五-kubernetes离线快速部署包（V1）</title>
    <url>/2022/05/25/kubernetes%E5%AD%A6%E4%B9%A0%E4%BA%94-kubernetes%E7%A6%BB%E7%BA%BF%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%8C%85%EF%BC%88V1%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><a id="more"></a>
<ul>
<li><strong>软件环境</strong></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">软件</th>
<th style="text-align:center">版本</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Centos</td>
<td style="text-align:center">7.6</td>
<td style="text-align:left">操作系统</td>
</tr>
<tr>
<td style="text-align:center">Docker</td>
<td style="text-align:center">20.10.6</td>
<td style="text-align:left">容器软件</td>
</tr>
<tr>
<td style="text-align:center">kubernetes</td>
<td style="text-align:center">1.23.3</td>
<td style="text-align:left">集群软件</td>
</tr>
<tr>
<td style="text-align:center">flannel</td>
<td style="text-align:center">0.16.3</td>
<td style="text-align:left">集群网络插件</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>硬件环境</strong></li>
</ul>
<table>
<thead>
<tr>
<th>主机</th>
<th>IP</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.44.142</td>
<td></td>
</tr>
<tr>
<td>work1</td>
<td>192.168.44.143</td>
</tr>
</tbody>
</table>
<h2 id="2-master节点安装"><a href="#2-master节点安装" class="headerlink" title="2 master节点安装"></a>2 master节点安装</h2><ul>
<li>上传并解压缩文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传部署包到/home目录</span></span><br><span class="line"><span class="comment"># 解压缩文件</span></span><br><span class="line">[root@master /]<span class="comment"># cd /home</span></span><br><span class="line">[root@master home]<span class="comment"># tar -zxvf k8s-1.23.3.tar.gz</span></span><br><span class="line">[root@master home]<span class="comment"># ls</span></span><br><span class="line">k8s-1.23.3  k8s-1.23.3.tar.gz</span><br></pre></td></tr></table></figure>
<ul>
<li>设置环境变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行如下命令配置环境变量</span></span><br><span class="line"><span class="comment"># master节点的主机名</span></span><br><span class="line"><span class="built_in">export</span> HOSTNAME=k8s-master</span><br><span class="line"><span class="comment"># kubernetes apiserver的主机地址</span></span><br><span class="line"><span class="built_in">export</span> APISERVER_NAME=apiserver.k8s.com</span><br><span class="line"><span class="comment"># 集群中master节点的ip地址</span></span><br><span class="line"><span class="built_in">export</span> MASTER_IP=192.168.44.142</span><br><span class="line"><span class="comment"># Pod 使用的网段</span></span><br><span class="line"><span class="built_in">export</span> POD_SUBNET=110.11.10.0/16</span><br></pre></td></tr></table></figure>
<ul>
<li>执行安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master home]<span class="comment"># cd k8s-1.23.3</span></span><br><span class="line">[root@master k8s-1.23.3]<span class="comment"># source setup_master.sh</span></span><br></pre></td></tr></table></figure>
<p>出现如下信息，安装成功。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220525165335068.png" alt="image-20220525165335068"></p>
<ul>
<li>验证</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master k8s-1.23.3]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME          STATUS   ROLES                  AGE    VERSION</span><br><span class="line">k8s-master        Ready    control-plane,master   153m   v1.23.3</span><br><span class="line">[root@master k8s-1.23.3]<span class="comment"># kubectl get pod --all-namespaces</span></span><br><span class="line">NAMESPACE     NAME                             READY   STATUS    RESTARTS      AGE</span><br><span class="line">kube-system   coredns-64897985d-n5xz9          1/1     Running   0             155m</span><br><span class="line">kube-system   coredns-64897985d-zc2pv          1/1     Running   0             155m</span><br><span class="line">kube-system   etcd-master                      1/1     Running   0             155m</span><br><span class="line">kube-system   kube-apiserver-master            1/1     Running   0             155m</span><br><span class="line">kube-system   kube-controller-manager-master   1/1     Running   0             155m</span><br><span class="line">kube-system   kube-flannel-ds-5ttr5            1/1     Running   0             155m</span><br><span class="line">kube-system   kube-proxy-fpt9z                 1/1     Running   0             79m</span><br><span class="line">kube-system   kube-scheduler-master            1/1     Running   0             155m</span><br></pre></td></tr></table></figure>
<h2 id="3-work节点安装"><a href="#3-work节点安装" class="headerlink" title="3 work节点安装"></a>3 work节点安装</h2><ul>
<li>上传并解压缩文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传部署包到/home目录</span></span><br><span class="line"><span class="comment"># 解压缩文件</span></span><br><span class="line">[root@master /]<span class="comment"># cd /home</span></span><br><span class="line">[root@master home]<span class="comment"># tar -zxvf k8s-1.23.3.tar.gz</span></span><br><span class="line">[root@master home]<span class="comment"># ls</span></span><br><span class="line">k8s-1.23.3  k8s-1.23.3.tar.gz</span><br></pre></td></tr></table></figure>
<ul>
<li>获取参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 master 节点执行</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到token和cert，这两个参数在2个小时内可以重复使用，超过以后就得再次生成</span></span><br><span class="line">kubeadm join apiserver.k8s.com --token mpfjma.4vjjg8flqihor4vt     --discovery-token-ca-cert-hash sha256:6f7a8e40a810323672de5eee6f4d19aa2dbdb38411845a1bf5dd63485c43d303</span><br></pre></td></tr></table></figure>
<ul>
<li>设置环境变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行如下命令配置环境变量</span></span><br><span class="line"><span class="comment"># worker节点的主机名</span></span><br><span class="line"><span class="built_in">export</span> HOSTNAME=k8s-worker2</span><br><span class="line"><span class="comment"># kubernetes apiserver的主机地址</span></span><br><span class="line"><span class="built_in">export</span> APISERVER_NAME=apiserver.k8s.com</span><br><span class="line"><span class="comment"># 集群中master节点的ip地址</span></span><br><span class="line"><span class="built_in">export</span> MASTER_IP=192.168.44.142</span><br><span class="line"><span class="comment"># 加入master的token</span></span><br><span class="line"><span class="built_in">export</span> TOKEN=mpfjma.4vjjg8flqihor4vt</span><br><span class="line"><span class="comment"># 加入master的证书</span></span><br><span class="line"><span class="built_in">export</span> CERT=sha256:6f7a8e40a810323672de5eee6f4d19aa2dbdb38411845a1bf5dd63485c43d303</span><br></pre></td></tr></table></figure>
<ul>
<li>执行安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master home]<span class="comment"># cd k8s-1.23.3</span></span><br><span class="line">[root@master k8s-1.23.3]<span class="comment"># source setup_worker.sh</span></span><br></pre></td></tr></table></figure>
<p>出现如下信息，安装成功。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220525165436125.png" alt="image-20220525165436125"></p>
<ul>
<li>验证</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在master节点执行查询命令</span></span><br><span class="line">[root@master k8s-1.23.3]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME          STATUS   ROLES                  AGE     VERSION</span><br><span class="line">k8s-worker1   Ready    &lt;none&gt;                 156m    v1.23.3</span><br><span class="line">k8s-master        Ready    control-plane,master   3h51m   v1.23.3</span><br><span class="line">[root@master k8s-1.23.3]<span class="comment"># kubectl get pod --all-namespaces</span></span><br><span class="line">NAMESPACE     NAME                             READY   STATUS    RESTARTS       AGE</span><br><span class="line">kube-system   coredns-64897985d-n5xz9          1/1     Running   0              3h51m</span><br><span class="line">kube-system   coredns-64897985d-zc2pv          1/1     Running   0              3h51m</span><br><span class="line">kube-system   etcd-master                      1/1     Running   0              3h51m</span><br><span class="line">kube-system   kube-apiserver-master            1/1     Running   0              3h51m</span><br><span class="line">kube-system   kube-controller-manager-master   1/1     Running   0              3h51m</span><br><span class="line">kube-system   kube-flannel-ds-5ttr5            1/1     Running   0              3h51m</span><br><span class="line">kube-system   kube-flannel-ds-whp7f            1/1     Running   0              156m</span><br><span class="line">kube-system   kube-proxy-fpt9z                 1/1     Running   0              156m</span><br><span class="line">kube-system   kube-proxy-fw5g2                 1/1     Running   0              3h51m</span><br><span class="line">kube-system   kube-scheduler-master            1/1     Running   0              3h51m</span><br><span class="line"><span class="comment"># 发现上面proxy和flannle服务的pod增加。</span></span><br></pre></td></tr></table></figure>
<p>至此安装完成。</p>
<blockquote>
<p><strong>备注：</strong>其他work节点的加入方式和work的流程一致，2个小时内，获取的参数token和cert可以重复实用，无需重新在maseter节点创建新的。</p>
</blockquote>
<h1 id="附件："><a href="#附件：" class="headerlink" title="附件："></a>附件：</h1><p>「kubernetes一键包」<a href="https://www.aliyundrive.com/s/4xUE2H1kWWo" target="_blank" rel="noopener">https://www.aliyundrive.com/s/4xUE2H1kWWo</a>        提取码: ei86 </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习六:kubernetes提供的api版本信息查询</title>
    <url>/2022/05/25/kubernetes%E5%AD%A6%E4%B9%A0%E5%85%AD-kubernetes%E6%8F%90%E4%BE%9B%E7%9A%84api%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="yaml文件中的api版本如何选择？"><a href="#yaml文件中的api版本如何选择？" class="headerlink" title="yaml文件中的api版本如何选择？"></a>yaml文件中的api版本如何选择？</h3><a id="more"></a>
<h3 id="在你的k8s集群执行命令，查看你的k8s-提供的api-和版本信息，输出列格式："><a href="#在你的k8s集群执行命令，查看你的k8s-提供的api-和版本信息，输出列格式：" class="headerlink" title="在你的k8s集群执行命令，查看你的k8s 提供的api 和版本信息，输出列格式："></a>在你的k8s集群执行命令，查看你的k8s 提供的<a href="https://so.csdn.net/so/search?q=api&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">api</a> 和版本信息，输出列格式：</h3><ul>
<li>NAME 资源名称</li>
<li>SHORTNAMES 资源名称简写</li>
<li>NAMESPACED 是否需要指定命名空间</li>
<li>APIGROUP =&gt; apiVersion</li>
<li>KIND 资源类型</li>
<li>VERBS 可用的方法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl api-resources -o wide</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220525171415085.png" alt="image-20220525171415085"></p>
<h3 id="获取特定-API-组的-API-资源"><a href="#获取特定-API-组的-API-资源" class="headerlink" title="获取特定 API 组的 API 资源:"></a>获取特定 API 组的 API 资源:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl api-resources --api-group apps -o wide</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220525171551086.png" alt="image-20220525171551086"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-常用模块</title>
    <url>/2022/04/10/Python-OS%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h1><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.name <span class="comment"># 获取操作系统标识, windows是nt,linux是posix</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.name</span><br><span class="line"><span class="string">'nt'</span></span><br><span class="line"></span><br><span class="line">os.sep <span class="comment"># 输出当前操作系统的路径分隔符；windos 展示 “\” ；linux ”/“</span></span><br><span class="line"><span class="comment"># window路径使用\，需要在路径开头加r. 例如：os.remove(r'd:\11.txt').  </span></span><br><span class="line"><span class="comment"># 经测试，windows路径直接使用/可以被识别，无需添加r。</span></span><br><span class="line">os.remove(file) <span class="comment"># 删除文件  os.remove('d:/11.txt')</span></span><br><span class="line">os.unlink(file) <span class="comment"># 删除文件  os.unlink('d:/a.txt')</span></span><br><span class="line">os.rename(old,new) <span class="comment"># 重命名文件 os.rename('d:/a.txt','d:/b.txt')</span></span><br><span class="line">os.listdir(path) <span class="comment"># 列出指定目录下所有文件 os.listdir('d:')</span></span><br><span class="line">os.chdir(path) <span class="comment"># 改变当前工作目录  os.chdir('e:/')</span></span><br><span class="line">os.getcwd() <span class="comment"># 获取当前文件路径  os.getcwd()</span></span><br><span class="line">os.mkdir(path) <span class="comment"># 新建目录  os.mkdir(r'd:\testdir')</span></span><br><span class="line">os.rmdir(path) <span class="comment"># 删除空目录(删除非空目录, 使用shutil.rmtree())   os.rmdir(r'd:\testdir')</span></span><br><span class="line">os.makedirs(path) <span class="comment"># 创建多级目录  os.makedirs(r'd:\testdir1\testdir2')</span></span><br><span class="line">os.removedirs() <span class="comment"># 删除多级目录  os.removedirs(r'd:\testdir1\testdir2')</span></span><br><span class="line">os.stat(file) <span class="comment"># 获取文件属性  os.stat(r'd:\a.txt')</span></span><br><span class="line">os.chmod(file) <span class="comment"># 修改文件权限 os.chmod(r'd:\a.txt',stat.S_IREAD)  参数详情参考：https://www.runoob.com/python3/python3-os-chmod.html</span></span><br><span class="line"></span><br><span class="line">os.utime(file,times) <span class="comment"># 修改文件时间戳  os.utime("a2.py",(1330712280, 1330712292))</span></span><br><span class="line">os.system() <span class="comment"># 执行操作系统命令 os.system('netstat')</span></span><br><span class="line">os.execvp() <span class="comment"># 启动一个新进程  os.execvp</span></span><br><span class="line">os.fork() <span class="comment"># 获取父进程ID，在子进程返回中返回0</span></span><br><span class="line">os.execvp() <span class="comment"># 执行外部程序脚本（Uinx）</span></span><br><span class="line">os.spawn() <span class="comment"># 执行外部程序脚本（Windows）</span></span><br><span class="line">os.access(path, mode) <span class="comment"># 判断文件权限(详细参考cnblogs)</span></span><br><span class="line">os.wait() <span class="comment"># 暂时未知</span></span><br></pre></td></tr></table></figure>
<h2 id="os-path模块"><a href="#os-path模块" class="headerlink" title="os.path模块"></a>os.path模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.split(filename) <span class="comment"># 将文件路径和文件名分割(会将最后一个目录作为文件名而分离)</span></span><br><span class="line">os.path.splitext(filename) <span class="comment"># 将文件路径和文件扩展名分割成一个元组</span></span><br><span class="line">os.path.dirname(filename) <span class="comment"># 返回文件路径的目录部分</span></span><br><span class="line">os.path.basename(filename) <span class="comment"># 返回文件路径的文件名部分</span></span><br><span class="line">os.path.join(dirname,basename) <span class="comment"># 将文件路径和文件名凑成完整文件路径</span></span><br><span class="line">os.path.abspath(name) <span class="comment"># 获得绝对路径</span></span><br><span class="line">os.path.splitunc(path) <span class="comment"># 把路径分割为挂载点和文件名</span></span><br><span class="line">os.path.normpath(path) <span class="comment"># 规范path字符串形式</span></span><br><span class="line">os.path.exists() <span class="comment"># 判断文件或目录是否存在</span></span><br><span class="line">os.path.isabs() <span class="comment"># 如果path是绝对路径，返回True</span></span><br><span class="line">os.path.realpath(path) <span class="comment">#返回path的真实路径</span></span><br><span class="line">os.path.relpath(path[, start]) <span class="comment">#从start开始计算相对路径 </span></span><br><span class="line">os.path.normcase(path) <span class="comment">#转换path的大小写和斜杠</span></span><br><span class="line">os.path.isdir() <span class="comment"># 判断name是不是一个目录，name不是目录就返回false</span></span><br><span class="line">os.path.isfile() <span class="comment"># 判断name是不是一个文件，不存在返回false</span></span><br><span class="line">os.path.islink() <span class="comment"># 判断文件是否连接文件,返回boolean</span></span><br><span class="line">os.path.ismount() <span class="comment"># 指定路径是否存在且为一个挂载点，返回boolean</span></span><br><span class="line">os.path.samefile() <span class="comment"># 是否相同路径的文件，返回boolean</span></span><br><span class="line">os.path.getatime() <span class="comment"># 返回最近访问时间 浮点型</span></span><br><span class="line">os.path.getmtime() <span class="comment"># 返回上一次修改时间 浮点型</span></span><br><span class="line">os.path.getctime() <span class="comment"># 返回文件创建时间 浮点型</span></span><br><span class="line">os.path.getsize() <span class="comment"># 返回文件大小 字节单位</span></span><br><span class="line">os.path.commonprefix(list) <span class="comment">#返回list(多个路径)中，所有path共有的最长的路径</span></span><br><span class="line">os.path.lexists <span class="comment">#路径存在则返回True,路径损坏也返回True</span></span><br><span class="line">os.path.expanduser(path) <span class="comment"># 把path中包含的”~”和”~user”转换成用户目录</span></span><br><span class="line">os.path.expandvars(path) <span class="comment"># 根据环境变量的值替换path中包含的”$name”和”$&#123;name&#125;”</span></span><br><span class="line">os.path.sameopenfile(fp1, fp2) <span class="comment"># 判断fp1和fp2是否指向同一文件</span></span><br><span class="line">os.path.samestat(stat1, stat2) <span class="comment"># 判断stat tuple stat1和stat2是否指向同一个文件</span></span><br><span class="line">os.path.splitdrive(path) <span class="comment"># 一般用在windows下，返回驱动器名和路径组成的元组</span></span><br><span class="line">os.path.walk(path, visit, arg) <span class="comment"># 遍历path，给每个path执行一个函数详细见手册</span></span><br><span class="line">os.path.supports_unicode_filenames() <span class="comment"># 设置是否支持unicode路径名</span></span><br></pre></td></tr></table></figure>
<h1 id="stat模块"><a href="#stat模块" class="headerlink" title="stat模块"></a>stat模块</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> stat <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 描述os.stat()返回的文件属性列表中各值的意义</span></span><br><span class="line"><span class="comment"># os.stat() 部分也是借助stat模块获取信息</span></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.stat(<span class="string">r'E:\hexo\source\_posts\2022-03-29-nginx配置示例1.md'</span>)</span><br><span class="line">os.stat_result(st_mode=<span class="number">33206</span>, st_ino=<span class="number">562949953436911</span>, st_dev=<span class="number">3120552814</span>, st_nlink=<span class="number">1</span>, st_uid=<span class="number">0</span>, st_gid=<span class="number">0</span>, st_size=<span class="number">4397</span>, st_atime=<span class="number">1649486001</span>, st_mtime=<span class="number">1648715597</span>, st_ctime=<span class="number">1648515220</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置fileStats变量，获取文件全部属性列表，然后根据如下语法获取对应结果。</span></span><br><span class="line">fileStats = os.stat(path) <span class="comment"># 获取到的文件属性列表</span></span><br><span class="line">fileStats[stat.ST_MODE] <span class="comment"># 获取文件的模式</span></span><br><span class="line">fileStats[stat.ST_SIZE] <span class="comment"># 文件大小</span></span><br><span class="line">fileStats[stat.ST_MTIME] <span class="comment"># 文件最后修改时间</span></span><br><span class="line">fileStats[stat.ST_ATIME] <span class="comment"># 文件最后访问时间</span></span><br><span class="line">fileStats[stat.ST_CTIME] <span class="comment"># 文件创建时间</span></span><br><span class="line"></span><br><span class="line">stat.S_ISDIR(fileStats[stat.ST_MODE]) <span class="comment"># 是否目录</span></span><br><span class="line">stat.S_ISREG(fileStats[stat.ST_MODE]) <span class="comment"># 是否一般文件</span></span><br><span class="line">stat.S_ISLNK(fileStats[stat.ST_MODE]) <span class="comment"># 是否连接文件</span></span><br><span class="line">stat.S_ISSOCK(fileStats[stat.ST_MODE]) <span class="comment"># 是否COCK文件</span></span><br><span class="line">stat.S_ISFIFO(fileStats[stat.ST_MODE]) <span class="comment"># 是否命名管道</span></span><br><span class="line">stat.S_ISBLK(fileStats[stat.ST_MODE]) <span class="comment"># 是否块设备</span></span><br><span class="line">stat.S_ISCHR(fileStats[stat.ST_MODE]) <span class="comment"># 是否字符设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置st_mode属性</span></span><br><span class="line">stat.S_ISUID: 执行时设置用户ID</span><br><span class="line">stat.S_ISGID: 执行时设置组ID</span><br><span class="line">stat.S_ENFMT: 强制记录锁定</span><br><span class="line">stat.S_ISVTX: 执行之后保存文字和图片</span><br><span class="line">stat.S_IREAD: 所有者的读权限</span><br><span class="line">stat.S_IWRITE: 所有者的写权限</span><br><span class="line">stat.S_IEXEC: 所有者的执行权限</span><br><span class="line">stat.S_IRWXU: 所有者的读写执行的权限</span><br><span class="line">stat.S_IRUSR: 所有者的读权限</span><br><span class="line">stat.S_IWUSR: 所有者的写权限</span><br><span class="line">stat.S_IXUSR: 所有者的执行权限</span><br><span class="line">stat.S_IRWXG: 同组用户的读写权限</span><br><span class="line">stat.S_IRGRP: 同组用户的读权限</span><br><span class="line">stat.S_IWGRP: 同组用户的写权限</span><br><span class="line">stat.S_IXGRP: 同组用户的执行权限</span><br><span class="line">stat.S_IRWXO: 其它组用户的读写执行权限</span><br><span class="line">stat.S_IROTH: 其它组用户的读权限</span><br><span class="line">stat.S_IWOTH: 其它组用户的写权限</span><br><span class="line">stat.S_IXOTH: 其它组用户的执行权限</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 改变某一信息，直接拿mode与相应的stat.S_XXX执行'&amp;'操作即可。我们通常使用os.chmod()来改变一个文件的属性信息。如下：</span></span><br><span class="line"></span><br><span class="line">os.chmod(<span class="string">'windows-version.txt'</span>, f_info.st_mode &amp; stat.S_IXUSR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样，将该文件就有了所有者的执行权限。这样的权限设置对于Windows系统来说意义不大，但是Linux系统使用这种方式可以替代内部的Shell实现，多了一种方案，不是吗？在进行网络安全编程时，使用Python改变文件属性也是个常用的操作，大家务必要掌握哦。</span></span><br></pre></td></tr></table></figure>
<h1 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.argv <span class="comment"># 命令行参数List，第一个元素是程序本身路径 </span></span><br><span class="line">sys.path <span class="comment"># 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值 </span></span><br><span class="line">sys.modules.keys() <span class="comment"># 返回所有已经导入的模块列表</span></span><br><span class="line">sys.modules <span class="comment"># 返回系统导入的模块字段，key是模块名，value是模块 </span></span><br><span class="line">sys.exc_info() <span class="comment"># 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息</span></span><br><span class="line">sys.exit(n) <span class="comment"># 退出程序，正常退出时exit(0)</span></span><br><span class="line">sys.hexversion <span class="comment"># 获取Python解释程序的版本值，16进制格式如：0x020403F0</span></span><br><span class="line">sys.version <span class="comment"># 获取Python解释程序的版本信息</span></span><br><span class="line">sys.platform <span class="comment"># 返回操作系统平台名称</span></span><br><span class="line">sys.stdout <span class="comment"># 标准输出</span></span><br><span class="line">sys.stdout.write(‘aaa‘) <span class="comment"># 标准输出内容</span></span><br><span class="line">sys.stdout.writelines() <span class="comment"># 无换行输出</span></span><br><span class="line">sys.stdin <span class="comment"># 标准输入</span></span><br><span class="line">sys.stdin.read() <span class="comment"># 输入一行</span></span><br><span class="line">sys.stderr <span class="comment"># 错误输出</span></span><br><span class="line">sys.exc_clear() <span class="comment"># 用来清除当前线程所出现的当前的或最近的错误信息 </span></span><br><span class="line">sys.exec_prefix <span class="comment"># 返回平台独立的python文件安装的位置 </span></span><br><span class="line">sys.byteorder <span class="comment"># 本地字节规则的指示器，big-endian平台的值是‘big‘,little-endian平台的值是‘little‘ </span></span><br><span class="line">sys.copyright <span class="comment"># 记录python版权相关的东西 </span></span><br><span class="line">sys.api_version <span class="comment"># 解释器的C的API版本 </span></span><br><span class="line">sys.version_info <span class="comment"># ‘final‘表示最终,也有‘candidate‘表示候选，表示版本级别，是否有后继的发行 </span></span><br><span class="line">sys.getdefaultencoding() <span class="comment"># 返回当前你所用的默认的字符编码格式 </span></span><br><span class="line">sys.getfilesystemencoding() <span class="comment"># 返回将Unicode文件名转换成系统文件名的编码的名字 </span></span><br><span class="line">sys.builtin_module_names    <span class="comment">#  Python解释器导入的内建模块列表 </span></span><br><span class="line">sys.executable <span class="comment"># Python解释程序路径 </span></span><br><span class="line">sys.getwindowsversion() <span class="comment"># 获取Windows的版本 </span></span><br><span class="line">sys.stdin.readline() <span class="comment"># 从标准输入读一行，sys.stdout.write(“a”) 屏幕输出a</span></span><br><span class="line">sys.setdefaultencoding(name) <span class="comment"># 用来设置当前默认的字符编码(详细使用参考文档) </span></span><br><span class="line">sys.displayhook(value) <span class="comment"># 如果value非空，这个函数会把他输出到sys.stdout(详细使用参考文档)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习七:Dashboard安装及配置认证的四种方式</title>
    <url>/2022/05/27/kubernetes%E5%AD%A6%E4%B9%A0%E4%B8%83-Dashboard%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="1-环境介绍"><a href="#1-环境介绍" class="headerlink" title="1 环境介绍"></a>1 环境介绍</h1><a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">软件</th>
<th style="text-align:center">版本</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Centos</td>
<td style="text-align:center">7.6</td>
<td style="text-align:left">操作系统</td>
</tr>
<tr>
<td style="text-align:center">Docker</td>
<td style="text-align:center">20.10.6</td>
<td style="text-align:left">容器软件</td>
</tr>
<tr>
<td style="text-align:center">kubernetes</td>
<td style="text-align:center">1.23.3</td>
<td style="text-align:left">集群软件</td>
</tr>
<tr>
<td style="text-align:center">flannel</td>
<td style="text-align:center">0.16.3</td>
<td style="text-align:left">集群网络插件</td>
</tr>
<tr>
<td style="text-align:center">dashboard</td>
<td style="text-align:center">v2.5.1</td>
<td style="text-align:left">WEB-UI</td>
</tr>
</tbody>
</table>
<h1 id="2-下载镜像和yaml文件"><a href="#2-下载镜像和yaml文件" class="headerlink" title="2 下载镜像和yaml文件"></a>2 下载镜像和yaml文件</h1><p><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">github*dashboard仓库</a></p>
<p>下载对应版本的dashboard,这里选择2.5.1最新版本，可以看到下图，完全支持kubernetes 1.23版本。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220527221012173.png" alt="image-20220527221012173"></p>
<p>镜像可通过阿里云镜像仓库构建下载。</p>
<p><code>recommended.yaml</code>文件通过上图链接<a href="https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml获取。" target="_blank" rel="noopener">https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml获取。</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f recommended.yaml        <span class="comment"># 安装dashboard</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220527223500839.png" alt="image-20220527223500839"></p>
<h1 id="3-HTTPS访问"><a href="#3-HTTPS访问" class="headerlink" title="3 HTTPS访问"></a>3 HTTPS访问</h1><p><code>dashboard</code>默认提供<code>https</code>访问接口,但需要配置services,映射到主机端口才能访问。</p>
<p>修改<code>recommended.yaml</code>文件,如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="comment"># 添加NodePort类型</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="comment"># 添加映射主机端口</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30001</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220527222612139.png" alt="image-20220527222612139"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用修改</span></span><br><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure>
<p><strong>访问页面：</strong></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220527222929378.png" alt="image-20220527222929378"></p>
<h2 id="3-1-认证登录"><a href="#3-1-认证登录" class="headerlink" title="3.1 认证登录"></a>3.1 认证登录</h2><p><code>dashboard</code>默认提供<code>token</code>和<code>kubeconfig</code>认证登录方式。</p>
<h3 id="3-1-1-Token认证"><a href="#3-1-1-Token认证" class="headerlink" title="3.1.1 Token认证"></a>3.1.1 Token认证</h3><p><a href="https://blog.csdn.net/weixin_38320674/article/details/107328982" target="_blank" rel="noopener">参考</a></p>
<ol>
<li><p>创建serviceaccount账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在kubernetes-dashboard命名空间创建账户test-zhanghu</span></span><br><span class="line"><span class="comment"># 在任何命名空间创建都可以，这里为了方便管理，和dashboard服务放到一个命名空间</span></span><br><span class="line">kubectl create serviceaccount <span class="built_in">test</span>-zhanghu -n kubernetes-dashboard</span><br><span class="line"><span class="comment"># 可通过kubectl get serviceaccount命令查找</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220527225331109.png" alt="image-20220527225331109"></p>
</li>
<li><p>把test-zhanghu用户做clusterrolebinding绑定</p>
<blockquote>
<p>此处注意<strong>clusterrolebinding</strong>和<strong>rolebinding</strong>的区别，<strong>clusterrolebinding</strong>是集群权限，<strong>rolebinding</strong>是空间权限；</p>
<ul>
<li>管理所有空间使用<strong>clusterrolebinding</strong>赋权</li>
<li>管理指定空间使用<strong>rolebinding</strong>赋权</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋予集群管理权限，管理所有空间</span></span><br><span class="line">kubectl create clusterrolebinding <span class="built_in">test</span>-zhanghu-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:<span class="built_in">test</span>-zhanghu</span><br><span class="line"><span class="comment"># 赋予空间管理权限，管理指定空间，-n参数指定要管理的空间(不指定 -n 默认管理default空间)</span></span><br><span class="line">kubectl create rolebinding <span class="built_in">test</span>-zhanghu-role -n kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:<span class="built_in">test</span>-zhanghu</span><br></pre></td></tr></table></figure>
<ul>
<li><code>test-zhanghu-admin:</code> 创建的clusterrolebinding或rolebinding名称</li>
<li><code>cluster-admin:</code> 绑定的角色，cluseter-admin是集群管理员角色</li>
<li><code>kubernetes-dashboard:test-zhanghu:</code> <strong>kubernetes-dashboard</strong>是账户所在的空间名，<strong>test-zhanghu</strong>是上面创建的账户名。</li>
</ul>
<p><strong>查看创建结果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看创建的绑定，通过下列命令查询</span></span><br><span class="line"><span class="comment"># clusterrolebindings 不需要指定空间，列出所有</span></span><br><span class="line">kubectl get clusterrolebindings</span><br><span class="line">或</span><br><span class="line"><span class="comment"># rolebindings 列出指定空间结果，-A 列出所有空间。</span></span><br><span class="line">kubectl get rolebindings -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="3">
<li><p>查看secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get secrets -n kubernetes-dashboard</span></span><br><span class="line">NAME                               TYPE                                  DATA   AGE</span><br><span class="line">default-token-8gkd4                kubernetes.io/service-account-token   3      57m</span><br><span class="line">kubernetes-dashboard-certs         Opaque                                0      57m</span><br><span class="line">kubernetes-dashboard-csrf          Opaque                                1      57m</span><br><span class="line">kubernetes-dashboard-key-holder    Opaque                                2      57m</span><br><span class="line">kubernetes-dashboard-token-ss67l   kubernetes.io/service-account-token   3      57m</span><br><span class="line"><span class="built_in">test</span>-zhanghu-token-kbtpj           kubernetes.io/service-account-token   3      22m</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># kubectl describe secrets -n kubernetes-dashboard test-zhanghu-token-kbtpj</span></span><br><span class="line">Name:         <span class="built_in">test</span>-zhanghu-token-kbtpj</span><br><span class="line">Namespace:    kubernetes-dashboard</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: <span class="built_in">test</span>-zhanghu</span><br><span class="line">              kubernetes.io/service-account.uid: e3eb1368-e074-4c52-81f2-64129b00c6a9</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1099 bytes</span><br><span class="line">namespace:  20 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImRoMjcwRGlTcTdyZzhyR2FxOXFKSlhTbkIxdFlHZVEwdXJlam9ESG5zd00ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJ0ZXN0LXpoYW5naHUtdG9rZW4ta2J0cGoiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoidGVzdC16aGFuZ2h1Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiZTNlYjEzNjgtZTA3NC00YzUyLTgxZjItNjQxMjliMDBjNmE5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOnRlc3QtemhhbmdodSJ9.CB6KbpgJU2PMtb4lGVZ8nVBPmOfebwhlgcn43jiSUV44kkm48qAVJaQELUg9_aVDcQSZCBuIDTzlWjwpqmsgAbCePr_sS0smd5BFxiHsKRnsRpXbKrU-pGNqaegsafIlipsUOSXj2st4n0WPODUAObMI4XdmEsKubpVBMWPSpIb6-UryJZzNFO84ZHQiO7ESa35cATm0uWRS4zT3PzkNrV8lczysSo82-98u-yhfRzVuL8Wau3oWVG1LQpjB-ww65x1jZ_ipPaMZqj2_LfNDKj5bvWoVX9hjeqBkmUrIyWB0rcwk7ERt1_mKoR_fHSB_80Akimc7tXXkerTXfSZO1g</span><br></pre></td></tr></table></figure>
<p>复制<strong>token</strong>的值到登录页面，认证登录，如下图，可以管理所有空间。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220527231557511.png" alt="image-20220527231557511"></p>
</li>
</ol>
<h3 id="3-1-2-kubeconfig认证"><a href="#3-1-2-kubeconfig认证" class="headerlink" title="3.1.2 kubeconfig认证"></a>3.1.2 kubeconfig认证</h3><blockquote>
<p><code>kubeconfig</code>的原理就是将认证的<code>token</code>转换成<code>kubeconfig</code>文件，方便登录。用户的<code>token</code>是什么权限，转换成的<code>kubeconfig</code>就是什么权限。</p>
</blockquote>
<p>下面的kubeconfig文件生成步骤基于上面Token认证配置的账户进行转换。</p>
<ol>
<li><p>获取test-zhanghu的token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置DEF_NS_ADMIN_TOKEN变量，获取token</span></span><br><span class="line">[root@master pki]<span class="comment"># DEF_NS_ADMIN_TOKEN=$(kubectl get test-zhanghu-token-kbtpj -n kubernetes-dashboard -o jsonpath=&#123;.data.token&#125;|base64 -d)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建cluster</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入/etc/kubernetes/pki目录，下面步骤相关路径基于此路径下的证书文件</span></span><br><span class="line">[root@master pki]<span class="comment"># cd /etc/kubernetes/pki</span></span><br><span class="line"><span class="comment"># 创建集群kubernetes,证书基于当前目录下的ca.crt</span></span><br><span class="line"><span class="comment"># --server参数是集群的apiserver地址</span></span><br><span class="line"><span class="comment"># --kuconfig参数指定生成文件的路径</span></span><br><span class="line">[root@master pki]<span class="comment"># kubectl config set-cluster kubernetes --certificate-authority=./ca.crt --server="https://192.168.0.71:6443"  --embed-certs=true  --kubeconfig=/root/test-zhanghu.conf</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建credentials</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test-zhanghu是用户名，后面的步骤要保持一致</span></span><br><span class="line">[root@master pki]<span class="comment"># kubectl config set-credentials test-zhanghu --token=$DEF_NS_ADMIN_TOKEN  --kubeconfig=/root/test-zhanghu.conf</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建context</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master pki]<span class="comment"># kubectl config set-context test-zhanghu@kubernetes --cluster=kubernetes --user=test-zhanghu --kubeconfig=/root/test-zhanghu.conf</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>切换context的current-context是test-zhanghu@kubernetes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master pki]<span class="comment"># kubectl config use-context test-zhanghu@kubernetes --kubeconfig=/root/test-zhanghu.conf</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>把刚才的<strong>kubeconfig</strong>文件<code>test-zhanghu.conf</code>复制到桌面</p>
<p>浏览器访问时使用<strong>kubeconfig</strong>认证，把刚才的<code>test-zhanghu.conf</code>导入到web界面，那么就可以登陆了。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220528003545775.png" alt="image-20220528003545775"></p>
</li>
</ol>
<h1 id="4-HTTP免密登录"><a href="#4-HTTP免密登录" class="headerlink" title="4 HTTP免密登录"></a>4 HTTP免密登录</h1><p><strong>dashboard</strong>的<strong><code>http</code></strong>登录默认没有启动认证，即访问即可进入控制台页面（免密登录）。</p>
<ol>
<li><p>修改<code>recommended.yaml</code>文件</p>
<p><strong>修改Deployment部分，设置kubernetes-dashboard端口和心跳探测</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      securityContext:</span></span><br><span class="line"><span class="attr">        seccompProfile:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">RuntimeDefault</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">kubernetesui/dashboard:v2.5.1</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br><span class="line">              <span class="comment"># 添加name标签</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">https</span></span><br><span class="line">            <span class="comment"># 增加http端口配置，端口指向9090</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">          args:</span></span><br><span class="line">            <span class="comment"># 注释掉- --auto-generate-certificates</span></span><br><span class="line">            <span class="comment"># - --auto-generate-certificates</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--namespace=kubernetes-dashboard</span></span><br><span class="line">            <span class="comment"># Uncomment the following line to manually specify Kubernetes API server Host</span></span><br><span class="line">            <span class="comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span></span><br><span class="line">            <span class="comment"># to it. Uncomment only if the default does not work.</span></span><br><span class="line">            <span class="comment"># - --apiserver-host=http://my-address:port</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/certs</span></span><br><span class="line">              <span class="comment"># Create on-disk volume to store exec logs</span></span><br><span class="line"><span class="attr">            - mountPath:</span> <span class="string">/tmp</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">tmp-volume</span></span><br><span class="line"><span class="attr">          livenessProbe:</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line"><span class="attr">              scheme:</span> <span class="string">HTTPS</span></span><br><span class="line"><span class="attr">              path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">8443</span></span><br><span class="line">            <span class="comment"># 添加http的探针检测</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line"><span class="attr">              scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">          securityContext:</span></span><br><span class="line"><span class="attr">            allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">            readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            runAsUser:</span> <span class="number">1001</span></span><br><span class="line"><span class="attr">            runAsGroup:</span> <span class="number">2001</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line"><span class="attr">          secret:</span></span><br><span class="line"><span class="attr">            secretName:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">tmp-volume</span></span><br><span class="line"><span class="attr">          emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line">        <span class="string">"kubernetes.io/os"</span><span class="string">:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">        - key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="attr">          effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p><strong>修改Service部分，配置http端口的NodePort，映射到主机30002端口。</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="comment"># 添加NodePort类型</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="comment"># 添加映射主机端口</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30001</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">https</span></span><br><span class="line">    <span class="comment"># 添加http端口，targe指向9090</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30002</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p><strong>修改ClusterRoleBinding部分，设置kubernetes-dashboard用户的权限</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="comment"># name: kubernetes-dashboard</span></span><br><span class="line">  <span class="comment"># 修改角色为cluster-admin</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">  - kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>应用修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改用户权限不能直接应用更新，会提示角色权限无法修改，应先delete，再apply；</span></span><br><span class="line"><span class="comment"># 也可以使用命令kubectl delete clusterrolebindings.rbac.authorization.k8s.io kubernetes-dashboard删除权限绑定后再apply应用更新</span></span><br><span class="line">kubectl delete -f recommended.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用更新</span></span><br><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问30002端口，正常免费登录。<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220528105000589.png" alt="image-20220528105000589"></p>
<div class="note success"><p><strong>信息</strong><br>   经验证HTTP和HTTPS无法共存，开启HTTP后，30001端口则无法访问了。</p></div>
<div class="note danger"><p><strong>错误</strong><br>   访问3002端口，发现报错，kubernetes-dashboard用户没有权限，是因为少修改了kuberntes-dashboard的权限造成的。</p>
<p><code>deployments.apps is forbidden: User &quot;system:serviceaccount:kubernetes-dashboard:kubernetes-dashboard&quot; cannot list resource &quot;deployments&quot; in API group &quot;apps&quot; in the namespace &quot;default&quot;</code></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220528103059070.png" alt="image-20220528103059070"></p></div>
</li>
</ol>
<h1 id="5-用户密码登录"><a href="#5-用户密码登录" class="headerlink" title="5 用户密码登录"></a>5 用户密码登录</h1><p>用户密码登录是https访问方式的一种认证类型。</p>
<p>基于网上教程，未成功。</p>
<p>主要现象如下：</p>
<ol>
<li><p>配置用户密码文件及开启basic认证后，输入任何字符均可登录，登录后报错</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220529083614749.png" alt="image-20220529083614749"></p>
</li>
<li><p>配置如下命令后，权限正常了，但是注销登录重新认证登录，不管是账号密码文件内的还是其他任意字符，均无法登录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl create clusterrolebinding test:anonymous --clusterrole=cluster-admin --user=system:anonymous</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220529083834374.png" alt="image-20220529083834374"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习八:configMap创建的四种方式</title>
    <url>/2022/06/06/kubernetes%E5%AD%A6%E4%B9%A0%E5%85%AB-configMap%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-创建configMap的四种方式"><a href="#1-创建configMap的四种方式" class="headerlink" title="1 创建configMap的四种方式"></a>1 创建configMap的四种方式</h1><h2 id="1-1-通过直接在命令行中指定configmap参数创建"><a href="#1-1-通过直接在命令行中指定configmap参数创建" class="headerlink" title="1.1  通过直接在命令行中指定configmap参数创建"></a>1.1  通过直接在命令行中指定configmap参数创建</h2><a id="more"></a>
<p><strong>即<code>--from-literal=key=value</code></strong></p>
<blockquote>
<p>下面测试基于kubernetes 1.23.3版本测试</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建configMap</span></span><br><span class="line">[root@master ~]<span class="comment">#  kubectl create configmap nginx-config --from-literal=nginx_port=80 --from-literal=server_name=myapp.magedu.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看configmap</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get cm</span></span><br><span class="line">NAME           DATA   AGE</span><br><span class="line">nginx-config   2      4s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看configmap的具体信息，key:nginx_port  键值value:80</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl describe configmaps nginx-config</span></span><br><span class="line">Name:         nginx-config</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">nginx_port:</span><br><span class="line">----</span><br><span class="line">80</span><br><span class="line">server_name:</span><br><span class="line">----</span><br><span class="line">myapp.magedu.com</span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p><strong>pod应用</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">pod-cm-1</span>   <span class="comment">#name必须小写</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line"><span class="attr">    create-by:</span> <span class="string">tianpei.wang</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">ikubernetes/myapp:v1</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    env:</span>         <span class="comment"># 引用为环境变量</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">NGINX_SERVER_PORT</span></span><br><span class="line"><span class="attr">      valueFrom:</span></span><br><span class="line"><span class="attr">        configMapKeyRef:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">nginx-config</span></span><br><span class="line"><span class="attr">            key:</span> <span class="string">nginx_port</span>           <span class="comment"># 指定对应的key，键值value传递给变量NGINX_SERVER_PORT</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">NGINX_SERVER_NAME</span></span><br><span class="line"><span class="attr">      valueFrom:</span></span><br><span class="line"><span class="attr">        configMapKeyRef:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">nginx-config</span></span><br><span class="line"><span class="attr">            key:</span> <span class="string">server_name</span>          <span class="comment"># 指定对应的key，键值value传递给变量NGINX_SERVER_NAME</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建configmap</span></span><br><span class="line">[root@master configmap]<span class="comment"># kubectl create configmap nginx-config --from-literal=nginx_port=80 --from-literal=server_name=myapp.magedu.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建pod通过configmap注入到pod内</span></span><br><span class="line">[root@master configmap]<span class="comment"># kubectl apply -f pod-cm-1.yaml</span></span><br><span class="line">pod/pod-cm-1 created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到已经成功注入到pod中了</span></span><br><span class="line">[root@master configmap]<span class="comment"># kubectl exec -it pod-cm-1 -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># printenv | grep NGINX</span></span><br><span class="line">NGINX_SERVER_PORT=80</span><br><span class="line">NGINX_SERVER_NAME=myapp.magedu.com</span><br></pre></td></tr></table></figure>
<div class="note danger"><p><strong>警告</strong><br>当以环境变量的方式注入pod时, 只在pod启动时加载, 后续更改configmap不会同步到pod内</p></div>
<h2 id="1-2-通过指定文件或目录创建"><a href="#1-2-通过指定文件或目录创建" class="headerlink" title="1.2  通过指定文件或目录创建"></a>1.2  通过指定文件或目录创建</h2><p><strong>即通过<code>--from-file=File_Path</code>参数将一个配置文件或目录下所有文件创建为一个ConfigMap，</strong></p>
<div class="note success"><p><strong>说明</strong></p>
<p><code>--from-file=File_Path</code> 这里的<code>File_Path</code>可以是<strong>文件</strong>也可以是<strong>目录</strong>。</p>
<p><strong>文件</strong>：<strong>适用于单个配置文件</strong>。生成单个配置文件；pod使用的话挂载为单个配置文件或覆盖到某个目录。</p>
<p><strong>目录</strong>：<strong>适用于多个配置文件</strong>。会将目录下的所有文件均创建为配置文件，包含到同一个configMap下。pod使用的话覆盖到某个目录，所有配置文件均放置到对应目录下。</p></div>
<h3 id="1-2-1-指定文件创建"><a href="#1-2-1-指定文件创建" class="headerlink" title="1.2.1 指定文件创建"></a>1.2.1 指定文件创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line">[root@master configmap]<span class="comment"># cat manifests/configmap/www.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name myapp.magedu.com;</span><br><span class="line">    listen 80;</span><br><span class="line">    root /data/web/html</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过文件创建configmap</span></span><br><span class="line">[root@master configmap]<span class="comment"># kubectl create configmap nginx-www --from-file=./manifests/configmap/www.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看configmap  文件名为key, 文件内容为value</span></span><br><span class="line">[root@master configmap]<span class="comment"># kubectl describe configmaps nginx-www</span></span><br><span class="line">Name:         nginx-www</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">www.conf:</span><br><span class="line">----</span><br><span class="line">server &#123;</span><br><span class="line">    server_name myapp.magedu.com;</span><br><span class="line">    listen 80;</span><br><span class="line">    root /data/web/html</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p><strong>pod应用</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">pod-cm-2</span>   <span class="comment">#name必须小写</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line"><span class="attr">    create-by:</span> <span class="string">tianpei.wang</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">ikubernetes/myapp:v1</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginxconf</span></span><br><span class="line">      <span class="comment"># 挂载路径，这种挂载方式是直接覆盖到config.d目录,最终结果是：/etc/nginx/config.d/www.conf （目录内只有这一个文件）</span></span><br><span class="line">      <span class="comment"># config.d目录为空或只有一个要替换的问题可采用此方法</span></span><br><span class="line"><span class="attr">        mountPath:</span> <span class="string">/etc/nginx/config.d</span>          </span><br><span class="line"><span class="attr">        readOnly:</span> <span class="literal">true</span>                        <span class="comment"># 只读</span></span><br><span class="line">      <span class="comment"># config.d目录包含多个文件，只覆盖特定文件，使用如下方法</span></span><br><span class="line">      <span class="comment">#  mountPath: /etc/nginx/config.d/www.conf   # www.conf为文件名，文件内容使用configMap中以www.conf为key的键值。</span></span><br><span class="line">      <span class="comment">#  subPath: www.conf       # 指定key为www.conf的value（键值）作为内容挂载到上面www.conf文件中</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">nginxconf</span></span><br><span class="line"><span class="attr">      configMap:</span>       <span class="comment"># 挂载类型configMap</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">nginx-config</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过上边的yaml文件创建pod, 并将configmap以volumes的形式挂载到pod内</span></span><br><span class="line">[root@master configmap]<span class="comment"># kubectl apply -f pod-cm-2.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到已经生效了</span></span><br><span class="line">[root@master configmap]<span class="comment"># kubectl exec -it pod-cm-2 -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># cd /etc/nginx/config.d/</span></span><br><span class="line">/etc/nginx/config.d <span class="comment"># ls</span></span><br><span class="line">www.conf</span><br><span class="line">/etc/nginx/config.d <span class="comment"># cat www.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name myapp.magedu.com;</span><br><span class="line">    listen 80;</span><br><span class="line">    root /data/web/html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-指定目录创建"><a href="#1-2-2-指定目录创建" class="headerlink" title="1.2.2 指定目录创建"></a>1.2.2 指定目录创建</h3><p><strong>即将一个目录内的所有文件创建为一个ConfigMap，<code>--from-file=File_Path</code>，<code>File_path</code>为目录路径</strong></p>
<p><strong>创建configMap</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录内容</span></span><br><span class="line">[root@k8s-master geocms]<span class="comment"># ls geocms_mb/</span></span><br><span class="line">application-dev.properties   authority-dev.properties   dmb-prod.properties  scene-dev.properties   smb-prod.properties</span><br><span class="line">application-prod.properties  authority-prod.properties  mb-dev.properties    scene-prod.properties</span><br><span class="line">application-user.properties  dmb-dev.properties         mb-prod.properties   smb-dev.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过目录创建configmap</span></span><br><span class="line">[root@k8s-master geocms]<span class="comment"># kubectl create  configmap mb-config --from-file=/opt/geocms/geocms_mb/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看configmap,可以看到含有多个以文件名为key，文件内容为键值的多个配置。</span></span><br><span class="line">[root@k8s-master geocms]<span class="comment"># kubectl describe configmaps -n geocms mb-config</span></span><br><span class="line">Name:         mb-config</span><br><span class="line">Namespace:    geocms</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">mb-prod.properties:</span><br><span class="line">----</span><br><span class="line">spring.profiles.include=user</span><br><span class="line">spring.application.name=mb</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoint.health.show-details=ALWAYS</span><br><span class="line">management.health.elasticsearch.enabled=<span class="literal">false</span></span><br><span class="line">management.health.redis.enabled=<span class="literal">false</span></span><br><span class="line">jx.datasource.es.type=ELASTICSEARCH</span><br><span class="line">jx.datasource.es.host=192.168.0.39:9200</span><br><span class="line">file.base.path=/</span><br><span class="line">file.base.url=http://<span class="variable">$&#123;SERVER_IP&#125;</span>:8000</span><br><span class="line">file.local.rootPath=<span class="variable">$&#123;file.base.path&#125;</span>/thumb</span><br><span class="line">file.local.fileUrl=<span class="variable">$&#123;file.base.url&#125;</span>/thumb</span><br><span class="line"></span><br><span class="line">scene-dev.properties:</span><br><span class="line">----</span><br><span class="line">spring.profiles.include=user</span><br><span class="line">spring.application.name=scene</span><br><span class="line">server.servlet.context-path=/api/scene</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoint.health.show-details=ALWAYS</span><br><span class="line">management.health.elasticsearch.enabled=<span class="literal">false</span></span><br><span class="line">management.health.redis.enabled=<span class="literal">false</span></span><br><span class="line">file.base.path=E:/tomcat-8.5.24/webapps</span><br><span class="line">file.base.url=http://192.168.0.104:18900</span><br><span class="line">file.local.rootPath=<span class="variable">$&#123;file.base.path&#125;</span>/thumb</span><br><span class="line">file.local.fileUrl=<span class="variable">$&#123;file.base.url&#125;</span>/thumb</span><br><span class="line"></span><br><span class="line">scene-prod.properties:</span><br><span class="line">----</span><br><span class="line">spring.profiles.include=user</span><br><span class="line">spring.application.name=scene</span><br><span class="line">server.servlet.context-path=/api/scene</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoint.health.show-details=ALWAYS</span><br><span class="line">management.health.elasticsearch.enabled=<span class="literal">false</span></span><br><span class="line">management.health.redis.enabled=<span class="literal">false</span></span><br><span class="line">file.base.path=/</span><br><span class="line">file.base.url=http://<span class="variable">$&#123;SERVER_IP&#125;</span>:8000</span><br><span class="line">file.local.rootPath=<span class="variable">$&#123;file.base.path&#125;</span>/thumb</span><br><span class="line">file.local.fileUrl=<span class="variable">$&#123;file.base.url&#125;</span>/thumb</span><br><span class="line"></span><br><span class="line">.... 中间内容省略....</span><br><span class="line"></span><br><span class="line">smb-dev.properties:</span><br><span class="line">----</span><br><span class="line">spring.profiles.include=user</span><br><span class="line">spring.application.name=smb</span><br><span class="line">server.servlet.context-path=/api/smb</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoint.health.show-details=ALWAYS</span><br><span class="line">management.health.elasticsearch.enabled=<span class="literal">false</span></span><br><span class="line">management.health.redis.enabled=<span class="literal">false</span></span><br><span class="line">jx.datasource.es.type=ELASTICSEARCH</span><br><span class="line">jx.datasource.es.host=192.168.0.104:9200</span><br><span class="line">spring.task.execution.pool.core-size=5</span><br><span class="line">spring.task.execution.pool.max-size=10</span><br><span class="line">spring.task.execution.pool.queue-capacity=5</span><br><span class="line">spring.task.execution.pool.keep-alive=60</span><br><span class="line">spring.task.execution.thread-name-prefix=mb-task-</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BinaryData</span><br><span class="line">====</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p><strong>pod应用</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">geocms</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.20.1</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">nginx-html</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">test-config</span></span><br><span class="line">        <span class="comment"># 只覆盖特定文件，采用如下写法。</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/home/application-dev.properties</span>             <span class="comment"># 指定要覆盖的文件名。该文件名可自定义，和key不一致。</span></span><br><span class="line"><span class="attr">          subPath:</span> <span class="string">application-dev.properties</span>                     <span class="comment"># 指定key，key的键值作为内容挂载到上面文件内。只覆盖这一个文件，其他文件不覆盖。</span></span><br><span class="line">        <span class="comment"># 所有文件均覆盖，直接覆盖/home目录</span></span><br><span class="line">        <span class="comment">#  mountPath: /home                         # 直接将mb-config内的所有配置文件覆盖到目录内，key为文件名，值为文件内容。</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"128Mi"</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"500m"</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx-html</span></span><br><span class="line"><span class="attr">        persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">          claimName:</span> <span class="string">geocms-html-claim</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">test-config</span></span><br><span class="line"><span class="attr">        configMap:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">mb-config</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只覆盖指定文件，查看pod内文件</span></span><br><span class="line">root@nginx-deployment-76964fff8f-6pf7m:/<span class="comment"># cd /home/</span></span><br><span class="line">root@nginx-deployment-566788f4fb-9j5bs:/home<span class="comment"># ls</span></span><br><span class="line">application-test.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖整个目录，查看pod内文件</span></span><br><span class="line">root@nginx-deployment-76964fff8f-6pf7m:/<span class="comment"># cd /home/</span></span><br><span class="line">root@nginx-deployment-76964fff8f-6pf7m:/home<span class="comment"># ls</span></span><br><span class="line">application-dev.properties   application-user.properties  authority-prod.properties  dmb-prod.properties  mb-prod.properties    scene-prod.properties  smb-prod.properties</span><br><span class="line">application-prod.properties  authority-dev.properties     dmb-dev.properties         mb-dev.properties    scene-dev.properties  smb-dev.properties</span><br></pre></td></tr></table></figure>
<h2 id="1-3-通过一个文件内多个键值对创建"><a href="#1-3-通过一个文件内多个键值对创建" class="headerlink" title="1.3 通过一个文件内多个键值对创建"></a>1.3 通过一个文件内多个键值对创建</h2><p><strong>使用参数<code>--from-env-file=</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------- 单个键值对文件 ----------------------------------------------------</span></span><br><span class="line"><span class="comment"># 查看env.txt文件内容，具有多个键值对。</span></span><br><span class="line">[root@master configmap_test]<span class="comment"># cat &lt;&lt; EOF &gt; env.txt</span></span><br><span class="line">db.host=10.0.0.50</span><br><span class="line">db.port=3306</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 从键值对文件创建comfigMap</span></span><br><span class="line">[root@master configmap_test]<span class="comment"># kubectl create cm env-cm --from-env-file=env.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------- 多个键值对文件 ----------------------------------------------------</span></span><br><span class="line"><span class="comment"># 如果有多个env文件, 只有最后一个env文件会生效（我使用这个版本，是都生效的，可能以前的老版本不支持多个文件）</span></span><br><span class="line"><span class="comment"># 查看game.properties键值对文件</span></span><br><span class="line">[root@master configmap_test]<span class="comment"># cat game.properties</span></span><br><span class="line">enemies=aliens</span><br><span class="line">lives=3</span><br><span class="line">enemies.cheat=<span class="literal">true</span></span><br><span class="line">enemies.cheat.level=noGoodRotten</span><br><span class="line">secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="line">secret.code.allowed=<span class="literal">true</span></span><br><span class="line">secret.code.lives=30</span><br><span class="line"><span class="comment"># 查看ui.properties键值对文件</span></span><br><span class="line">[root@master configmap_test]<span class="comment"># cat ui.properties</span></span><br><span class="line">color.good=purple</span><br><span class="line">color.bad=yellow</span><br><span class="line">allow.textmode=<span class="literal">true</span></span><br><span class="line">how.nice.to.look=fairlyNice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令创建configmap</span></span><br><span class="line">[root@master configmap_test]<span class="comment"># kubectl create configmap configmap-env --from-env-file=./game.properties --from-env-file=./ui.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到, 只有ui.properties生效了（我实验这个版本，所有文件都生效了）</span></span><br><span class="line">[root@master configmap_test]<span class="comment"># kubectl get configmaps configmap-env -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  allow.textmode: <span class="string">"true"</span>            <span class="comment"># 看这里</span></span><br><span class="line">  color.bad: yellow                 <span class="comment"># 看这里</span></span><br><span class="line">  color.good: purple                <span class="comment"># 看这里</span></span><br><span class="line">  enemies: aliens                   <span class="comment"># 看这里</span></span><br><span class="line">  enemies.cheat: <span class="string">"true"</span>             <span class="comment"># 看这里</span></span><br><span class="line">  enemies.cheat.level: noGoodRotten           <span class="comment"># 看这里</span></span><br><span class="line">  how.nice.to.look: fairlyNice                <span class="comment"># 看这里</span></span><br><span class="line">  lives: <span class="string">"3"</span>                                  <span class="comment"># 看这里</span></span><br><span class="line">  secret.code.allowed: <span class="string">"true"</span>                 <span class="comment"># 看这里</span></span><br><span class="line">  secret.code.lives: <span class="string">"30"</span>                     <span class="comment"># 看这里</span></span><br><span class="line">  secret.code.passphrase: UUDDLRLRBABAS       <span class="comment"># 看这里</span></span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">"2022-06-07T08:27:15Z"</span></span><br><span class="line">  name: configmap-env</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">"633268"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/default/configmaps/configmap-env</span><br><span class="line">  uid: f4a9e6dd-00a0-44d6-8b0a-8945e17432db</span><br></pre></td></tr></table></figure>
<h2 id="1-4-通过yaml文件创建"><a href="#1-4-通过yaml文件创建" class="headerlink" title="1.4 通过yaml文件创建"></a>1.4 通过yaml文件创建</h2><p>事先写好标准的<code>yaml</code>文件，通过<code>kubectl apply -f</code> 命令创建。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看yaml文件</span></span><br><span class="line"><span class="string">[root@k8s-master</span> <span class="string">geocms]#</span> <span class="string">cat</span> <span class="string">configmap_nginx.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-default</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">geocms</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">default.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    server &#123;</span></span><br><span class="line"><span class="string">    listen       80;</span></span><br><span class="line"><span class="string">    listen  [::]:80;</span></span><br><span class="line"><span class="string">    server_name  localhost;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    #access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    location / &#123;</span></span><br><span class="line"><span class="string">        root   /usr/share/nginx/html;</span></span><br><span class="line"><span class="string">        index  index.html index.htm;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    # mb服务api代理</span></span><br><span class="line"><span class="string">    location /api/mb &#123;</span></span><br><span class="line"><span class="string">        proxy_pass http://zuul-service.geocms.svc.cluster.local:18900/api/mb;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # smb服务api代理</span></span><br><span class="line"><span class="string">    location /api/smb &#123;</span></span><br><span class="line"><span class="string">        proxy_pass http://zuul-service.geocms.svc.cluster.local:18900/api/smb;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # dmb服务api代理</span></span><br><span class="line"><span class="string">    location /api/dmb &#123;</span></span><br><span class="line"><span class="string">        proxy_pass http://zuul-service.geocms.svc.cluster.local:18900/api/dmb;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # scene服务api代理</span></span><br><span class="line"><span class="string">    location /api/scene &#123;</span></span><br><span class="line"><span class="string">        proxy_pass http://zuul-service.geocms.svc.cluster.local:18900/api/scene;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    #error_page  404              /404.html;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # redirect server error pages to the static page /50x.html</span></span><br><span class="line"><span class="string">    #</span></span><br><span class="line"><span class="string">    error_page   500 502 503 504  /50x.html;</span></span><br><span class="line"><span class="string">    location = /50x.html &#123;</span></span><br><span class="line"><span class="string">        root   /usr/share/nginx/html;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line"><span class="string">    #</span></span><br><span class="line"><span class="string">    #location ~ \.php$ &#123;</span></span><br><span class="line"><span class="string">    #    proxy_pass   http://127.0.0.1;</span></span><br><span class="line"><span class="string">    #&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line"><span class="string">    #</span></span><br><span class="line"><span class="string">    #location ~ \.php$ &#123;</span></span><br><span class="line"><span class="string">    #    root           html;</span></span><br><span class="line"><span class="string">    #    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line"><span class="string">    #    fastcgi_index  index.php;</span></span><br><span class="line"><span class="string">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line"><span class="string">    #    include        fastcgi_params;</span></span><br><span class="line"><span class="string">    #&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # deny access to .htaccess files, if Apache's document root</span></span><br><span class="line"><span class="string">    # concurs with nginx's one</span></span><br><span class="line"><span class="string">    #</span></span><br><span class="line"><span class="string">    #location ~ /\.ht &#123;</span></span><br><span class="line"><span class="string">    #    deny  all;</span></span><br><span class="line"><span class="string">    #&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"> # 创建configMap</span></span><br><span class="line"><span class="string"> [root@k8s-master geocms]# kubectl apply -f configmap_nginx.yaml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> # 查看configMap。 key为default.conf, 键值为配置内容。</span></span><br><span class="line"><span class="string"> [root@k8s-master geocms]# kubectl describe configmaps -n geocms nginx-default</span></span><br><span class="line"><span class="string"></span><span class="attr">Name:</span>         <span class="string">nginx-default</span></span><br><span class="line"><span class="attr">Namespace:</span>    <span class="string">geocms</span></span><br><span class="line"><span class="attr">Labels:</span>       <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">Annotations:</span>  <span class="string">&lt;none&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">Data</span></span><br><span class="line"><span class="string">====</span></span><br><span class="line"><span class="string">default.conf:</span></span><br><span class="line"><span class="bullet">-</span><span class="meta">---</span></span><br><span class="line"><span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line"><span class="string">listen</span>  <span class="string">[::]:80;</span></span><br><span class="line"><span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line"><span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">root</span>   <span class="string">/usr/share/nginx/html;</span></span><br><span class="line">    <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="comment"># mb服务api代理</span></span><br><span class="line"><span class="string">location</span> <span class="string">/api/mb</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">proxy_pass</span> <span class="attr">http://zuul-service.geocms.svc.cluster.local:18900/api/mb;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># smb服务api代理</span></span><br><span class="line"><span class="string">location</span> <span class="string">/api/smb</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">proxy_pass</span> <span class="attr">http://zuul-service.geocms.svc.cluster.local:18900/api/smb;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dmb服务api代理</span></span><br><span class="line"><span class="string">location</span> <span class="string">/api/dmb</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">proxy_pass</span> <span class="attr">http://zuul-service.geocms.svc.cluster.local:18900/api/dmb;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># scene服务api代理</span></span><br><span class="line"><span class="string">location</span> <span class="string">/api/scene</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">proxy_pass</span> <span class="attr">http://zuul-service.geocms.svc.cluster.local:18900/api/scene;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  <span class="string">/50x.html;</span></span><br><span class="line"><span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">root</span>   <span class="string">/usr/share/nginx/html;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line"><span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line"><span class="comment">#    root           html;</span></span><br><span class="line"><span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line"><span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line"><span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line"><span class="comment">#    include        fastcgi_params;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line"><span class="comment"># concurs with nginx's one</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line"><span class="comment">#    deny  all;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">BinaryData</span></span><br><span class="line"><span class="string">====</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Events:</span>  <span class="string">&lt;none&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="2-configmap结合pod使用的二种方式"><a href="#2-configmap结合pod使用的二种方式" class="headerlink" title="2 configmap结合pod使用的二种方式"></a>2 configmap结合pod使用的二种方式</h1><h2 id="2-1-通过环境变量的方式，直接传递给pod"><a href="#2-1-通过环境变量的方式，直接传递给pod" class="headerlink" title="2.1 通过环境变量的方式，直接传递给pod"></a>2.1 通过环境变量的方式，直接传递给pod</h2><p>参考1.1 中的pod应用示例。</p>
<h2 id="2-2-作为volume的方式挂载到pod内"><a href="#2-2-作为volume的方式挂载到pod内" class="headerlink" title="2.2 作为volume的方式挂载到pod内"></a>2.2 作为volume的方式挂载到pod内</h2><p>参考1.2.1和1.2.2中的pod应用示例。</p>
<p><a href="https://www.cnblogs.com/peitianwang/p/11498896.html" target="_blank" rel="noopener">参考文档</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker下的Nginx自动化修改监听端口</title>
    <url>/2022/06/01/docker%E4%B8%8B%E7%9A%84Nginx%E4%BF%AE%E6%94%B9%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="1-docker-compose-yaml"><a href="#1-docker-compose-yaml" class="headerlink" title="1 docker-compose.yaml"></a>1 docker-compose.yaml</h1><a id="more"></a>
<p>原理就是通过<code>envsubst</code>命令将含有系统变量的脚本替换环境变量后生成新的配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例1 替换文件内的全部变量</span></span><br><span class="line"> nginx:</span><br><span class="line">    image: nginx:1.20.1</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">       - SERVER_PORT=<span class="variable">$&#123;SERVER_PORT&#125;</span></span><br><span class="line">    volumes:</span><br><span class="line">       - <span class="string">"./htdocs:/usr/share/nginx/html"</span></span><br><span class="line">       - <span class="string">"./conf/nginx/conf.d:/etc/nginx/conf.d"</span></span><br><span class="line">       - <span class="string">"./conf/nginx/nginx.conf:/etc/nginx/nginx.conf"</span></span><br><span class="line">    <span class="built_in">command</span>: /bin/sh -c <span class="string">"envsubst  &lt; /etc/nginx/conf.d/default.conf.template &gt; /etc/nginx/conf.d/default.conf &amp;&amp; exec nginx -g 'daemon off;'"</span></span><br><span class="line">    network_mode: <span class="string">"host"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例2 替换文件内的指定变量</span></span><br><span class="line"><span class="comment">#备注：采用脚本的方式替换指定变量的原因是，基于示例1直接写执行命令，总是不成功。</span></span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:1.20.1</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">       - NGINX_PORT=<span class="variable">$&#123;SERVER_PORT&#125;</span></span><br><span class="line">    volumes:</span><br><span class="line">       - <span class="string">"./htdocs:/usr/share/nginx/html"</span></span><br><span class="line">       - <span class="string">"./conf/nginx/conf.d:/etc/nginx/conf.d"</span></span><br><span class="line">       - <span class="string">"./conf/nginx/nginx.conf:/etc/nginx/nginx.conf"</span></span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"/etc/nginx/conf.d/start.sh"</span>]</span><br><span class="line">    network_mode: <span class="string">"host"</span></span><br></pre></td></tr></table></figure>
<!--more-->
<h1 id="2-start-sh"><a href="#2-start-sh" class="headerlink" title="2 start.sh"></a>2 start.sh</h1><p>nginx镜像内置<code>envsubst</code>命令，通过该命令，引用系统变量生成新的配置文件，同时可指定替换的变量，如下脚本，替换指定的变量<code>${NGINX_PORT}</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">envsubst <span class="string">'$&#123;NGINX_PORT&#125;'</span> &lt; /etc/nginx/conf.d/default.conf.template &gt; /etc/nginx/conf.d/default.conf &amp;&amp; <span class="built_in">exec</span> nginx -g <span class="string">'daemon off;'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>php环境镜像制作</title>
    <url>/2022/08/21/php%E7%8E%AF%E5%A2%83%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要安装插件，要用fpm-buster制作</span></span><br><span class="line">FROM php:8.0.2-fpm-buster</span><br><span class="line"><span class="comment"># RUN docker-php-ext-install pdo_mysql</span></span><br><span class="line"><span class="comment"># 上传插件安装脚本</span></span><br><span class="line">COPY install-php-extensions /usr/<span class="built_in">local</span>/bin/install-php-extensions</span><br><span class="line"><span class="comment"># 上传国内源地址</span></span><br><span class="line">COPY sources.list /etc/apt/sources.list</span><br><span class="line">RUN chmod +x /usr/<span class="built_in">local</span>/bin/install-php-extensions \</span><br><span class="line">   &amp;&amp; install-php-extensions pdo_mysql pdo_pgsql bcmath bz2 gd gettext mysqli zip</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 部分插件可以使用内置脚本“ docker-php-ext-install 扩展名 ”直接安装，部分扩展不支持</span></span><br><span class="line"><span class="comment"># 下载官方扩展安装脚本，上传镜像 “install-php-extensions 扩展名 ”直接安装即可（更新国内软件源，加快下载速度）</span></span><br><span class="line"><span class="comment"># 安装脚本镜像页面有介绍，github地址：https://github.com/mlocati/docker-php-extension-installer</span></span><br></pre></td></tr></table></figure>
<h2 id="sources-list"><a href="#sources-list" class="headerlink" title="sources.list"></a>sources.list</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/debian buster main</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian buster-updates main</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>images</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习九：节点变更IP</title>
    <url>/2022/07/15/kubernetes%E5%AD%A6%E4%B9%A0%E4%B9%9D-%E8%8A%82%E7%82%B9%E5%8F%98%E6%9B%B4IP/</url>
    <content><![CDATA[<h1 id="1-变更脚本"><a href="#1-变更脚本" class="headerlink" title="1 变更脚本"></a>1 变更脚本</h1><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 命令格式: k8s-update-ip.sh 旧IP 新IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改集群配置文件内的IP</span></span><br><span class="line">sed -i <span class="string">"s/<span class="variable">$1</span>/<span class="variable">$2</span>/"</span> /etc/kubernetes/manifests/etcd.yaml</span><br><span class="line">sed -i <span class="string">"s/<span class="variable">$1</span>/<span class="variable">$2</span>/"</span> /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><span class="line">sed -i <span class="string">"s/<span class="variable">$1</span>/<span class="variable">$2</span>/"</span> /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新生成新config</span></span><br><span class="line"><span class="comment"># 可以逐个生成，也可以直接all,全部生成</span></span><br><span class="line"><span class="comment"># --kubernetes-version=v1.23.3   指定集群当前版本，否则抱版本异常信息</span></span><br><span class="line">rm -rf /etc/kubernetes/*.conf</span><br><span class="line"><span class="comment"># kubeadm init phase kubeconfig admin --kubernetes-version=v1.23.3 --apiserver-advertise-address $2</span></span><br><span class="line">kubeadm init phase  kubeconfig all --kubernetes-version=v1.23.3 --apiserver-advertise-address <span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新生成证书</span></span><br><span class="line">rm -rf /etc/kubernetes/pki/apiserver*</span><br><span class="line">rm -rf /etc/kubernetes/pki/front-proxy-client*</span><br><span class="line">rm -rf /etc/kubernetes/pki/etcd</span><br><span class="line">kubeadm init phase certs all  --kubernetes-version=v1.23.3 --apiserver-advertise-address <span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建/run/flannel/subnet.env</span></span><br><span class="line"><span class="comment"># 这个文件会消失需要手动生成下，否则kubele服务报错找不到这个文件</span></span><br><span class="line"><span class="comment"># 我集群cni网络地址段初始配置  podSubnet：110.166.10.0/16，下面配置如下修改</span></span><br><span class="line">cat &gt; /run/flannel/subnet.env &lt;&lt; EOF</span><br><span class="line">FLANNEL_NETWORK=110.166.0.0/16</span><br><span class="line">FLANNEL_SUBNET=110.166.0.1/24</span><br><span class="line">FLANNEL_MTU=1450</span><br><span class="line">FLANNEL_IPMASQ=<span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">kubectl get nodes --kubeconfig=/etc/kubernetes/admin.conf  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制配置文件，使用户可用kubectl命令</span></span><br><span class="line">yes|cp -i /etc/kubernetes/admin.conf  /home/zhaohuan/.kube/config</span><br><span class="line">chown zhaohuan:zhaohuan /home/zhaohuan/.kube/config</span><br></pre></td></tr></table></figure>
<h1 id="2-kube-proxy配置文件修改IP（坑）"><a href="#2-kube-proxy配置文件修改IP（坑）" class="headerlink" title="2 kube-proxy配置文件修改IP（坑）"></a>2 kube-proxy配置文件修改IP（坑）</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (这里是个大坑，很多教程里面没有提到)</span></span><br><span class="line"><span class="comment"># 不修改的話会有如下异常：flannel服务无法启动，一直报错连接api超时，kube-proxy日志报错会显示请求的api地址还是旧IP</span></span><br><span class="line"><span class="comment"># 编辑kube-proxy的configmap配置文件，修改API地址为新的IP</span></span><br><span class="line">kubectl edit -n kube-system configmap kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 剩下的就OK了</span></span><br></pre></td></tr></table></figure>
<p><strong>参考：</strong></p>
<p><a href="https://www.cnblogs.com/chaojiyingxiong/p/12047628.html" target="_blank" rel="noopener">https://www.cnblogs.com/chaojiyingxiong/p/12047628.html</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2008321" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/2008321</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>nexus仓库的数据备份及恢复</title>
    <url>/2022/06/10/nexus%E4%BB%93%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%8F%8A%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h1 id="1-Nexus备份"><a href="#1-Nexus备份" class="headerlink" title="1 Nexus备份"></a>1 Nexus备份</h1><a id="more"></a>
<p>nexus完整的备份需要执行如下备份步骤：</p>
<p>1、Blob文件的备份</p>
<p>2、数据库备份</p>
<p><strong>Blob文件备份：</strong></p>
<p>可以直接使用tar命令将<code>$data-dir/blobs</code>目录下的所有目录打包进行备份。<code>$data-dir</code>缺省在<code>sonatype-work/nexus3</code>目录。</p>
<p><strong>数据库备份：</strong></p>
<p>1、在管理页面中新建Tasks，创建定时备份任务。配置<em><code>Admin - Export databases for backup</code>。</em></p>
<p>2、填入备份文件的存放路径和执行频率。</p>
<h1 id="2-nexus恢复"><a href="#2-nexus恢复" class="headerlink" title="2 nexus恢复"></a>2 nexus恢复</h1><p>1、停止nexus服务：<code>service nexus stop</code></p>
<p>2、移除<code>$data-dir/db</code>中的下列目录：</p>
<p>   。accesslog</p>
<p>   。analytics</p>
<p>   。audit</p>
<p>   。component</p>
<p>   。config</p>
<p>   。security</p>
<p>3、将备份目录中的所有.bak文件拷贝到<code>$data-dir/restore-from-backup</code>。</p>
<p>4、删除$data-dir/blobs下的所有文件，然后将备份的Blob文件解压到$data-dir/blobs。</p>
<p>5、重启nexus。</p>
<h1 id="3-记录一次nexus异常停机造成OrientDB数据库损坏处理"><a href="#3-记录一次nexus异常停机造成OrientDB数据库损坏处理" class="headerlink" title="3 记录一次nexus异常停机造成OrientDB数据库损坏处理"></a>3 记录一次nexus异常停机造成OrientDB数据库损坏处理</h1><blockquote>
<p>描述：</p>
<p>启动报错：unable to read database frozen state marker file</p>
<ol>
<li>nexus无法启动，日志报错如上。</li>
<li>备份的文件无法正常恢复数据库</li>
</ol>
</blockquote>
<h2 id="3-1-尝试修复数据库"><a href="#3-1-尝试修复数据库" class="headerlink" title="3.1 尝试修复数据库"></a>3.1 尝试修复数据库</h2><p>参考：<a href="https://blog.csdn.net/qq_27384769/article/details/114671745" target="_blank" rel="noopener">https://blog.csdn.net/qq_27384769/article/details/114671745</a></p>
<p><a href="https://blog.csdn.net/mutian6655/article/details/112758278" target="_blank" rel="noopener">https://blog.csdn.net/mutian6655/article/details/112758278</a></p>
<p>停止服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止nexus</span></span><br><span class="line">nexus stop</span><br><span class="line"><span class="comment"># 备份$nexus-data/nexus3/db 目录</span></span><br></pre></td></tr></table></figure>
<p>使用自带的jar包工具连接数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到Nexus安装目录下/lib/support下，运行nexus-orient-console.jar</span></span><br><span class="line"><span class="built_in">cd</span> nexus-3.21.2-03/lib/support</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动console</span></span><br><span class="line">java -jar nexus-orient-console.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Nexus库已经很大，在执行后面的导出操作时可能会报heap OOM错误，可以在启动时调大内存</span></span><br><span class="line">java -jar -Xms4g -Xmx4g nexus-orient-console.jar</span><br></pre></td></tr></table></figure>
<p>数据库的相关操作命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接出错的数据库(注意出错的库不见得与笔者一致，注意查看出错日志)</span></span><br><span class="line"><span class="comment"># 备注：windows路径反斜杠要改成 /，例如：G:/nexus/db</span></span><br><span class="line">orientdb&gt; connect PLOCAL:/home/app/nexus/sonatype-work/nexus3/db/component admin admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出</span></span><br><span class="line">orientdb &#123;db=component&#125;&gt; EXPORT DATABASE /backup/orientdb-component.export</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">orientdb &#123;db=component&#125;&gt; DISCONNECT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除出问题的库</span></span><br><span class="line">orientdb&gt; DROP DATABASE PLOCAL:/home/app/nexus/sonatype-work/nexus3/db/component admin admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新创建出问题的库</span></span><br><span class="line">orientdb&gt; CREATE DATABASE PLOCAL:/home/app/nexus/sonatype-work/nexus3/db/component admin admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line">orientdb &#123;db=component&#125;&gt; IMPORT DATABASE /backup/orientdb-component.export.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">orientdb &#123;db=component&#125;&gt; DISCONNECT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出控制台</span></span><br><span class="line">orientdb&gt; EXIT</span><br></pre></td></tr></table></figure>
<p>连接数据库后，尝试修复数据库</p>
<blockquote>
<p>备注：修复前，请删除对应数据库目录下的 <code>*.wal</code>文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 尝试修复数据库,重建索引等信息</span></span><br><span class="line"><span class="comment"># 修复</span></span><br><span class="line">    REBUILD INDEX *</span><br><span class="line">    REPAIR DATABASE --fix-graph</span><br><span class="line">    REPAIR DATABASE --fix-links</span><br><span class="line">    REPAIR DATABASE --fix-ridbags</span><br><span class="line">    REPAIR DATABASE --fix-bonsai</span><br><span class="line">    DISCONNECT</span><br></pre></td></tr></table></figure>
<h2 id="3-2-本次出问题的数据库如下"><a href="#3-2-本次出问题的数据库如下" class="headerlink" title="3.2 本次出问题的数据库如下"></a>3.2 本次出问题的数据库如下</h2><p>问题数据库： component   config   2个数据库，component 经过修复恢复，config无法修复。</p>
<p><strong>解决办法：</strong></p>
<ol>
<li>通过上面步骤尝试修复数据库</li>
<li>重新解压缩neuxs安装包文件，并启动服务进行初始化</li>
<li>关闭nexus服务</li>
<li>删除 db目录下的component conf   securtiy 数据目录</li>
<li>拷贝G:/backup下的2020年的备份文件到<code>新$data-dir/restore-from-backup</code>目录</li>
<li>拷贝blobs下的数据到<code>新$data-dir/blobs</code>下</li>
<li>启动nexus,恢复数据成功</li>
<li>关闭nexus</li>
<li>拷贝旧版本下的数据库目录component和securtiy到<code>新$data-dir/db</code>下</li>
<li>启动nexus成功，出现新问题（com.orientechnologies.orient.core.exception.OCommandExecutionException: Target index ‘BROWSE_NODE_REPOSITORY_NAME_PARENT_PATH_NAME_IDX’ not found<pre><code>DB name=&quot;component&quot;）造成Browse浏览数据都为空![image-20221008165046779](https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221008165046779.png)
</code></pre></li>
<li>通过数据库连接工具，删除browse_node及浏览器索引（参考<a href="https://issues.sonatype.org/browse/NEXUS-16419处理）" target="_blank" rel="noopener">https://issues.sonatype.org/browse/NEXUS-16419处理）</a></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行此命令，将路径的 nexus-3.9.0-01 部分替换为您的 nexus 安装路径：</span></span><br><span class="line"></span><br><span class="line">java -jar nexus-3.9.0-01/lib/support/nexus-orient-console.jar</span><br><span class="line"><span class="comment"># 在命令提示符下执行：</span></span><br><span class="line"></span><br><span class="line">connect plocal:sonatype-work/nexus3/db/component admin admin </span><br><span class="line">drop class browse_node</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<ol start="12">
<li>启动nexus,数据自动重建，可正常浏览数据。</li>
</ol>
<p><strong>备注：根据这次处理，说明服务的自动备份存在一定问题，一定要定期做数据恢复测试</strong></p>
]]></content>
      <categories>
        <category>Windwos</category>
      </categories>
      <tags>
        <tag>nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux优化</title>
    <url>/2022/09/29/Archlinux%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-问题处理"><a href="#1-问题处理" class="headerlink" title="1 问题处理"></a>1 问题处理</h1><h2 id="1-1-Dolphin文件管理访问win分区无法写"><a href="#1-1-Dolphin文件管理访问win分区无法写" class="headerlink" title="1.1 Dolphin文件管理访问win分区无法写"></a>1.1 Dolphin文件管理访问win分区无法写</h2><p>关闭win10系统的快速启动功能，默认开启后会设置分区保护。</p>
<a id="more"></a>
<h2 id="1-2-Archlinux修复GRUB引导"><a href="#1-2-Archlinux修复GRUB引导" class="headerlink" title="1.2 Archlinux修复GRUB引导"></a>1.2 Archlinux修复GRUB引导</h2><p>使用archlinux U盘工具，修复GRUB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看分区情况 </span></span><br><span class="line">lsblk</span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span><br><span class="line">nvme0n1     259:0    0 476.9G  0 disk </span><br><span class="line">├─nvme0n1p1 259:1    0   300M  0 part /boot/efi</span><br><span class="line">├─nvme0n1p2 259:2    0   128M  0 part </span><br><span class="line">├─nvme0n1p3 259:3    0  97.7G  0 part </span><br><span class="line">├─nvme0n1p4 259:4    0   687M  0 part </span><br><span class="line">├─nvme0n1p5 259:5    0 187.1G  0 part /run/media/zhaohuan/EFF4FD736019A612</span><br><span class="line">├─nvme0n1p6 259:6    0 115.9G  0 part /home</span><br><span class="line">└─nvme0n1p7 259:7    0  75.1G  0 part /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载分区到原有位置</span></span><br><span class="line">mount /dev/nvme0n1p7 /mnt</span><br><span class="line">mount /dev/nvme0n1p6 /mnt/home</span><br><span class="line">mount /dev/nvme0n1p1 /mnt/boot/efi</span><br><span class="line"><span class="comment"># 挂载下列分区，否则识别不到块设备，造成grub-install失败</span></span><br><span class="line">mount --rbind /dev /mnt/dev</span><br><span class="line">mount --rbind /proc /mnt/proc</span><br><span class="line">mount --rbind /sys /mnt/sys</span><br><span class="line"><span class="comment"># 以/mnt为根目录</span></span><br><span class="line">chroot /mnt</span><br><span class="line">grub-install /boot</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<h2 id="1-3-解决wine系应用无法输入中文"><a href="#1-3-解决wine系应用无法输入中文" class="headerlink" title="1.3 解决wine系应用无法输入中文"></a>1.3 解决wine系应用无法输入中文</h2><p>如：微信、wps、Tim等</p>
<p>解决办法：在应用启动文件内加上如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=fcitx"</span></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=<span class="string">"fcitx"</span></span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=<span class="string">"fcitx"</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://blog.csdn.net/qq_40893238/article/details/105341832" target="_blank" rel="noopener">https://blog.csdn.net/qq_40893238/article/details/105341832</a> </p>
<h2 id="1-4-KDE添加右键新建模板"><a href="#1-4-KDE添加右键新建模板" class="headerlink" title="1.4 KDE添加右键新建模板"></a>1.4 KDE添加右键新建模板</h2><p>参考：<a href="https://blog.csdn.net/pswzyu/article/details/84022715" target="_blank" rel="noopener">https://blog.csdn.net/pswzyu/article/details/84022715</a></p>
<p>在<code>/usr/share/templates</code>目录新建  <code>.desktop</code>文件。</p>
<p><strong>示例1</strong>   <code>wps-word.desktop</code>,文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=WPS文档</span><br><span class="line">Comment[zh_CN]=WPS文档</span><br><span class="line">Type=Link</span><br><span class="line">URL=/home/zhaohuan/模板/WPS文档.docx</span><br><span class="line">Icon=wps-office2019-wpsmain</span><br></pre></td></tr></table></figure>
<p>URL指向模板文件的位置，模板文件自己创建。Icon去应用属性里面查名称。</p>
<p><strong>示例2</strong>  <code>shell.desktop</code>文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=新建脚本</span><br><span class="line">Comment[zh_CN]=新建脚本</span><br><span class="line">Type=Link</span><br><span class="line">URL=.<span class="built_in">source</span>/script.sh</span><br><span class="line">Icon=konsole</span><br></pre></td></tr></table></figure>
<p><strong>效果</strong></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221027215304064.png" alt="image-20221027215304064"></p>
<h2 id="1-5-Arch切换内核"><a href="#1-5-Arch切换内核" class="headerlink" title="1.5 Arch切换内核"></a>1.5 Arch切换内核</h2><p><a href="https://wwtyrd.com/article/482861/" target="_blank" rel="noopener">参考文档</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装新内核</span></span><br><span class="line">sudo pacman -S linux-lts linux-lts-headers</span><br><span class="line"><span class="comment"># 修改grub文件</span></span><br><span class="line">sudo vim /etc/default/grub</span><br><span class="line"><span class="comment"># 重新生成GRUB配置文件</span></span><br><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221104223026216.png" alt="image-20221104223026216"></p>
<h1 id="2-软件"><a href="#2-软件" class="headerlink" title="2 软件"></a>2 软件</h1><h2 id="2-1-KDE-connect"><a href="#2-1-KDE-connect" class="headerlink" title="2.1 KDE connect"></a>2.1 KDE connect</h2><p>手机和PC连接工具。</p>
<p><strong>PC端</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S kdeconnect</span><br></pre></td></tr></table></figure>
<p><strong>手机端</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装kde-connect,通过F-droid商店的版本支持短信功能</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-pamac商店（manjaro默认商店）"><a href="#2-2-pamac商店（manjaro默认商店）" class="headerlink" title="2.2 pamac商店（manjaro默认商店）"></a>2.2 pamac商店（manjaro默认商店）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S pamac</span><br></pre></td></tr></table></figure>
<h2 id="2-3-微信"><a href="#2-3-微信" class="headerlink" title="2.3 微信"></a>2.3 微信</h2><p><strong>UOS版本功能少，不能截图，不能复制截图到输入框</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装微信uos版本，功能简单，BUG少</span></span><br><span class="line">yay -S wechat-uos</span><br><span class="line"><span class="comment"># 安装scrot,提供微信截图功能</span></span><br><span class="line">yay -S scrot</span><br><span class="line"><span class="comment"># 修改wechet-uos.desktop文件，修改StartWMClass=weixin</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221025135841878.png" alt="image-20221025135841878"></p>
<p><strong>com.qq.weixin.deepin版本，能截图，版本适中，非最新，最稳定（推荐）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S com.qq.weixin.deepin</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="2-4-钉钉"><a href="#2-4-钉钉" class="headerlink" title="2.4 钉钉"></a>2.4 钉钉</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S dingtalk-bin</span><br></pre></td></tr></table></figure>
<h2 id="2-5-wps"><a href="#2-5-wps" class="headerlink" title="2.5 wps"></a>2.5 wps</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S wps-office-cn wps-office-mui-zh-cn</span><br></pre></td></tr></table></figure>
<h2 id="2-6-迅雷"><a href="#2-6-迅雷" class="headerlink" title="2.6 迅雷"></a>2.6 迅雷</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S xunlei-bin</span><br></pre></td></tr></table></figure>
<h2 id="2-7-Edge"><a href="#2-7-Edge" class="headerlink" title="2.7 Edge"></a>2.7 Edge</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S microsoft-edge-stable-bin</span><br></pre></td></tr></table></figure>
<h2 id="2-8-向日葵"><a href="#2-8-向日葵" class="headerlink" title="2.8 向日葵"></a>2.8 向日葵</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S sunloginclient</span><br></pre></td></tr></table></figure>
<h2 id="2-9-Visual-code"><a href="#2-9-Visual-code" class="headerlink" title="2.9 Visual code"></a>2.9 Visual code</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S visual-studio-code-bin</span><br></pre></td></tr></table></figure>
<h2 id="2-10-xmind"><a href="#2-10-xmind" class="headerlink" title="2.10 xmind"></a>2.10 xmind</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S xmind</span><br></pre></td></tr></table></figure>
<h2 id="2-11-信使"><a href="#2-11-信使" class="headerlink" title="2.11 信使"></a>2.11 信使</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S iptux</span><br></pre></td></tr></table></figure>
<h2 id="2-12-apper"><a href="#2-12-apper" class="headerlink" title="2.12 apper"></a>2.12 apper</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># KDE application管理工具</span></span><br><span class="line">sudo pacman -S apper</span><br></pre></td></tr></table></figure>
<h2 id="2-13-Ark"><a href="#2-13-Ark" class="headerlink" title="2.13 Ark"></a>2.13 Ark</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可视化压缩工具</span></span><br><span class="line">sudo pacman -S ark</span><br><span class="line"><span class="comment"># 同步安装各种压缩工具</span></span><br></pre></td></tr></table></figure>
<h2 id="2-14-fcitx5"><a href="#2-14-fcitx5" class="headerlink" title="2.14 fcitx5"></a>2.14 fcitx5</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5 fcitx5-pinyin-zhwiki fcitx5-chinese-addons</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://blog.csdn.net/HideOnLie/article/details/107615277" target="_blank" rel="noopener">https://blog.csdn.net/HideOnLie/article/details/107615277</a></p>
<h2 id="2-15-火焰截图"><a href="#2-15-火焰截图" class="headerlink" title="2.15 火焰截图"></a>2.15 火焰截图</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S flameshot</span><br></pre></td></tr></table></figure>
<h2 id="2-16-Psensor"><a href="#2-16-Psensor" class="headerlink" title="2.16 Psensor"></a>2.16 Psensor</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 温度监控</span></span><br><span class="line">sudo pacman -S psensor</span><br></pre></td></tr></table></figure>
<h2 id="2-17-remmina"><a href="#2-17-remmina" class="headerlink" title="2.17 remmina"></a>2.17 remmina</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S  </span><br><span class="line"><span class="comment"># vnc rdp扩展</span></span><br><span class="line">sudo pacman -S libvncserver   freerdp</span><br></pre></td></tr></table></figure>
<h2 id="2-18-simplescreenrecorder"><a href="#2-18-simplescreenrecorder" class="headerlink" title="2.18 simplescreenrecorder"></a>2.18 simplescreenrecorder</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 录屏工具</span></span><br><span class="line">pacman -S simplescreenrecorder</span><br></pre></td></tr></table></figure>
<h2 id="2-19-yakuake"><a href="#2-19-yakuake" class="headerlink" title="2.19 yakuake"></a>2.19 yakuake</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下拉终端</span></span><br><span class="line">pacman -S yakuake</span><br></pre></td></tr></table></figure>
<h2 id="2-20-axel"><a href="#2-20-axel" class="headerlink" title="2.20 axel"></a>2.20 axel</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多线程下载工具</span></span><br><span class="line">pacman -S axel</span><br></pre></td></tr></table></figure>
<h2 id="2-21-bat"><a href="#2-21-bat" class="headerlink" title="2.21 bat"></a>2.21 bat</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比cat好用</span></span><br><span class="line">pacman -S bat</span><br></pre></td></tr></table></figure>
<h2 id="2-22-debtap"><a href="#2-22-debtap" class="headerlink" title="2.22 debtap"></a>2.22 debtap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deb包安装工具</span></span><br><span class="line">pacman -S debtap</span><br></pre></td></tr></table></figure>
<h2 id="2-23-downrade"><a href="#2-23-downrade" class="headerlink" title="2.23 downrade"></a>2.23 downrade</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 历史版本软件安装</span></span><br><span class="line">pacman -S downgrade</span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">sudo downgrade linux</span><br></pre></td></tr></table></figure>
<h2 id="2-24-openvpn"><a href="#2-24-openvpn" class="headerlink" title="2.24 openvpn"></a>2.24 openvpn</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S openvpn networkmanager-openvpn</span><br></pre></td></tr></table></figure>
<h2 id="2-25-FileZilla"><a href="#2-25-FileZilla" class="headerlink" title="2.25 FileZilla"></a>2.25 FileZilla</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S filezilla</span><br></pre></td></tr></table></figure>
<h2 id="2-26-redis-manager"><a href="#2-26-redis-manager" class="headerlink" title="2.26 redis manager"></a>2.26 redis manager</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S resp-app</span><br></pre></td></tr></table></figure>
<h2 id="2-27-drawio"><a href="#2-27-drawio" class="headerlink" title="2.27 drawio"></a>2.27 drawio</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 画拓扑图工具</span></span><br><span class="line">pacman -S drawio</span><br></pre></td></tr></table></figure>
<h2 id="2-28-VMware-Workstation"><a href="#2-28-VMware-Workstation" class="headerlink" title="2.28 VMware Workstation"></a>2.28 VMware Workstation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S vmware-workstation</span><br></pre></td></tr></table></figure>
<h2 id="2-29-typora"><a href="#2-29-typora" class="headerlink" title="2.29 typora"></a>2.29 typora</h2><p>下载历史免费版本deb包,使用debtap安装。</p>
<h2 id="2-30-foxit-reader"><a href="#2-30-foxit-reader" class="headerlink" title="2.30 foxit reader"></a>2.30 foxit reader</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 福晰阅读器</span></span><br><span class="line">pacman -S foxitreader</span><br></pre></td></tr></table></figure>
<h2 id="2-31-网易云音乐"><a href="#2-31-网易云音乐" class="headerlink" title="2.31 网易云音乐"></a>2.31 网易云音乐</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S netease-cloud-music</span><br></pre></td></tr></table></figure>
<p>调整缩放</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>share<span class="regexp">/applications/</span>netease-cloud-music.desktop</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221028225637416.png" alt="image-20221028225637416"></p>
<h2 id="2-32-navicat"><a href="#2-32-navicat" class="headerlink" title="2.32 navicat"></a>2.32 navicat</h2><p><a href="https://github.com/lzscxb/navicat-keygen" target="_blank" rel="noopener">https://github.com/lzscxb/navicat-keygen</a></p>
<p>备注：这个地址下载的包都是编译好的及修改好的包，可以直接使用激活。</p>
<h2 id="2-33-mycli"><a href="#2-33-mycli" class="headerlink" title="2.33 mycli"></a>2.33 mycli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># myql连接客户端，和mysql用法一样，自带命令补全</span></span><br><span class="line">pacman -S mycli</span><br></pre></td></tr></table></figure>
<h2 id="2-34-zsh"><a href="#2-34-zsh" class="headerlink" title="2.34 zsh"></a>2.34 zsh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必装</span></span><br><span class="line">pacman -S zsh</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">oh-my-sh</a></p>
<p>必装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zsh-syntax-highlighting  语法高亮，错误语法显示红色</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># zsh-autosuggestions  自动补全</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<h1 id="3-省电优化"><a href="#3-省电优化" class="headerlink" title="3 省电优化"></a>3 省电优化</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S tlp tlpui</span><br><span class="line"><span class="comment"># tlp电源管理配置文件 /etc/tlp.conf</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 控制电池充电阀值</span></span><br><span class="line"><span class="comment"># 参考https://linrunner.de/tlp/settings/bc-vendors.html#supported-hardware</span></span><br><span class="line"><span class="comment"># 1 - 电池充电至60%</span></span><br><span class="line"><span class="comment"># 0 - 电池充电至100%，电池节省模式关闭</span></span><br><span class="line">START_CHARGE_THRESH_BAT0=0  <span class="comment"># dummy value</span></span><br><span class="line">STOP_CHARGE_THRESH_BAT0=0</span><br><span class="line">---</span><br><span class="line"><span class="comment"># 其他优化使用tlpui可视化调整</span></span><br><span class="line"><span class="comment"># tlp配置参考：https://linrunner.de/tlp/settings/processor.html</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221025141903557.png" alt="image-20221025141903557"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221025141934699.png" alt="image-20221025141934699"></p>
<h1 id="4-系统优化"><a href="#4-系统优化" class="headerlink" title="4 系统优化"></a>4 系统优化</h1><h2 id="4-1-关闭系统关机告警音"><a href="#4-1-关闭系统关机告警音" class="headerlink" title="4.1 关闭系统关机告警音"></a>4.1 关闭系统关机告警音</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改/etc/modprobe.d/nobeep.conf</span></span><br><span class="line">blacklist pcspkr</span><br></pre></td></tr></table></figure>
<p><a href="https://wiki.archlinux.org/title/Kernel_module_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">https://wiki.archlinux.org/title/Kernel_module_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221025152849070.png" alt="image-20221025152849070"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>systemd.service用法</title>
    <url>/2022/11/13/systemd-service%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1516125" target="_blank" rel="noopener">参考链接</a></p>
<h1 id="1-Systemd-的-Unit-文件"><a href="#1-Systemd-的-Unit-文件" class="headerlink" title="1 Systemd 的 Unit 文件"></a>1 <strong>Systemd 的 Unit 文件</strong></h1><p>Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）。</p>
<p>在 Systemd 的生态圈中，Unit 文件统一了过去各种不同系统资源配置格式，例如服务的启/停、定时任务、设备自动挂载、网络配置、虚拟内存配置等。而 Systemd 通过不同的文件后缀来区分这些配置文件。</p>
<a id="more"></a>
<h2 id="1-1-Systemd-支持的-12-种-Unit-文件类型"><a href="#1-1-Systemd-支持的-12-种-Unit-文件类型" class="headerlink" title="1.1 Systemd 支持的 12 种 Unit 文件类型"></a>1.1 Systemd 支持的 12 种 Unit 文件类型</h2><ol>
<li>Systemd 支持的 12 种 Unit 文件类型</li>
</ol>
<ul>
<li>.automount：用于控制自动挂载文件系统，相当于 SysV-init 的 autofs 服务</li>
<li>.device：对于 /dev 目录下的设备，主要用于定义设备之间的依赖关系</li>
<li>.mount：定义系统结构层次中的一个挂载点，可以替代过去的 /etc/fstab 配置文件</li>
<li>.path：用于监控指定目录或文件的变化，并触发其它 Unit 运行</li>
<li>.scope：这种 Unit 文件不是用户创建的，而是 Systemd 运行时产生的，描述一些系统服务的分组信息</li>
<li><strong>.service</strong>：封装守护进程的启动、停止、重启和重载操作，是最常见的一种 Unit 文件</li>
<li>.slice：用于表示一个 CGroup 的树，通常用户不会自己创建这样的 Unit 文件</li>
<li>.snapshot：用于表示一个由 systemctl snapshot 命令创建的 Systemd Units 运行状态快照</li>
<li>.socket：监控来自于系统或网络的数据消息，用于实现基于数据自动触发服务启动</li>
<li>.swap：定义一个用户做虚拟内存的交换分区</li>
<li>.target：用于对 Unit 文件进行逻辑分组，引导其它 Unit 的执行。它替代了 SysV-init 运行级别的作用，并提供更灵活的基于特定设备事件的启动方式</li>
<li>.timer：用于配置在特定时间触发的任务，替代了 Crontab 的功能</li>
</ul>
<h2 id="1-2-Systemd-目录"><a href="#1-2-Systemd-目录" class="headerlink" title="1.2 Systemd 目录"></a>1.2 Systemd 目录</h2><p>Unit 文件按照 Systemd 约定，应该被放置指定的三个系统目录之一中。这三个目录是有优先级的，如下所示，越靠上的优先级越高。因此，在三个目录中有同名文件的时候，只有优先级最高的目录里的那个文件会被使用。</p>
<ul>
<li>/etc/systemd/system：系统或用户自定义的配置文件</li>
<li>/run/systemd/system：软件运行时生成的配置文件</li>
<li>/usr/lib/systemd/system：系统或第三方软件安装时添加的配置文件。</li>
</ul>
<p>Systemd 默认从目录 /etc/systemd/system/ 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 /usr/lib/systemd/system/，真正的配置文件存放在那个目录。</p>
<h2 id="1-3-Unit-和-Target"><a href="#1-3-Unit-和-Target" class="headerlink" title="1.3 Unit 和 Target"></a>1.3 Unit 和 Target</h2><p>Unit 是 Systemd 管理系统资源的基本单元，可以认为每个系统资源就是一个 Unit，并使用一个 Unit 文件定义。在 Unit 文件中需要包含相应服务的描述、属性以及需要运行的命令。</p>
<p>Target 是 Systemd 中用于指定系统资源启动组的方式，相当于 SysV-init 中的运行级别。</p>
<p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。</p>
<h1 id="2-Systemd-Service-Unit"><a href="#2-Systemd-Service-Unit" class="headerlink" title="2 Systemd Service Unit"></a>2 <strong>Systemd Service Unit</strong></h1><h2 id="2-1-Unit-文件结构"><a href="#2-1-Unit-文件结构" class="headerlink" title="2.1 Unit 文件结构"></a>2.1 <strong>Unit 文件结构</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Hello World</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStartPre=-/usr/bin/docker <span class="built_in">kill</span> busybox1</span><br><span class="line">ExecStartPre=-/usr/bin/docker rm busybox1</span><br><span class="line">ExecStartPre=/usr/bin/docker pull busybox</span><br><span class="line">ExecStart=/usr/bin/docker run --name busybox1 busybox /bin/ sh -c <span class="string">"while true; do echo Hello World; sleep 1; done"</span></span><br><span class="line">ExecStop=<span class="string">"/usr/bin/docker stop busybox1"</span></span><br><span class="line">ExecStopPost=<span class="string">"/usr/bin/docker rm busybox1"</span></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h3 id="2-1-1-Unit-段"><a href="#2-1-1-Unit-段" class="headerlink" title="2.1.1 Unit 段"></a>2.1.1 <strong>Unit 段</strong></h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Description</td>
<td>描述这个 Unit 文件的信息</td>
<td></td>
</tr>
<tr>
<td>Documentation</td>
<td>指定服务的文档，可以是一个或多个文档的 URL 路径</td>
<td></td>
</tr>
<tr>
<td>Requires</td>
<td>依赖的其它 Unit 列表，列在其中的 Unit 模板会在这个服务启动时的同时被启动。并且，如果其中任意一个服务启动失败，这个服务也会被终止</td>
<td></td>
</tr>
<tr>
<td>Wants</td>
<td>与 Requires 相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模板启动是否成功</td>
<td></td>
</tr>
<tr>
<td>After</td>
<td>与 Requires 相似，但是在后面列出的所有模块全部启动完成以后，才会启动当前的服务 （<strong>表示服务需要在*服务启动之后执行</strong>）</td>
<td></td>
</tr>
<tr>
<td>Before</td>
<td>与 After 相反，在启动指定的任务一个模块之间，都会首先确证当前服务已经运行（<strong>表示服务需要在*服务启动之前执行</strong>）</td>
<td></td>
</tr>
<tr>
<td>Binds To</td>
<td>与 Requires 相似，失败时失败，成功时成功，但是在这些模板中有任意一个出现意外结束或重启时，这个服务也会跟着终止或重启</td>
<td></td>
</tr>
<tr>
<td>Part Of</td>
<td>一个 Bind To 作用的子集，仅在列出的任务模块失败或重启时，终止或重启当前服务，而不会随列出模板的启动而启动</td>
<td></td>
</tr>
<tr>
<td>OnFailure</td>
<td>当这个模板启动失败时，就会自动启动列出的每个模块</td>
<td></td>
</tr>
<tr>
<td>Conflicts</td>
<td>与这个模块有冲突的模块，如果列出的模块中有已经在运行的，这个服务就不能启动，反之亦然</td>
</tr>
</tbody>
</table>
<h3 id="2-1-2-Service-段"><a href="#2-1-2-Service-段" class="headerlink" title="2.1.2 Service 段"></a>2.1.2 <strong>Service 段</strong></h3><p>用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段分为服务生命周期和服务上下文配置两个方面。</p>
<h4 id="2-1-2-1-服务生命周期控制相关"><a href="#2-1-2-1-服务生命周期控制相关" class="headerlink" title="2.1.2.1 服务生命周期控制相关"></a>2.1.2.1 服务生命周期控制相关</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>RemainAfterExit</td>
<td>值为 true 或 false（默认）。当配置为 true 时，Systemd 只会负责启动服务进程，之后即便服务进程退出了，Systemd 也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。</td>
<td></td>
</tr>
<tr>
<td>ExecStart</td>
<td>启动进程时执行的命令</td>
<td></td>
</tr>
<tr>
<td>ExecReload</td>
<td>重启服务时执行的命令</td>
<td></td>
</tr>
<tr>
<td>ExecStop</td>
<td>停止服务时执行的命令</td>
<td></td>
</tr>
<tr>
<td>ExecStartPre</td>
<td>启动服务之前执行的命令</td>
<td></td>
</tr>
<tr>
<td>ExecStartPost</td>
<td>启动服务之后执行的命令</td>
<td></td>
</tr>
<tr>
<td>ExecStopPost</td>
<td>停止服务之后执行的命令</td>
<td></td>
</tr>
<tr>
<td>RestartSec</td>
<td>自动重启当前服务间隔的秒数</td>
<td></td>
</tr>
<tr>
<td>Restart</td>
<td>定义何种情况 Systemd 会自动重启当前服务，可能的值包括 always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</td>
<td></td>
</tr>
<tr>
<td>TimeoutStartSec</td>
<td>启动服务时等待的秒数，这一配置对于使用 Docker <a href="https://cloud.tencent.com/product/tke?from=10680" target="_blank" rel="noopener">容器</a>而言显得尤为重要，因其第一次运行时可能需要下载镜像，严重延时会容易被 Systemd 误判为启动失败杀死。通常，对于这种服务，将此值指定为 0，从而关闭超时检测</td>
<td></td>
</tr>
<tr>
<td>TimeoutStopSec</td>
<td>停止服务时的等待秒数，如果超过这个时间仍然没有停止，Systemd 会使用 SIGKILL 信号强行杀死服务的进程</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>type参数说明</strong></li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>simple</td>
<td>默认值，执行ExecStart指定的命令，启动主进程</td>
<td></td>
</tr>
<tr>
<td>forking</td>
<td>以 fork 方式从父进程创建子进程，创建后父进程会立即退出</td>
<td></td>
</tr>
<tr>
<td>oneshot</td>
<td>一次性进程，类似于simple，但只执行一次，Systemd 会等它执行完，才启动其他服务</td>
<td></td>
</tr>
<tr>
<td>dbus</td>
<td>类似于simple，但会等待 D-Bus 信号后启动</td>
<td></td>
</tr>
<tr>
<td>notify</td>
<td>类似于simple，启动结束后会发出通知信号，然后 Systemd 再启动其他服务</td>
<td></td>
</tr>
<tr>
<td>idle</td>
<td>类似于simple，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>Restart参数说明</strong></li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>no（默认值）</td>
<td>退出后不会重启</td>
<td></td>
</tr>
<tr>
<td>on-success</td>
<td>只有正常退出时（退出状态码为0），才会重启</td>
<td></td>
</tr>
<tr>
<td>on-failure</td>
<td>非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启</td>
<td></td>
</tr>
<tr>
<td>on-abnormal</td>
<td>只有被信号终止和超时，才会重启</td>
<td></td>
</tr>
<tr>
<td>on-abort</td>
<td>只有在收到没有捕捉到的信号终止时，才会重启</td>
<td></td>
</tr>
<tr>
<td>on-watchdog</td>
<td>超时退出，才会重启</td>
<td></td>
</tr>
<tr>
<td>always</td>
<td>不管是什么退出原因，总是重启</td>
</tr>
</tbody>
</table>
<h4 id="2-1-2-2-服务上下文配置相关"><a href="#2-1-2-2-服务上下文配置相关" class="headerlink" title="2.1.2.2 服务上下文配置相关"></a>2.1.2.2 服务上下文配置相关</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Environment</td>
<td>为服务指定环境变量</td>
<td></td>
</tr>
<tr>
<td>EnvironmentFile</td>
<td>指定加载一个包含服务所需的环境变量的列表的文件，文件中的每一行都是一个环境变量的定义</td>
<td></td>
</tr>
<tr>
<td>Nice</td>
<td>服务的进程优先级，值越小优先级越高，默认为 0。其中 -20 为最高优先级，19 为最低优先级</td>
<td></td>
</tr>
<tr>
<td>WorkingDirectory</td>
<td>指定服务的工作目录</td>
<td></td>
</tr>
<tr>
<td>RootDirectory</td>
<td>指定服务进程的根目录（/ 目录）。如果配置了这个参数，服务将无法访问指定目录以外的任何文件</td>
<td></td>
</tr>
<tr>
<td>User</td>
<td>指定运行服务的用户</td>
<td></td>
</tr>
<tr>
<td>Group</td>
<td>指定运行服务的用户组</td>
<td></td>
</tr>
<tr>
<td>MountFlags</td>
<td>服务的 Mount Namespace 配置，会影响进程上下文中挂载点的信息，即服务是否会继承主机上已有挂载点，以及如果服务运行执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为 shared、slaved 或 private</td>
<td></td>
</tr>
<tr>
<td>LimitCPU / LimitSTACK / LimitNOFILE / LimitNPROC 等</td>
<td>限制特定服务的系统资源量，例如 CPU、程序堆栈、文件句柄数量、子进程数量等</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：如果在 ExecStart、ExecStop 等属性中使用了 Linux 命令，则必须要写出完整的绝对路径。对于 ExecStartPre 和 ExecStartPost 辅助命令，若前面有个 “-” 符号，表示忽略这些命令的出错。因为有些 “辅助” 命令本来就不一定成功，比如尝试清空一个文件，但文件可能不存在。</p>
</blockquote>
<p><strong>MountFlags  参数说明</strong></p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>shared</td>
<td>服务与主机共用一个 Mount Namespace，继承主机挂载点，且服务挂载或卸载设备会真实地反映到主机上</td>
<td></td>
</tr>
<tr>
<td>slave</td>
<td>服务使用独立的 Mount Namespace，它会继承主机挂载点，但服务对挂载点的操作只有在自己的 Namespace 内生效，不会反映到主机上</td>
<td></td>
</tr>
<tr>
<td>private</td>
<td>服务使用独立的 Mount Namespace，它在启动时没有任何任何挂载点，服务对挂载点的操作也不会反映到主机上</td>
</tr>
</tbody>
</table>
<h3 id="2-1-3-Install-段"><a href="#2-1-3-Install-段" class="headerlink" title="2.1.3 Install 段"></a>2.1.3 <strong>Install 段</strong></h3><p>这部分配置的目标模块通常是特定运行目标的 .target 文件，用来使得服务在系统启动时自动运行。这个区段可以包含三种启动约束：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>WantedBy</td>
<td>和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入 /etc/systemd/system 目录下面以 <target 名=""> + .wants 后缀构成的子目录中，如 “/etc/systemd/system/multi-user.target.wants/“</target></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>RequiredBy</td>
<td>和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入 /etc/systemd/system 目录下面以 <target 名=""> + .required 后缀构成的子目录</target></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>Also</td>
<td>当前 Unit enable/disable 时，同时 enable/disable 的其他 Unit</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>Alias</td>
<td>当前 Unit 可用于启动的别名</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find /etc/systemd/system/* -type d</span></span><br><span class="line">/etc/systemd/system/default.target.wants</span><br><span class="line">/etc/systemd/system/getty.target.wants</span><br><span class="line">/etc/systemd/system/graphical.target.wants</span><br><span class="line">/etc/systemd/system/multi-user.target.wants</span><br><span class="line">/etc/systemd/system/network-online.target.wants</span><br><span class="line">/etc/systemd/system/paths.target.wants</span><br><span class="line">/etc/systemd/system/shutdown.target.wants</span><br><span class="line">/etc/systemd/system/sockets.target.wants</span><br><span class="line">/etc/systemd/system/sysinit.target.wants</span><br><span class="line">/etc/systemd/system/timers.target.wants</span><br></pre></td></tr></table></figure>
<h2 id="2-2-Unit-文件占位符和模板"><a href="#2-2-Unit-文件占位符和模板" class="headerlink" title="2.2  Unit 文件占位符和模板"></a>2.2  <strong>Unit 文件占位符和模板</strong></h2><h3 id="2-2-1-Unit-文件占位符"><a href="#2-2-1-Unit-文件占位符" class="headerlink" title="2.2.1 Unit 文件占位符"></a>2.2.1 <strong>Unit 文件占位符</strong></h3><p>在 Unit 文件中，有时会需要使用到一些与运行环境有关的信息，例如节点 ID、运行服务的用户等。这些信息可以使用占位符来表示，然后在实际运行被动态地替换实际的值。</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>%n</td>
<td>完整的 Unit 文件名字，包括 .service 后缀名</td>
<td></td>
</tr>
<tr>
<td>%p</td>
<td>Unit 模板文件名中 @ 符号之前的部分，不包括 @ 符号</td>
<td></td>
</tr>
<tr>
<td>%i</td>
<td>Unit 模板文件名中 @ 符号之后的部分，不包括 @ 符号和 .service 后缀名</td>
<td></td>
</tr>
<tr>
<td>%t</td>
<td>存放系统运行文件的目录，通常是 “run”</td>
<td></td>
</tr>
<tr>
<td>%u</td>
<td>运行服务的用户，如果 Unit 文件中没有指定，则默认为 root</td>
<td></td>
</tr>
<tr>
<td>%U</td>
<td>运行服务的用户 ID</td>
<td></td>
</tr>
<tr>
<td>%h</td>
<td>运行服务的用户 Home 目录，即 %{HOME} 环境变量的值</td>
<td></td>
</tr>
<tr>
<td>%s</td>
<td>运行服务的用户默认 Shell 类型，即 %{SHELL} 环境变量的值</td>
<td></td>
</tr>
<tr>
<td>%m</td>
<td>实际运行节点的 Machine ID，对于运行位置每个的服务比较有用</td>
<td></td>
</tr>
<tr>
<td>%b</td>
<td>Boot ID，这是一个随机数，每个节点各不相同，并且每次节点重启时都会改变</td>
<td></td>
</tr>
<tr>
<td>%H</td>
<td>实际运行节点的主机名</td>
<td></td>
</tr>
<tr>
<td>%v</td>
<td>内核版本，即 “uname -r” 命令输出的内容</td>
<td></td>
</tr>
<tr>
<td>%%</td>
<td>在 Unit 模板文件中表示一个普通的百分号</td>
</tr>
</tbody>
</table>
<h3 id="2-2-2-Unit-模板"><a href="#2-2-2-Unit-模板" class="headerlink" title="2.2.2 Unit 模板"></a>2.2.2 Unit 模板</h3><p>在现实中，往往有一些应用需要被复制多份运行。例如，用于同一个<a href="https://cloud.tencent.com/product/clb?from=10680" target="_blank" rel="noopener">负载均衡器</a>分流的多个服务实例，或者为每个 SSH 连接建立一个独立的 sshd 服务进程。</p>
<p>Unit 模板文件的写法与普通的服务 Unit 文件基本相同，不过 Unit 模板的文件名是以 @ 符号结尾的。通过模板启动服务实例时，需要在其文件名的 @ 字符后面附加一个参数字符串。</p>
<ol>
<li>示例：apache@.service</li>
</ol>
<ul>
<li>apache@.service 模板</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Advanced Service Template</span><br><span class="line">After=etcd.service docker.service</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStartPre=-/usr/bin/docker <span class="built_in">kill</span> apache%i</span><br><span class="line">ExecStartPre=-/usr/bin/docker rm apache%i</span><br><span class="line">ExecStartPre=/usr/bin/docker pull coreos/apache</span><br><span class="line">ExecStart=/usr/bin/docker run --name apache%i -p %i:80 coreos/apache /usr/sbin/apache2ctl -D FOREGROUND</span><br><span class="line">ExecStartPost=/usr/bin/etcdctl <span class="built_in">set</span> /domains/example.com/%H:%i running</span><br><span class="line">ExecStop=/usr/bin/docker stop apache1</span><br><span class="line">ExecStopPost=/usr/bin/docker rm apache1</span><br><span class="line">ExecStopPost=/usr/bin/etcdctl rm /domains/example.com/%H:%i</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<ul>
<li>启动 Unit 模板的服务实例</li>
</ul>
<p>在服务启动时需要在 @ 后面放置一个用于区分服务实例的附加字符参数，通常这个参数用于监控的端口号或控制台 TTY 编译号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start apache@8080.service</span></span><br></pre></td></tr></table></figure>
<p>Systemd 在运行服务时，总是会先尝试找到一个完整匹配的 Unit 文件，如果没有找到，才会尝试选择匹配模板。例如上面的命令，System 首先会在约定的目录下寻找名为 <a href="mailto:apache@8080.service" target="_blank" rel="noopener">apache@8080.service</a> 的文件，如果没有找到，而文件名中包含 @ 字符，它就会尝试去掉后缀参数匹配模板文件。对于 <a href="mailto:apache@8080.service" target="_blank" rel="noopener">apache@8080.service</a>，systemd 会找到 apache@.service 模板文件，并通过这个模板文件将服务实例化。</p>
<h1 id="3-Systemd-的资源管理"><a href="#3-Systemd-的资源管理" class="headerlink" title="3 Systemd 的资源管理"></a>3 <strong>Systemd 的资源管理</strong></h1><h2 id="3-1-Systemctl-命令"><a href="#3-1-Systemctl-命令" class="headerlink" title="3.1 Systemctl 命令"></a>3.1 <strong>Systemctl 命令</strong></h2><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># systemctl --help</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h2 id="3-2-Unit-管理"><a href="#3-2-Unit-管理" class="headerlink" title="3.2 Unit 管理"></a>3.2 <strong>Unit 管理</strong></h2><ol>
<li><strong>查看当前系统的所有 Unit</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出正在运行的 Unit</span></span><br><span class="line">$ systemctl list-units</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span><br><span class="line">$ systemctl list-units --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有没有运行的 Unit</span></span><br><span class="line">$ systemctl list-units --all --state=inactive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有加载失败的 Unit</span></span><br><span class="line">$ systemctl list-units --failed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有正在运行的、类型为 service 的 Unit</span></span><br><span class="line">$ systemctl list-units --<span class="built_in">type</span>=service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Unit 配置文件的内容</span></span><br><span class="line">$ systemctl cat docker.service</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>查看 Unit 的状态</strong></li>
</ol>
<ul>
<li>enabled：已建立启动链接</li>
<li>disabled：没建立启动链接</li>
<li>static：该配置文件没有 [Install] 部分（无法执行），只能作为其他配置文件的依赖</li>
<li>masked：该配置文件被禁止建立启动链接</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示系统状态</span></span><br><span class="line">$ systemctl status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示单个 Unit 的状态</span></span><br><span class="line">$ ystemctl status bluetooth.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示远程主机的某个 Unit 的状态</span></span><br><span class="line">$ systemctl -H root@rhel7.example.com status httpd.service</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>Unit 的管理</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 立即启动一个服务</span></span><br><span class="line">$ sudo systemctl start apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即停止一个服务</span></span><br><span class="line">$ sudo systemctl stop apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">$ sudo systemctl restart apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死一个服务的所有子进程</span></span><br><span class="line">$ sudo systemctl <span class="built_in">kill</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载一个服务的配置文件</span></span><br><span class="line">$ sudo systemctl reload apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 的所有底层参数</span></span><br><span class="line">$ systemctl show httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 的指定属性的值</span></span><br><span class="line">$ systemctl show -p CPUShares httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置某个 Unit 的指定属性</span></span><br><span class="line">$ sudo systemctl <span class="built_in">set</span>-property httpd.service CPUShares=500</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><strong>查看 Unit 的依赖关系</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出一个 Unit 的所有依赖，默认不会列出 target 类型</span></span><br><span class="line">$ systemctl list-dependencies nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出一个 Unit 的所有依赖，包括 target 类型</span></span><br><span class="line">$ systemctl list-dependencies --all nginx.service</span><br></pre></td></tr></table></figure>
<h2 id="3-3-服务的生命周期"><a href="#3-3-服务的生命周期" class="headerlink" title="3.3 服务的生命周期"></a>3.3 <strong>服务的生命周期</strong></h2><p>当一个新的 Unit 文件被放入 /etc/systemd/system/ 或 /usr/lib/systemd/system/ 目录中时，它是不会被自识识别的。</p>
<ol>
<li><strong>服务的激活</strong></li>
</ol>
<ul>
<li>systemctl enable：在 /etc/systemd/system/ 建立服务的符号链接，指向 /usr/lib/systemd/system/ 中</li>
<li>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令</li>
</ul>
<ol start="2">
<li><strong>服务的启动和停止</strong></li>
</ol>
<ul>
<li>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令</li>
<li>systemctl stop：依次停止定义在 Unit 文件中的 ExecStopPre、ExecStop 和 ExecStopPost 命令</li>
<li>systemctl restart：重启服务</li>
<li>systemctl kill：立即杀死服务</li>
</ul>
<ol start="3">
<li><strong>服务的开机启动和取消</strong></li>
</ol>
<ul>
<li>systemctl enable：除了激活服务以外，也可以置服务为开机启动</li>
<li>systemctl disable：取消服务的开机启动</li>
</ul>
<ol start="4">
<li><strong>服务的修改和移除</strong></li>
</ol>
<ul>
<li>systemctl daemon-reload：Systemd 会将 Unit 文件的内容写到缓存中，因此当 Unit 文件被更新时，需要告诉 Systemd 重新读取所有的 Unit 文件</li>
<li>systemctl reset-failed：移除标记为丢失的 Unit 文件。在删除 Unit 文件后，由于缓存的关系，即使通过 daemon-reload 更新了缓存，在 list-units 中依然会显示标记为 not-found 的 Unit。</li>
</ul>
<h2 id="3-4-Target-管理"><a href="#3-4-Target-管理" class="headerlink" title="3.4 Target 管理"></a>3.4 <strong>Target 管理</strong></h2><p>Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。</p>
<p>在传统的 SysV-init 启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统的所有 Target</span></span><br><span class="line">$ systemctl list-unit-files --<span class="built_in">type</span>=target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一个 Target 包含的所有 Unit</span></span><br><span class="line">$ systemctl list-dependencies multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看启动时的默认 Target</span></span><br><span class="line">$ systemctl get-default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动时的默认 Target</span></span><br><span class="line">$ sudo systemctl <span class="built_in">set</span>-default multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换 Target 时，默认不关闭前一个 Target 启动的进程，systemctl isolate 命令改变这种行为，关闭前一个 Target 里面所有不属于后一个 Target 的进程</span></span><br><span class="line">$ sudo systemctl isolate multi-user.target</span><br></pre></td></tr></table></figure>
<p><strong>Target 与 SysV-init 进程的主要区别：</strong></p>
<ul>
<li>默认的 RunLevel（在 /etc/inittab 文件设置）现在被默认的 Target 取代，位置是 /etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。</li>
<li>启动脚本的位置，以前是 /etc/init.d 目录，符号链接到不同的 RunLevel 目录 （比如 /etc/rc3.d、/etc/rc5.d 等），现在则存放在 /lib/systemd/system 和 /etc/systemd/system 目录。</li>
<li>配置文件的位置，以前 init 进程的配置文件是 /etc/inittab，各种服务的配置文件存放在 /etc/sysconfig 目录。现在的配置文件主要存放在 /lib/systemd 目录，在 /etc/systemd 目录里面的修改可以覆盖原始设置。</li>
</ul>
<h2 id="3-5-日志管理"><a href="#3-5-日志管理" class="headerlink" title="3.5 日志管理"></a>3.5 <strong>日志管理</strong></h2><p>Systemd 通过其标准<a href="https://cloud.tencent.com/product/cls?from=10680" target="_blank" rel="noopener">日志服务</a> Journald 提供的配套程序 journalctl 将其管理的所有后台进程打印到 std:out（即控制台）的输出重定向到了日志文件。</p>
<p>Systemd 的日志文件是二进制格式的，必须使用 Journald 提供的 journalctl 来查看，默认不带任何参数时会输出系统和所有后台进程的混合日志。</p>
<p>默认日志最大限制为所在文件系统容量的 10%，可以修改 /etc/systemd/journald.conf 中的 SystemMaxUse 来指定该最大限制。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class="line">$ sudo journalctl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核日志（不显示应用日志）：--dmesg 或 -k</span></span><br><span class="line">$ sudo journalctl -k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统本次启动的日志（其中包括了内核日志和各类系统服务的控制台输出）：--system 或 -b</span></span><br><span class="line">$ sudo journalctl -b</span><br><span class="line">$ sudo journalctl -b -0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看上一次启动的日志（需更改设置）</span></span><br><span class="line">$ sudo journalctl -b -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定服务的日志：--unit 或 -u</span></span><br><span class="line">$ sudo journalctl -u docker.servcie</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定服务的日志</span></span><br><span class="line">$ sudo journalctl /usr/lib/systemd/systemd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时滚动显示最新日志</span></span><br><span class="line">$ sudo journalctl -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定时间的日志</span></span><br><span class="line">$ sudo journalctl --since=<span class="string">"2012-10-30 18:17:16"</span></span><br><span class="line">$ sudo journalctl --since <span class="string">"20 min ago"</span></span><br><span class="line">$ sudo journalctl --since yesterday</span><br><span class="line">$ sudo journalctl --since <span class="string">"2015-01-10"</span> --until <span class="string">"2015-01-11 03:00"</span></span><br><span class="line">$ sudo journalctl --since 09:00 --until <span class="string">"1 hour ago"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示尾部的最新 10 行日志：--lines 或 -n</span></span><br><span class="line">$ sudo journalctl -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示尾部指定行数的日志</span></span><br><span class="line">$ sudo journalctl -n 20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将最新的日志显示在前面</span></span><br><span class="line">$ sudo journalctl -r -u docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变输出的格式：--output 或 -o</span></span><br><span class="line">$ sudo journalctl -r -u docker.service -o json-pretty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定进程的日志</span></span><br><span class="line">$ sudo journalctl _PID=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个路径的脚本的日志</span></span><br><span class="line">$ sudo journalctl /usr/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定用户的日志</span></span><br><span class="line">$ sudo journalctl _UID=33 --since today</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个 Unit 的日志</span></span><br><span class="line">$ sudo journalctl -u nginx.service</span><br><span class="line">$ sudo journalctl -u nginx.service --since today</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时滚动显示某个 Unit 的最新日志</span></span><br><span class="line">$ sudo journalctl -u nginx.service -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并显示多个 Unit 的日志</span></span><br><span class="line">$ journalctl -u nginx.service -u php-fpm.service --since today</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定优先级（及其以上级别）的日志，共有 8 级</span></span><br><span class="line"><span class="comment"># 0: emerg</span></span><br><span class="line"><span class="comment"># 1: alert</span></span><br><span class="line"><span class="comment"># 2: crit</span></span><br><span class="line"><span class="comment"># 3: err</span></span><br><span class="line"><span class="comment"># 4: warning</span></span><br><span class="line"><span class="comment"># 5: notice</span></span><br><span class="line"><span class="comment"># 6: info</span></span><br><span class="line"><span class="comment"># 7: debug</span></span><br><span class="line">$ sudo journalctl -p err -b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class="line">$ sudo journalctl --no-pager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 JSON 格式（单行）输出</span></span><br><span class="line">$ sudo journalctl -b -u nginx.service -o json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class="line">$ sudo journalctl -b -u nginx.serviceqq</span><br><span class="line"> -o json-pretty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示日志占据的硬盘空间</span></span><br><span class="line">$ sudo journalctl --disk-usage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件占据的最大空间</span></span><br><span class="line">$ sudo journalctl --vacuum-size=1G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件保存多久</span></span><br><span class="line">$ sudo journalctl --vacuum-time=1years</span><br></pre></td></tr></table></figure>
<h2 id="3-6-Systemd-工具集"><a href="#3-6-Systemd-工具集" class="headerlink" title="3.6 Systemd 工具集"></a>3.6 <strong>Systemd 工具集</strong></h2><ul>
<li>systemctl：用于检查和控制各种系统服务和资源的状态</li>
<li>bootctl：用于查看和管理系统启动分区</li>
<li>hostnamectl：用于查看和修改系统的主机名和主机信息</li>
<li>journalctl：用于查看系统日志和各类应用服务日志</li>
<li>localectl：用于查看和管理系统的地区信息</li>
<li>loginctl：用于管理系统已登录用户和 Session 的信息</li>
<li>machinectl：用于操作 Systemd 容器</li>
<li>timedatectl：用于查看和管理系统的时间和时区信息</li>
<li>systemd-analyze 显示此次系统启动时运行每个服务所消耗的时间，可以用于分析系统启动过程中的性能瓶颈</li>
<li>systemd-ask-password：辅助性工具，用星号屏蔽用户的任意输入，然后返回实际输入的内容</li>
<li>systemd-cat：用于将其他命令的输出重定向到系统日志</li>
<li>systemd-cgls：递归地显示指定 CGroup 的继承链</li>
<li>systemd-cgtop：显示系统当前最耗资源的 CGroup 单元</li>
<li>systemd-escape：辅助性工具，用于去除指定字符串中不能作为 Unit 文件名的字符</li>
<li>systemd-hwdb：Systemd 的内部工具，用于更新硬件数据库</li>
<li>systemd-delta：对比当前系统配置与默认系统配置的差异</li>
<li>systemd-detect-virt：显示主机的虚拟化类型</li>
<li>systemd-inhibit：用于强制延迟或禁止系统的关闭、睡眠和待机事件</li>
<li>systemd-machine-id-setup：Systemd 的内部工具，用于给 Systemd 容器生成 ID</li>
<li>systemd-notify：Systemd 的内部工具，用于通知服务的状态变化</li>
<li>systemd-nspawn：用于创建 Systemd 容器</li>
<li>systemd-path：Systemd 的内部工具，用于显示系统上下文中的各种路径配置</li>
<li>systemd-run：用于将任意指定的命令包装成一个临时的后台服务运行</li>
<li>systemd-stdio- bridge：Systemd 的内部 工具，用于将程序的标准输入输出重定向到系统总线</li>
<li>systemd-tmpfiles：Systemd 的内部工具，用于创建和管理临时文件目录</li>
<li>systemd-tty-ask-password-agent：用于响应后台服务进程发出的输入密码请求</li>
</ul>
<ol>
<li><strong>systemctl</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">$ sudo systemctl reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统，切断电源</span></span><br><span class="line">$ sudo systemctl poweroff</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU停止工作</span></span><br><span class="line">$ sudo systemctl halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停系统</span></span><br><span class="line">$ sudo systemctl <span class="built_in">suspend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入冬眠状态</span></span><br><span class="line">$ sudo systemctl hibernate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入交互式休眠状态</span></span><br><span class="line">$ sudo systemctl hybrid-sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进入救援状态（单用户状态）</span></span><br><span class="line">$ sudo systemctl rescue</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>systemd-analyze</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看启动耗时</span></span><br><span class="line">$ systemd-analyze</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每个服务的启动耗时</span></span><br><span class="line">$ systemd-analyze blame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示瀑布状的启动过程流</span></span><br><span class="line">$ systemd-analyze critical-chain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定服务的启动流</span></span><br><span class="line">$ systemd-analyze critical-chain atd.service</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>hostnamectl</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前主机的信息</span></span><br><span class="line">$ hostnamectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主机名。</span></span><br><span class="line">$ sudo hostnamectl <span class="built_in">set</span>-hostname rhel7</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><strong>timedatectl</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前时区设置</span></span><br><span class="line">$ timedatectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有可用的时区</span></span><br><span class="line">$ timedatectl list-timezones</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置当前时区</span></span><br><span class="line">$ sudo timedatectl <span class="built_in">set</span>-timezone America/New_York</span><br><span class="line">$ sudo timedatectl <span class="built_in">set</span>-time YYYY-MM-DDb</span><br><span class="line">$ sudo timedatectl <span class="built_in">set</span>-time HH:MM:SS</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><strong>loginctl</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前 session</span></span><br><span class="line">$ loginctl list-sessions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前登录用户</span></span><br><span class="line">$ loginctl list-users</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出显示指定用户的信息</span></span><br><span class="line">$ loginctl show-user ruanyf</span><br></pre></td></tr></table></figure>
<ol start="6">
<li><strong>systemd-ask-password</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ PASSWORD=$(systemd-ask-password <span class="string">"Input Your Passowrd:"</span>)</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>systemd-run</li>
</ol>
<p>systemd-run 可以将一个指定的操作变成后台运行的服务。它的效果似乎与直接在命令后加上表示后台运行的 &amp; 符号很相似。然而，它让命令成为服务还意味着，它的生命周期将由 Systemd 控制。具体来说，包括以下好处：</p>
<ul>
<li>服务的生命击期由 Systemd 接管，不会随着启动它的控制台关闭而结束</li>
<li>可以通过 systemctl 工具管理服务的状态</li>
<li>可以通过 journalctl 工具查看和管理服务的日志信息</li>
<li>可以通过 Systemd 提供的方法限制服务的 CPU、内存、磁盘 IO 等系统资源的使用情况。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>systemd</tag>
      </tags>
  </entry>
  <entry>
    <title>MF系统配置手册(Pios)</title>
    <url>/2022/11/07/%E6%A8%A1%E6%96%B9%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C(Pios)/</url>
    <content><![CDATA[<h1 id="1-系统环境"><a href="#1-系统环境" class="headerlink" title="1 系统环境"></a>1 系统环境</h1><p>2022-09-22-raspios-bullseye-arm64-<strong>lite</strong>.img.xz</p>
<a id="more"></a>
<h1 id="2-系统配置-amp-优化"><a href="#2-系统配置-amp-优化" class="headerlink" title="2 系统配置&amp;优化"></a>2 系统配置&amp;优化</h1><h2 id="2-1-屏蔽开机彩虹屏"><a href="#2-1-屏蔽开机彩虹屏" class="headerlink" title="2.1 屏蔽开机彩虹屏"></a>2.1 屏蔽开机彩虹屏</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /book/config.txt 添加一行</span></span><br><span class="line">disable_splash=1</span><br></pre></td></tr></table></figure>
<h2 id="2-2-屏蔽开机草莓logo"><a href="#2-2-屏蔽开机草莓logo" class="headerlink" title="2.2 屏蔽开机草莓logo"></a>2.2 屏蔽开机草莓logo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /boot/cmdline.txt 末尾添加</span></span><br><span class="line">logo.nologo</span><br></pre></td></tr></table></figure>
<h2 id="2-3-更换国内源"><a href="#2-3-更换国内源" class="headerlink" title="2.3 更换国内源"></a>2.3 更换国内源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看Pi os debian版本</span></span><br><span class="line">cat /etc/debian_version </span><br><span class="line">11.5</span><br></pre></td></tr></table></figure>
<p><strong>修改<code>/etc/apt/sources.list</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清华大学源 https://mirror.tuna.tsinghua.edu.cn/help/raspbian/</span></span><br><span class="line"><span class="comment"># 选择合适的版本配置源</span></span><br><span class="line"><span class="comment"># aarch64  这里系统为64位</span></span><br><span class="line"><span class="comment"># 编辑 `/etc/apt/sources.list` 文件，用以下内容取代：</span></span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span></span><br></pre></td></tr></table></figure>
<p><strong>修改<code>/etc/apt/sources.list.d/raspi.list</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于两个架构，编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bullseye main</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理和更新缓存</span></span><br><span class="line">sudo apt clean &amp;&amp; sudo apt update</span><br><span class="line"><span class="comment"># 更新系统</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
<h2 id="2-4-校准时区"><a href="#2-4-校准时区" class="headerlink" title="2.4 校准时区"></a>2.4 校准时区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<h2 id="2-5-优化rc-local"><a href="#2-5-优化rc-local" class="headerlink" title="2.5 优化rc-local"></a>2.5 优化rc-local</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /lib/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221110144918985.png" alt="image-20221110144918985"></p>
<h2 id="2-6-更新boot-固件更新"><a href="#2-6-更新boot-固件更新" class="headerlink" title="2.6 更新boot(固件更新)"></a>2.6 更新boot(固件更新)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-7-配置静态IP"><a href="#2-7-配置静态IP" class="headerlink" title="2.7 配置静态IP"></a>2.7 配置静态IP</h2><p><strong><code>修改/etc/dhcpcd.conf</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置eth0</span></span><br><span class="line">interface eth0</span><br><span class="line">static ip_address=192.168.1.100/24</span><br><span class="line">static routers=192.168.1.1</span><br><span class="line">static domain_name_servers=223.5.5.5 114.114.114.114</span><br><span class="line"><span class="comment"># 设置wlan0(后面配置AP需要)</span></span><br><span class="line">interface wlan0</span><br><span class="line">    static ip_address=192.10.66.1/24</span><br><span class="line">    nohook wpa_supplicant</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启网卡</span></span><br><span class="line">ifconfig eth0 down &amp;&amp; ifconfig eth0 up</span><br><span class="line"><span class="comment"># 改后直接重启wlan0会报错，配置hostapd和dnsmasq重启后正常。</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里wlan0静态地址配置有2种方式配置：</p>
<ol>
<li>第一种修改/etc/dhcpcd.conf添加，支持nat,正常访问eth0网络和互联网;       (推荐)</li>
<li>第二种修改/etc/network/interfaces,支持nat访问到etho网卡，不支持访问到eth0网络和互联网；</li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二种方法配置wlan0静态IP</span></span><br><span class="line">sudo nano /etc/network/interfaces</span><br><span class="line"><span class="comment"># 此次修改的文件是interfaces文件，在其中加入</span></span><br><span class="line">allow-hotplug wlan0</span><br><span class="line">iface wlan0 inet static</span><br><span class="line">    address 192.10.66.1</span><br><span class="line">    netmask 255.255.255.0</span><br><span class="line">    network 192.10.66.0</span><br><span class="line">    broadcast 192.168.1.255</span><br></pre></td></tr></table></figure>
<h2 id="2-8-配置ufw防火墙"><a href="#2-8-配置ufw防火墙" class="headerlink" title="2.8 配置ufw防火墙"></a>2.8 配置ufw防火墙</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install ufw      <span class="comment"># 安装</span></span><br><span class="line">ufw <span class="built_in">enable</span>           <span class="comment"># 启动</span></span><br><span class="line">ufw default deny     <span class="comment"># 默认禁止所有</span></span><br><span class="line">ufw allow 22         <span class="comment"># 开启ssh</span></span><br><span class="line">ufw allow 10000      <span class="comment"># 开启10000</span></span><br><span class="line">ufw allow 13000:13100/tcp <span class="comment"># 开启ftp交互端口范围</span></span><br><span class="line">ufw allow 21         <span class="comment"># 开启ftp</span></span><br><span class="line">ufw allow 53         <span class="comment"># hostapd</span></span><br><span class="line">ufw allow 67         <span class="comment"># hostapd  hostapd端口要放开，否则手机能连接，PC无法连接，未理解原因</span></span><br><span class="line">ufw status 			 <span class="comment"># 查看防火墙规则</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启ufw nat转发</span></span><br><span class="line">1.修改ufw文件,允许接收转发的包</span><br><span class="line"> vi /etc/default/ufw  </span><br><span class="line">---</span><br><span class="line">DEFAULT_FORWARD_POLICY=<span class="string">"ACCEPT"</span></span><br><span class="line">2.修改sysctl.conf启用内核转发(取消注释)</span><br><span class="line"> vi /etc/ufw/sysctl.conf</span><br><span class="line">---</span><br><span class="line">net/ipv4/ip_forward=1</span><br><span class="line">3.修改/etc/ufw/before.rules,添加相应的nat配置,直接添加到`COMMIT`下面另起一行添加如下内容就可以了.</span><br><span class="line"> vi /etc/ufw/before.rules</span><br><span class="line">---</span><br><span class="line">COMMIT</span><br><span class="line">后面添加</span><br><span class="line">*nat</span><br><span class="line">:PREROUTING - [0:0]</span><br><span class="line">:POSTROUTING - [0:0]</span><br><span class="line">-A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">COMMIT</span><br><span class="line">4.重启ufw</span><br><span class="line">ufw reload</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个地方要注意的就是必需同时添加<code>PREROUTING</code>和<code>POSTROUTING</code>.这也是通过ufw配置nat时的难点所在!笔者很长一段时间都浪费在反复修改PREROUTING上.后来仔细一想,有进来的包也必需有出去的包nat才能成行吧,于是试着添加POSTROUTING,结果就通了!这个地方还有一点应该就是rules文件的语法吧.<br>      *nat<br>      :PREROUTING - [0:0]<br>      :POSTROUTING - [0:0]</p>
<pre><code>#这个地方加自定义语句
COMMIT
</code></pre><p>之前也是很长一段时间,都在原有的COMMIT里加东西,测试,也是浪费了挺长的时间才看明白,语法</p>
</blockquote>
<h1 id="3-安装服务"><a href="#3-安装服务" class="headerlink" title="3 安装服务"></a>3 安装服务</h1><h2 id="3-1-AP配置"><a href="#3-1-AP配置" class="headerlink" title="3.1 AP配置"></a>3.1 AP配置</h2><h3 id="3-1-1-安装hostapd和dnsmasq"><a href="#3-1-1-安装hostapd和dnsmasq" class="headerlink" title="3.1.1 安装hostapd和dnsmasq"></a>3.1.1 安装hostapd和dnsmasq</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install hostapd</span></span><br><span class="line">sudo apt install hostapd</span><br><span class="line"><span class="comment"># hostapd 自启动配置</span></span><br><span class="line">sudo systemctl unmask hostapd</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> hostapd</span><br><span class="line"><span class="comment"># install dnsmasq</span></span><br><span class="line">sudo apt install dnsmasq</span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">sudo DEBIAN_FRONTEND=noninteractive apt install -y netfilter-persistent iptables-persistent</span><br></pre></td></tr></table></figure>
<h3 id="3-1-2-配置wlan0静态IP"><a href="#3-1-2-配置wlan0静态IP" class="headerlink" title="3.1.2 配置wlan0静态IP"></a>3.1.2 配置wlan0静态IP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改/etc/dhcpcd.conf</span></span><br><span class="line">sudo nano /etc/dhcpcd.conf</span><br><span class="line"><span class="comment"># 添加下方内容</span></span><br><span class="line">interface wlan0</span><br><span class="line">    static ip_address=192.10.66.1/24</span><br><span class="line">    nohook wpa_supplicant</span><br></pre></td></tr></table></figure>
<h3 id="3-1-3-配置路由转发和IP伪装（使用ufw防火墙请略过）"><a href="#3-1-3-配置路由转发和IP伪装（使用ufw防火墙请略过）" class="headerlink" title="3.1.3 配置路由转发和IP伪装（使用ufw防火墙请略过）"></a>3.1.3 配置路由转发和IP伪装（使用ufw防火墙请略过）</h3><p><strong>路由转发</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件/etc/sysctl.d/routed-ap.conf</span></span><br><span class="line">sudo nano /etc/sysctl.d/routed-ap.conf</span><br><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable IPv4 routing</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>
<p><strong>IP伪装</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo iptables -t<span class="built_in"> nat </span>-A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">sudo netfilter-persistent save</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要确保 WiFi 无线电不会在树莓派上被阻止，请执行以下命令：</span></span><br><span class="line">sudo rfkill unblock wlan</span><br></pre></td></tr></table></figure>
<h3 id="3-1-4-配置hostapt和dnsmasq"><a href="#3-1-4-配置hostapt和dnsmasq" class="headerlink" title="3.1.4 配置hostapt和dnsmasq"></a>3.1.4 配置hostapt和dnsmasq</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改dnsmqsq.conf</span></span><br><span class="line">sudo nano /etc/dnsmasq.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件内容</span></span><br><span class="line">interface=wlan0 <span class="comment"># 监听接口</span></span><br><span class="line">dhcp-range=192.10.66.2,192.10.66.20,255.255.255.0,24h</span><br><span class="line">                <span class="comment"># dhcp地址池和租约时间</span></span><br><span class="line">dhcp-option=option:dns-server,223.5.5.5,114.114.114.114   <span class="comment"># 客户端DNS</span></span><br><span class="line">domain=wlan     <span class="comment"># Local wireless DNS domain</span></span><br><span class="line">address=/gdw.com/192.10.66.1</span><br><span class="line">                <span class="comment"># Alias for this router</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改/etc/hostapd/hostapd.conf</span></span><br><span class="line">sudo nano /etc/hostapd/hostapd.conf</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line"><span class="comment"># 添加文件内容</span></span><br><span class="line">country_code=CN               <span class="comment"># wifi国家ISO代码</span></span><br><span class="line">interface=wlan0               <span class="comment"># 绑定接口</span></span><br><span class="line">ssid=NameOfNetwork_5G         <span class="comment"># wifi名称，自定义</span></span><br><span class="line"><span class="comment"># 更改热点操作模式 </span></span><br><span class="line"><span class="comment"># hw_mode=ghw_mode=ahw_mode</span></span><br><span class="line"><span class="comment"># a = IEEE 802.11a （5 GHz） （树莓派 3B+ 起）</span></span><br><span class="line"><span class="comment"># b = IE 8021.1亿 （2.4 GHz）</span></span><br><span class="line"><span class="comment"># g = IE 802.11g （2.4 GHz）</span></span><br><span class="line">hw_mode=a</span><br><span class="line">channel=153                   <span class="comment"># 设置信道,acs_survey自动选择信道,5G 153</span></span><br><span class="line"><span class="comment"># 无线MAC地址过滤</span></span><br><span class="line"><span class="comment"># 此选项要求 driver=hostap 或 driver=nl80211</span></span><br><span class="line"><span class="comment"># 0 = 接受所有连接，仅拒绝 deny 列表中的连接</span></span><br><span class="line"><span class="comment"># 1 = 拒绝所有连接，仅接受 accept 列表中的连接</span></span><br><span class="line"><span class="comment"># 2 = 使用外部 RADIUS 服务器 (还是会优先查找 accept/deny 列表)</span></span><br><span class="line"><span class="comment"># 简单一点的话，可以将两个列表设置为同一个文件，仅由 macaddr_acl 来控制允许或拒绝</span></span><br><span class="line">macaddr_acl=0                 </span><br><span class="line">auth_algs=1                   <span class="comment"># 身份验证算法，1 开放系统认证，2 共享密钥认证(需要 WEP)，3 两者</span></span><br><span class="line">ignore_broadcast_ssid=0       <span class="comment"># 是否广播，0 广播SSID，1 不广播SSID（发送空SSID，即长度为0的SSID）</span></span><br><span class="line">wpa=2                         <span class="comment"># 1 wpa，2 wpa2, 3 两者。 新的设备可以设置为2，仅使用wpa2版本</span></span><br><span class="line">wpa_passphrase=12345678       <span class="comment"># wifi密码，自定义</span></span><br><span class="line">wpa_key_mgmt=WPA-PSK          <span class="comment"># 设置密钥管理算法WPA-PSK WPA-EAP或两者</span></span><br><span class="line">wpa_pairwise=CCMP             <span class="comment"># 设置加密算法，CCMP就是AES，不推荐使用TKIP，除非设备不支持</span></span><br><span class="line">rsn_pairwise=CCMP             <span class="comment"># 默认情况下rsn_pairwise自动设置为wpa_pairwise的值，当然也可以手动指定。</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-5-重启生效"><a href="#3-1-5-重启生效" class="headerlink" title="3.1.5 重启生效"></a>3.1.5 重启生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h2 id="3-2-docker环境安装"><a href="#3-2-docker环境安装" class="headerlink" title="3.2 docker环境安装"></a>3.2 docker环境安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载旧版本</span></span><br><span class="line">sudo apt-get remove -y docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新软件包索引并安装软件包以允许使用基于 HTTPS 的存储库</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Docker 的官方 GPG 密钥    </span></span><br><span class="line">sudo mkdir -p /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用以下命令设置存储库：</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">"deb [arch=<span class="variable">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">  <span class="variable">$(lsb_release -cs)</span> stable"</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置daemon.json</span></span><br><span class="line">cat &gt;/etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://docker.mirrors.ustc.edu.cn"</span>,</span><br><span class="line">    <span class="string">"http://hub-mirror.c.163.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"max-concurrent-downloads"</span>: 10,</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-level"</span>: <span class="string">"warn"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span>,</span><br><span class="line">    <span class="string">"max-file"</span>: <span class="string">"3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="string">"data-root"</span>: <span class="string">"/var/lib/docker"</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙,关闭docker防火墙规则配置，使用ufw规则</span></span><br><span class="line"><span class="built_in">echo</span> DOCKER_OPTS=<span class="string">"--iptables=false"</span> &gt;&gt; /etc/default/docker</span><br><span class="line">DOCKER_OPTS=<span class="string">"--iptables=false"</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.163.com/dy/article/HB3VCULI0552EKZ8.html#:~:text=%E4%BB%A4%E4%BA%BA%E6%83%8A%E8%AE%B6%E7%9A%84%E6%98%AF%EF%BC%8CDocker%20%E6%97%A0%E6%B3%95%E4%B8%8E%20Linux,%E7%9A%84%E2%80%9C%E9%80%9A%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99%E2%80%9D%E6%88%96%20UFW%20%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E3%80%82" target="_blank" rel="noopener">参考1</a></p>
<p><a href="https://blog.csdn.net/dt763C/article/details/79179321" target="_blank" rel="noopener">参考2</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemc	restart docker</span><br></pre></td></tr></table></figure>
<h2 id="3-3-gdwserv"><a href="#3-3-gdwserv" class="headerlink" title="3.3 gdwserv"></a>3.3 gdwserv</h2><p>导入gdwserv镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --restart always -u root --privileged=<span class="literal">true</span> --name gdwserv -p 10000:10000 -p 6058:6058 -e BASEURL=http://192.168.1.101:10000/gdw -dti -v /data:/usr/<span class="built_in">local</span>/g</span><br><span class="line">dw/data 192.168.1.118:5000/gdwserv:2.0.0</span><br></pre></td></tr></table></figure>
<h2 id="3-4-ftp服务"><a href="#3-4-ftp服务" class="headerlink" title="3.4 ftp服务"></a>3.4 ftp服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install vsftpd</span><br></pre></td></tr></table></figure>
<p><strong>修改/etc/vsftpd.conf</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line">local_root=/data</span><br><span class="line">write_enable=yes</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">max_clients=1000</span><br><span class="line">max_per_ip=1000</span><br><span class="line"></span><br><span class="line">pasv_enable=YES</span><br><span class="line">pasv_min_port=13000</span><br><span class="line">pasv_max_port=13100</span><br></pre></td></tr></table></figure>
<p><strong>修改/etc/ftpusers</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    <span class="comment"># 注释掉root,以允许root登录</span></span><br><span class="line">    --------------</span><br><span class="line">    <span class="comment"># /etc/ftpusers: list of users disallowed FTP access. See ftpusers(5).</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#root</span></span><br><span class="line">    daemon</span><br><span class="line">    bin</span><br><span class="line">sys</span><br><span class="line">sync</span><br><span class="line">games</span><br><span class="line">man</span><br><span class="line">lp</span><br><span class="line">mail</span><br><span class="line">news</span><br><span class="line">uucp</span><br><span class="line">nobody</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：pam认证配置文件为 /etc/pam.d/vsftpd</p>
</blockquote>
<h1 id="4-系统镜像制作"><a href="#4-系统镜像制作" class="headerlink" title="4 系统镜像制作"></a>4 系统镜像制作</h1><h2 id="4-1-自定义镜像自动扩展磁盘"><a href="#4-1-自定义镜像自动扩展磁盘" class="headerlink" title="4.1 自定义镜像自动扩展磁盘"></a>4.1 自定义镜像自动扩展磁盘</h2><p>基于PI OS第一次开机初始化配置方法，重新执行初始化任务。</p>
<h3 id="4-1-1-重新放入“resize2fs-once”文件（可选）"><a href="#4-1-1-重新放入“resize2fs-once”文件（可选）" class="headerlink" title="4.1.1 重新放入“resize2fs_once”文件（可选）"></a>4.1.1 重新放入“resize2fs_once”文件（可选）</h3><p>从Pi OS系统镜像/etc/init.d内拷贝“<strong>resize2fs_once</strong>”并重新放到sd卡同位置内。</p>
<blockquote>
<p>新系统默认存在该文件</p>
</blockquote>
<h3 id="4-1-2-修改“cmdline-txt”"><a href="#4-1-2-修改“cmdline-txt”" class="headerlink" title="4.1.2 修改“cmdline.txt”"></a>4.1.2 修改“cmdline.txt”</h3><blockquote>
<p>备注： 不同Pi OS版本可能存在差异，参考Pi OS镜像的默认配置。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在文件末尾添加</span></span><br><span class="line">quiet init=/usr/lib/raspberrypi-sys-mods/firstboot</span><br><span class="line"></span><br><span class="line"><span class="comment">#比如，如果原先是</span></span><br><span class="line">console=serial0,115200 console=tty1 root=PARTUUID=a4f2a2cf-02 rootfstype=ext4 fsck.repair=yes rootwait logo.nologo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#则改为</span></span><br><span class="line">console=serial0,115200 console=tty1 root=PARTUUID=a4f2a2cf-02 rootfstype=ext4 fsck.repair=yes rootwait logo.nologo quiet init=/usr/lib/raspberrypi-sys-mods/firstboot</span><br><span class="line"><span class="comment">###请务必保留其余部分不变###</span></span><br></pre></td></tr></table></figure>
<p>插入树莓派，第一次启动自动扩容SD卡磁盘。</p>
<h2 id="4-2-清理系统痕迹"><a href="#4-2-清理系统痕迹" class="headerlink" title="4.2 清理系统痕迹"></a>4.2 清理系统痕迹</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除系统及组件日志和缓存</span></span><br><span class="line"><span class="comment"># sudo find /var -type f -exec rm -v &#123;&#125; \;        # 会造成apt命令异常，暂停用。</span></span><br><span class="line">sudo find /var/<span class="built_in">log</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> rm -v &#123;&#125; \;      <span class="comment"># 删除日志文件，建议还是手动吧</span></span><br><span class="line"><span class="comment"># 删除各类history文件，清除使用过的脚本记录</span></span><br><span class="line">rm -rf ~/.*_history</span><br><span class="line">rm -rf ~/.*errors*</span><br><span class="line"><span class="built_in">history</span> -c</span><br><span class="line"><span class="comment"># 关机</span></span><br><span class="line">shutdown now</span><br></pre></td></tr></table></figure>
<h2 id="4-3-缩小分区大小"><a href="#4-3-缩小分区大小" class="headerlink" title="4.3 缩小分区大小"></a>4.3 缩小分区大小</h2><p>在Linux系统下对SD卡系统做分区缩小，这里采用Linux下的可视化工具<code>Gparted</code>执行操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gparted</span><br></pre></td></tr></table></figure>
<ol>
<li>SD卡接入PC</li>
<li>启动Gparted</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221108162337871.png" alt="image-20221108162337871"></p>
<ol start="3">
<li>右键选中分区，调整分区大小</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221108162438671.png" alt="image-20221108162438671"></p>
<ol start="4">
<li>根据实际情况调整分区大小，建议略大于已占用空间，并点击“调整大小/移动”。</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221108162550226.png" alt="image-20221108162550226"></p>
<ol start="5">
<li>点击工具栏“应用全部操作”，保存修改并执行，同时校验磁盘。弹出警告点击“应用(A)”确认。</li>
</ol>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221108162627706.png" alt="image-20221108162627706"></p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221108162658265.png" alt="image-20221108162658265"></p>
<h2 id="4-4-制作镜像"><a href="#4-4-制作镜像" class="headerlink" title="4.4 制作镜像"></a>4.4 制作镜像</h2><p>这里使用“Win32DiskImager”。“映像文件”选择保存镜像的位置，并新建一个“.img”结尾的文件，选中。“设备”选择TF卡对应的任意一个盘符即可，但请务必选择正确，避免选中其他U盘等。校验值根据喜好选择，也可以选择“无”。<strong>务必勾选“仅读取已分配分区”。</strong>然后点击读取，等待进度条完成。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221108162824073.png" alt="image-20221108162824073"></p>
<h2 id="4-5-压缩img文件"><a href="#4-5-压缩img文件" class="headerlink" title="4.5 压缩img文件"></a>4.5 压缩img文件</h2><p>完成后将“.img”文件添加到压缩文件，变为“.zip”进一步缩小镜像体积。这里强力推荐使用开源免费小巧的压缩软件7-Zip。使用7-Zip添加压缩文件，压缩格式选择“zip”，<strong>压缩等级选择“ 标准压缩”</strong>，其他默认即可。通过这样生成的压缩文件，可以直接被树莓派官方的镜像刷写软件“Raspberry Pi Imager”识别并刷写。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20221108162920675.png" alt="image-20221108162920675"></p>
<h1 id="6-风扇配置"><a href="#6-风扇配置" class="headerlink" title="6 风扇配置"></a>6 风扇配置</h1><h2 id="6-1-安装pigpio"><a href="#6-1-安装pigpio" class="headerlink" title="6.1 安装pigpio"></a>6.1 安装pigpio</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install pigpio pip -y</span><br><span class="line">systemctl <span class="built_in">enable</span> pigpiod</span><br><span class="line">pip install pigpio</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Raspberry Pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的配置文件 daemon.json 详解</title>
    <url>/2023/03/08/Docker%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6daemon.json%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="daemon-json"><a href="#daemon-json" class="headerlink" title="daemon.json"></a>daemon.json</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line"> "debug": true,       #当设置为true时，它将守护程序更改为调试模式。可以看到很多的启动信息。默认false</span><br><span class="line"> "live-restore": true,    #允许在守护程序停机期间保持容器处于活动状态。</span><br><span class="line"> "api-cors-header":"", </span><br><span class="line"> "bip": "",</span><br><span class="line"> "bridge":"",     #标志设置docker0为默认桥接网络。它是在您安装Docker时自动创建的。如果未使用默认值，则必须手动创建和配置网桥或仅将其设置为“none”：--bridge=none</span><br><span class="line"> "cgroup-parent":"",</span><br><span class="line"> "cluster-store":"",       #它使用新地址重新加载发现存储。</span><br><span class="line"> "cluster-store-opts":&#123;&#125;,  #它使用新选项重新加载发现存储。</span><br><span class="line"> "cluster-advertise":"",   #它修改重新加载后通告的地址</span><br><span class="line"> "default-gateway":"",</span><br><span class="line"> "default-gateway-v6":"",</span><br><span class="line"> "default-runtime":"runc",    #如果在创建容器时未指定，则更新要使用的运行时。它默认为“default”，这是官方docker软件包附带的运行时。</span><br><span class="line"> "default-ulimits":&#123;&#125;,</span><br><span class="line"> "disable-legacy-registry":false,</span><br><span class="line"> "registry-mirrors":["xxxx"],  #镜像加速的地址，增加后在 docker info中可查看。</span><br><span class="line"> "insecure-registries": [],   #配置docker的私库地址</span><br><span class="line"> "dns": ["192.168.1.1"],   #设定容器DNS的地址，在容器的 /etc/resolv.conf文件中可查看。</span><br><span class="line"> "dns-opts": [],       #容器 /etc/resolv.conf 文件，其他设置</span><br><span class="line"> "dns-search": [],      #设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的 主机时，DNS不仅搜索host，还会搜                             </span><br><span class="line"> "shutdown-timeout":int,     #它使用新的超时来替换守护程序的现有配置超时，以关闭所有容器。</span><br><span class="line"> "labels":["nodeName=node-121"], #docker主机的标签，很实用的功能,例如定义：–label nodeName=host-121                                  索host.example.com 。 注意：如果不设置， Docker 会默认用主机上的 /etc/resolv.conf 来配置容器。</span><br><span class="line"> "max-concurrent-downloads":3,  #它更新每次拉动的最大并发下载量。</span><br><span class="line"> "max-concurrent-uploads":5,   #它更新每次推送的最大并发上传次数。</span><br><span class="line"> "authorization-plugins":[],   #它指定要使用的授权插件。</span><br><span class="line">  </span><br><span class="line"> "exec-opts": [],</span><br><span class="line"> "fixed-cidr":"",</span><br><span class="line"> "fixed-cidr-v6":"",</span><br><span class="line"> "hosts": [],          #指定Docker守护程序将侦听客户端连接的位置。,如果未指定，则默认为/var/run/docker.sock。</span><br><span class="line"> "pidfile":"/var/run/docker.pid",    #是存储守护程序的进程ID的路径。在此处指定pid文件的路径。</span><br><span class="line"> "exec-root":"",  #存储容器状态的路径。默认值是/var/run/docker。在这里指定运行守护进程的路径。</span><br><span class="line"> "data-root":"",  ＃是存储持久数据（如图像，卷和群集状态）的路径。默认值是/var/lib/docker。为避免与其他守护进程发生冲突，请为每个守护进程单独设置此参数。</span><br><span class="line"> "group": "",     #Unix套接字的属组,仅指/var/run/docker.sock</span><br><span class="line"> "iptables": false,    #阻止Docker守护进程添加iptables规则。如果多个守护进程管理iptables规则，它们可能会覆盖另一个守护进程设置的规则。请注意，禁用此选项需要您手动添加iptables规则以公开容器端口。如果你阻止Docker添加iptables规则，Docker也不会添加IP伪装规则，即使你设置 --ip-masq为true。如果没有IP伪装规则，当使用默认网桥以外的网络时，Docker容器将无法连接到外部主机或Internet。</span><br><span class="line"> "icc": false,</span><br><span class="line"> "ip":"0.0.0.0",</span><br><span class="line"> "ipv6": false,</span><br><span class="line"> "ip-forward": false,        #默认true, 启用 net.ipv4.ip_forward ,进入容器后使用 sysctl -a | grepnet.ipv4.ip_forward 查看</span><br><span class="line"> "ip-masq":false,</span><br><span class="line"></span><br><span class="line"> "log-driver":"",</span><br><span class="line"> "log-level":"",</span><br><span class="line"> "log-opts": &#123;&#125;,</span><br><span class="line"> "mtu": 0,</span><br><span class="line"> "oom-score-adjust":-500,</span><br><span class="line"> "raw-logs": false,</span><br><span class="line"> "runtimes": &#123;</span><br><span class="line"> "runc": &#123;</span><br><span class="line"> "path": "runc"</span><br><span class="line"> &#125;,</span><br><span class="line"> "custom": &#123;</span><br><span class="line"> "path":"/usr/local/bin/my-runc-replacement",</span><br><span class="line"> "runtimeArgs": [</span><br><span class="line"> <span class="string">"--debug"</span></span><br><span class="line"> ]</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> "selinux-enabled": false, #默认 false，启用selinux支持</span><br><span class="line"> </span><br><span class="line"> "storage-driver":"",</span><br><span class="line"> "storage-opts": [],</span><br><span class="line"> "swarm-default-advertise-addr":"",</span><br><span class="line"> "tls": true,      #默认 false, 启动TLS认证开关</span><br><span class="line"> "tlscacert": "",    #默认 ~/.docker/ca.pem，通过CA认证过的的certificate文件路径</span><br><span class="line"> "tlscert": "",     #默认 ~/.docker/cert.pem ，TLS的certificate文件路径</span><br><span class="line"> "tlskey": "",      #默认~/.docker/key.pem，TLS的key文件路径</span><br><span class="line"> "tlsverify": true,   #默认false，使用TLS并做后台进程与客户端通讯的验证</span><br><span class="line"> "userland-proxy":false,</span><br><span class="line"> "userns-remap":""</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian11小配置集锦</title>
    <url>/2023/01/05/Debian11%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="1-systemd"><a href="#1-systemd" class="headerlink" title="1 systemd"></a>1 systemd</h1><h2 id="1-1-service启动顺序分析"><a href="#1-1-service启动顺序分析" class="headerlink" title="1.1 service启动顺序分析"></a>1.1 service启动顺序分析</h2><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a.列出各项启动占用的时间，但由于是并行启动，启动时间不决定启动完成先后</span></span><br><span class="line">systemd-analyze blame</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20230106114758976.png" alt="image-20230106114758976"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># b.列出启动矢量图，用浏览器打开boot.svg文件  得到各service启动顺序</span></span><br><span class="line">systemd-analyze plot &gt; boot.svg</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20230106114904229.png" alt="image-20230106114904229"></p>
<h1 id="2-apt"><a href="#2-apt" class="headerlink" title="2 apt"></a>2 apt</h1><h2 id="2-1-设置apt默认是否保留安装包"><a href="#2-1-设置apt默认是否保留安装包" class="headerlink" title="2.1 设置apt默认是否保留安装包"></a>2.1 设置apt默认是否保留安装包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">默认情况下使用apt install安装包时，会自动下载安装包及其依赖包到/var/cache/apt/archieves目录，可通过如下配置改变这一行为：</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁止保存</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Binary::apt::APT::Keep-Downloaded-Packages "0";'</span> | sudo tee /etc/apt/apt.conf.d/10apt-keep-downloads</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许保存</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Binary::apt::APT::Keep-Downloaded-Packages "1";'</span> | sudo tee /etc/apt/apt.conf.d/10apt-keep-downloads</span><br></pre></td></tr></table></figure>
<h2 id="2-2-apt-get-只下载不安装"><a href="#2-2-apt-get-只下载不安装" class="headerlink" title="2.2 apt-get 只下载不安装"></a>2.2 apt-get 只下载不安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载单个文件</span></span><br><span class="line">apt download [软件名]</span><br><span class="line">或</span><br><span class="line">apt-get download [软件名]</span><br><span class="line"><span class="comment"># 下载包及依赖</span></span><br><span class="line">apt install -d [软件名]</span><br><span class="line">或</span><br><span class="line">apt-get install -d [软件名]</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20230106115818734.png" alt="image-20230106115818734"></p>
<h2 id="2-3-离线安装deb"><a href="#2-3-离线安装deb" class="headerlink" title="2.3 离线安装deb"></a>2.3 离线安装deb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i /<span class="built_in">test</span>/*</span><br><span class="line">或</span><br><span class="line">dpkg -i /<span class="built_in">test</span>/*.deb</span><br></pre></td></tr></table></figure>
<h1 id="3-network"><a href="#3-network" class="headerlink" title="3 network"></a>3 network</h1><h2 id="3-1-静态IP配置"><a href="#3-1-静态IP配置" class="headerlink" title="3.1 静态IP配置"></a>3.1 静态IP配置</h2><p>interface方式修改，可以保持网口一直处于激活状态，IP地址一只可用；dhcpcd方式咱不支持。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line"><span class="comment"># Include files from /etc/network/interfaces.d:</span></span><br><span class="line"><span class="built_in">source</span> /etc/network/interfaces.d/*</span><br><span class="line">    </span><br><span class="line">iface lo inet loopback</span><br><span class="line"><span class="comment"># eth0配置</span></span><br><span class="line">auto eth0                     <span class="comment"># 网卡自启</span></span><br><span class="line">allow-hotplug eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.1.11</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.1.1</span><br><span class="line">dns-nameservers 223.5.5.5 114.114.114.114</span><br><span class="line">dns-search foo.org bar.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># wlan0 静态IP配置</span></span><br><span class="line">auto wlan0</span><br><span class="line">allow-hotplug wlan0</span><br><span class="line"><span class="comment">#iface wlan0 inet dhcp</span></span><br><span class="line">iface wlan0 inet static</span><br><span class="line"><span class="comment">#wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</span></span><br><span class="line">address 10.10.10.1</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line"><span class="comment">#gateway 10.10.10.1</span></span><br><span class="line"><span class="comment">#dns-nameservers 223.5.5.5 114.114.114.114</span></span><br><span class="line"><span class="comment">#dns-search foo.org bar.com</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-wifi配置"><a href="#3-2-wifi配置" class="headerlink" title="3.2 wifi配置"></a>3.2 wifi配置</h2><p>修改/etc/wpa_supplicant/wpa_supplicant.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加入热点名称，密码等，可设置多个；密码支持明文和密文</span></span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=<span class="string">"CU_XIN_www1"</span></span><br><span class="line">        psk=fe12b2ee6adca1b95e4561db63f95c7dcf5708f756eb920bdc96592a522bd6bd</span><br><span class="line">        priority=6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=<span class="string">"tetestAPI"</span></span><br><span class="line">        psk=<span class="string">"zxc111111111111111111111"</span></span><br><span class="line">        priority=5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=<span class="string">"_office_R3_2.4G"</span></span><br><span class="line">        psk=<span class="string">"1234...ssssssssssssss."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改/etc/network/interfaces</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可配置dhcp及static方式</span></span><br><span class="line">auto wlan0</span><br><span class="line">allow-hotplug wlan0</span><br><span class="line">iface wlan0 inet dhcp</span><br><span class="line">wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</span><br><span class="line"><span class="comment">#iface wlan0 inet static</span></span><br><span class="line"><span class="comment">#address 10.10.10.1</span></span><br><span class="line"><span class="comment">#netmask 255.255.255.0</span></span><br><span class="line"><span class="comment">#gateway 10.10.10.1</span></span><br><span class="line"><span class="comment">#dns-nameservers 223.5.5.5 114.114.114.114</span></span><br><span class="line"><span class="comment">#dns-search foo.org bar.com</span></span><br></pre></td></tr></table></figure>
<h1 id="4-vim"><a href="#4-vim" class="headerlink" title="4 vim"></a>4 vim</h1><h2 id="4-1-配置鼠标复制黏贴"><a href="#4-1-配置鼠标复制黏贴" class="headerlink" title="4.1 配置鼠标复制黏贴"></a>4.1 配置鼠标复制黏贴</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/vim/vimrc.local</span><br><span class="line"><span class="built_in">source</span> /usr/share/vim/vim90/defaults.vim</span><br><span class="line"><span class="built_in">let</span> skip_defaults_vim = 1</span><br><span class="line"><span class="keyword">if</span> has(<span class="string">'mouse'</span>)</span><br><span class="line">   <span class="built_in">set</span> mouse-=a</span><br><span class="line">endif</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql+pgpool双机热备-高可用</title>
    <url>/2020/07/01/postgresql-pgpool%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87-%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="一、-主机"><a href="#一、-主机" class="headerlink" title="一、 主机"></a>一、 主机</h1><table>
<thead>
<tr>
<th>主机</th>
<th>IP</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.0.56</td>
<td>postgresql、postgis、pgpool</td>
</tr>
<tr>
<td>slave</td>
<td>192.168.0.58</td>
<td>postgresql、postgis、pgpool</td>
</tr>
</tbody>
</table>
<h1 id="二、安装postgresql"><a href="#二、安装postgresql" class="headerlink" title="二、安装postgresql"></a>二、安装postgresql</h1><p>过程忽略</p>
<h1 id="三、配置白名单与流复制"><a href="#三、配置白名单与流复制" class="headerlink" title="三、配置白名单与流复制"></a>三、配置白名单与流复制</h1><h2 id="1-master配置"><a href="#1-master配置" class="headerlink" title="1. master配置"></a>1. master配置</h2><p>PostgreSQL流复制默认是异步的。在主服务器上提交事务和从服务器上变化可见之间有一个小的延迟，这个延迟远小于基于文件日志传送，通常1秒能完成。如果主服务器突然崩溃，可能会有少量数据丢失。<br>同步复制必须等主服务器和从服务器都写完WAL后才能提交事务。这样在一定程度上会增加事务的响应时间。<br>配置同步复制仅需要一个额外的配置步骤： <strong><code>synchronous_standby_names</code></strong> 必须设置为一个非空值。<strong><code>synchronous_commit</code></strong> 也必须设置为 <strong><code>on</code></strong>。<br>这里部署的是异步的流复制</p>
<h3 id="1-1-配置白名单"><a href="#1-1-配置白名单" class="headerlink" title="1.1 配置白名单"></a>1.1 配置白名单</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /pgdata/pg_hba.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在配置文件末尾添加</span></span><br><span class="line">pg_hba.conf</span><br><span class="line">host    all             all             0.0.0.0/0               md5</span><br><span class="line">host    replication     replica         192.168.0.58/32         md5</span><br></pre></td></tr></table></figure>
<h3 id="1-2-修改配置文件"><a href="#1-2-修改配置文件" class="headerlink" title="1.2 修改配置文件"></a>1.2 修改配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /pgdata/postgresql.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgresql.conf</span></span><br><span class="line">data_directory = <span class="string">'/pgdata'</span>                <span class="comment"># 自定义data目录</span></span><br><span class="line">archive_mode = on                         <span class="comment"># 允许归档</span></span><br><span class="line">archive_command = <span class="string">'cp %p /pg_archive/%f'</span></span><br><span class="line">wal_level = hot_standby                   <span class="comment"># 选择热备</span></span><br><span class="line">max_wal_senders = 16                      <span class="comment"># 最多多少各流复制链接</span></span><br><span class="line">wal_keep_segments = 256                   <span class="comment"># 流复制保留最多的xlog数</span></span><br><span class="line">wal_sender_timeout = 60s                  <span class="comment"># 流复制主机发送数据超时时间</span></span><br><span class="line">max_connections = 1000                    <span class="comment"># 从库的max_connections必须大于主库的</span></span><br><span class="line"></span><br><span class="line">full_page_writes = on                     <span class="comment"># 使用pg_rewind命令同步数据库要用</span></span><br><span class="line">wal_log_hints = on                        <span class="comment"># 使用pg_rewind命令同步数据库要用</span></span><br><span class="line">hot_standby = on                          <span class="comment"># 使用pg_rewind命令同步数据库要用</span></span><br><span class="line"></span><br><span class="line">listen_addresses = <span class="string">'*'</span>                    <span class="comment"># 修改监听</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-创建data目录，赋权并修改启动文件"><a href="#1-3-创建data目录，赋权并修改启动文件" class="headerlink" title="1.3 创建data目录，赋权并修改启动文件"></a>1.3 创建data目录，赋权并修改启动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /pgdata &amp;&amp; chown postgres:postgres /pgdata &amp;&amp; chmod 700 /pgdata</span><br><span class="line">mkdir -p /pg_archive &amp;&amp; chown postgres:postgres /pg_archive &amp;&amp; chmod 700 pg_archive</span><br><span class="line">初始化数据库：su - postgres -c <span class="string">"/usr/pgsql-10/bin/initdb -D /pgdata</span></span><br></pre></td></tr></table></figure>
<h3 id="1-4-修改启动文件"><a href="#1-4-修改启动文件" class="headerlink" title="1.4 修改启动文件"></a>1.4 修改启动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/postgresql-10.service</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/postgresql+pgpool双机热备-高可用/1593573136875.png" alt="1"></p>
<h3 id="1-5-启动postgresql并创建replica用户，密码replica"><a href="#1-5-启动postgresql并创建replica用户，密码replica" class="headerlink" title="1.5 启动postgresql并创建replica用户，密码replica"></a>1.5 启动postgresql并创建replica用户，密码replica</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start postgresql-10.service</span><br><span class="line">su postgres</span><br><span class="line">psql</span><br><span class="line">CREATE ROLE replica login replication encrypted password <span class="string">'replica'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-在slave节点测试链接主节点"><a href="#1-6-在slave节点测试链接主节点" class="headerlink" title="1.6 在slave节点测试链接主节点"></a>1.6 在slave节点测试链接主节点</h3><p>slave节点执行：<code>psql -h 192.168.0.56 -U postgres</code>         (首先设置好postgres用户密码后测试)</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/postgresql+pgpool双机热备-高可用/1593573177767.png" alt="2"></p>
<h2 id="2-slave配置"><a href="#2-slave配置" class="headerlink" title="2 slave配置"></a>2 slave配置</h2><h3 id="2-1-配置白名单"><a href="#2-1-配置白名单" class="headerlink" title="2.1 配置白名单"></a>2.1 配置白名单</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /pgdata/pg_hba.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在配置文件末尾添加</span></span><br><span class="line">pg_hba.conf</span><br><span class="line">host    all             all             0.0.0.0/0               md5</span><br><span class="line">host    replication     replica         192.168.0.56/32         md5</span><br></pre></td></tr></table></figure>
<h3 id="2-2-创建data目录"><a href="#2-2-创建data目录" class="headerlink" title="2.2 创建data目录"></a>2.2 创建data目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /pgdata &amp;&amp; chown postgres:postgres /pgdata &amp;&amp; chmod 700 /pgdata</span><br><span class="line">mkdir -p /pg_archive &amp;&amp; chown postgres:postgres /pg_archive &amp;&amp; chmod 700 pg_archive</span><br></pre></td></tr></table></figure>
<h3 id="2-3-备份数据"><a href="#2-3-备份数据" class="headerlink" title="2.3 备份数据"></a>2.3 备份数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su postgres</span><br><span class="line"><span class="comment"># 备份主库的数据库到从库/pgdata</span></span><br><span class="line">pg_basebackup -h 192.168.0.56 -U replica -D /pgdata -X stream –P</span><br></pre></td></tr></table></figure>
<h3 id="2-4-修改启动文件"><a href="#2-4-修改启动文件" class="headerlink" title="2.4 修改启动文件"></a>2.4 修改启动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/postgresql-10.service</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/postgresql+pgpool双机热备-高可用/1593573254201.png" alt="3"></p>
<h3 id="2-5-配置recovery-conf"><a href="#2-5-配置recovery-conf" class="headerlink" title="2.5 配置recovery.conf"></a>2.5 配置recovery.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su postgres</span><br><span class="line">cp /usr/pgsql-10/share/recovery.conf.sample /pgdata/recovery.conf</span><br><span class="line">vim /pgdata/recovery.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># recovery.conf</span></span><br><span class="line">standby_mode = on        <span class="comment"># 该节点为从</span></span><br><span class="line">primary_conninfo = <span class="string">'host=192.168.123.180 port=5432 user=replica password=replica'</span>    <span class="comment">#主服务器的ip、user</span></span><br><span class="line">recovery_target_timeline = <span class="string">'latest'</span></span><br><span class="line">trigger_file = <span class="string">'/tmp/trigger_file0'</span></span><br></pre></td></tr></table></figure>
<h3 id="2-6-配置postgresql-conf"><a href="#2-6-配置postgresql-conf" class="headerlink" title="2.6 配置postgresql.conf"></a>2.6 配置postgresql.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /pgdata/postgresql.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgresql.conf</span></span><br><span class="line">data_directory = <span class="string">'/pgdata'</span>                <span class="comment"># 自定义data目录</span></span><br><span class="line">max_connections = 10000                    <span class="comment"># 从库的max_connections必须大于主库的</span></span><br><span class="line">max_standby_streaming_delay = 30s</span><br><span class="line">wal_receiver_status_interval = 10s</span><br><span class="line">hot_standby_feedback = on</span><br><span class="line"></span><br><span class="line">full_page_writes = on                     <span class="comment"># 使用pg_rewind命令同步数据库要用</span></span><br><span class="line">wal_log_hints = on                        <span class="comment"># 使用pg_rewind命令同步数据库要用</span></span><br><span class="line">hot_standby = on                          <span class="comment"># 使用pg_rewind命令同步数据库要用</span></span><br><span class="line"></span><br><span class="line">listen_addresses = <span class="string">'*'</span></span><br></pre></td></tr></table></figure>
<h3 id="2-7-启动postgresql"><a href="#2-7-启动postgresql" class="headerlink" title="2.7 启动postgresql"></a>2.7 启动postgresql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start postgresql-10.services</span><br></pre></td></tr></table></figure>
<h2 id="3-验证流复制"><a href="#3-验证流复制" class="headerlink" title="3 验证流复制"></a>3 验证流复制</h2><h3 id="3-1-在master上登陆psql"><a href="#3-1-在master上登陆psql" class="headerlink" title="3.1 在master上登陆psql"></a>3.1 在master上登陆psql</h3><p>查看状态:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select client_addr,sync_state from pg_stat_replication;</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/postgresql+pgpool双机热备-高可用/1593573343685.png" alt="4"></p>
<h3 id="3-2-创建test库"><a href="#3-2-创建test库" class="headerlink" title="3.2 创建test库"></a>3.2 创建test库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-slave上登陆psql"><a href="#3-3-slave上登陆psql" class="headerlink" title="3.3 slave上登陆psql"></a>3.3 slave上登陆psql</h3><p>查看库<br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/1/postgresql+pgpool双机热备-高可用/1593573376311.png" alt="5"></p>
<p>发现已同步。</p>
<h2 id="4-主从切换及恢复"><a href="#4-主从切换及恢复" class="headerlink" title="4 主从切换及恢复"></a>4 主从切换及恢复</h2><h3 id="4-1-模拟主故障"><a href="#4-1-模拟主故障" class="headerlink" title="4.1 模拟主故障"></a>4.1 模拟主故障</h3><p>关闭postgresql</p>
<h3 id="4-2-升级从库为主库"><a href="#4-2-升级从库为主库" class="headerlink" title="4.2 升级从库为主库"></a>4.2 升级从库为主库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test3 <span class="built_in">log</span>]<span class="comment"># su postgres</span></span><br><span class="line">bash-4.2$ /usr/pgsql-10/bin/pg_ctl promote -D /pgdata</span><br><span class="line">waiting <span class="keyword">for</span> server to promote.... 完成</span><br><span class="line">server promoted</span><br><span class="line">bash-4.2$</span><br></pre></td></tr></table></figure>
<p>升级主库后，<code>recovery.conf</code> 会变成<code>recovery.done</code>， 配置文件失效</p>
<h3 id="4-3-通过pg-rewind命令同步数据，主库变成从库"><a href="#4-3-通过pg-rewind命令同步数据，主库变成从库" class="headerlink" title="4.3 通过pg_rewind命令同步数据，主库变成从库"></a>4.3 通过pg_rewind命令同步数据，主库变成从库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test2 <span class="built_in">log</span>]<span class="comment"># su postgres</span></span><br><span class="line"><span class="comment"># 同步主库（原备库）数据   ！！！ 同步前，本地postgresl要处于关闭状态</span></span><br><span class="line">bash-4.2$ /usr/pgsql-10/bin/pg_rewind --target-pgdata=/pgdata --<span class="built_in">source</span>-server=<span class="string">'host=192.168.0.58  port=5432 user=postgres password=zhjx123 dbname=postgres'</span> -P               </span><br><span class="line"> </span><br><span class="line">.....</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"pg_wal/00000003000000000000000E"</span>, offset 10000000, size 1000000</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"pg_wal/00000003000000000000000E"</span>, offset 11000000, size 1000000</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"pg_wal/00000003000000000000000E"</span>, offset 12000000, size 1000000</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"pg_wal/00000003000000000000000E"</span>, offset 13000000, size 1000000</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"pg_wal/00000003000000000000000E"</span>, offset 14000000, size 1000000</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"pg_wal/00000003000000000000000E"</span>, offset 15000000, size 1000000</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"pg_wal/00000003000000000000000E"</span>, offset 16000000, size 777216</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"pg_xact/0000"</span>, offset 0, size 8192</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"postgresql.auto.conf"</span>, offset 0, size 88</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"postgresql.conf"</span>, offset 0, size 23826</span><br><span class="line">received chunk <span class="keyword">for</span> file <span class="string">"recovery.done"</span>, offset 0, size 5986</span><br><span class="line">已复制100084/100084 kB (100%)</span><br><span class="line">正在创建备份标签并且更新控制文件</span><br><span class="line">正在同步目标数据目录</span><br><span class="line">同步数据到磁盘...成功</span><br><span class="line">完成！</span><br><span class="line">bash-4.2$ su root</span><br><span class="line">[root@test2 pgdata]<span class="comment"># ls</span></span><br><span class="line">backup_label.old  <span class="built_in">log</span>           pg_ident.conf  pg_replslot   pg_stat_tmp  PG_VERSION            postgresql.conf</span><br><span class="line">base              pg_commit_ts  pg_logical     pg_serial     pg_subtrans  pg_wal                postmaster.opts</span><br><span class="line">current_logfiles  pg_dynshmem   pg_multixact   pg_snapshots  pg_tblspc    pg_xact               postmaster.pid</span><br><span class="line">global            pg_hba.conf   pg_notify      pg_stat       pg_twophase  postgresql.auto.conf  recovery.done</span><br></pre></td></tr></table></figure>
<p> <strong>修改修改recovery.done</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test2 pgdata]<span class="comment"># mv recovery.done recovery.conf</span></span><br></pre></td></tr></table></figure>
<p><strong>修改主库连接地址</strong><br><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/14/postgresql+pgpool双机热备-高可用/1594708530852.png" alt="6"></p>
<p><strong>启动本地数据库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test2 pgdata]<span class="comment"># systemctl start postgresql-10.serivce</span></span><br></pre></td></tr></table></figure>
<h3 id="4-4-检测集群状态"><a href="#4-4-检测集群状态" class="headerlink" title="4.4 检测集群状态"></a>4.4 检测集群状态</h3><p>在主库（原从库）执行查询命令</p>
<p>查看状态:<br>select client_addr,sync_state from pg_stat_replication;</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">postgres=# select client_addr,sync_state from pg_stat_replication;</span><br><span class="line">client_addr | sync_state</span><br><span class="line"><span class="comment">--------------+------------</span></span><br><span class="line">192.168.0.56| async</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">postgres=#</span><br></pre></td></tr></table></figure>
<h1 id="四、配置pgpool-经测试不稳定"><a href="#四、配置pgpool-经测试不稳定" class="headerlink" title="四、配置pgpool (经测试不稳定)"></a>四、配置pgpool (经测试不稳定)</h1><p>参考：<a href="https://www.jianshu.com/p/ef183d0a9213" target="_blank" rel="noopener">https://www.jianshu.com/p/ef183d0a9213</a><br>pgpool-II是PostgreSQL服务器之间一种有效的中间件和PostgreSQL数据库客户端。它提供了以下功能。<br><strong>连接池</strong><br>pgpool-II保存到PostgreSQL服务器的连接，当一个相同新连接(如用户名、数据库、协议版本)进来时，重用他们。它减少了连接开销，提高了系统的整体吞吐量。<br><strong>复制</strong><br>pgpool-II可以管理多个PostgreSQL服务器。使用复制功能可以使2个或更多的物理磁盘上创建一个实时备份，这样服务不会因服务器的磁盘故障而中断。<br><strong>负载平衡</strong><br>如果数据库是复制的，在任何服务器上执行一个SELECT查询会返回相同的结果。pgpool-II复制特性的优势在于减少每个PostgreSQL服务器上的负载，因为它可以使用分布在多个服务器之间进行SELECT查询，从而提高系统的整体吞吐量。最好是查询和PostgreSQL服务器数量成一定比例，多用户同时执行多查询达到负载均衡最好的效果。<br><strong>限制连接数</strong><br>PostgreSQL的最大并发连接数有一定限制的，当超过限制的连接数后，连接会被拒绝。然而，设置增加最大连接数又会增加资源消耗，影响系统性能。pgpool-II也有最大连接数限制，但超过的连接进来时是进行立即排队，而不是返回一个错误。<br>pgpool-II交互PostgreSQL的后端和前端协议时，起着继电器的作用。因此，数据库应用程序(前端)认为pgpool-II是真实的PostgreSQL服务器，服务器(后端)认为pgpool-II是它的客户端之一。因为pgpool-II在服务器和客户端是透明的，所以pgpool-II可以使用现有的数据库应用程序而做到几乎不修改它们。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/14/postgresql+pgpool双机热备-高可用/1594708811406.png" alt="7"></p>
<h2 id="1-各节点免密登录"><a href="#1-各节点免密登录" class="headerlink" title="1 各节点免密登录"></a>1 各节点免密登录</h2><p>关闭系统selinux防火墙，否则失败，同事修改SSH免密登录，使配置支持。<br>安装之前先配置密钥使master和slave这两台虚拟机的postgres用户能免密连接,</p>
<p>先修改postgres的密码，在root用户下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd postgres</span><br><span class="line"><span class="comment"># 新密码 123456</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Master到slave1的免密码登陆：</span></span><br><span class="line"><span class="comment"># 在master上切换至postgres用户，生成密钥</span></span><br><span class="line">su postgres ssh-keygen -t rsa</span><br><span class="line">然后全输入回车</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 切换到postgres用户：</span></span><br><span class="line">su postgres ssh-copy-id -i /var/lib/pgsql/.ssh/id_rsa 192.168.0.58</span><br><span class="line">然后ssh 192.168.0.58 成功，实现master到slave的免密码登陆</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># Slave1到master的免密码登陆：</span></span><br><span class="line">流程同上</span><br></pre></td></tr></table></figure>
<h2 id="2-安装pgpool（主从节点都安装）"><a href="#2-安装pgpool（主从节点都安装）" class="headerlink" title="2 安装pgpool（主从节点都安装）"></a>2 安装pgpool（主从节点都安装）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install pgpool-II-10.x86_64</span><br></pre></td></tr></table></figure>
<h2 id="3-配置（主从节点均配置）"><a href="#3-配置（主从节点均配置）" class="headerlink" title="3 配置（主从节点均配置）"></a>3 配置（主从节点均配置）</h2><h3 id="3-1-配置pool-hba-conf"><a href="#3-1-配置pool-hba-conf" class="headerlink" title="3.1 配置pool_hba.conf"></a>3.1 配置pool_hba.conf</h3><p>pool_hba.conf是对登录用户进行验证的，要和pg的pg_hba.conf保持一致，要么都是trust，要么都是md5验证方式，这里采用了md5验证方式如下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[postgres@master ~]$ <span class="built_in">cd</span> /opt/pgpool/etc</span><br><span class="line">[postgres@etc~]$ cp pool_hba.conf.sample pool_hba.conf</span><br><span class="line">[postgres@etc~]$ vim pool_hba.conf</span><br><span class="line"><span class="comment">#编辑内容如下</span></span><br><span class="line"><span class="comment"># "local" is for Unix domain socket connections only</span></span><br><span class="line"><span class="built_in">local</span>   all         all                           md5</span><br><span class="line"><span class="comment"># IPv4 local connections:</span></span><br><span class="line">host    all         all         0.0.0.0/0            md5</span><br><span class="line">host    all         all         0/0                md5</span><br></pre></td></tr></table></figure>
<h3 id="3-2-配置pcp-conf"><a href="#3-2-配置pcp-conf" class="headerlink" title="3.2 配置pcp.conf"></a>3.2 配置pcp.conf</h3><p>pcp.conf配置用于pgpool自己登陆管理使用的，一些操作pgpool的工具会要求提供密码等，配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[postgres@master ~]$ <span class="built_in">cd</span> /etc/pgpool-II-10</span><br><span class="line">[postgres@etc~]$ cp pcp.conf.sample pcp.conf</span><br><span class="line"><span class="comment"># 使用pg_md5生成配置的用户名密码，nariadmin 是pgpool的用户密码，随意自定义</span></span><br><span class="line">[postgres@etc~]$ pg_md5 nariadmin   </span><br><span class="line">6b07583ba8af8e03043a1163147faf6a</span><br><span class="line"><span class="comment"># pcp.conf是pgpool管理器自己的用户名和密码，用于管理集群。</span></span><br><span class="line">[postgres@etc~]$ vim pcp.conf</span><br><span class="line"><span class="comment"># 编辑内容如下。postgres也是定义的用户，自定义</span></span><br><span class="line">postgres:6b07583ba8af8e03043a1163147faf6a</span><br><span class="line"><span class="comment"># 保存退出！</span></span><br><span class="line"><span class="comment"># 在pgpool中添加pg数据库的用户名和密码</span></span><br><span class="line">[postgres@etc~]$ pg_md5 -p -m -u postgres pool_passwd</span><br><span class="line"><span class="comment"># 数据库登录用户是postgres,这里输入登录密码，不能出错</span></span><br><span class="line"><span class="comment"># 输入密码后，在/etc/pgpool-II-10 目录下会生成一个pool_passwd文件</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3-配置系统命令权限"><a href="#3-3-配置系统命令权限" class="headerlink" title="3.3 配置系统命令权限"></a>3.3 配置系统命令权限</h3><p>配置<code>ifconfig, arping</code> 执行权限 ，执行<code>failover_stream.sh</code>需要用到，可以让其他普通用户执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># chmod u+s /sbin/ifconfig </span></span><br><span class="line">[root@master ~]<span class="comment"># chmod u+s /usr/sbin</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/2020/7/14/postgresql+pgpool双机热备-高可用/1594709270433.png" alt="8"></p>
<h3 id="3-4-配置master上的pgpool-conf"><a href="#3-4-配置master上的pgpool-conf" class="headerlink" title="3.4 配置master上的pgpool.conf"></a>3.4 配置master上的pgpool.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[postgres@master ~]$ <span class="built_in">cd</span> /opt/pgpool/etc</span><br><span class="line">[postgres@etc~]$ cp pgpool.conf.sample pgpool.conf</span><br><span class="line">[postgres@etc~]$ vim pgpool.conf</span><br></pre></td></tr></table></figure>
<p>编辑内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># pgPool-II configuration file</span></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file consists of lines of the form:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   name = value</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Whitespace may be used.  Comments are introduced with "#" anywhere on a line.</span></span><br><span class="line"><span class="comment"># The complete list of parameter names and allowed values can be found in the</span></span><br><span class="line"><span class="comment"># pgPool-II documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file is read on server startup and when the server receives a SIGHUP</span></span><br><span class="line"><span class="comment"># signal.  If you edit the file on a running system, you have to SIGHUP the</span></span><br><span class="line"><span class="comment"># server for the changes to take effect, or use "pgpool reload".  Some</span></span><br><span class="line"><span class="comment"># parameters, which are marked below, require a server shutdown and restart to</span></span><br><span class="line"><span class="comment"># take effect.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># CONNECTIONS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - pgpool Connection Settings -</span></span><br><span class="line"><span class="comment"># 修改监听</span></span><br><span class="line">listen_addresses = <span class="string">'*'</span></span><br><span class="line">                                   <span class="comment"># Host name or IP address to listen on:</span></span><br><span class="line">                                   <span class="comment"># '*' for all, '' for no TCP/IP connections</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">port = 9999</span><br><span class="line">                                   <span class="comment"># Port number</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">socket_dir = <span class="string">'/tmp'</span></span><br><span class="line">                                   <span class="comment"># Unix domain socket path</span></span><br><span class="line">                                   <span class="comment"># The Debian package defaults to</span></span><br><span class="line">                                   <span class="comment"># /var/run/postgresql</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">listen_backlog_multiplier = 2</span><br><span class="line">                                   <span class="comment"># Set the backlog parameter of listen(2) to</span></span><br><span class="line">                                   <span class="comment"># num_init_children * listen_backlog_multiplier.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">serialize_accept = off</span><br><span class="line">                                   <span class="comment"># whether to serialize accept() call to avoid thundering herd problem</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">reserved_connections = 0</span><br><span class="line">                                   <span class="comment"># Number of reserved connections.</span></span><br><span class="line">                                   <span class="comment"># Pgpool-II does not accept connections if over</span></span><br><span class="line">                                   <span class="comment"># num_init_chidlren - reserved_connections.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - pgpool Communication Manager Connection Settings -</span></span><br><span class="line"><span class="comment"># 修改监听</span></span><br><span class="line">pcp_listen_addresses = <span class="string">'*'</span></span><br><span class="line">                                   <span class="comment"># Host name or IP address for pcp process to listen on:</span></span><br><span class="line">                                   <span class="comment"># '*' for all, '' for no TCP/IP connections</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">pcp_port = 9898</span><br><span class="line">                                   <span class="comment"># Port number for pcp</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">pcp_socket_dir = <span class="string">'/tmp'</span></span><br><span class="line">                                   <span class="comment"># Unix domain socket path for pcp</span></span><br><span class="line">                                   <span class="comment"># The Debian package defaults to</span></span><br><span class="line">                                   <span class="comment"># /var/run/postgresql</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Backend Connection Settings -</span></span><br><span class="line"><span class="comment"># pgpool集群后端主机信息</span></span><br><span class="line"><span class="comment"># 修改为本端主机名，要在hosts中加入解析</span></span><br><span class="line">backend_hostname0 = <span class="string">'test2'</span></span><br><span class="line">                                   <span class="comment"># Host name or IP address to connect to for backend 0</span></span><br><span class="line">backend_port0 = 5432</span><br><span class="line">                                   <span class="comment"># Port number for backend 0</span></span><br><span class="line">backend_weight0 = 1</span><br><span class="line">                                   <span class="comment"># Weight for backend 0 (only in load balancing mode)</span></span><br><span class="line"><span class="comment"># 修改postgresql的数据目录</span></span><br><span class="line">backend_data_directory0 = <span class="string">'/pgdata'</span></span><br><span class="line">                                   <span class="comment"># Data directory for backend 0</span></span><br><span class="line">backend_flag0 = <span class="string">'ALLOW_TO_FAILOVER'</span></span><br><span class="line">                                   <span class="comment"># Controls various backend behavior</span></span><br><span class="line">                                   <span class="comment"># ALLOW_TO_FAILOVER, DISALLOW_TO_FAILOVER</span></span><br><span class="line">                                   <span class="comment"># or ALWAYS_MASTER</span></span><br><span class="line"><span class="comment"># 添加内容，</span></span><br><span class="line">backend_hostname1 = <span class="string">'test3'</span></span><br><span class="line">backend_port1 = 5432</span><br><span class="line">backend_weight1 = 1</span><br><span class="line">backend_data_directory1 = <span class="string">'/pgdata'</span></span><br><span class="line">backend_flag1 = <span class="string">'ALLOW_TO_FAILOVER'</span></span><br><span class="line"><span class="comment"># 添加结束</span></span><br><span class="line"></span><br><span class="line">backend_application_name0 = <span class="string">'server0'</span></span><br><span class="line">                                   <span class="comment"># walsender's application_name, used for "show pool_nodes" command</span></span><br><span class="line"><span class="comment">#backend_hostname1 = 'host2'</span></span><br><span class="line"><span class="comment">#backend_port1 = 5433</span></span><br><span class="line"><span class="comment">#backend_weight1 = 1</span></span><br><span class="line"><span class="comment">#backend_data_directory1 = '/data1'</span></span><br><span class="line"><span class="comment">#backend_flag1 = 'ALLOW_TO_FAILOVER'</span></span><br><span class="line"><span class="comment">#backend_application_name1 = 'server1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Authentication -</span></span><br><span class="line"><span class="comment"># 激活pgpool认证方式</span></span><br><span class="line">enable_pool_hba = on</span><br><span class="line">                                   <span class="comment"># Use pool_hba.conf for client authentication</span></span><br><span class="line">pool_passwd = <span class="string">'pool_passwd'</span></span><br><span class="line">                                   <span class="comment"># File name of pool_passwd for md5 authentication.</span></span><br><span class="line">                                   <span class="comment"># "" disables pool_passwd.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">authentication_timeout = 60</span><br><span class="line">                                   <span class="comment"># Delay in seconds to complete client authentication</span></span><br><span class="line">                                   <span class="comment"># 0 means no timeout.</span></span><br><span class="line"></span><br><span class="line">allow_clear_text_frontend_auth = off</span><br><span class="line">                                   <span class="comment"># Allow Pgpool-II to use clear text password authentication</span></span><br><span class="line">                                   <span class="comment"># with clients, when pool_passwd does not</span></span><br><span class="line">                                   <span class="comment"># contain the user password</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># - SSL Connections -</span></span><br><span class="line"></span><br><span class="line">ssl = off</span><br><span class="line">                                   <span class="comment"># Enable SSL support</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#ssl_key = './server.key'</span></span><br><span class="line">                                   <span class="comment"># Path to the SSL private key file</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#ssl_cert = './server.cert'</span></span><br><span class="line">                                   <span class="comment"># Path to the SSL public certificate file</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#ssl_ca_cert = ''</span></span><br><span class="line">                                   <span class="comment"># Path to a single PEM format file</span></span><br><span class="line">                                   <span class="comment"># containing CA root certificate(s)</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#ssl_ca_cert_dir = ''</span></span><br><span class="line">                                   <span class="comment"># Directory containing CA root certificate(s)</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">ssl_ciphers = <span class="string">'HIGH:MEDIUM:+3DES:!aNULL'</span></span><br><span class="line">                                   <span class="comment"># Allowed SSL ciphers</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">ssl_prefer_server_ciphers = off</span><br><span class="line">                                   <span class="comment"># Use server's SSL cipher preferences,</span></span><br><span class="line">                                   <span class="comment"># rather than the client's</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">ssl_ecdh_curve = <span class="string">'prime256v1'</span></span><br><span class="line">                                   <span class="comment"># Name of the curve to use in ECDH key exchange</span></span><br><span class="line">ssl_dh_params_file = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Name of the file containing Diffie-Hellman parameters used</span></span><br><span class="line">                                   <span class="comment"># for so-called ephemeral DH family of SSL cipher.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># POOLS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Concurrent session and pool size -</span></span><br><span class="line"></span><br><span class="line">num_init_children = 32</span><br><span class="line">                                   <span class="comment"># Number of concurrent sessions allowed</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">max_pool = 4</span><br><span class="line">                                   <span class="comment"># Number of connection pool caches per connection</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Life time -</span></span><br><span class="line"></span><br><span class="line">child_life_time = 300</span><br><span class="line">                                   <span class="comment"># Pool exits after being idle for this many seconds</span></span><br><span class="line">child_max_connections = 0</span><br><span class="line">                                   <span class="comment"># Pool exits after receiving that many connections</span></span><br><span class="line">                                   <span class="comment"># 0 means no exit</span></span><br><span class="line">connection_life_time = 0</span><br><span class="line">                                   <span class="comment"># Connection to backend closes after being idle for this many seconds</span></span><br><span class="line">                                   <span class="comment"># 0 means no close</span></span><br><span class="line">client_idle_limit = 0</span><br><span class="line">                                   <span class="comment"># Client is disconnected after being idle for that many seconds</span></span><br><span class="line">                                   <span class="comment"># (even inside an explicit transactions!)</span></span><br><span class="line">                                   <span class="comment"># 0 means no disconnection</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># LOGS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Where to log -</span></span><br><span class="line"></span><br><span class="line">log_destination = <span class="string">'stderr'</span></span><br><span class="line">                                   <span class="comment"># Where to log</span></span><br><span class="line">                                   <span class="comment"># Valid values are combinations of stderr,</span></span><br><span class="line">                                   <span class="comment"># and syslog. Default to stderr.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - What to log -</span></span><br><span class="line"></span><br><span class="line">log_line_prefix = <span class="string">'%t: pid %p: '</span>   <span class="comment"># printf-style string to output at beginning of each log line.</span></span><br><span class="line"></span><br><span class="line">log_connections = off</span><br><span class="line">                                   <span class="comment"># Log connections</span></span><br><span class="line">log_hostname = off</span><br><span class="line">                                   <span class="comment"># Hostname will be shown in ps status</span></span><br><span class="line">                                   <span class="comment"># and in logs if connections are logged</span></span><br><span class="line">log_statement = off</span><br><span class="line">                                   <span class="comment"># Log all statements</span></span><br><span class="line">log_per_node_statement = off</span><br><span class="line">                                   <span class="comment"># Log all statements</span></span><br><span class="line">                                   <span class="comment"># with node and backend informations</span></span><br><span class="line">log_client_messages = off</span><br><span class="line">                                   <span class="comment"># Log any client messages</span></span><br><span class="line">log_standby_delay = <span class="string">'none'</span></span><br><span class="line">                                   <span class="comment"># Log standby delay</span></span><br><span class="line">                                   <span class="comment"># Valid values are combinations of always,</span></span><br><span class="line">                                   <span class="comment"># if_over_threshold, none</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Syslog specific -</span></span><br><span class="line"></span><br><span class="line">syslog_facility = <span class="string">'LOCAL0'</span></span><br><span class="line">                                   <span class="comment"># Syslog local facility. Default to LOCAL0</span></span><br><span class="line">syslog_ident = <span class="string">'pgpool'</span></span><br><span class="line">                                   <span class="comment"># Syslog program identification string</span></span><br><span class="line">                                   <span class="comment"># Default to 'pgpool'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Debug -</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log_error_verbosity = default          # terse, default, or verbose messages</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#client_min_messages = notice           # values in order of decreasing detail:</span></span><br><span class="line">                                        <span class="comment">#   debug5</span></span><br><span class="line">                                        <span class="comment">#   debug4</span></span><br><span class="line">                                        <span class="comment">#   debug3</span></span><br><span class="line">                                        <span class="comment">#   debug2</span></span><br><span class="line">                                        <span class="comment">#   debug1</span></span><br><span class="line">                                        <span class="comment">#   log</span></span><br><span class="line">                                        <span class="comment">#   notice</span></span><br><span class="line">                                        <span class="comment">#   warning</span></span><br><span class="line">                                        <span class="comment">#   error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log_min_messages = warning             # values in order of decreasing detail:</span></span><br><span class="line">                                        <span class="comment">#   debug5</span></span><br><span class="line">                                        <span class="comment">#   debug4</span></span><br><span class="line">                                        <span class="comment">#   debug3</span></span><br><span class="line">                                        <span class="comment">#   debug2</span></span><br><span class="line">                                        <span class="comment">#   debug1</span></span><br><span class="line">                                        <span class="comment">#   info</span></span><br><span class="line">                                        <span class="comment">#   notice</span></span><br><span class="line">                                        <span class="comment">#   warning</span></span><br><span class="line">                                        <span class="comment">#   error</span></span><br><span class="line">                                        <span class="comment">#   log</span></span><br><span class="line">                                        <span class="comment">#   fatal</span></span><br><span class="line">                                        <span class="comment">#   panic</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># FILE LOCATIONS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># pid文件路径  这里不做修改</span></span><br><span class="line">pid_file_name = <span class="string">'/var/run/pgpool-II-10/pgpool.pid'</span></span><br><span class="line">                                   <span class="comment"># PID file name</span></span><br><span class="line">                                   <span class="comment"># Can be specified as relative to the"</span></span><br><span class="line">                                   <span class="comment"># location of pgpool.conf file or</span></span><br><span class="line">                                   <span class="comment"># as an absolute path</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># pgpool集群状态信息文件，这里保持默认</span></span><br><span class="line">logdir = <span class="string">'/var/log/pgpool-II-10'</span></span><br><span class="line">                                   <span class="comment"># Directory of pgPool status file</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># CONNECTION POOLING</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">connection_cache = on</span><br><span class="line">                                   <span class="comment"># Activate connection pools</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">                                   <span class="comment"># Semicolon separated list of queries</span></span><br><span class="line">                                   <span class="comment"># to be issued at the end of a session</span></span><br><span class="line">                                   <span class="comment"># The default is for 8.3 and later</span></span><br><span class="line">reset_query_list = <span class="string">'ABORT; DISCARD ALL'</span></span><br><span class="line">                                   <span class="comment"># The following one is for 8.2 and before</span></span><br><span class="line"><span class="comment">#reset_query_list = 'ABORT; RESET ALL; SET SESSION AUTHORIZATION DEFAULT'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># REPLICATION MODE</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 复制模式保持关闭</span></span><br><span class="line">replication_mode = off</span><br><span class="line">                                   <span class="comment"># Activate replication mode</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">replicate_select = off</span><br><span class="line">                                   <span class="comment"># Replicate SELECT statements</span></span><br><span class="line">                                   <span class="comment"># when in replication mode</span></span><br><span class="line">                                   <span class="comment"># replicate_select is higher priority than</span></span><br><span class="line">                                   <span class="comment"># load_balance_mode.</span></span><br><span class="line"></span><br><span class="line">insert_lock = on</span><br><span class="line">                                   <span class="comment"># Automatically locks a dummy row or a table</span></span><br><span class="line">                                   <span class="comment"># with INSERT statements to keep SERIAL data</span></span><br><span class="line">                                   <span class="comment"># consistency</span></span><br><span class="line">                                   <span class="comment"># Without SERIAL, no lock will be issued</span></span><br><span class="line">lobj_lock_table = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># When rewriting lo_creat command in</span></span><br><span class="line">                                   <span class="comment"># replication mode, specify table name to</span></span><br><span class="line">                                   <span class="comment"># lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Degenerate handling -</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">replication_stop_on_mismatch = off</span><br><span class="line">                                   <span class="comment"># On disagreement with the packet kind</span></span><br><span class="line">                                   <span class="comment"># sent from backend, degenerate the node</span></span><br><span class="line">                                   <span class="comment"># which is most likely "minority"</span></span><br><span class="line">                                   <span class="comment"># If off, just force to exit this session</span></span><br><span class="line"></span><br><span class="line">failover_if_affected_tuples_mismatch = off</span><br><span class="line">                                   <span class="comment"># On disagreement with the number of affected</span></span><br><span class="line">                                   <span class="comment"># tuples in UPDATE/DELETE queries, then</span></span><br><span class="line">                                   <span class="comment"># degenerate the node which is most likely</span></span><br><span class="line">                                   <span class="comment"># "minority".</span></span><br><span class="line">                                   <span class="comment"># If off, just abort the transaction to</span></span><br><span class="line">                                   <span class="comment"># keep the consistency</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># LOAD BALANCING MODE</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 激活负载均衡模式</span></span><br><span class="line">load_balance_mode = on</span><br><span class="line">                                   <span class="comment"># Activate load balancing mode</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">ignore_leading_white_space = on</span><br><span class="line">                                   <span class="comment"># Ignore leading white spaces of each query</span></span><br><span class="line">white_function_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Comma separated list of function names</span></span><br><span class="line">                                   <span class="comment"># that don't write to database</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br><span class="line">black_function_list = <span class="string">'currval,lastval,nextval,setval'</span></span><br><span class="line">                                   <span class="comment"># Comma separated list of function names</span></span><br><span class="line">                                   <span class="comment"># that write to database</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br><span class="line"></span><br><span class="line">black_query_pattern_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Semicolon separated list of query patterns</span></span><br><span class="line">                                   <span class="comment"># that should be sent to primary node</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br><span class="line">                                   <span class="comment"># valid for streaming replicaton mode only.</span></span><br><span class="line"></span><br><span class="line">database_redirect_preference_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># comma separated list of pairs of database and node id.</span></span><br><span class="line">                                   <span class="comment"># example: postgres:primary,mydb[0-4]:1,mydb[5-9]:2'</span></span><br><span class="line">                                   <span class="comment"># valid for streaming replicaton mode only.</span></span><br><span class="line">app_name_redirect_preference_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># comma separated list of pairs of app name and node id.</span></span><br><span class="line">                                   <span class="comment"># example: 'psql:primary,myapp[0-4]:1,myapp[5-9]:standby'</span></span><br><span class="line">                                   <span class="comment"># valid for streaming replicaton mode only.</span></span><br><span class="line">allow_sql_comments = off</span><br><span class="line">                                   <span class="comment"># if on, ignore SQL comments when judging if load balance or</span></span><br><span class="line">                                   <span class="comment"># query cache is possible.</span></span><br><span class="line">                                   <span class="comment"># If off, SQL comments effectively prevent the judgment</span></span><br><span class="line">                                   <span class="comment"># (pre 3.4 behavior).</span></span><br><span class="line"></span><br><span class="line">disable_load_balance_on_write = <span class="string">'transaction'</span></span><br><span class="line">                                   <span class="comment"># Load balance behavior when write query is issued</span></span><br><span class="line">                                   <span class="comment"># in an explicit transaction.</span></span><br><span class="line">                                   <span class="comment"># Note that any query not in an explicit transaction</span></span><br><span class="line">                                   <span class="comment"># is not affected by the parameter.</span></span><br><span class="line">                                   <span class="comment"># 'transaction' (the default): if a write query is issued,</span></span><br><span class="line">                                   <span class="comment"># subsequent read queries will not be load balanced</span></span><br><span class="line">                                   <span class="comment"># until the transaction ends.</span></span><br><span class="line">                                   <span class="comment"># 'trans_transaction': if a write query is issued,</span></span><br><span class="line">                                   <span class="comment"># subsequent read queries in an explicit transaction</span></span><br><span class="line">                                   <span class="comment"># will not be load balanced until the session ends.</span></span><br><span class="line">                                   <span class="comment"># 'always': if a write query is issued, read queries will</span></span><br><span class="line">                                   <span class="comment"># not be load balanced until the session ends.</span></span><br><span class="line"></span><br><span class="line">statement_level_load_balance = off</span><br><span class="line">                                   <span class="comment"># Enables statement level load balancing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># MASTER/SLAVE MODE</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 激活主从模式</span></span><br><span class="line">master_slave_mode = on</span><br><span class="line">                                   <span class="comment"># Activate master/slave mode</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">master_slave_sub_mode = <span class="string">'stream'</span></span><br><span class="line">                                   <span class="comment"># Master/slave sub mode</span></span><br><span class="line">                                   <span class="comment"># Valid values are combinations stream, slony</span></span><br><span class="line">                                   <span class="comment"># or logical. Default is stream.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Streaming -</span></span><br><span class="line"><span class="comment"># 流复制检查周期</span></span><br><span class="line">sr_check_period = 5</span><br><span class="line">                                   <span class="comment"># Streaming replication check period</span></span><br><span class="line">                                   <span class="comment"># Disabled (0) by default</span></span><br><span class="line"><span class="comment"># 流复制检查用户，replica是数据库的用户</span></span><br><span class="line">sr_check_user = <span class="string">'replica'</span></span><br><span class="line">                                   <span class="comment"># Streaming replication check user</span></span><br><span class="line">                                   <span class="comment"># This is necessary even if you disable</span></span><br><span class="line">                                   <span class="comment"># streaming replication delay check with</span></span><br><span class="line">                                   <span class="comment"># sr_check_period = 0</span></span><br><span class="line"><span class="comment"># 流复制检查用户密码</span></span><br><span class="line">sr_check_password = <span class="string">'replica'</span></span><br><span class="line">                                   <span class="comment"># Password for streaming replication check user.</span></span><br><span class="line">                                   <span class="comment"># Leaving it empty will make Pgpool-II to first look for the</span></span><br><span class="line">                                   <span class="comment"># Password in pool_passwd file before using the empty password</span></span><br><span class="line"><span class="comment"># 流复制检查数据库</span></span><br><span class="line">sr_check_database = <span class="string">'postgres'</span></span><br><span class="line">                                   <span class="comment"># Database name for streaming replication check</span></span><br><span class="line">delay_threshold = 0</span><br><span class="line">                                   <span class="comment"># Threshold before not dispatching query to standby node</span></span><br><span class="line">                                   <span class="comment"># Unit is in bytes</span></span><br><span class="line">                                   <span class="comment"># Disabled (0) by default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Special commands -</span></span><br><span class="line"></span><br><span class="line">follow_master_command = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Executes this command after master failover</span></span><br><span class="line">                                   <span class="comment"># Special values:</span></span><br><span class="line">                                   <span class="comment">#   %d = failed node id</span></span><br><span class="line">                                   <span class="comment">#   %h = failed node host name</span></span><br><span class="line">                                   <span class="comment">#   %p = failed node port number</span></span><br><span class="line">                                   <span class="comment">#   %D = failed node database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %m = new master node id</span></span><br><span class="line">                                   <span class="comment">#   %H = new master node hostname</span></span><br><span class="line">                                   <span class="comment">#   %M = old master node id</span></span><br><span class="line">                                   <span class="comment">#   %P = old primary node id</span></span><br><span class="line">                                   <span class="comment">#   %r = new master port number</span></span><br><span class="line">                                   <span class="comment">#   %R = new master database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %N = old primary node hostname</span></span><br><span class="line">                                   <span class="comment">#   %S = old primary node port number</span></span><br><span class="line">                                   <span class="comment">#   %% = '%' character</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># HEALTH CHECK GLOBAL PARAMETERS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 激活健康检查，周期10s</span></span><br><span class="line">health_check_period = 10</span><br><span class="line">                                   <span class="comment"># Health check period</span></span><br><span class="line">                                   <span class="comment"># Disabled (0) by default</span></span><br><span class="line">health_check_timeout = 20</span><br><span class="line">                                   <span class="comment"># Health check timeout</span></span><br><span class="line">                                   <span class="comment"># 0 means no timeout</span></span><br><span class="line"><span class="comment"># 健康检查用户，数据库管理员用户</span></span><br><span class="line">health_check_user = <span class="string">'postgres'</span></span><br><span class="line">                                   <span class="comment"># Health check user</span></span><br><span class="line"><span class="comment"># 健康检查用户密码</span></span><br><span class="line">health_check_password = <span class="string">'zhjx123'</span></span><br><span class="line">                                   <span class="comment"># Password for health check user</span></span><br><span class="line">                                   <span class="comment"># Leaving it empty will make Pgpool-II to first look for the</span></span><br><span class="line">                                   <span class="comment"># Password in pool_passwd file before using the empty password</span></span><br><span class="line"><span class="comment"># 健康检查数据库</span></span><br><span class="line"><span class="comment"># 必须设置，否则primary数据库down了，pgpool不知道，不能及时切换。从库流复制还在连接数据，报连接失败。</span></span><br><span class="line"><span class="comment"># 只有下次使用pgpool登录时，发现连接不上，然后报错，这时候，才知道挂了，pgpool进行切换。</span></span><br><span class="line">health_check_database = <span class="string">'postgres'</span></span><br><span class="line">                                   <span class="comment"># Database name for health check. If '', tries 'postgres' frist, then 'template1'</span></span><br><span class="line"></span><br><span class="line">health_check_max_retries = 0</span><br><span class="line">                                   <span class="comment"># Maximum number of times to retry a failed health check before giving up.</span></span><br><span class="line">health_check_retry_delay = 1</span><br><span class="line">                                   <span class="comment"># Amount of time to wait (in seconds) between retries.</span></span><br><span class="line">connect_timeout = 10000</span><br><span class="line">                                   <span class="comment"># Timeout value in milliseconds before giving up to connect to backend.</span></span><br><span class="line">                                   <span class="comment"># Default is 10000 ms (10 second). Flaky network user may want to increase</span></span><br><span class="line">                                   <span class="comment"># the value. 0 means no timeout.</span></span><br><span class="line">                                   <span class="comment"># Note that this value is not only used for health check,</span></span><br><span class="line">                                   <span class="comment"># but also for ordinary conection to backend.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># HEALTH CHECK PER NODE PARAMETERS (OPTIONAL)</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#health_check_period0 = 0</span></span><br><span class="line"><span class="comment">#health_check_timeout0 = 20</span></span><br><span class="line"><span class="comment">#health_check_user0 = 'nobody'</span></span><br><span class="line"><span class="comment">#health_check_password0 = ''</span></span><br><span class="line"><span class="comment">#health_check_database0 = ''</span></span><br><span class="line"><span class="comment">#health_check_max_retries0 = 0</span></span><br><span class="line"><span class="comment">#health_check_retry_delay0 = 1</span></span><br><span class="line"><span class="comment">#connect_timeout0 = 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主备切换的命令行配置</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># FAILOVER AND FAILBACK</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 启动故障转移</span></span><br><span class="line"></span><br><span class="line">failover_command = <span class="string">'/etc/pgpool-II-10/failover_stream.sh %H'</span></span><br><span class="line">                                   <span class="comment"># Executes this command at failover</span></span><br><span class="line">                                   <span class="comment"># Special values:</span></span><br><span class="line">                                   <span class="comment">#   %d = failed node id</span></span><br><span class="line">                                   <span class="comment">#   %h = failed node host name</span></span><br><span class="line">                                   <span class="comment">#   %p = failed node port number</span></span><br><span class="line">                                   <span class="comment">#   %D = failed node database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %m = new master node id</span></span><br><span class="line">                                   <span class="comment">#   %H = new master node hostname</span></span><br><span class="line">                                   <span class="comment">#   %M = old master node id</span></span><br><span class="line">                                   <span class="comment">#   %P = old primary node id</span></span><br><span class="line">                                   <span class="comment">#   %r = new master port number</span></span><br><span class="line">                                   <span class="comment">#   %R = new master database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %N = old primary node hostname</span></span><br><span class="line">                                   <span class="comment">#   %S = old primary node port number</span></span><br><span class="line">                                   <span class="comment">#   %% = '%' character</span></span><br><span class="line">failback_command = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Executes this command at failback.</span></span><br><span class="line">                                   <span class="comment"># Special values:</span></span><br><span class="line">                                   <span class="comment">#   %d = failed node id</span></span><br><span class="line">                                   <span class="comment">#   %h = failed node host name</span></span><br><span class="line">                                   <span class="comment">#   %p = failed node port number</span></span><br><span class="line">                                   <span class="comment">#   %D = failed node database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %m = new master node id</span></span><br><span class="line">                                   <span class="comment">#   %H = new master node hostname</span></span><br><span class="line">                                   <span class="comment">#   %M = old master node id</span></span><br><span class="line">                                   <span class="comment">#   %P = old primary node id</span></span><br><span class="line">                                   <span class="comment">#   %r = new master port number</span></span><br><span class="line">                                   <span class="comment">#   %R = new master database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %N = old primary node hostname</span></span><br><span class="line">                                   <span class="comment">#   %S = old primary node port number</span></span><br><span class="line">                                   <span class="comment">#   %% = '%' character</span></span><br><span class="line"></span><br><span class="line">failover_on_backend_error = on</span><br><span class="line">                                   <span class="comment"># Initiates failover when reading/writing to the</span></span><br><span class="line">                                   <span class="comment"># backend communication socket fails</span></span><br><span class="line">                                   <span class="comment"># If set to off, pgpool will report an</span></span><br><span class="line">                                   <span class="comment"># error and disconnect the session.</span></span><br><span class="line"></span><br><span class="line">detach_false_primary = off</span><br><span class="line">                                   <span class="comment"># Detach false primary if on. Only</span></span><br><span class="line">                                   <span class="comment"># valid in streaming replicaton</span></span><br><span class="line">                                   <span class="comment"># mode and with PostgreSQL 9.6 or</span></span><br><span class="line">                                   <span class="comment"># after.</span></span><br><span class="line"></span><br><span class="line">search_primary_node_timeout = 300</span><br><span class="line">                                   <span class="comment"># Timeout in seconds to search for the</span></span><br><span class="line">                                   <span class="comment"># primary node when a failover occurs.</span></span><br><span class="line">                                   <span class="comment"># 0 means no timeout, keep searching</span></span><br><span class="line">                                   <span class="comment"># for a primary node forever.</span></span><br><span class="line"></span><br><span class="line">auto_failback = off</span><br><span class="line">                                   <span class="comment"># Dettached backend node reattach automatically</span></span><br><span class="line">                                   <span class="comment"># if replication_state is 'streaming'.</span></span><br><span class="line">auto_failback_interval = 60</span><br><span class="line">                                   <span class="comment"># Min interval of executing auto_failback in</span></span><br><span class="line">                                   <span class="comment"># seconds.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># ONLINE RECOVERY</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">recovery_user = <span class="string">'nobody'</span></span><br><span class="line">                                   <span class="comment"># Online recovery user</span></span><br><span class="line">recovery_password = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Online recovery password</span></span><br><span class="line">                                   <span class="comment"># Leaving it empty will make Pgpool-II to first look for the</span></span><br><span class="line">                                   <span class="comment"># Password in pool_passwd file before using the empty password</span></span><br><span class="line"></span><br><span class="line">recovery_1st_stage_command = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Executes a command in first stage</span></span><br><span class="line">recovery_2nd_stage_command = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Executes a command in second stage</span></span><br><span class="line">recovery_timeout = 90</span><br><span class="line">                                   <span class="comment"># Timeout in seconds to wait for the</span></span><br><span class="line">                                   <span class="comment"># recovering node's postmaster to start up</span></span><br><span class="line">                                   <span class="comment"># 0 means no wait</span></span><br><span class="line">client_idle_limit_in_recovery = 0</span><br><span class="line">                                   <span class="comment"># Client is disconnected after being idle</span></span><br><span class="line">                                   <span class="comment"># for that many seconds in the second stage</span></span><br><span class="line">                                   <span class="comment"># of online recovery</span></span><br><span class="line">                                   <span class="comment"># 0 means no disconnection</span></span><br><span class="line">                                   <span class="comment"># -1 means immediate disconnection</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># WATCHDOG</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Enabling -</span></span><br><span class="line"><span class="comment"># 激活看门狗</span></span><br><span class="line">use_watchdog = on</span><br><span class="line">                                    <span class="comment"># Activates watchdog</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -Connection to up stream servers -</span></span><br><span class="line"></span><br><span class="line">trusted_servers = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># trusted server list which are used</span></span><br><span class="line">                                    <span class="comment"># to confirm network connection</span></span><br><span class="line">                                    <span class="comment"># (hostA,hostB,hostC,...)</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">ping_path = <span class="string">'/bin'</span></span><br><span class="line">                                    <span class="comment"># ping command path</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Watchdog communication Settings -</span></span><br><span class="line"><span class="comment"># 本端地址</span></span><br><span class="line">wd_hostname = <span class="string">'test2'</span></span><br><span class="line">                                    <span class="comment"># Host name or IP address of this watchdog</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_port = 9000</span><br><span class="line">                                    <span class="comment"># port number for watchdog service</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_priority = 1</span><br><span class="line">                                    <span class="comment"># priority of this watchdog in leader election</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">wd_authkey = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># Authentication key for watchdog communication</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">wd_ipc_socket_dir = <span class="string">'/tmp'</span></span><br><span class="line">                                    <span class="comment"># Unix domain socket path for watchdog IPC socket</span></span><br><span class="line">                                    <span class="comment"># The Debian package defaults to</span></span><br><span class="line">                                    <span class="comment"># /var/run/postgresql</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Virtual IP control Setting -</span></span><br><span class="line"><span class="comment"># 激活虚拟VIP，vip在hosts里面设置解析，否则直接填写ip</span></span><br><span class="line">delegate_IP = <span class="string">'vip'</span></span><br><span class="line">                                    <span class="comment"># delegate IP address</span></span><br><span class="line">                                    <span class="comment"># If this is empty, virtual IP never bring up.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">if_cmd_path = <span class="string">'/sbin'</span></span><br><span class="line">                                    <span class="comment"># path to the directory where if_up/down_cmd exists</span></span><br><span class="line">                                    <span class="comment"># If if_up/down_cmd starts with "/", if_cmd_path will be ignored.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#if_up_cmd = '/usr/bin/sudo /sbin/ip addr add $_IP_$/24 dev eth0 label eth0:0'</span></span><br><span class="line"><span class="comment"># 执行添加vip地址命令</span></span><br><span class="line">if_up_cmd = <span class="string">'/sbin/ifconfig ens192:0 inet $_IP_$ netmask 255.255.254.0'</span></span><br><span class="line">                                    <span class="comment"># startup delegate IP command</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#if_down_cmd = '/usr/bin/sudo /sbin/ip addr del $_IP_$/24 dev eth0'</span></span><br><span class="line"><span class="comment"># 执行删除vip地址命令</span></span><br><span class="line">if_down_cmd = <span class="string">'/sbin/ifconfig ens192:0 down'</span></span><br><span class="line">                                    <span class="comment"># shutdown delegate IP command</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">arping_path = <span class="string">'/usr/sbin'</span></span><br><span class="line">                                    <span class="comment"># arping command path</span></span><br><span class="line">                                    <span class="comment"># If arping_cmd starts with "/", if_cmd_path will be ignored.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">arping_cmd = <span class="string">'/usr/bin/sudo /usr/sbin/arping -U $_IP_$ -w 1 -I ens192'</span></span><br><span class="line">                                    <span class="comment"># arping command</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Behaivor on escalation Setting -</span></span><br><span class="line"></span><br><span class="line">clear_memqcache_on_escalation = on</span><br><span class="line">                                    <span class="comment"># Clear all the query cache on shared memory</span></span><br><span class="line">                                    <span class="comment"># when standby pgpool escalate to active pgpool</span></span><br><span class="line">                                    <span class="comment"># (= virtual IP holder).</span></span><br><span class="line">                                    <span class="comment"># This should be off if client connects to pgpool</span></span><br><span class="line">                                    <span class="comment"># not using virtual IP.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_escalation_command = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># Executes this command at escalation on new active pgpool.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_de_escalation_command = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># Executes this command when master pgpool resigns from being master.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Watchdog consensus settings for failover -</span></span><br><span class="line"></span><br><span class="line">failover_when_quorum_exists = on</span><br><span class="line">                                    <span class="comment"># Only perform backend node failover</span></span><br><span class="line">                                    <span class="comment"># when the watchdog cluster holds the quorum</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">failover_require_consensus = on</span><br><span class="line">                                    <span class="comment"># Perform failover when majority of Pgpool-II nodes</span></span><br><span class="line">                                    <span class="comment"># aggrees on the backend node status change</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">allow_multiple_failover_requests_from_node = off</span><br><span class="line">                                    <span class="comment"># A Pgpool-II node can cast multiple votes</span></span><br><span class="line">                                    <span class="comment"># for building the consensus on failover</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">enable_consensus_with_half_votes = off</span><br><span class="line">                                    <span class="comment"># apply majority rule for consensus and quorum computation</span></span><br><span class="line">                                    <span class="comment"># at 50% of votes in a cluster with even number of nodes.</span></span><br><span class="line">                                    <span class="comment"># when enabled the existence of quorum and consensus</span></span><br><span class="line">                                    <span class="comment"># on failover is resolved after receiving half of the</span></span><br><span class="line">                                    <span class="comment"># total votes in the cluster, otherwise both these</span></span><br><span class="line">                                    <span class="comment"># decisions require at least one more vote than</span></span><br><span class="line">                                    <span class="comment"># half of the total votes.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Lifecheck Setting -</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- common --</span></span><br><span class="line"></span><br><span class="line">wd_monitoring_interfaces_list = <span class="string">''</span>  <span class="comment"># Comma separated list of interfaces names to monitor.</span></span><br><span class="line">                                    <span class="comment"># if any interface from the list is active the watchdog will</span></span><br><span class="line">                                    <span class="comment"># consider the network is fine</span></span><br><span class="line">                                    <span class="comment"># 'any' to enable monitoring on all interfaces except loopback</span></span><br><span class="line">                                    <span class="comment"># '' to disable monitoring</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wd_lifecheck_method = <span class="string">'heartbeat'</span></span><br><span class="line">                                    <span class="comment"># Method of watchdog lifecheck ('heartbeat' or 'query' or 'external')</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_interval = 10</span><br><span class="line">                                    <span class="comment"># lifecheck interval (sec) &gt; 0</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- heartbeat mode --</span></span><br><span class="line"><span class="comment"># 激活心跳侦测</span></span><br><span class="line">wd_heartbeat_port = 9694</span><br><span class="line">                                    <span class="comment"># Port number for receiving heartbeat signal</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_heartbeat_keepalive = 2</span><br><span class="line">                                    <span class="comment"># Interval time of sending heartbeat signal (sec)</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_heartbeat_deadtime = 30</span><br><span class="line">                                    <span class="comment"># Deadtime interval for heartbeat signal (sec)</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># 对端地址</span></span><br><span class="line">heartbeat_destination0 = <span class="string">'test3'</span></span><br><span class="line">                                    <span class="comment"># Host name or IP address of destination 0</span></span><br><span class="line">                                    <span class="comment"># for sending heartbeat signal.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">heartbeat_destination_port0 = 9694 </span><br><span class="line">                                    <span class="comment"># Port number of destination 0 for sending</span></span><br><span class="line">                                    <span class="comment"># heartbeat signal. Usually this is the</span></span><br><span class="line">                                    <span class="comment"># same as wd_heartbeat_port.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># 执行侦测的网卡</span></span><br><span class="line">heartbeat_device0 = <span class="string">'ens192'</span></span><br><span class="line">                                    <span class="comment"># Name of NIC device (such like 'eth0')</span></span><br><span class="line">                                    <span class="comment"># used for sending/receiving heartbeat</span></span><br><span class="line">                                    <span class="comment"># signal to/from destination 0.</span></span><br><span class="line">                                    <span class="comment"># This works only when this is not empty</span></span><br><span class="line">                                    <span class="comment"># and pgpool has root privilege.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#heartbeat_destination1 = 'host0_ip2'</span></span><br><span class="line"><span class="comment">#heartbeat_destination_port1 = 9694</span></span><br><span class="line"><span class="comment">#heartbeat_device1 = ''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- query mode --</span></span><br><span class="line"></span><br><span class="line">wd_life_point = 3</span><br><span class="line">                                    <span class="comment"># lifecheck retry times</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_lifecheck_query = <span class="string">'SELECT 1'</span></span><br><span class="line">                                    <span class="comment"># lifecheck query to pgpool from watchdog</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_lifecheck_dbname = <span class="string">'template1'</span></span><br><span class="line">                                    <span class="comment"># Database name connected for lifecheck</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_lifecheck_user = <span class="string">'nobody'</span></span><br><span class="line">                                    <span class="comment"># watchdog user monitoring pgpools in lifecheck</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_lifecheck_password = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># Password for watchdog user in lifecheck</span></span><br><span class="line">                                    <span class="comment"># Leaving it empty will make Pgpool-II to first look for the</span></span><br><span class="line">                                    <span class="comment"># Password in pool_passwd file before using the empty password</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Other pgpool Connection Settings -</span></span><br><span class="line"><span class="comment"># 激活其他pgpool服务器节点连接信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#other_pgpool_hostname0 = 'host0'</span></span><br><span class="line">other_pgpool_hostname0 = <span class="string">'test3'</span></span><br><span class="line">                                    <span class="comment"># Host name or IP address to connect to for other pgpool 0</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># pgpool连接端口改为9999</span></span><br><span class="line">other_pgpool_port0 = 9999</span><br><span class="line">                                    <span class="comment"># Port number for other pgpool 0</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">other_wd_port0 = 9000</span><br><span class="line">                                    <span class="comment"># Port number for other watchdog 0</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#other_pgpool_hostname1 = 'host1'</span></span><br><span class="line"><span class="comment">#other_pgpool_port1 = 5432</span></span><br><span class="line"><span class="comment">#other_wd_port1 = 9000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># OTHERS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">relcache_expire = 0</span><br><span class="line">                                   <span class="comment"># Life time of relation cache in seconds.</span></span><br><span class="line">                                   <span class="comment"># 0 means no cache expiration(the default).</span></span><br><span class="line">                                   <span class="comment"># The relation cache is used for cache the</span></span><br><span class="line">                                   <span class="comment"># query result against PostgreSQL system</span></span><br><span class="line">                                   <span class="comment"># catalog to obtain various information</span></span><br><span class="line">                                   <span class="comment"># including table structures or if it's a</span></span><br><span class="line">                                   <span class="comment"># temporary table or not. The cache is</span></span><br><span class="line">                                   <span class="comment"># maintained in a pgpool child local memory</span></span><br><span class="line">                                   <span class="comment"># and being kept as long as it survives.</span></span><br><span class="line">                                   <span class="comment"># If someone modify the table by using</span></span><br><span class="line">                                   <span class="comment"># ALTER TABLE or some such, the relcache is</span></span><br><span class="line">                                   <span class="comment"># not consistent anymore.</span></span><br><span class="line">                                   <span class="comment"># For this purpose, cache_expiration</span></span><br><span class="line">                                   <span class="comment"># controls the life time of the cache.</span></span><br><span class="line"></span><br><span class="line">relcache_size = 256</span><br><span class="line">                                   <span class="comment"># Number of relation cache</span></span><br><span class="line">                                   <span class="comment"># entry. If you see frequently:</span></span><br><span class="line">                                   <span class="comment"># "pool_search_relcache: cache replacement happend"</span></span><br><span class="line">                                   <span class="comment"># in the pgpool log, you might want to increate this number.</span></span><br><span class="line"></span><br><span class="line">check_temp_table = catalog</span><br><span class="line">                                   <span class="comment"># Temporary table check method. catalog, trace or none.</span></span><br><span class="line">                                   <span class="comment"># Default is catalog.</span></span><br><span class="line"></span><br><span class="line">check_unlogged_table = on</span><br><span class="line">                                   <span class="comment"># If on, enable unlogged table check in SELECT statements.</span></span><br><span class="line">                                   <span class="comment"># This initiates queries against system catalog of primary/master</span></span><br><span class="line">                                   <span class="comment"># thus increases load of master.</span></span><br><span class="line">                                   <span class="comment"># If you are absolutely sure that your system never uses unlogged tables</span></span><br><span class="line">                                   <span class="comment"># and you want to save access to primary/master, you could turn this off.</span></span><br><span class="line">                                   <span class="comment"># Default is on.</span></span><br><span class="line">enable_shared_relcache = on</span><br><span class="line">                                   <span class="comment"># If on, relation cache stored in memory cache,</span></span><br><span class="line">                                   <span class="comment"># the cache is shared among child process.</span></span><br><span class="line">                                   <span class="comment"># Default is on.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">relcache_query_target = master     <span class="comment"># Target node to send relcache queries. Default is master (primary) node.</span></span><br><span class="line">                                   <span class="comment"># If load_balance_node is specified, queries will be sent to load balance node.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># IN MEMORY QUERY MEMORY CACHE</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">memory_cache_enabled = off</span><br><span class="line">                                   <span class="comment"># If on, use the memory cache functionality, off by default</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_method = <span class="string">'shmem'</span></span><br><span class="line">                                   <span class="comment"># Cache storage method. either 'shmem'(shared memory) or</span></span><br><span class="line">                                   <span class="comment"># 'memcached'. 'shmem' by default</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_memcached_host = <span class="string">'localhost'</span></span><br><span class="line">                                   <span class="comment"># Memcached host name or IP address. Mandatory if</span></span><br><span class="line">                                   <span class="comment"># memqcache_method = 'memcached'.</span></span><br><span class="line">                                   <span class="comment"># Defaults to localhost.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_memcached_port = 11211</span><br><span class="line">                                   <span class="comment"># Memcached port number. Mondatory if memqcache_method = 'memcached'.</span></span><br><span class="line">                                   <span class="comment"># Defaults to 11211.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_total_size = 67108864</span><br><span class="line">                                   <span class="comment"># Total memory size in bytes for storing memory cache.</span></span><br><span class="line">                                   <span class="comment"># Mandatory if memqcache_method = 'shmem'.</span></span><br><span class="line">                                   <span class="comment"># Defaults to 64MB.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_max_num_cache = 1000000</span><br><span class="line">                                   <span class="comment"># Total number of cache entries. Mandatory</span></span><br><span class="line">                                   <span class="comment"># if memqcache_method = 'shmem'.</span></span><br><span class="line">                                   <span class="comment"># Each cache entry consumes 48 bytes on shared memory.</span></span><br><span class="line">                                   <span class="comment"># Defaults to 1,000,000(45.8MB).</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_expire = 0</span><br><span class="line">                                   <span class="comment"># Memory cache entry life time specified in seconds.</span></span><br><span class="line">                                   <span class="comment"># 0 means infinite life time. 0 by default.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_auto_cache_invalidation = on</span><br><span class="line">                                   <span class="comment"># If on, invalidation of query cache is triggered by corresponding</span></span><br><span class="line">                                   <span class="comment"># DDL/DML/DCL(and memqcache_expire).  If off, it is only triggered</span></span><br><span class="line">                                   <span class="comment"># by memqcache_expire.  on by default.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_maxcache = 409600</span><br><span class="line">                                   <span class="comment"># Maximum SELECT result size in bytes.</span></span><br><span class="line">                                   <span class="comment"># Must be smaller than memqcache_cache_block_size. Defaults to 400KB.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_cache_block_size = 1048576</span><br><span class="line">                                   <span class="comment"># Cache block size in bytes. Mandatory if memqcache_method = 'shmem'.</span></span><br><span class="line">                                   <span class="comment"># Defaults to 1MB.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_oiddir = <span class="string">'/var/log/pgpool/oiddir'</span></span><br><span class="line">                                   <span class="comment"># Temporary work directory to record table oids</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">white_memqcache_table_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Comma separated list of table names to memcache</span></span><br><span class="line">                                   <span class="comment"># that don't write to database</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br><span class="line">black_memqcache_table_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Comma separated list of table names not to memcache</span></span><br><span class="line">                                   <span class="comment"># that don't write to database</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br></pre></td></tr></table></figure>
<h3 id="3-5-配置slave上的pgpool-conf"><a href="#3-5-配置slave上的pgpool-conf" class="headerlink" title="3.5 配置slave上的pgpool.conf"></a>3.5 配置slave上的pgpool.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># pgPool-II configuration file</span></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file consists of lines of the form:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   name = value</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Whitespace may be used.  Comments are introduced with "#" anywhere on a line.</span></span><br><span class="line"><span class="comment"># The complete list of parameter names and allowed values can be found in the</span></span><br><span class="line"><span class="comment"># pgPool-II documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file is read on server startup and when the server receives a SIGHUP</span></span><br><span class="line"><span class="comment"># signal.  If you edit the file on a running system, you have to SIGHUP the</span></span><br><span class="line"><span class="comment"># server for the changes to take effect, or use "pgpool reload".  Some</span></span><br><span class="line"><span class="comment"># parameters, which are marked below, require a server shutdown and restart to</span></span><br><span class="line"><span class="comment"># take effect.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># CONNECTIONS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - pgpool Connection Settings -</span></span><br><span class="line"><span class="comment"># 修改监听</span></span><br><span class="line">listen_addresses = <span class="string">'*'</span></span><br><span class="line">                                   <span class="comment"># Host name or IP address to listen on:</span></span><br><span class="line">                                   <span class="comment"># '*' for all, '' for no TCP/IP connections</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">port = 9999</span><br><span class="line">                                   <span class="comment"># Port number</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">socket_dir = <span class="string">'/tmp'</span></span><br><span class="line">                                   <span class="comment"># Unix domain socket path</span></span><br><span class="line">                                   <span class="comment"># The Debian package defaults to</span></span><br><span class="line">                                   <span class="comment"># /var/run/postgresql</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">listen_backlog_multiplier = 2</span><br><span class="line">                                   <span class="comment"># Set the backlog parameter of listen(2) to</span></span><br><span class="line">                                   <span class="comment"># num_init_children * listen_backlog_multiplier.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">serialize_accept = off</span><br><span class="line">                                   <span class="comment"># whether to serialize accept() call to avoid thundering herd problem</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">reserved_connections = 0</span><br><span class="line">                                   <span class="comment"># Number of reserved connections.</span></span><br><span class="line">                                   <span class="comment"># Pgpool-II does not accept connections if over</span></span><br><span class="line">                                   <span class="comment"># num_init_chidlren - reserved_connections.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - pgpool Communication Manager Connection Settings -</span></span><br><span class="line"><span class="comment"># 修改监听</span></span><br><span class="line">pcp_listen_addresses = <span class="string">'*'</span></span><br><span class="line">                                   <span class="comment"># Host name or IP address for pcp process to listen on:</span></span><br><span class="line">                                   <span class="comment"># '*' for all, '' for no TCP/IP connections</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">pcp_port = 9898</span><br><span class="line">                                   <span class="comment"># Port number for pcp</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">pcp_socket_dir = <span class="string">'/tmp'</span></span><br><span class="line">                                   <span class="comment"># Unix domain socket path for pcp</span></span><br><span class="line">                                   <span class="comment"># The Debian package defaults to</span></span><br><span class="line">                                   <span class="comment"># /var/run/postgresql</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Backend Connection Settings -</span></span><br><span class="line"><span class="comment"># pgpool集群后端主机信息</span></span><br><span class="line"><span class="comment"># 修改为本端主机名，要在hosts中加入解析</span></span><br><span class="line">backend_hostname0 = <span class="string">'test2'</span></span><br><span class="line">                                   <span class="comment"># Host name or IP address to connect to for backend 0</span></span><br><span class="line">backend_port0 = 5432</span><br><span class="line">                                   <span class="comment"># Port number for backend 0</span></span><br><span class="line">backend_weight0 = 1</span><br><span class="line">                                   <span class="comment"># Weight for backend 0 (only in load balancing mode)</span></span><br><span class="line"><span class="comment"># 修改postgresql的数据目录</span></span><br><span class="line">backend_data_directory0 = <span class="string">'/pgdata'</span></span><br><span class="line">                                   <span class="comment"># Data directory for backend 0</span></span><br><span class="line">backend_flag0 = <span class="string">'ALLOW_TO_FAILOVER'</span></span><br><span class="line">                                   <span class="comment"># Controls various backend behavior</span></span><br><span class="line">                                   <span class="comment"># ALLOW_TO_FAILOVER, DISALLOW_TO_FAILOVER</span></span><br><span class="line">                                   <span class="comment"># or ALWAYS_MASTER</span></span><br><span class="line"><span class="comment"># 添加内容，</span></span><br><span class="line">backend_hostname1 = <span class="string">'test3'</span></span><br><span class="line">backend_port1 = 5432</span><br><span class="line">backend_weight1 = 1</span><br><span class="line">backend_data_directory1 = <span class="string">'/pgdata'</span></span><br><span class="line">backend_flag1 = <span class="string">'ALLOW_TO_FAILOVER'</span></span><br><span class="line"><span class="comment"># 添加结束</span></span><br><span class="line"></span><br><span class="line">backend_application_name0 = <span class="string">'server0'</span></span><br><span class="line">                                   <span class="comment"># walsender's application_name, used for "show pool_nodes" command</span></span><br><span class="line"><span class="comment">#backend_hostname1 = 'host2'</span></span><br><span class="line"><span class="comment">#backend_port1 = 5433</span></span><br><span class="line"><span class="comment">#backend_weight1 = 1</span></span><br><span class="line"><span class="comment">#backend_data_directory1 = '/data1'</span></span><br><span class="line"><span class="comment">#backend_flag1 = 'ALLOW_TO_FAILOVER'</span></span><br><span class="line"><span class="comment">#backend_application_name1 = 'server1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Authentication -</span></span><br><span class="line"><span class="comment"># 激活pgpool认证方式</span></span><br><span class="line">enable_pool_hba = on</span><br><span class="line">                                   <span class="comment"># Use pool_hba.conf for client authentication</span></span><br><span class="line">pool_passwd = <span class="string">'pool_passwd'</span></span><br><span class="line">                                   <span class="comment"># File name of pool_passwd for md5 authentication.</span></span><br><span class="line">                                   <span class="comment"># "" disables pool_passwd.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">authentication_timeout = 60</span><br><span class="line">                                   <span class="comment"># Delay in seconds to complete client authentication</span></span><br><span class="line">                                   <span class="comment"># 0 means no timeout.</span></span><br><span class="line"></span><br><span class="line">allow_clear_text_frontend_auth = off</span><br><span class="line">                                   <span class="comment"># Allow Pgpool-II to use clear text password authentication</span></span><br><span class="line">                                   <span class="comment"># with clients, when pool_passwd does not</span></span><br><span class="line">                                   <span class="comment"># contain the user password</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># - SSL Connections -</span></span><br><span class="line"></span><br><span class="line">ssl = off</span><br><span class="line">                                   <span class="comment"># Enable SSL support</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#ssl_key = './server.key'</span></span><br><span class="line">                                   <span class="comment"># Path to the SSL private key file</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#ssl_cert = './server.cert'</span></span><br><span class="line">                                   <span class="comment"># Path to the SSL public certificate file</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#ssl_ca_cert = ''</span></span><br><span class="line">                                   <span class="comment"># Path to a single PEM format file</span></span><br><span class="line">                                   <span class="comment"># containing CA root certificate(s)</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#ssl_ca_cert_dir = ''</span></span><br><span class="line">                                   <span class="comment"># Directory containing CA root certificate(s)</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">ssl_ciphers = <span class="string">'HIGH:MEDIUM:+3DES:!aNULL'</span></span><br><span class="line">                                   <span class="comment"># Allowed SSL ciphers</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">ssl_prefer_server_ciphers = off</span><br><span class="line">                                   <span class="comment"># Use server's SSL cipher preferences,</span></span><br><span class="line">                                   <span class="comment"># rather than the client's</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">ssl_ecdh_curve = <span class="string">'prime256v1'</span></span><br><span class="line">                                   <span class="comment"># Name of the curve to use in ECDH key exchange</span></span><br><span class="line">ssl_dh_params_file = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Name of the file containing Diffie-Hellman parameters used</span></span><br><span class="line">                                   <span class="comment"># for so-called ephemeral DH family of SSL cipher.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># POOLS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Concurrent session and pool size -</span></span><br><span class="line"></span><br><span class="line">num_init_children = 32</span><br><span class="line">                                   <span class="comment"># Number of concurrent sessions allowed</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">max_pool = 4</span><br><span class="line">                                   <span class="comment"># Number of connection pool caches per connection</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Life time -</span></span><br><span class="line"></span><br><span class="line">child_life_time = 300</span><br><span class="line">                                   <span class="comment"># Pool exits after being idle for this many seconds</span></span><br><span class="line">child_max_connections = 0</span><br><span class="line">                                   <span class="comment"># Pool exits after receiving that many connections</span></span><br><span class="line">                                   <span class="comment"># 0 means no exit</span></span><br><span class="line">connection_life_time = 0</span><br><span class="line">                                   <span class="comment"># Connection to backend closes after being idle for this many seconds</span></span><br><span class="line">                                   <span class="comment"># 0 means no close</span></span><br><span class="line">client_idle_limit = 0</span><br><span class="line">                                   <span class="comment"># Client is disconnected after being idle for that many seconds</span></span><br><span class="line">                                   <span class="comment"># (even inside an explicit transactions!)</span></span><br><span class="line">                                   <span class="comment"># 0 means no disconnection</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># LOGS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Where to log -</span></span><br><span class="line"></span><br><span class="line">log_destination = <span class="string">'stderr'</span></span><br><span class="line">                                   <span class="comment"># Where to log</span></span><br><span class="line">                                   <span class="comment"># Valid values are combinations of stderr,</span></span><br><span class="line">                                   <span class="comment"># and syslog. Default to stderr.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - What to log -</span></span><br><span class="line"></span><br><span class="line">log_line_prefix = <span class="string">'%t: pid %p: '</span>   <span class="comment"># printf-style string to output at beginning of each log line.</span></span><br><span class="line"></span><br><span class="line">log_connections = off</span><br><span class="line">                                   <span class="comment"># Log connections</span></span><br><span class="line">log_hostname = off</span><br><span class="line">                                   <span class="comment"># Hostname will be shown in ps status</span></span><br><span class="line">                                   <span class="comment"># and in logs if connections are logged</span></span><br><span class="line">log_statement = off</span><br><span class="line">                                   <span class="comment"># Log all statements</span></span><br><span class="line">log_per_node_statement = off</span><br><span class="line">                                   <span class="comment"># Log all statements</span></span><br><span class="line">                                   <span class="comment"># with node and backend informations</span></span><br><span class="line">log_client_messages = off</span><br><span class="line">                                   <span class="comment"># Log any client messages</span></span><br><span class="line">log_standby_delay = <span class="string">'none'</span></span><br><span class="line">                                   <span class="comment"># Log standby delay</span></span><br><span class="line">                                   <span class="comment"># Valid values are combinations of always,</span></span><br><span class="line">                                   <span class="comment"># if_over_threshold, none</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Syslog specific -</span></span><br><span class="line"></span><br><span class="line">syslog_facility = <span class="string">'LOCAL0'</span></span><br><span class="line">                                   <span class="comment"># Syslog local facility. Default to LOCAL0</span></span><br><span class="line">syslog_ident = <span class="string">'pgpool'</span></span><br><span class="line">                                   <span class="comment"># Syslog program identification string</span></span><br><span class="line">                                   <span class="comment"># Default to 'pgpool'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Debug -</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log_error_verbosity = default          # terse, default, or verbose messages</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#client_min_messages = notice           # values in order of decreasing detail:</span></span><br><span class="line">                                        <span class="comment">#   debug5</span></span><br><span class="line">                                        <span class="comment">#   debug4</span></span><br><span class="line">                                        <span class="comment">#   debug3</span></span><br><span class="line">                                        <span class="comment">#   debug2</span></span><br><span class="line">                                        <span class="comment">#   debug1</span></span><br><span class="line">                                        <span class="comment">#   log</span></span><br><span class="line">                                        <span class="comment">#   notice</span></span><br><span class="line">                                        <span class="comment">#   warning</span></span><br><span class="line">                                        <span class="comment">#   error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log_min_messages = warning             # values in order of decreasing detail:</span></span><br><span class="line">                                        <span class="comment">#   debug5</span></span><br><span class="line">                                        <span class="comment">#   debug4</span></span><br><span class="line">                                        <span class="comment">#   debug3</span></span><br><span class="line">                                        <span class="comment">#   debug2</span></span><br><span class="line">                                        <span class="comment">#   debug1</span></span><br><span class="line">                                        <span class="comment">#   info</span></span><br><span class="line">                                        <span class="comment">#   notice</span></span><br><span class="line">                                        <span class="comment">#   warning</span></span><br><span class="line">                                        <span class="comment">#   error</span></span><br><span class="line">                                        <span class="comment">#   log</span></span><br><span class="line">                                        <span class="comment">#   fatal</span></span><br><span class="line">                                        <span class="comment">#   panic</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># FILE LOCATIONS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># pid文件路径  这里不做修改</span></span><br><span class="line">pid_file_name = <span class="string">'/var/run/pgpool-II-10/pgpool.pid'</span></span><br><span class="line">                                   <span class="comment"># PID file name</span></span><br><span class="line">                                   <span class="comment"># Can be specified as relative to the"</span></span><br><span class="line">                                   <span class="comment"># location of pgpool.conf file or</span></span><br><span class="line">                                   <span class="comment"># as an absolute path</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># pgpool集群状态信息文件，这里保持默认</span></span><br><span class="line">logdir = <span class="string">'/var/log/pgpool-II-10'</span></span><br><span class="line">                                   <span class="comment"># Directory of pgPool status file</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># CONNECTION POOLING</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">connection_cache = on</span><br><span class="line">                                   <span class="comment"># Activate connection pools</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">                                   <span class="comment"># Semicolon separated list of queries</span></span><br><span class="line">                                   <span class="comment"># to be issued at the end of a session</span></span><br><span class="line">                                   <span class="comment"># The default is for 8.3 and later</span></span><br><span class="line">reset_query_list = <span class="string">'ABORT; DISCARD ALL'</span></span><br><span class="line">                                   <span class="comment"># The following one is for 8.2 and before</span></span><br><span class="line"><span class="comment">#reset_query_list = 'ABORT; RESET ALL; SET SESSION AUTHORIZATION DEFAULT'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># REPLICATION MODE</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 复制模式保持关闭</span></span><br><span class="line">replication_mode = off</span><br><span class="line">                                   <span class="comment"># Activate replication mode</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">replicate_select = off</span><br><span class="line">                                   <span class="comment"># Replicate SELECT statements</span></span><br><span class="line">                                   <span class="comment"># when in replication mode</span></span><br><span class="line">                                   <span class="comment"># replicate_select is higher priority than</span></span><br><span class="line">                                   <span class="comment"># load_balance_mode.</span></span><br><span class="line"></span><br><span class="line">insert_lock = on</span><br><span class="line">                                   <span class="comment"># Automatically locks a dummy row or a table</span></span><br><span class="line">                                   <span class="comment"># with INSERT statements to keep SERIAL data</span></span><br><span class="line">                                   <span class="comment"># consistency</span></span><br><span class="line">                                   <span class="comment"># Without SERIAL, no lock will be issued</span></span><br><span class="line">lobj_lock_table = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># When rewriting lo_creat command in</span></span><br><span class="line">                                   <span class="comment"># replication mode, specify table name to</span></span><br><span class="line">                                   <span class="comment"># lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Degenerate handling -</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">replication_stop_on_mismatch = off</span><br><span class="line">                                   <span class="comment"># On disagreement with the packet kind</span></span><br><span class="line">                                   <span class="comment"># sent from backend, degenerate the node</span></span><br><span class="line">                                   <span class="comment"># which is most likely "minority"</span></span><br><span class="line">                                   <span class="comment"># If off, just force to exit this session</span></span><br><span class="line"></span><br><span class="line">failover_if_affected_tuples_mismatch = off</span><br><span class="line">                                   <span class="comment"># On disagreement with the number of affected</span></span><br><span class="line">                                   <span class="comment"># tuples in UPDATE/DELETE queries, then</span></span><br><span class="line">                                   <span class="comment"># degenerate the node which is most likely</span></span><br><span class="line">                                   <span class="comment"># "minority".</span></span><br><span class="line">                                   <span class="comment"># If off, just abort the transaction to</span></span><br><span class="line">                                   <span class="comment"># keep the consistency</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># LOAD BALANCING MODE</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 激活负载均衡模式</span></span><br><span class="line">load_balance_mode = on</span><br><span class="line">                                   <span class="comment"># Activate load balancing mode</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">ignore_leading_white_space = on</span><br><span class="line">                                   <span class="comment"># Ignore leading white spaces of each query</span></span><br><span class="line">white_function_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Comma separated list of function names</span></span><br><span class="line">                                   <span class="comment"># that don't write to database</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br><span class="line">black_function_list = <span class="string">'currval,lastval,nextval,setval'</span></span><br><span class="line">                                   <span class="comment"># Comma separated list of function names</span></span><br><span class="line">                                   <span class="comment"># that write to database</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br><span class="line"></span><br><span class="line">black_query_pattern_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Semicolon separated list of query patterns</span></span><br><span class="line">                                   <span class="comment"># that should be sent to primary node</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br><span class="line">                                   <span class="comment"># valid for streaming replicaton mode only.</span></span><br><span class="line"></span><br><span class="line">database_redirect_preference_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># comma separated list of pairs of database and node id.</span></span><br><span class="line">                                   <span class="comment"># example: postgres:primary,mydb[0-4]:1,mydb[5-9]:2'</span></span><br><span class="line">                                   <span class="comment"># valid for streaming replicaton mode only.</span></span><br><span class="line">app_name_redirect_preference_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># comma separated list of pairs of app name and node id.</span></span><br><span class="line">                                   <span class="comment"># example: 'psql:primary,myapp[0-4]:1,myapp[5-9]:standby'</span></span><br><span class="line">                                   <span class="comment"># valid for streaming replicaton mode only.</span></span><br><span class="line">allow_sql_comments = off</span><br><span class="line">                                   <span class="comment"># if on, ignore SQL comments when judging if load balance or</span></span><br><span class="line">                                   <span class="comment"># query cache is possible.</span></span><br><span class="line">                                   <span class="comment"># If off, SQL comments effectively prevent the judgment</span></span><br><span class="line">                                   <span class="comment"># (pre 3.4 behavior).</span></span><br><span class="line"></span><br><span class="line">disable_load_balance_on_write = <span class="string">'transaction'</span></span><br><span class="line">                                   <span class="comment"># Load balance behavior when write query is issued</span></span><br><span class="line">                                   <span class="comment"># in an explicit transaction.</span></span><br><span class="line">                                   <span class="comment"># Note that any query not in an explicit transaction</span></span><br><span class="line">                                   <span class="comment"># is not affected by the parameter.</span></span><br><span class="line">                                   <span class="comment"># 'transaction' (the default): if a write query is issued,</span></span><br><span class="line">                                   <span class="comment"># subsequent read queries will not be load balanced</span></span><br><span class="line">                                   <span class="comment"># until the transaction ends.</span></span><br><span class="line">                                   <span class="comment"># 'trans_transaction': if a write query is issued,</span></span><br><span class="line">                                   <span class="comment"># subsequent read queries in an explicit transaction</span></span><br><span class="line">                                   <span class="comment"># will not be load balanced until the session ends.</span></span><br><span class="line">                                   <span class="comment"># 'always': if a write query is issued, read queries will</span></span><br><span class="line">                                   <span class="comment"># not be load balanced until the session ends.</span></span><br><span class="line"></span><br><span class="line">statement_level_load_balance = off</span><br><span class="line">                                   <span class="comment"># Enables statement level load balancing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># MASTER/SLAVE MODE</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 激活主从模式</span></span><br><span class="line">master_slave_mode = on</span><br><span class="line">                                   <span class="comment"># Activate master/slave mode</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">master_slave_sub_mode = <span class="string">'stream'</span></span><br><span class="line">                                   <span class="comment"># Master/slave sub mode</span></span><br><span class="line">                                   <span class="comment"># Valid values are combinations stream, slony</span></span><br><span class="line">                                   <span class="comment"># or logical. Default is stream.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Streaming -</span></span><br><span class="line"><span class="comment"># 流复制检查周期</span></span><br><span class="line">sr_check_period = 5</span><br><span class="line">                                   <span class="comment"># Streaming replication check period</span></span><br><span class="line">                                   <span class="comment"># Disabled (0) by default</span></span><br><span class="line"><span class="comment"># 流复制检查用户，replica是数据库的用户</span></span><br><span class="line">sr_check_user = <span class="string">'replica'</span></span><br><span class="line">                                   <span class="comment"># Streaming replication check user</span></span><br><span class="line">                                   <span class="comment"># This is necessary even if you disable</span></span><br><span class="line">                                   <span class="comment"># streaming replication delay check with</span></span><br><span class="line">                                   <span class="comment"># sr_check_period = 0</span></span><br><span class="line"><span class="comment"># 流复制检查用户密码</span></span><br><span class="line">sr_check_password = <span class="string">'replica'</span></span><br><span class="line">                                   <span class="comment"># Password for streaming replication check user.</span></span><br><span class="line">                                   <span class="comment"># Leaving it empty will make Pgpool-II to first look for the</span></span><br><span class="line">                                   <span class="comment"># Password in pool_passwd file before using the empty password</span></span><br><span class="line"><span class="comment"># 流复制检查数据库</span></span><br><span class="line">sr_check_database = <span class="string">'postgres'</span></span><br><span class="line">                                   <span class="comment"># Database name for streaming replication check</span></span><br><span class="line">delay_threshold = 0</span><br><span class="line">                                   <span class="comment"># Threshold before not dispatching query to standby node</span></span><br><span class="line">                                   <span class="comment"># Unit is in bytes</span></span><br><span class="line">                                   <span class="comment"># Disabled (0) by default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Special commands -</span></span><br><span class="line"></span><br><span class="line">follow_master_command = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Executes this command after master failover</span></span><br><span class="line">                                   <span class="comment"># Special values:</span></span><br><span class="line">                                   <span class="comment">#   %d = failed node id</span></span><br><span class="line">                                   <span class="comment">#   %h = failed node host name</span></span><br><span class="line">                                   <span class="comment">#   %p = failed node port number</span></span><br><span class="line">                                   <span class="comment">#   %D = failed node database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %m = new master node id</span></span><br><span class="line">                                   <span class="comment">#   %H = new master node hostname</span></span><br><span class="line">                                   <span class="comment">#   %M = old master node id</span></span><br><span class="line">                                   <span class="comment">#   %P = old primary node id</span></span><br><span class="line">                                   <span class="comment">#   %r = new master port number</span></span><br><span class="line">                                   <span class="comment">#   %R = new master database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %N = old primary node hostname</span></span><br><span class="line">                                   <span class="comment">#   %S = old primary node port number</span></span><br><span class="line">                                   <span class="comment">#   %% = '%' character</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># HEALTH CHECK GLOBAL PARAMETERS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 激活健康检查，周期10s</span></span><br><span class="line">health_check_period = 10</span><br><span class="line">                                   <span class="comment"># Health check period</span></span><br><span class="line">                                   <span class="comment"># Disabled (0) by default</span></span><br><span class="line">health_check_timeout = 20</span><br><span class="line">                                   <span class="comment"># Health check timeout</span></span><br><span class="line">                                   <span class="comment"># 0 means no timeout</span></span><br><span class="line"><span class="comment"># 健康检查用户，数据库管理员用户</span></span><br><span class="line">health_check_user = <span class="string">'postgres'</span></span><br><span class="line">                                   <span class="comment"># Health check user</span></span><br><span class="line"><span class="comment"># 健康检查用户密码</span></span><br><span class="line">health_check_password = <span class="string">'zhjx123'</span></span><br><span class="line">                                   <span class="comment"># Password for health check user</span></span><br><span class="line">                                   <span class="comment"># Leaving it empty will make Pgpool-II to first look for the</span></span><br><span class="line">                                   <span class="comment"># Password in pool_passwd file before using the empty password</span></span><br><span class="line"><span class="comment"># 健康检查数据库</span></span><br><span class="line"><span class="comment"># 必须设置，否则primary数据库down了，pgpool不知道，不能及时切换。从库流复制还在连接数据，报连接失败。</span></span><br><span class="line"><span class="comment"># 只有下次使用pgpool登录时，发现连接不上，然后报错，这时候，才知道挂了，pgpool进行切换。</span></span><br><span class="line">health_check_database = <span class="string">'postgres'</span></span><br><span class="line">                                   <span class="comment"># Database name for health check. If '', tries 'postgres' frist, then 'template1'</span></span><br><span class="line"></span><br><span class="line">health_check_max_retries = 0</span><br><span class="line">                                   <span class="comment"># Maximum number of times to retry a failed health check before giving up.</span></span><br><span class="line">health_check_retry_delay = 1</span><br><span class="line">                                   <span class="comment"># Amount of time to wait (in seconds) between retries.</span></span><br><span class="line">connect_timeout = 10000</span><br><span class="line">                                   <span class="comment"># Timeout value in milliseconds before giving up to connect to backend.</span></span><br><span class="line">                                   <span class="comment"># Default is 10000 ms (10 second). Flaky network user may want to increase</span></span><br><span class="line">                                   <span class="comment"># the value. 0 means no timeout.</span></span><br><span class="line">                                   <span class="comment"># Note that this value is not only used for health check,</span></span><br><span class="line">                                   <span class="comment"># but also for ordinary conection to backend.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># HEALTH CHECK PER NODE PARAMETERS (OPTIONAL)</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#health_check_period0 = 0</span></span><br><span class="line"><span class="comment">#health_check_timeout0 = 20</span></span><br><span class="line"><span class="comment">#health_check_user0 = 'nobody'</span></span><br><span class="line"><span class="comment">#health_check_password0 = ''</span></span><br><span class="line"><span class="comment">#health_check_database0 = ''</span></span><br><span class="line"><span class="comment">#health_check_max_retries0 = 0</span></span><br><span class="line"><span class="comment">#health_check_retry_delay0 = 1</span></span><br><span class="line"><span class="comment">#connect_timeout0 = 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主备切换的命令行配置</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># FAILOVER AND FAILBACK</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 启动故障转移</span></span><br><span class="line"></span><br><span class="line">failover_command = <span class="string">'/etc/pgpool-II-10/failover_stream.sh %H'</span></span><br><span class="line">                                   <span class="comment"># Executes this command at failover</span></span><br><span class="line">                                   <span class="comment"># Special values:</span></span><br><span class="line">                                   <span class="comment">#   %d = failed node id</span></span><br><span class="line">                                   <span class="comment">#   %h = failed node host name</span></span><br><span class="line">                                   <span class="comment">#   %p = failed node port number</span></span><br><span class="line">                                   <span class="comment">#   %D = failed node database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %m = new master node id</span></span><br><span class="line">                                   <span class="comment">#   %H = new master node hostname</span></span><br><span class="line">                                   <span class="comment">#   %M = old master node id</span></span><br><span class="line">                                   <span class="comment">#   %P = old primary node id</span></span><br><span class="line">                                   <span class="comment">#   %r = new master port number</span></span><br><span class="line">                                   <span class="comment">#   %R = new master database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %N = old primary node hostname</span></span><br><span class="line">                                   <span class="comment">#   %S = old primary node port number</span></span><br><span class="line">                                   <span class="comment">#   %% = '%' character</span></span><br><span class="line">failback_command = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Executes this command at failback.</span></span><br><span class="line">                                   <span class="comment"># Special values:</span></span><br><span class="line">                                   <span class="comment">#   %d = failed node id</span></span><br><span class="line">                                   <span class="comment">#   %h = failed node host name</span></span><br><span class="line">                                   <span class="comment">#   %p = failed node port number</span></span><br><span class="line">                                   <span class="comment">#   %D = failed node database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %m = new master node id</span></span><br><span class="line">                                   <span class="comment">#   %H = new master node hostname</span></span><br><span class="line">                                   <span class="comment">#   %M = old master node id</span></span><br><span class="line">                                   <span class="comment">#   %P = old primary node id</span></span><br><span class="line">                                   <span class="comment">#   %r = new master port number</span></span><br><span class="line">                                   <span class="comment">#   %R = new master database cluster path</span></span><br><span class="line">                                   <span class="comment">#   %N = old primary node hostname</span></span><br><span class="line">                                   <span class="comment">#   %S = old primary node port number</span></span><br><span class="line">                                   <span class="comment">#   %% = '%' character</span></span><br><span class="line"></span><br><span class="line">failover_on_backend_error = on</span><br><span class="line">                                   <span class="comment"># Initiates failover when reading/writing to the</span></span><br><span class="line">                                   <span class="comment"># backend communication socket fails</span></span><br><span class="line">                                   <span class="comment"># If set to off, pgpool will report an</span></span><br><span class="line">                                   <span class="comment"># error and disconnect the session.</span></span><br><span class="line"></span><br><span class="line">detach_false_primary = off</span><br><span class="line">                                   <span class="comment"># Detach false primary if on. Only</span></span><br><span class="line">                                   <span class="comment"># valid in streaming replicaton</span></span><br><span class="line">                                   <span class="comment"># mode and with PostgreSQL 9.6 or</span></span><br><span class="line">                                   <span class="comment"># after.</span></span><br><span class="line"></span><br><span class="line">search_primary_node_timeout = 300</span><br><span class="line">                                   <span class="comment"># Timeout in seconds to search for the</span></span><br><span class="line">                                   <span class="comment"># primary node when a failover occurs.</span></span><br><span class="line">                                   <span class="comment"># 0 means no timeout, keep searching</span></span><br><span class="line">                                   <span class="comment"># for a primary node forever.</span></span><br><span class="line"></span><br><span class="line">auto_failback = off</span><br><span class="line">                                   <span class="comment"># Dettached backend node reattach automatically</span></span><br><span class="line">                                   <span class="comment"># if replication_state is 'streaming'.</span></span><br><span class="line">auto_failback_interval = 60</span><br><span class="line">                                   <span class="comment"># Min interval of executing auto_failback in</span></span><br><span class="line">                                   <span class="comment"># seconds.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># ONLINE RECOVERY</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">recovery_user = <span class="string">'nobody'</span></span><br><span class="line">                                   <span class="comment"># Online recovery user</span></span><br><span class="line">recovery_password = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Online recovery password</span></span><br><span class="line">                                   <span class="comment"># Leaving it empty will make Pgpool-II to first look for the</span></span><br><span class="line">                                   <span class="comment"># Password in pool_passwd file before using the empty password</span></span><br><span class="line"></span><br><span class="line">recovery_1st_stage_command = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Executes a command in first stage</span></span><br><span class="line">recovery_2nd_stage_command = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Executes a command in second stage</span></span><br><span class="line">recovery_timeout = 90</span><br><span class="line">                                   <span class="comment"># Timeout in seconds to wait for the</span></span><br><span class="line">                                   <span class="comment"># recovering node's postmaster to start up</span></span><br><span class="line">                                   <span class="comment"># 0 means no wait</span></span><br><span class="line">client_idle_limit_in_recovery = 0</span><br><span class="line">                                   <span class="comment"># Client is disconnected after being idle</span></span><br><span class="line">                                   <span class="comment"># for that many seconds in the second stage</span></span><br><span class="line">                                   <span class="comment"># of online recovery</span></span><br><span class="line">                                   <span class="comment"># 0 means no disconnection</span></span><br><span class="line">                                   <span class="comment"># -1 means immediate disconnection</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># WATCHDOG</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Enabling -</span></span><br><span class="line"><span class="comment"># 激活看门狗</span></span><br><span class="line">use_watchdog = on</span><br><span class="line">                                    <span class="comment"># Activates watchdog</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -Connection to up stream servers -</span></span><br><span class="line"></span><br><span class="line">trusted_servers = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># trusted server list which are used</span></span><br><span class="line">                                    <span class="comment"># to confirm network connection</span></span><br><span class="line">                                    <span class="comment"># (hostA,hostB,hostC,...)</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">ping_path = <span class="string">'/bin'</span></span><br><span class="line">                                    <span class="comment"># ping command path</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Watchdog communication Settings -</span></span><br><span class="line"><span class="comment"># 本端地址，与master节点相反</span></span><br><span class="line">wd_hostname = <span class="string">'test3'</span></span><br><span class="line">                                    <span class="comment"># Host name or IP address of this watchdog</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_port = 9000</span><br><span class="line">                                    <span class="comment"># port number for watchdog service</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_priority = 1</span><br><span class="line">                                    <span class="comment"># priority of this watchdog in leader election</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">wd_authkey = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># Authentication key for watchdog communication</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">wd_ipc_socket_dir = <span class="string">'/tmp'</span></span><br><span class="line">                                    <span class="comment"># Unix domain socket path for watchdog IPC socket</span></span><br><span class="line">                                    <span class="comment"># The Debian package defaults to</span></span><br><span class="line">                                    <span class="comment"># /var/run/postgresql</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Virtual IP control Setting -</span></span><br><span class="line"><span class="comment"># 激活虚拟VIP，vip在hosts里面设置解析，否则直接填写ip</span></span><br><span class="line">delegate_IP = <span class="string">'vip'</span></span><br><span class="line">                                    <span class="comment"># delegate IP address</span></span><br><span class="line">                                    <span class="comment"># If this is empty, virtual IP never bring up.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">if_cmd_path = <span class="string">'/sbin'</span></span><br><span class="line">                                    <span class="comment"># path to the directory where if_up/down_cmd exists</span></span><br><span class="line">                                    <span class="comment"># If if_up/down_cmd starts with "/", if_cmd_path will be ignored.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#if_up_cmd = '/usr/bin/sudo /sbin/ip addr add $_IP_$/24 dev eth0 label eth0:0'</span></span><br><span class="line"><span class="comment"># 执行添加vip地址命令</span></span><br><span class="line">if_up_cmd = <span class="string">'/sbin/ifconfig ens192:0 inet $_IP_$ netmask 255.255.254.0'</span></span><br><span class="line">                                    <span class="comment"># startup delegate IP command</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#if_down_cmd = '/usr/bin/sudo /sbin/ip addr del $_IP_$/24 dev eth0'</span></span><br><span class="line"><span class="comment"># 执行删除vip地址命令</span></span><br><span class="line">if_down_cmd = <span class="string">'/sbin/ifconfig ens192:0 down'</span></span><br><span class="line">                                    <span class="comment"># shutdown delegate IP command</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">arping_path = <span class="string">'/usr/sbin'</span></span><br><span class="line">                                    <span class="comment"># arping command path</span></span><br><span class="line">                                    <span class="comment"># If arping_cmd starts with "/", if_cmd_path will be ignored.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">arping_cmd = <span class="string">'/usr/bin/sudo /usr/sbin/arping -U $_IP_$ -w 1 -I ens192'</span></span><br><span class="line">                                    <span class="comment"># arping command</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Behaivor on escalation Setting -</span></span><br><span class="line"></span><br><span class="line">clear_memqcache_on_escalation = on</span><br><span class="line">                                    <span class="comment"># Clear all the query cache on shared memory</span></span><br><span class="line">                                    <span class="comment"># when standby pgpool escalate to active pgpool</span></span><br><span class="line">                                    <span class="comment"># (= virtual IP holder).</span></span><br><span class="line">                                    <span class="comment"># This should be off if client connects to pgpool</span></span><br><span class="line">                                    <span class="comment"># not using virtual IP.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_escalation_command = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># Executes this command at escalation on new active pgpool.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_de_escalation_command = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># Executes this command when master pgpool resigns from being master.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Watchdog consensus settings for failover -</span></span><br><span class="line"></span><br><span class="line">failover_when_quorum_exists = on</span><br><span class="line">                                    <span class="comment"># Only perform backend node failover</span></span><br><span class="line">                                    <span class="comment"># when the watchdog cluster holds the quorum</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">failover_require_consensus = on</span><br><span class="line">                                    <span class="comment"># Perform failover when majority of Pgpool-II nodes</span></span><br><span class="line">                                    <span class="comment"># aggrees on the backend node status change</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">allow_multiple_failover_requests_from_node = off</span><br><span class="line">                                    <span class="comment"># A Pgpool-II node can cast multiple votes</span></span><br><span class="line">                                    <span class="comment"># for building the consensus on failover</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">enable_consensus_with_half_votes = off</span><br><span class="line">                                    <span class="comment"># apply majority rule for consensus and quorum computation</span></span><br><span class="line">                                    <span class="comment"># at 50% of votes in a cluster with even number of nodes.</span></span><br><span class="line">                                    <span class="comment"># when enabled the existence of quorum and consensus</span></span><br><span class="line">                                    <span class="comment"># on failover is resolved after receiving half of the</span></span><br><span class="line">                                    <span class="comment"># total votes in the cluster, otherwise both these</span></span><br><span class="line">                                    <span class="comment"># decisions require at least one more vote than</span></span><br><span class="line">                                    <span class="comment"># half of the total votes.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Lifecheck Setting -</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- common --</span></span><br><span class="line"></span><br><span class="line">wd_monitoring_interfaces_list = <span class="string">''</span>  <span class="comment"># Comma separated list of interfaces names to monitor.</span></span><br><span class="line">                                    <span class="comment"># if any interface from the list is active the watchdog will</span></span><br><span class="line">                                    <span class="comment"># consider the network is fine</span></span><br><span class="line">                                    <span class="comment"># 'any' to enable monitoring on all interfaces except loopback</span></span><br><span class="line">                                    <span class="comment"># '' to disable monitoring</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wd_lifecheck_method = <span class="string">'heartbeat'</span></span><br><span class="line">                                    <span class="comment"># Method of watchdog lifecheck ('heartbeat' or 'query' or 'external')</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_interval = 10</span><br><span class="line">                                    <span class="comment"># lifecheck interval (sec) &gt; 0</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- heartbeat mode --</span></span><br><span class="line"><span class="comment"># 激活心跳侦测</span></span><br><span class="line">wd_heartbeat_port = 9694</span><br><span class="line">                                    <span class="comment"># Port number for receiving heartbeat signal</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_heartbeat_keepalive = 2</span><br><span class="line">                                    <span class="comment"># Interval time of sending heartbeat signal (sec)</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_heartbeat_deadtime = 30</span><br><span class="line">                                    <span class="comment"># Deadtime interval for heartbeat signal (sec)</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># 对端地址，与master节点相反</span></span><br><span class="line">heartbeat_destination0 = <span class="string">'test2'</span></span><br><span class="line">                                    <span class="comment"># Host name or IP address of destination 0</span></span><br><span class="line">                                    <span class="comment"># for sending heartbeat signal.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">heartbeat_destination_port0 = 9694 </span><br><span class="line">                                    <span class="comment"># Port number of destination 0 for sending</span></span><br><span class="line">                                    <span class="comment"># heartbeat signal. Usually this is the</span></span><br><span class="line">                                    <span class="comment"># same as wd_heartbeat_port.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># 执行侦测的网卡</span></span><br><span class="line">heartbeat_device0 = <span class="string">'ens192'</span></span><br><span class="line">                                    <span class="comment"># Name of NIC device (such like 'eth0')</span></span><br><span class="line">                                    <span class="comment"># used for sending/receiving heartbeat</span></span><br><span class="line">                                    <span class="comment"># signal to/from destination 0.</span></span><br><span class="line">                                    <span class="comment"># This works only when this is not empty</span></span><br><span class="line">                                    <span class="comment"># and pgpool has root privilege.</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#heartbeat_destination1 = 'host0_ip2'</span></span><br><span class="line"><span class="comment">#heartbeat_destination_port1 = 9694</span></span><br><span class="line"><span class="comment">#heartbeat_device1 = ''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- query mode --</span></span><br><span class="line"></span><br><span class="line">wd_life_point = 3</span><br><span class="line">                                    <span class="comment"># lifecheck retry times</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_lifecheck_query = <span class="string">'SELECT 1'</span></span><br><span class="line">                                    <span class="comment"># lifecheck query to pgpool from watchdog</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_lifecheck_dbname = <span class="string">'template1'</span></span><br><span class="line">                                    <span class="comment"># Database name connected for lifecheck</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_lifecheck_user = <span class="string">'nobody'</span></span><br><span class="line">                                    <span class="comment"># watchdog user monitoring pgpools in lifecheck</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">wd_lifecheck_password = <span class="string">''</span></span><br><span class="line">                                    <span class="comment"># Password for watchdog user in lifecheck</span></span><br><span class="line">                                    <span class="comment"># Leaving it empty will make Pgpool-II to first look for the</span></span><br><span class="line">                                    <span class="comment"># Password in pool_passwd file before using the empty password</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Other pgpool Connection Settings -</span></span><br><span class="line"><span class="comment"># 激活其他pgpool服务器节点连接信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#other_pgpool_hostname0 = 'host0'</span></span><br><span class="line">other_pgpool_hostname0 = <span class="string">'test2'</span></span><br><span class="line">                                    <span class="comment"># Host name or IP address to connect to for other pgpool 0</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># pgpool连接端口改为9999</span></span><br><span class="line">other_pgpool_port0 = 9999</span><br><span class="line">                                    <span class="comment"># Port number for other pgpool 0</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line">other_wd_port0 = 9000</span><br><span class="line">                                    <span class="comment"># Port number for other watchdog 0</span></span><br><span class="line">                                    <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#other_pgpool_hostname1 = 'host1'</span></span><br><span class="line"><span class="comment">#other_pgpool_port1 = 5432</span></span><br><span class="line"><span class="comment">#other_wd_port1 = 9000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># OTHERS</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">relcache_expire = 0</span><br><span class="line">                                   <span class="comment"># Life time of relation cache in seconds.</span></span><br><span class="line">                                   <span class="comment"># 0 means no cache expiration(the default).</span></span><br><span class="line">                                   <span class="comment"># The relation cache is used for cache the</span></span><br><span class="line">                                   <span class="comment"># query result against PostgreSQL system</span></span><br><span class="line">                                   <span class="comment"># catalog to obtain various information</span></span><br><span class="line">                                   <span class="comment"># including table structures or if it's a</span></span><br><span class="line">                                   <span class="comment"># temporary table or not. The cache is</span></span><br><span class="line">                                   <span class="comment"># maintained in a pgpool child local memory</span></span><br><span class="line">                                   <span class="comment"># and being kept as long as it survives.</span></span><br><span class="line">                                   <span class="comment"># If someone modify the table by using</span></span><br><span class="line">                                   <span class="comment"># ALTER TABLE or some such, the relcache is</span></span><br><span class="line">                                   <span class="comment"># not consistent anymore.</span></span><br><span class="line">                                   <span class="comment"># For this purpose, cache_expiration</span></span><br><span class="line">                                   <span class="comment"># controls the life time of the cache.</span></span><br><span class="line"></span><br><span class="line">relcache_size = 256</span><br><span class="line">                                   <span class="comment"># Number of relation cache</span></span><br><span class="line">                                   <span class="comment"># entry. If you see frequently:</span></span><br><span class="line">                                   <span class="comment"># "pool_search_relcache: cache replacement happend"</span></span><br><span class="line">                                   <span class="comment"># in the pgpool log, you might want to increate this number.</span></span><br><span class="line"></span><br><span class="line">check_temp_table = catalog</span><br><span class="line">                                   <span class="comment"># Temporary table check method. catalog, trace or none.</span></span><br><span class="line">                                   <span class="comment"># Default is catalog.</span></span><br><span class="line"></span><br><span class="line">check_unlogged_table = on</span><br><span class="line">                                   <span class="comment"># If on, enable unlogged table check in SELECT statements.</span></span><br><span class="line">                                   <span class="comment"># This initiates queries against system catalog of primary/master</span></span><br><span class="line">                                   <span class="comment"># thus increases load of master.</span></span><br><span class="line">                                   <span class="comment"># If you are absolutely sure that your system never uses unlogged tables</span></span><br><span class="line">                                   <span class="comment"># and you want to save access to primary/master, you could turn this off.</span></span><br><span class="line">                                   <span class="comment"># Default is on.</span></span><br><span class="line">enable_shared_relcache = on</span><br><span class="line">                                   <span class="comment"># If on, relation cache stored in memory cache,</span></span><br><span class="line">                                   <span class="comment"># the cache is shared among child process.</span></span><br><span class="line">                                   <span class="comment"># Default is on.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line"></span><br><span class="line">relcache_query_target = master     <span class="comment"># Target node to send relcache queries. Default is master (primary) node.</span></span><br><span class="line">                                   <span class="comment"># If load_balance_node is specified, queries will be sent to load balance node.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># IN MEMORY QUERY MEMORY CACHE</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">memory_cache_enabled = off</span><br><span class="line">                                   <span class="comment"># If on, use the memory cache functionality, off by default</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_method = <span class="string">'shmem'</span></span><br><span class="line">                                   <span class="comment"># Cache storage method. either 'shmem'(shared memory) or</span></span><br><span class="line">                                   <span class="comment"># 'memcached'. 'shmem' by default</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_memcached_host = <span class="string">'localhost'</span></span><br><span class="line">                                   <span class="comment"># Memcached host name or IP address. Mandatory if</span></span><br><span class="line">                                   <span class="comment"># memqcache_method = 'memcached'.</span></span><br><span class="line">                                   <span class="comment"># Defaults to localhost.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_memcached_port = 11211</span><br><span class="line">                                   <span class="comment"># Memcached port number. Mondatory if memqcache_method = 'memcached'.</span></span><br><span class="line">                                   <span class="comment"># Defaults to 11211.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_total_size = 67108864</span><br><span class="line">                                   <span class="comment"># Total memory size in bytes for storing memory cache.</span></span><br><span class="line">                                   <span class="comment"># Mandatory if memqcache_method = 'shmem'.</span></span><br><span class="line">                                   <span class="comment"># Defaults to 64MB.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_max_num_cache = 1000000</span><br><span class="line">                                   <span class="comment"># Total number of cache entries. Mandatory</span></span><br><span class="line">                                   <span class="comment"># if memqcache_method = 'shmem'.</span></span><br><span class="line">                                   <span class="comment"># Each cache entry consumes 48 bytes on shared memory.</span></span><br><span class="line">                                   <span class="comment"># Defaults to 1,000,000(45.8MB).</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_expire = 0</span><br><span class="line">                                   <span class="comment"># Memory cache entry life time specified in seconds.</span></span><br><span class="line">                                   <span class="comment"># 0 means infinite life time. 0 by default.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_auto_cache_invalidation = on</span><br><span class="line">                                   <span class="comment"># If on, invalidation of query cache is triggered by corresponding</span></span><br><span class="line">                                   <span class="comment"># DDL/DML/DCL(and memqcache_expire).  If off, it is only triggered</span></span><br><span class="line">                                   <span class="comment"># by memqcache_expire.  on by default.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_maxcache = 409600</span><br><span class="line">                                   <span class="comment"># Maximum SELECT result size in bytes.</span></span><br><span class="line">                                   <span class="comment"># Must be smaller than memqcache_cache_block_size. Defaults to 400KB.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_cache_block_size = 1048576</span><br><span class="line">                                   <span class="comment"># Cache block size in bytes. Mandatory if memqcache_method = 'shmem'.</span></span><br><span class="line">                                   <span class="comment"># Defaults to 1MB.</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">memqcache_oiddir = <span class="string">'/var/log/pgpool/oiddir'</span></span><br><span class="line">                                   <span class="comment"># Temporary work directory to record table oids</span></span><br><span class="line">                                   <span class="comment"># (change requires restart)</span></span><br><span class="line">white_memqcache_table_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Comma separated list of table names to memcache</span></span><br><span class="line">                                   <span class="comment"># that don't write to database</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br><span class="line">black_memqcache_table_list = <span class="string">''</span></span><br><span class="line">                                   <span class="comment"># Comma separated list of table names not to memcache</span></span><br><span class="line">                                   <span class="comment"># that don't write to database</span></span><br><span class="line">                                   <span class="comment"># Regexp are accepted</span></span><br></pre></td></tr></table></figure>
<p>配置文件里，故障处理配置的是failover_command = ‘/etc/pgpool-II-10/failover_stream.sh %H ‘，因此，需要在/opt/pgpool目录中写个failover_stream.sh脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[postgres@master ~]$ <span class="built_in">cd</span> /etc/pgpool-II-10</span><br><span class="line">[postgres@pgpool~]$ touch failover_stream.sh</span><br><span class="line">[postgres@pgpool~]$ vim failover_stream.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh </span></span><br><span class="line"><span class="comment"># Failover command for streaming replication. </span></span><br><span class="line"><span class="comment"># Arguments: $1: new master hostname. </span></span><br><span class="line"></span><br><span class="line">new_master=<span class="variable">$1</span></span><br><span class="line">trigger_command=<span class="string">"/usr/pgsql-10/bin/pg_ctl promote -D /pgdata"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prompte standby database. </span></span><br><span class="line"><span class="comment"># 升级从数据库为主节点</span></span><br><span class="line">/usr/bin/ssh -T <span class="variable">$new_master</span> <span class="variable">$trigger_command</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0;</span><br></pre></td></tr></table></figure>
<p>如果是其他用户创建的，需要赋予postgres可执行权限，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@opt ~]$ chown -R postgres.postgres /opt/pgpool</span><br><span class="line">[root@opt ~]]$ chmod 777  /opt/pgpool/failover_stream.sh</span><br></pre></td></tr></table></figure>
<h3 id="3-6-启动集群"><a href="#3-6-启动集群" class="headerlink" title="3.6 启动集群"></a>3.6 启动集群</h3><p><strong>分别启动postgrsql</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start postgresql-10.service</span><br></pre></td></tr></table></figure>
<p><strong>分别启动pgpool</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start pgpool-II-10.service</span><br></pre></td></tr></table></figure>
<p><strong>启动pgpool后，查看集群节点状态:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[postgres@master ~]$ psql -h vip -p 9999</span><br><span class="line">psql (9.6.1)</span><br><span class="line"><span class="comment">#提示输入密码：</span></span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># show pool_nodes;</span></span><br><span class="line"> node_id | hostname | port | status | lb_weight |  role   | select_cnt | load_balance_node | replication_delay </span><br><span class="line">---------+----------+------+--------+-----------+---------+------------+-------------------+-------------------</span><br><span class="line"> 0       | master   | 5432 | up     | 0.500000  | primary | 0             | <span class="literal">false</span>  | 0</span><br><span class="line"> 1       | slave     | 5432 | up     | 0.500000  | standby | 0             |  <span class="literal">true</span>  | 0</span><br><span class="line">(2 rows)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在slave上节点也是psql -h vip -p 9999，双pgpool使用虚拟ip，做到高可用。</span></span><br></pre></td></tr></table></figure>
<p>发现当前主备节点都是正常的up状态。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>云主机安全加固</title>
    <url>/2022/01/12/2023-01-06%E4%BA%91%E4%B8%BB%E6%9C%BA%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<h1 id="1-用户安全策略调整"><a href="#1-用户安全策略调整" class="headerlink" title="1 用户安全策略调整"></a>1 用户安全策略调整</h1><h2 id="1-1-限制root登陆和-SSH登陆超时设置"><a href="#1-1-限制root登陆和-SSH登陆超时设置" class="headerlink" title="1.1 限制root登陆和 SSH登陆超时设置"></a>1.1 限制root登陆和 SSH登陆超时设置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">useradd ghjs</span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">passwd ghjs</span><br><span class="line"><span class="comment"># 加入wheel组(sudo)</span></span><br><span class="line">usermod -G wheel ghjs</span><br><span class="line"><span class="comment"># 限制root登陆/etc/ssh/sshd_config</span></span><br><span class="line">PermitRootLogin no</span><br><span class="line"><span class="comment"># 第一行表示每60秒检测一次，第二行表示检测到5次不活动就断开连接</span></span><br><span class="line">ClientAliveInterval 60</span><br><span class="line">ClientAliveCountMax 5</span><br></pre></td></tr></table></figure>
<h2 id="1-2-普通用户口令锁定策略"><a href="#1-2-普通用户口令锁定策略" class="headerlink" title="1.2 普通用户口令锁定策略"></a>1.2 普通用户口令锁定策略</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密码锁定策略/etc/pam.d/sshd</span></span><br><span class="line"><span class="comment"># 添加下边一行策略------------------------------</span></span><br><span class="line">auth required pam_tally2.so onerr=fail deny=6 unlock_time=300</span><br><span class="line"></span><br><span class="line">-----------补充说明------------------</span><br><span class="line"><span class="comment"># onerr=fail 表示定义了当出现错误时的缺省返回值；</span></span><br><span class="line"><span class="comment"># deny 表示设置普通用户和root用户连续错误登陆的最大次数，超过最大次数，则锁定该用户；</span></span><br><span class="line"><span class="comment"># unlock_time 表示设定普通用户锁定后，多少时间后解锁，单位是秒；</span></span><br><span class="line"><span class="comment"># even_deny_root 表示也限制root用户；</span></span><br><span class="line"><span class="comment"># root_unlock_time 表示设定root用户锁定后，多少时间后解锁，单位是秒；</span></span><br><span class="line"><span class="comment"># 锁定用户</span></span><br><span class="line">passwd -l <span class="variable">$user</span></span><br><span class="line"><span class="comment"># 查看用户状态</span></span><br><span class="line">passwd -S <span class="variable">$user</span></span><br><span class="line"><span class="comment"># 解锁用户</span></span><br><span class="line">passwd -u <span class="variable">$user</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-口令生存周期（维护人员使用的账号）"><a href="#1-3-口令生存周期（维护人员使用的账号）" class="headerlink" title="1.3 口令生存周期（维护人员使用的账号）"></a>1.3 口令生存周期（维护人员使用的账号）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表示将此用户的密码最长使用天数设为180，最短使用天数设为0，过期前15天警告用户。</span></span><br><span class="line">chage -d 0 -m 0 -M 90 -W 15 ghjs</span><br><span class="line"><span class="comment"># 查看账号过期时间</span></span><br><span class="line">chage -l ghjs</span><br><span class="line">------------</span><br><span class="line">[root@localhost ghjs]<span class="comment"># chage -l ghjs</span></span><br><span class="line">最近一次密码修改时间			 ：密码必须更改</span><br><span class="line">密码过期时间					：密码必须更改</span><br><span class="line">密码失效时间					：密码必须更改</span><br><span class="line">帐户过期时间						：从不</span><br><span class="line">两次改变密码之间相距的最小天数		：0</span><br><span class="line">两次改变密码之间相距的最大天数		：1</span><br><span class="line">在密码过期之前警告的天数	：15</span><br><span class="line">------------</span><br><span class="line">选项：</span><br><span class="line">  -d, --lastday 最近日期        将最近一次密码设置时间设为“最近日期”</span><br><span class="line">  -E, --expiredate 过期日期     将帐户过期时间设为“过期日期”</span><br><span class="line">  -h, --<span class="built_in">help</span>                    显示此帮助信息并推出</span><br><span class="line">  -I, --inactive INACITVE       过期 INACTIVE 天数后，设定密码为失效状态</span><br><span class="line">  -l, --list                    显示帐户年龄信息</span><br><span class="line">  -m, --mindays 最小天数        将两次改变密码之间相距的最小天数设为“最小天数”</span><br><span class="line">  -M, --maxdays MAX_DAYS        <span class="built_in">set</span> maximum number of days before password</span><br><span class="line">                                change to MAX_DAYS</span><br><span class="line">  -R, --root CHROOT_DIR         chroot 到的目录</span><br><span class="line">  -W, --warndays 警告天数       将过期警告天数设为“警告天数”</span><br></pre></td></tr></table></figure>
<h2 id="1-4-口令重复次数限制"><a href="#1-4-口令重复次数限制" class="headerlink" title="1.4 口令重复次数限制"></a>1.4 口令重复次数限制</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/pam.d/system-auth</span></span><br><span class="line"><span class="comment"># 禁止过去使用5次的密码，大概15行位置末尾添加 remember=5</span></span><br><span class="line">password     sufficient     pam_unix.so sha512 shadow nullok try_first_pass use_authtok remember=5</span><br></pre></td></tr></table></figure>
<h2 id="1-5-空密码账号"><a href="#1-5-空密码账号" class="headerlink" title="1.5 空密码账号"></a>1.5 空密码账号</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 空密码账号检查</span></span><br><span class="line">awk -F: <span class="string">'($2=="")'</span> /etc/shadow</span><br><span class="line"><span class="comment"># 查看UID为0的账号：awk -F: '($3==0)' /etc/passwd，确认UID为0的账号只有root</span></span><br></pre></td></tr></table></figure>
<h2 id="1-6-无关账号删除或禁用"><a href="#1-6-无关账号删除或禁用" class="headerlink" title="1.6 无关账号删除或禁用"></a>1.6 无关账号删除或禁用</h2><h2 id="1-7-关闭telnet服务，默认没装"><a href="#1-7-关闭telnet服务，默认没装" class="headerlink" title="1.7 关闭telnet服务，默认没装"></a>1.7 关闭telnet服务，默认没装</h2><h1 id="2-服务安全漏洞修复"><a href="#2-服务安全漏洞修复" class="headerlink" title="2 服务安全漏洞修复"></a>2 服务安全漏洞修复</h1><h2 id="2-1系统ssl-ssh"><a href="#2-1系统ssl-ssh" class="headerlink" title="2.1系统ssl+ssh"></a>2.1系统ssl+ssh</h2><blockquote>
<p>TLS protocol中间人攻击漏洞(CVE-2015-4000)</p>
</blockquote>
<p><strong>处理方案</strong></p>
<p>升级openssl版本3.0.3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gcc</span></span><br><span class="line">yum install gcc -y</span><br><span class="line"><span class="comment"># 安装perl 5 (安装openssl会提示缺少)</span></span><br><span class="line">tar -zxvf perl-5.28.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> perl-5.28.0</span><br><span class="line">./configure.gnu -des -Dprefix=<span class="variable">$HOME</span>/localperl</span><br><span class="line">make</span><br><span class="line">make <span class="built_in">test</span></span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 安装openssl</span></span><br><span class="line">tar -zxvf openssl-3.0.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-3.0.3</span><br><span class="line">./config --prefix=/usr/<span class="built_in">local</span>/openssl/              </span><br><span class="line">make </span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 卸载历史openssl</span></span><br><span class="line">yum erase -y openssl openssl-devel</span><br><span class="line">ln -sf /usr/<span class="built_in">local</span>/openssl/bin/openssl /usr/bin/openssl</span><br><span class="line"><span class="comment"># 查看版本报错 openssl version</span></span><br><span class="line">openssl: error <span class="keyword">while</span> loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory</span><br><span class="line"><span class="comment"># 创建so文件软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/openssl/lib/libssl.so.3 /usr/lib64/libssl.so.1.1</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/openssl/lib/libcrypto.so.3 /usr/lib64/libcrypto.so.1.1</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>OpenSSH用户枚举（CVE-2018-15473）【POC】</p>
<p>OpenSSH &lt;7.5</p>
<p>OpenSSH sshd拒绝服务漏洞(CVE-2016-10708)</p>
<p>OpenSSH设计漏洞(CVE-2017-15906)</p>
<p>OpenSSH用户枚举漏洞（CNVD-2018-20962）(CVE-2018-15919)</p>
<p>OpenSSH 命令注入漏洞</p>
<p>OpenSSH CBC模式信息泄露漏洞(CVE-2008-5161)</p>
</blockquote>
<p><strong>处理方案</strong></p>
<p>升级openssh到8.9p1版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备注:先升级openssl再升级openssh</span></span><br><span class="line"><span class="comment"># 警告：升级期间一定不要断开ssh窗口连接，否则无法重新连接,提前建立ssh和sftp连接。（高风险）</span></span><br><span class="line"><span class="comment"># 1） 关闭sshd</span></span><br><span class="line">systemctl stop sshd</span><br><span class="line"><span class="comment"># 2） 备份旧版配置文件</span></span><br><span class="line">mv /etc/ssh /etc/ssh.bak</span><br><span class="line"><span class="comment"># 3） 卸载旧版openssh</span></span><br><span class="line">rpm -qa | grep openssh-*</span><br><span class="line">yum erase -y openssh-clients openssh-server openssh</span><br><span class="line"><span class="comment"># 4） 完成卸载</span></span><br><span class="line">ssh -V</span><br><span class="line">无版本输出</span><br><span class="line"><span class="comment"># 5） 安装依赖</span></span><br><span class="line">yum install -y  pam-devel zlib zlib-devel openssl-devel</span><br><span class="line"><span class="comment"># 6） 安装openssh</span></span><br><span class="line">tar -zxvf openssh-8.9p1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssh-8.9p1</span><br><span class="line"> <span class="comment"># --with-ssl-dir 指向openssl的安装目录，否则报错configure: error: *** working libcrypto not found</span></span><br><span class="line">./configure --prefix=/usr/ --sysconfdir=/etc/ssh --with-openssl-includes=/usr/<span class="built_in">local</span>/include --with-ssl-dir=/usr/<span class="built_in">local</span>/openssl --with-zlib --with-md5-passwords --with-pam</span><br><span class="line">make </span><br><span class="line">make install</span><br><span class="line">ssh -V   <span class="comment"># 确定openssh和openssl为安装版本</span></span><br><span class="line"><span class="comment"># 7） 配置服务及启动</span></span><br><span class="line">cp -a openssh-8.9p1/contrib/redhat/sshd.init /etc/init.d/sshd</span><br><span class="line">chmod +x /etc/init.d/sshd</span><br><span class="line">chkconfig --add sshd</span><br><span class="line">systemctl start sshd</span><br><span class="line">systemctl status sshd</span><br><span class="line">systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">chkconfig sshd on</span><br><span class="line"><span class="comment"># 8） 修改sshd_config配置，否则无法登陆</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">添加如下配置</span><br><span class="line">---------------</span><br><span class="line"><span class="comment"># 允许密码登录</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"><span class="comment"># 允许root远程登录</span></span><br><span class="line">PermitRootlogin yes</span><br><span class="line"><span class="comment"># 解决此报错信息 error: Could not get shadow information for &lt;user&gt;</span></span><br><span class="line">UsePAM yes</span><br><span class="line">---------------</span><br><span class="line"><span class="comment"># 9） 修改/etc/pam.d/sshd文件，否则无法登陆</span></span><br><span class="line">vim /etc/pam.d/sshd</span><br><span class="line"></span><br><span class="line">文件内容如下</span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="comment"># %PAM-1.0</span></span><br><span class="line">auth	   required	pam_sepermit.so</span><br><span class="line">auth       substack     password-auth</span><br><span class="line">auth       include      postlogin</span><br><span class="line"><span class="comment"># Used with polkit to reauthorize users in remote sessions</span></span><br><span class="line">-auth      optional     pam_reauthorize.so prepare</span><br><span class="line">account    required     pam_nologin.so</span><br><span class="line">account    include      password-auth</span><br><span class="line">password   include      password-auth</span><br><span class="line"><span class="comment"># pam_selinux.so close should be the first session rule</span></span><br><span class="line">session    required     pam_selinux.so close</span><br><span class="line">session    required     pam_loginuid.so</span><br><span class="line"><span class="comment"># pam_selinux.so open should only be followed by sessions to be executed in the user context</span></span><br><span class="line">session    required     pam_selinux.so open env_params</span><br><span class="line">session    required     pam_namespace.so</span><br><span class="line">session    optional     pam_keyinit.so force revoke</span><br><span class="line">session    include      password-auth</span><br><span class="line">session    include      postlogin</span><br><span class="line"><span class="comment"># Used with polkit to reauthorize users in remote sessions</span></span><br><span class="line">-session   optional     pam_reauthorize.so prepare</span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="comment"># 10） 重启sshd</span></span><br><span class="line">systemctl restart sshd</span><br><span class="line"><span class="comment"># 11）  验证ssh登陆</span></span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220622113703460.png" alt="image-20220622113703460"></p>
<blockquote>
<p>启用 SSH 弱密钥交换算法</p>
<p>SSH SHA-1 HMAC 算法已启用</p>
</blockquote>
<p><strong>处理方案</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sshd_config添加如下配置</span></span><br><span class="line">Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,arcfour</span><br><span class="line">MACs hmac-sha2-256,hmac-sha2-256-etm@openssh.com</span><br><span class="line"><span class="comment"># 重启sshd</span></span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>
<h2 id="2-2-nginx"><a href="#2-2-nginx" class="headerlink" title="2.2 nginx"></a>2.2 nginx</h2><blockquote>
<p>HTTP/2实现安全漏洞(CVE-2019-9516)</p>
<p>nginx拒绝服务漏洞（CNVD-2016-00982）(CVE-2016-0746)</p>
<p>HTTP/2实现安全漏洞(CVE-2019-9511)</p>
<p>nginx拒绝服务漏洞（CNVD-2018-22805）(CVE-2018-16843)</p>
<p>HTTP/2实现安全漏洞(CVE-2019-9513)</p>
<p>nginx 安全漏洞（CVE-2021-23017）</p>
<p>nginx拒绝服务漏洞(CVE-2016-0747)</p>
<p>nginx ngx_http_mp4_module组件内存泄露漏洞(CVE-2018-16845)</p>
<p>Nginx 环境问题漏洞（CVE-2019-20372）</p>
</blockquote>
<p><strong>处理方案</strong></p>
<p>升级nginx到1.21.6版本</p>
<hr>
<blockquote>
<p> Web服务器错误页面信息泄露</p>
<p> Web服务器HTTP头信息公开</p>
</blockquote>
<p><strong>处理方案</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080；</span><br><span class="line">    ...</span><br><span class="line">    server_tokens off;       <span class="comment">#添加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220622111333256.png" alt="image-20220622111333256"></p>
<hr>
<blockquote>
<p> HTTP响应头使用X-XSS-Protection</p>
</blockquote>
<p><strong>处理方案</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.conf添加如下配置</span></span><br><span class="line">http &#123;</span><br><span class="line">   add_header X-Xss-Protection <span class="string">"1; mode=block"</span>;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">•      0：禁用XSS保护；</span><br><span class="line">•      1：启用XSS保护；</span><br><span class="line">•      1; mode=block：启用XSS保护，并在检查到XSS攻击时，停止渲染页面（例如IE8中，检查到攻击时，整个页面会被一个<span class="comment">#替换）</span></span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220622112226841.png" alt="image-20220622112226841"></p>
<hr>
<blockquote>
<p>HTTP响应头部使用X-Frame-Options</p>
<p>HTTP响应头X-Content-Options：nosniff</p>
</blockquote>
<p><strong>处理方案</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.conf配置添加</span></span><br><span class="line"><span class="comment"># 该配置取消，影响页面嵌套</span></span><br><span class="line">http &#123;</span><br><span class="line">   add_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">   add_header X-Content-Type-Options nosniff;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值有如下三种：</span></span><br><span class="line"></span><br><span class="line">（1）DENY：不能被嵌入到任何iframe或frame中。</span><br><span class="line"></span><br><span class="line">（2）SAMEORIGIN：页面只能被本站页面嵌入到iframe或者frame中。</span><br><span class="line"></span><br><span class="line">（3）ALLOW-FROM uri：只能被嵌入到指定域名的框架中。</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220622114310329.png" alt="image-20220622114310329"></p>
<hr>
<h2 id="2-3-docker"><a href="#2-3-docker" class="headerlink" title="2.3 docker"></a>2.3 docker</h2><blockquote>
<p> Docker Remote API 未授权访问漏洞【POC】</p>
</blockquote>
<p>处理方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker启动命令配置修改只允许本机访问</span></span><br><span class="line">-H tcp://127.0.0.1:4243</span><br></pre></td></tr></table></figure>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/image-20220622114832945.png" alt="image-20220622114832945"></p>
<h2 id="2-4-tomcat"><a href="#2-4-tomcat" class="headerlink" title="2.4 tomcat"></a>2.4 tomcat</h2><blockquote>
<p>Apache Tomcat 代码问题漏洞(CVE-2020-9484)</p>
<p>Apache Tomcat 8.5.38 &lt; 8.5.79 安全漏洞</p>
<p>Apache Tomcat 安全漏洞（CVE-2020-13943）</p>
<p>Apache Tomcat servlet / JSP容器默认文件</p>
<p>Apache Tomcat 8.5.0 &lt; 8.5.68 漏洞</p>
<p>Apache Tomcat HTTP / 2请求标头混淆漏洞（CVE-2020-17527 ）</p>
</blockquote>
<p>更新到8.5.81版本</p>
<blockquote>
<p>Apache ServerToken的信息披露</p>
<p>Apache HTTP Server版本</p>
</blockquote>
<p><a href="https://blog.51cto.com/meiling/2069452" target="_blank" rel="noopener">https://blog.51cto.com/meiling/2069452</a></p>
<p><a href="https://wenku.baidu.com/view/0792e11e463610661ed9ad51f01dc281e53a56b1.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/0792e11e463610661ed9ad51f01dc281e53a56b1.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在tomcat部署⽬录下lib中新建⽂件夹</span><br><span class="line">/org/apache/catalina/util/</span><br><span class="line">并在util中新建在 ServerInfo.properties⽂件，⽂件添加 server.info=Apache Tomcat</span><br></pre></td></tr></table></figure>
<h2 id="2-5-mysal"><a href="#2-5-mysal" class="headerlink" title="2.5 mysal"></a>2.5 mysal</h2><p>暂不处理</p>
<h2 id="2-6-apache"><a href="#2-6-apache" class="headerlink" title="2.6 apache"></a>2.6 apache</h2><blockquote>
<p>Apache HTTP Server 安全漏洞（CVE-2021-33193）</p>
<p>Apache 2.4.x &lt; 2.4.47 多个漏洞</p>
<p>Apache 2.4.x &lt; 2.4.53 多个漏洞</p>
<p>Apache HTTP Server 代码问题漏洞（CVE-2021-40438）</p>
</blockquote>
<p>升级到2.4.54版本</p>
<p>隐藏版本信息</p>
<h2 id="2-7-consul"><a href="#2-7-consul" class="headerlink" title="2.7  consul"></a>2.7  consul</h2><blockquote>
<p> Hashicorp Consul Web UI和API访问</p>
</blockquote>
<p>处理方案：</p>
<p>容器禁止端口暴漏，通过容器名连接。</p>
<h2 id="2-8-mapserv"><a href="#2-8-mapserv" class="headerlink" title="2.8 mapserv"></a>2.8 mapserv</h2><blockquote>
<p>不存在的页面（404）物理路径披露</p>
<p>jQuery跨站脚本漏洞（CNVD-2019-11839）(CVE-2019-11358)</p>
</blockquote>
<p>更新gdw.lua</p>
<p>移除mapdata/client目录</p>
<h2 id="2-9-redis"><a href="#2-9-redis" class="headerlink" title="2.9 redis"></a>2.9 redis</h2><blockquote>
<p>Redis服务器不受密码认证的保护【POC】</p>
</blockquote>
<p>配置redis密码验证。</p>
<h1 id="3-日志审计"><a href="#3-日志审计" class="headerlink" title="3 日志审计"></a>3 日志审计</h1><h2 id="3-1-postgresql开启日志审计"><a href="#3-1-postgresql开启日志审计" class="headerlink" title="3.1 postgresql开启日志审计"></a>3.1 postgresql开启日志审计</h2><p><strong>1、审计清单说明</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logging_collector   <span class="comment"># 是否开启日志收集开关，默认off，推荐on</span></span><br><span class="line"></span><br><span class="line">log_destination     -- 日志记录类型，默认是stderr，只记录错误输出，推荐csvlog，总共包含：`stderr, csvlog, syslog, and eventlog,`</span><br><span class="line"></span><br><span class="line">log_directory       <span class="comment"># 日志路径，默认是$PGDATA/pg_log, </span></span><br><span class="line"></span><br><span class="line">log_filename        <span class="comment"># 日志名称，默认是postgresql-%Y-%m-%d_%H%M%S.log</span></span><br><span class="line"></span><br><span class="line">log_file_mode       <span class="comment"># 日志文件类型，默认为0600</span></span><br><span class="line"></span><br><span class="line">log_truncate_on_rotation <span class="comment"># 默认为off，设置为on的话，文件内容覆盖方式：off后面附加，on：清空再加</span></span><br><span class="line"></span><br><span class="line">log_rotation_age    <span class="comment"># 保留单个文件的最大时长,默认是1d,也有1h,1min,1s</span></span><br><span class="line"></span><br><span class="line">log_rotation_size    <span class="comment"># 保留单个文件的最大尺寸，默认是10MB</span></span><br><span class="line"></span><br><span class="line">log_error_verbosity  <span class="comment"># 默认为default，verbose表示冗长的</span></span><br><span class="line"></span><br><span class="line">log_connections  <span class="comment"># 用户session登陆时是否写入日志，默认off，推荐为on</span></span><br><span class="line"></span><br><span class="line">log_disconnections <span class="comment"># 用户session退出时是否写入日志，默认off，推荐为on</span></span><br><span class="line"></span><br><span class="line">log_statement  --`记录用户登陆数据库后的各种操作`</span><br><span class="line"></span><br><span class="line">     1. none，即不记录</span><br><span class="line">     2. ddl(记录create,drop和alter)</span><br><span class="line">     3. mod(记录ddl+insert,delete,update和truncate)</span><br><span class="line">     4. all(mod+select)</span><br><span class="line"></span><br><span class="line">log_min_duration_statement = 2s        -- `记录超过2秒的SQL`</span><br><span class="line">log_checkpoints = on       <span class="comment"># 检查点和重启点被记录再服务器日志中。一些统计信息也被包括再日志消息中，包括写入缓冲区的数据和写他们呢所花的时间。这个参数智能在postgresql.conf文件中或在服务器命令行上设置。默认是关闭（off）</span></span><br><span class="line">log_lock_waits ＝ on       <span class="comment"># 如果一个会话等待某个类型的锁的时间超过deadlock_timeout的值，该参数决定是否在数据库日志中记录这个信息。</span></span><br><span class="line">deadlock_timeout ＝ 1s     <span class="comment"># 数据库的锁通常可以在pg_locks这个系统表里找，但这只是当前的锁表/行信息，如果你想看一天内有多少个超过死锁时间的锁发生，可以在日志里设置并查看，log_lock_waits 默认是off，可以设置开启。这个可以区分SQL慢是资源紧张还是锁等待的问题。</span></span><br></pre></td></tr></table></figure>
<p><strong>2、推荐的设置参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logging_collector = on</span><br><span class="line">log_destination = <span class="string">'csvlog'</span></span><br><span class="line">log_truncate_on_rotation = on</span><br><span class="line">log_connections = on</span><br><span class="line">log_disconnections = on</span><br><span class="line">log_error_verbosity = verbose</span><br><span class="line">log_statement = ddl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这部分是postgresql.conf文件中没有的</span></span><br><span class="line">log_min_duration_statement = 60s    <span class="comment"># 记录超过60s的SQL</span></span><br><span class="line">log_checkpoints = on                  </span><br><span class="line">log_lock_waits ＝ on</span><br><span class="line">deadlock_timeout ＝ 1s</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看日志目录和日志文件名</span></span><br><span class="line">show log_directory;</span><br><span class="line">show log_filename;</span><br></pre></td></tr></table></figure>
<p><strong>3、参数修改方法</strong></p>
<p>直接修改配置文件</p>
<p>postgresql.conf默认位于$PGDATA目录下。</p>
<p>vim /usr/data/pgsql/data/postgresql.conf</p>
<p>用超级用户运行：postgres=# SELECT pg_reload_conf();</p>
<p>show命令可以查询当前状态</p>
<p><strong>4、 参考文档</strong></p>
<p><a href="http://t.zoukankan.com/tiandi-p-13568675.html" target="_blank" rel="noopener">http://t.zoukankan.com/tiandi-p-13568675.html</a></p>
<h2 id="3-2-postgresql设置密码复杂度校验"><a href="#3-2-postgresql设置密码复杂度校验" class="headerlink" title="3.2 postgresql设置密码复杂度校验"></a>3.2 postgresql设置密码复杂度校验</h2><a id="more"></a>
<h3 id="3-2-1-默认密码校验策略"><a href="#3-2-1-默认密码校验策略" class="headerlink" title="3.2.1 默认密码校验策略"></a>3.2.1 默认密码校验策略</h3><p>在PG中可以使用<code>passwordcheck.so</code>模块实现密码复杂度校验的功能，不过这个工具的默认要求很低，只可用于简单的密码复杂度校验，默认检查规则如下：</p>
<ol>
<li>密码长度大于8位</li>
<li>密码不能与用户名相同</li>
<li>密码必须包括字母和数字</li>
</ol>
<h4 id="3-2-1-1-passwordcheck密码校验"><a href="#3-2-1-1-passwordcheck密码校验" class="headerlink" title="3.2.1.1 passwordcheck密码校验"></a>3.2.1.1 passwordcheck密码校验</h4><p>安装完PostgreSQL之后，默认是没有开启密码复杂度，为了数据库安全以及应对等保测评等要求，有时我们需要设置密码复杂度。</p>
<p>PostgreSQL支持通过动态库的方式扩展PG的功能，pg在使用这些功能时需要预加载相关的共享库。而密码复杂度可以通过预加载passwordcheck.so模块实现。</p>
<p>有几种设置可用于将共享库预加载到服务器中，如下：</p>
<ul>
<li>local_preload_libraries (string)</li>
<li>session_preload_libraries (string)</li>
<li>shared_preload_libraries (string)</li>
</ul>
<p>下面介绍shared_preload_libraries (string)方式加载<code>passwordcheck.so</code>模块，此模块可以检查密码，如果密码太弱，他会拒绝连接；创建用户或修改用户密码时，强制限制密码的复杂度，限制密码不能重复使用例如密码长度，包含数字，字母，大小写，特殊字符等，同时排除暴力破解字典中的字符串。</p>
<h4 id="3-2-1-2-shared-preload-libraries-方式启用passwordcheck-so模块"><a href="#3-2-1-2-shared-preload-libraries-方式启用passwordcheck-so模块" class="headerlink" title="3.2.1.2 shared_preload_libraries 方式启用passwordcheck.so模块"></a>3.2.1.2 shared_preload_libraries 方式启用passwordcheck.so模块</h4><p>在PG库的数据目录下（centos默认路径为：<code>/var/lib/pgsql/11/data</code>，windows默认路径为：<code>D:\PostgreSQL\11\data</code>）找到<code>postgresql.conf</code>文件，修改</p>
<p>修改内容行为：<code>shared_preload_libraries = &#39;passwordcheck&#39;  # (change requires restart)。</code></p>
<p>修改完成后重启服务服务生效（<code>systemctl restart postgresql-11</code>）。</p>
<p><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/315861-20201127152459487-148259811.png" alt="image"><img src="https://operationman-1258630122.cos.ap-nanjing.myqcloud.com/images-master/315861-20201127152500965-701180388.png" alt="image"></p>
<h4 id="3-2-1-3-验证"><a href="#3-2-1-3-验证" class="headerlink" title="3.2.1.3 验证"></a>3.2.1.3 验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示密码太短</span></span><br><span class="line">postgres=<span class="comment"># create role ttt with password '123123';</span></span><br><span class="line">ERROR:  password is too short</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示密码必须包含字母和非字母</span></span><br><span class="line">postgres=<span class="comment"># create role ttt with password '12345678';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role ttt with password 'qweqweqwe';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line"><span class="comment">#  提示密码不能包含用户名</span></span><br><span class="line">postgres=<span class="comment"># create role tttt with password 'tttt123456';</span></span><br><span class="line">ERROR:  password must not contain user name</span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-增强密码校验策略"><a href="#3-2-2-增强密码校验策略" class="headerlink" title="3.2.2 增强密码校验策略"></a>3.2.2 增强密码校验策略</h3><p>通过修改源代码实现。本文记录如何通过修改源码<code>passwordcheck.c</code>达到增强复杂度检验的目的，修改后验证规则如下：</p>
<ol>
<li>密码长度大于8位</li>
<li>密码不能与用户名相同</li>
<li>密码必须包括字母</li>
<li>密码必须包括数字</li>
<li>密码必须包括特殊字符</li>
</ol>
<h4 id="3-2-2-1-步骤"><a href="#3-2-2-1-步骤" class="headerlink" title="3.2.2.1 步骤"></a>3.2.2.1 步骤</h4><h5 id="3-2-2-1-1-实验环境"><a href="#3-2-2-1-1-实验环境" class="headerlink" title="3.2.2.1.1 实验环境"></a>3.2.2.1.1 实验环境</h5><p>实验环境：CentOS7.6 + PG11.8 source code</p>
<p>源码下载地址: <a href="https://www.postgresql.org/ftp/source/v11.8/postgresql-11.8.tar.gz" target="_blank" rel="noopener">https://www.postgresql.org/ftp/source/v11.8/postgresql-11.8.tar.gz</a></p>
<p>源码安装文档：<a href="https://www.postgresql.org/docs/11/install-short.htm" target="_blank" rel="noopener">https://www.postgresql.org/docs/11/install-short.htm</a></p>
<h5 id="3-2-2-1-2-使用方式"><a href="#3-2-2-1-2-使用方式" class="headerlink" title="3.2.2.1.2 使用方式"></a>3.2.2.1.2 使用方式</h5><ul>
<li>替换目录 ../postgresql-11.4/contrib/passwordcheck 下的 passwordcheck.c</li>
<li>编译安装 make &amp;&amp; make install</li>
<li>postgresql配置文件内修改 (postgresql.conf)</li>
<li>shared_preload_libraries = ‘passwordcheck’</li>
<li>passwordcheck.level = ‘true’</li>
</ul>
<h5 id="3-2-2-1-3-效果"><a href="#3-2-2-1-3-效果" class="headerlink" title="3.2.2.1.3 效果"></a>3.2.2.1.3 效果</h5><p>当密码长度足够，不符合规则的时候，无法新建用户</p>
<h5 id="3-2-2-1-4-源码修改"><a href="#3-2-2-1-4-源码修改" class="headerlink" title="3.2.2.1.4 源码修改"></a>3.2.2.1.4 源码修改</h5><p>将下载后的源码解压缩, 找到<code>postgresql-11.8/contrib/passwordcheck/passwordcheck.c</code>源文件，修改后保存退出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Luckyness</span></span><br><span class="line"><span class="comment"> * 20191202</span></span><br><span class="line"><span class="comment"> * 在源代码上修改自用，配置pg密码必须包含特殊字符</span></span><br><span class="line"><span class="comment"> * pg版本11.4</span></span><br><span class="line"><span class="comment"> * 使用方式：</span></span><br><span class="line"><span class="comment"> * 替换目录 ../postgresql-11.4/contrib/passwordcheck 下的 passwordcheck.c</span></span><br><span class="line"><span class="comment"> * 编译安装 make &amp;&amp; make install</span></span><br><span class="line"><span class="comment"> * postgresql配置文件内修改 (postgresql.conf)</span></span><br><span class="line"><span class="comment"> * shared_preload_libraries = 'passwordcheck'</span></span><br><span class="line"><span class="comment"> * passwordcheck.level = 'true'</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * passwordcheck.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2009-2018, PostgreSQL Global Development Group</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Laurenz Albe &lt;laurenz.albe@wien.gv.at&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * IDENTIFICATION</span></span><br><span class="line"><span class="comment"> *	  contrib/passwordcheck/passwordcheck.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"postgres.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_CRACKLIB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;crack.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"commands/user.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libpq/crypt.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"fmgr.h"</span></span></span><br><span class="line"><span class="comment">/* 引入扩展 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils/guc.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PG_MODULE_MAGIC;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 配置文件内passwordcheck.level='true' 为需要特殊字符 </span></span><br><span class="line"><span class="comment"> * passwordcheck.level='false' 为只需要英文和数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> passwordcheck_level = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* passwords shorter than this will be rejected */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN_PWD_LENGTH 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">void</span> _PG_init(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * check_password</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * performs checks on an encrypted or unencrypted password</span></span><br><span class="line"><span class="comment"> * ereport's if not acceptable</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * username: name of role being created or changed</span></span><br><span class="line"><span class="comment"> * password: new password (possibly already encrypted)</span></span><br><span class="line"><span class="comment"> * password_type: PASSWORD_TYPE_* code, to indicate if the password is</span></span><br><span class="line"><span class="comment"> *			in plaintext or encrypted form.</span></span><br><span class="line"><span class="comment"> * validuntil_time: password expiration time, as a timestamptz Datum</span></span><br><span class="line"><span class="comment"> * validuntil_null: true if password expiration time is NULL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This sample implementation doesn't pay any attention to the password</span></span><br><span class="line"><span class="comment"> * expiration time, but you might wish to insist that it be non-null and</span></span><br><span class="line"><span class="comment"> * not too far in the future.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">check_password(<span class="keyword">const</span> <span class="keyword">char</span> *username,</span><br><span class="line">			   <span class="keyword">const</span> <span class="keyword">char</span> *shadow_pass,</span><br><span class="line">			   PasswordType password_type,</span><br><span class="line">			   Datum validuntil_time,</span><br><span class="line">			   <span class="keyword">bool</span> validuntil_null)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (password_type != PASSWORD_TYPE_PLAINTEXT)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Unfortunately we cannot perform exhaustive checks on encrypted</span></span><br><span class="line"><span class="comment">		 * passwords - we are restricted to guessing. (Alternatively, we could</span></span><br><span class="line"><span class="comment">		 * insist on the password being presented non-encrypted, but that has</span></span><br><span class="line"><span class="comment">		 * its own security disadvantages.)</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * We only check for username = password.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">char</span>	   *logdetail;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (plain_crypt_verify(username, shadow_pass, username, &amp;logdetail) == STATUS_OK)</span><br><span class="line">			ereport(ERROR,</span><br><span class="line">					(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">					 errmsg(<span class="string">"password must not equal user name"</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * For unencrypted passwords we can perform better checks</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">char</span> *password = shadow_pass;</span><br><span class="line">		<span class="keyword">int</span>			pwdlen = <span class="built_in">strlen</span>(password);</span><br><span class="line">		<span class="keyword">int</span>			i;</span><br><span class="line">		<span class="comment">/*                 bool            pwd_has_letter,*/</span></span><br><span class="line">		<span class="keyword">bool</span>		</span><br><span class="line">					pwd_has_number,pwd_has_special,pwd_has_letter;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* enforce minimum length */</span></span><br><span class="line">		<span class="keyword">if</span> (pwdlen &lt; MIN_PWD_LENGTH)</span><br><span class="line">			ereport(ERROR,</span><br><span class="line">					(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">					 errmsg(<span class="string">"password is too short"</span>)));</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* check if the password contains the username */</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strstr</span>(password, username))</span><br><span class="line">			ereport(ERROR,</span><br><span class="line">					(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">					 errmsg(<span class="string">"password must not contain user name"</span>)));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(passwordcheck_level)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* check if the password contains both letters and number and specialchar */</span></span><br><span class="line">			pwd_has_number = <span class="literal">false</span>;</span><br><span class="line">			pwd_has_special = <span class="literal">false</span>;</span><br><span class="line">			pwd_has_letter = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pwdlen; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">isalpha</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>) password[i]))</span><br><span class="line">					pwd_has_letter = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>) password[i]))</span><br><span class="line">					pwd_has_number = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					pwd_has_special = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!pwd_has_number || !pwd_has_letter || !pwd_has_special)</span><br><span class="line">				ereport(ERROR,</span><br><span class="line">						(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">						errmsg(<span class="string">"password must contain both letters and number and specialchar"</span>)));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* check if the password contains both letters and non-letters */</span></span><br><span class="line">			pwd_has_letter = <span class="literal">false</span>;</span><br><span class="line">			pwd_has_number = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pwdlen; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">isalpha</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>) password[i]))</span><br><span class="line">					pwd_has_letter = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					pwd_has_number = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!pwd_has_letter || !pwd_has_number)</span><br><span class="line">				ereport(ERROR,</span><br><span class="line">						(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">						errmsg(<span class="string">"password must contain both letters and nonletters"</span>)));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_CRACKLIB</span></span><br><span class="line">		<span class="comment">/* call cracklib to check password */</span></span><br><span class="line">		<span class="keyword">if</span> (FascistCheck(password, CRACKLIB_DICTPATH))</span><br><span class="line">			ereport(ERROR,</span><br><span class="line">					(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line">					 errmsg(<span class="string">"password is easily cracked"</span>)));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* all checks passed, password is ok */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Module initialization function</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">_PG_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* 密码级别参数 */</span></span><br><span class="line">	DefineCustomBoolVariable(</span><br><span class="line">		<span class="string">"passwordcheck.level"</span>,</span><br><span class="line">		gettext_noop(<span class="string">"passwordcheck_level true: Password must contain leter, number, special characters;false : Password must contain leter, special characters"</span>),</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		&amp;passwordcheck_level,</span><br><span class="line">		<span class="literal">false</span>,</span><br><span class="line">		PGC_POSTMASTER,</span><br><span class="line">		GUC_SUPERUSER_ONLY,</span><br><span class="line">		<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* activate password checks when the module is loaded */</span></span><br><span class="line">	check_password_hook = check_password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-2-2-1-5-编译"><a href="#3-2-2-1-5-编译" class="headerlink" title="3.2.2.1.5 编译"></a>3.2.2.1.5 编译</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##编译安装pg server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##进入源码解压目录, 执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>  postgresql-11.8</span><br><span class="line"></span><br><span class="line">./configure--prefix=/u01/pgsql11.8 --without-zlib --without-readline   --&gt;&gt;&gt;&gt;指定安装目录为/u01/pgsql11.8, 处于演示目的,所以没有安装zlib和readline包。</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">##编译安装contrib,是一些第三方组织贡献出来的工具代码。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##进入源码解压目录执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>   postgresql-11.8/contrib</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">##编译完成后，在postgresql-11.8/contrib/passwordcheck/目录下增加passwordcheck.so文件</span></span><br><span class="line"><span class="comment">##编译后的文件，可以迁移到同版本数据库内使用</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-3-验证"><a href="#3-2-2-3-验证" class="headerlink" title="3.2.2.3 验证"></a>3.2.2.3 验证</h4><p>首先开启passwordcheck验证, 修改参数文件postgresql.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改如下</span></span><br><span class="line">shared_preload_libraries= <span class="string">'passwordcheck'</span></span><br><span class="line">passwordcheck.level=<span class="string">'true‘</span></span><br></pre></td></tr></table></figure>
<p> 重启实例生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pg_ctl restart</span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示密码太短</span></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '123';</span></span><br><span class="line">ERROR:  password is too short</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示必须同时包括字母、数字、特殊字符</span></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '12345678';</span></span><br><span class="line">ERROR:  password must contain both letters and number and specialchar</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password 'qqqqqqqq';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '!!!!!!!!!!!!';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '12345678a';</span></span><br><span class="line">ERROR:  password must contain both letters and number and specialchar</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '1234567!';</span></span><br><span class="line">ERROR:  password must contain both letters and nonletters</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create role btest with login password '12345678a!';</span></span><br><span class="line">CREATE ROLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码提示必须同时包含字母、数字和特殊字符</span></span><br><span class="line">postgres=<span class="comment"># alter role btest password '12345678!';</span></span><br><span class="line">ERROR:  password must contain both letters and number and specialchar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示密码不能包含用户名</span></span><br><span class="line">postgres=<span class="comment"># alter role btest password '123456btest!';</span></span><br><span class="line">ERROR:  password must not contain user name</span><br></pre></td></tr></table></figure>
<h4 id="4-2-2-3-问题"><a href="#4-2-2-3-问题" class="headerlink" title="4.2.2.3 问题"></a>4.2.2.3 问题</h4><div class="note danger"><p><strong>警告</strong><br>这里还存在个问题，就是通过<code>\password</code>命令修改的话，可以输入不满足长度的密码，原因是使用<code>\password</code>时<code>passwordcheck</code>检查的是加密后的口令，官方文档提到过，检查<code>md5</code>加密后的口令是很困难的，所以当<code>passwordcheck</code>检查加密的口令时，只检查密码是否与用户名相同这一项，实际上是将用户名通过<code>md5</code>加密后与数据库中的<code>md5</code>密码做比较，如果相同，则报错口令不能与用户名相同。</p></div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">postgres=#\password bert</span><br><span class="line"></span><br><span class="line">Enter new password:  <span class="comment">----&gt;&gt;&gt;&gt;&gt;可以输入小于8位的口令, 而不被阻. 但是输入的是与用户名相同的话可以被检测出来。</span></span><br><span class="line"></span><br><span class="line">Enter itagain:</span><br><span class="line"></span><br><span class="line">postgres=#</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">postgres=#\set ECHO_HIDDEN ON</span><br><span class="line"></span><br><span class="line">postgres=#\password bert</span><br><span class="line"></span><br><span class="line">Enter newpassword:</span><br><span class="line"></span><br><span class="line">Enter itagain:</span><br><span class="line"></span><br><span class="line">*********QUERY **********</span><br><span class="line"></span><br><span class="line">ALTERUSER bert PASSWORD 'md5efabd7549b98ddce9b14ba5e2e83eae1'</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="3-2-2-4-参考"><a href="#3-2-2-4-参考" class="headerlink" title="3.2.2.4 参考"></a>3.2.2.4 参考</h4><p><a href="https://www.modb.pro/db/171257" target="_blank" rel="noopener">https://www.modb.pro/db/171257</a></p>
<p><a href="https://www.cnblogs.com/Luckyness/p/11996834.html" target="_blank" rel="noopener">https://www.cnblogs.com/Luckyness/p/11996834.html</a></p>
<p><a href="https://github.com/Luckyness/passwordcheck/blob/master/passwordcheck.c" target="_blank" rel="noopener">https://github.com/Luckyness/passwordcheck/blob/master/passwordcheck.c</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
        <tag>日志</tag>
        <tag>审计</tag>
      </tags>
  </entry>
</search>
